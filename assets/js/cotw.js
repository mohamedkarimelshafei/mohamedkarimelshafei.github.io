
(function() {
'use strict';

function F2(fun)
{
  function wrapper(a) { return function(b) { return fun(a,b); }; }
  wrapper.arity = 2;
  wrapper.func = fun;
  return wrapper;
}

function F3(fun)
{
  function wrapper(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  }
  wrapper.arity = 3;
  wrapper.func = fun;
  return wrapper;
}

function F4(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  }
  wrapper.arity = 4;
  wrapper.func = fun;
  return wrapper;
}

function F5(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  }
  wrapper.arity = 5;
  wrapper.func = fun;
  return wrapper;
}

function F6(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  }
  wrapper.arity = 6;
  wrapper.func = fun;
  return wrapper;
}

function F7(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  }
  wrapper.arity = 7;
  wrapper.func = fun;
  return wrapper;
}

function F8(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  }
  wrapper.arity = 8;
  wrapper.func = fun;
  return wrapper;
}

function F9(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  }
  wrapper.arity = 9;
  wrapper.func = fun;
  return wrapper;
}

function A2(fun, a, b)
{
  return fun.arity === 2
    ? fun.func(a, b)
    : fun(a)(b);
}
function A3(fun, a, b, c)
{
  return fun.arity === 3
    ? fun.func(a, b, c)
    : fun(a)(b)(c);
}
function A4(fun, a, b, c, d)
{
  return fun.arity === 4
    ? fun.func(a, b, c, d)
    : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e)
{
  return fun.arity === 5
    ? fun.func(a, b, c, d, e)
    : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f)
{
  return fun.arity === 6
    ? fun.func(a, b, c, d, e, f)
    : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g)
{
  return fun.arity === 7
    ? fun.func(a, b, c, d, e, f, g)
    : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h)
{
  return fun.arity === 8
    ? fun.func(a, b, c, d, e, f, g, h)
    : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i)
{
  return fun.arity === 9
    ? fun.func(a, b, c, d, e, f, g, h, i)
    : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

//import Native.Utils //

var _elm_lang$core$Native_Basics = function() {

function div(a, b)
{
	return (a / b) | 0;
}
function rem(a, b)
{
	return a % b;
}
function mod(a, b)
{
	if (b === 0)
	{
		throw new Error('Cannot perform mod 0. Division by zero error.');
	}
	var r = a % b;
	var m = a === 0 ? 0 : (b > 0 ? (a >= 0 ? r : r + b) : -mod(-a, -b));

	return m === b ? 0 : m;
}
function logBase(base, n)
{
	return Math.log(n) / Math.log(base);
}
function negate(n)
{
	return -n;
}
function abs(n)
{
	return n < 0 ? -n : n;
}

function min(a, b)
{
	return _elm_lang$core$Native_Utils.cmp(a, b) < 0 ? a : b;
}
function max(a, b)
{
	return _elm_lang$core$Native_Utils.cmp(a, b) > 0 ? a : b;
}
function clamp(lo, hi, n)
{
	return _elm_lang$core$Native_Utils.cmp(n, lo) < 0
		? lo
		: _elm_lang$core$Native_Utils.cmp(n, hi) > 0
			? hi
			: n;
}

var ord = ['LT', 'EQ', 'GT'];

function compare(x, y)
{
	return { ctor: ord[_elm_lang$core$Native_Utils.cmp(x, y) + 1] };
}

function xor(a, b)
{
	return a !== b;
}
function not(b)
{
	return !b;
}
function isInfinite(n)
{
	return n === Infinity || n === -Infinity;
}

function truncate(n)
{
	return n | 0;
}

function degrees(d)
{
	return d * Math.PI / 180;
}
function turns(t)
{
	return 2 * Math.PI * t;
}
function fromPolar(point)
{
	var r = point._0;
	var t = point._1;
	return _elm_lang$core$Native_Utils.Tuple2(r * Math.cos(t), r * Math.sin(t));
}
function toPolar(point)
{
	var x = point._0;
	var y = point._1;
	return _elm_lang$core$Native_Utils.Tuple2(Math.sqrt(x * x + y * y), Math.atan2(y, x));
}

return {
	div: F2(div),
	rem: F2(rem),
	mod: F2(mod),

	pi: Math.PI,
	e: Math.E,
	cos: Math.cos,
	sin: Math.sin,
	tan: Math.tan,
	acos: Math.acos,
	asin: Math.asin,
	atan: Math.atan,
	atan2: F2(Math.atan2),

	degrees: degrees,
	turns: turns,
	fromPolar: fromPolar,
	toPolar: toPolar,

	sqrt: Math.sqrt,
	logBase: F2(logBase),
	negate: negate,
	abs: abs,
	min: F2(min),
	max: F2(max),
	clamp: F3(clamp),
	compare: F2(compare),

	xor: F2(xor),
	not: not,

	truncate: truncate,
	ceiling: Math.ceil,
	floor: Math.floor,
	round: Math.round,
	toFloat: function(x) { return x; },
	isNaN: isNaN,
	isInfinite: isInfinite
};

}();
//import //

var _elm_lang$core$Native_Utils = function() {

// COMPARISONS

function eq(x, y)
{
	var stack = [];
	var isEqual = eqHelp(x, y, 0, stack);
	var pair;
	while (isEqual && (pair = stack.pop()))
	{
		isEqual = eqHelp(pair.x, pair.y, 0, stack);
	}
	return isEqual;
}


function eqHelp(x, y, depth, stack)
{
	if (depth > 100)
	{
		stack.push({ x: x, y: y });
		return true;
	}

	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object')
	{
		if (typeof x === 'function')
		{
			throw new Error(
				'Trying to use `(==)` on functions. There is no way to know if functions are "the same" in the Elm sense.'
				+ ' Read more about this at http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#=='
				+ ' which describes why it is this way and what the better version will look like.'
			);
		}
		return false;
	}

	if (x === null || y === null)
	{
		return false
	}

	if (x instanceof Date)
	{
		return x.getTime() === y.getTime();
	}

	if (!('ctor' in x))
	{
		for (var key in x)
		{
			if (!eqHelp(x[key], y[key], depth + 1, stack))
			{
				return false;
			}
		}
		return true;
	}

	// convert Dicts and Sets to lists
	if (x.ctor === 'RBNode_elm_builtin' || x.ctor === 'RBEmpty_elm_builtin')
	{
		x = _elm_lang$core$Dict$toList(x);
		y = _elm_lang$core$Dict$toList(y);
	}
	if (x.ctor === 'Set_elm_builtin')
	{
		x = _elm_lang$core$Set$toList(x);
		y = _elm_lang$core$Set$toList(y);
	}

	// check if lists are equal without recursion
	if (x.ctor === '::')
	{
		var a = x;
		var b = y;
		while (a.ctor === '::' && b.ctor === '::')
		{
			if (!eqHelp(a._0, b._0, depth + 1, stack))
			{
				return false;
			}
			a = a._1;
			b = b._1;
		}
		return a.ctor === b.ctor;
	}

	// check if Arrays are equal
	if (x.ctor === '_Array')
	{
		var xs = _elm_lang$core$Native_Array.toJSArray(x);
		var ys = _elm_lang$core$Native_Array.toJSArray(y);
		if (xs.length !== ys.length)
		{
			return false;
		}
		for (var i = 0; i < xs.length; i++)
		{
			if (!eqHelp(xs[i], ys[i], depth + 1, stack))
			{
				return false;
			}
		}
		return true;
	}

	if (!eqHelp(x.ctor, y.ctor, depth + 1, stack))
	{
		return false;
	}

	for (var key in x)
	{
		if (!eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

var LT = -1, EQ = 0, GT = 1;

function cmp(x, y)
{
	if (typeof x !== 'object')
	{
		return x === y ? EQ : x < y ? LT : GT;
	}

	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? EQ : a < b ? LT : GT;
	}

	if (x.ctor === '::' || x.ctor === '[]')
	{
		while (x.ctor === '::' && y.ctor === '::')
		{
			var ord = cmp(x._0, y._0);
			if (ord !== EQ)
			{
				return ord;
			}
			x = x._1;
			y = y._1;
		}
		return x.ctor === y.ctor ? EQ : x.ctor === '[]' ? LT : GT;
	}

	if (x.ctor.slice(0, 6) === '_Tuple')
	{
		var ord;
		var n = x.ctor.slice(6) - 0;
		var err = 'cannot compare tuples with more than 6 elements.';
		if (n === 0) return EQ;
		if (n >= 1) { ord = cmp(x._0, y._0); if (ord !== EQ) return ord;
		if (n >= 2) { ord = cmp(x._1, y._1); if (ord !== EQ) return ord;
		if (n >= 3) { ord = cmp(x._2, y._2); if (ord !== EQ) return ord;
		if (n >= 4) { ord = cmp(x._3, y._3); if (ord !== EQ) return ord;
		if (n >= 5) { ord = cmp(x._4, y._4); if (ord !== EQ) return ord;
		if (n >= 6) { ord = cmp(x._5, y._5); if (ord !== EQ) return ord;
		if (n >= 7) throw new Error('Comparison error: ' + err); } } } } } }
		return EQ;
	}

	throw new Error(
		'Comparison error: comparison is only defined on ints, '
		+ 'floats, times, chars, strings, lists of comparable values, '
		+ 'and tuples of comparable values.'
	);
}


// COMMON VALUES

var Tuple0 = {
	ctor: '_Tuple0'
};

function Tuple2(x, y)
{
	return {
		ctor: '_Tuple2',
		_0: x,
		_1: y
	};
}

function chr(c)
{
	return new String(c);
}


// GUID

var count = 0;
function guid(_)
{
	return count++;
}


// RECORDS

function update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


//// LIST STUFF ////

var Nil = { ctor: '[]' };

function Cons(hd, tl)
{
	return {
		ctor: '::',
		_0: hd,
		_1: tl
	};
}

function append(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (xs.ctor === '[]')
	{
		return ys;
	}
	var root = Cons(xs._0, Nil);
	var curr = root;
	xs = xs._1;
	while (xs.ctor !== '[]')
	{
		curr._1 = Cons(xs._0, Nil);
		xs = xs._1;
		curr = curr._1;
	}
	curr._1 = ys;
	return root;
}


// CRASHES

function crash(moduleName, region)
{
	return function(message) {
		throw new Error(
			'Ran into a `Debug.crash` in module `' + moduleName + '` ' + regionToString(region) + '\n'
			+ 'The message provided by the code author is:\n\n    '
			+ message
		);
	};
}

function crashCase(moduleName, region, value)
{
	return function(message) {
		throw new Error(
			'Ran into a `Debug.crash` in module `' + moduleName + '`\n\n'
			+ 'This was caused by the `case` expression ' + regionToString(region) + '.\n'
			+ 'One of the branches ended with a crash and the following value got through:\n\n    ' + toString(value) + '\n\n'
			+ 'The message provided by the code author is:\n\n    '
			+ message
		);
	};
}

function regionToString(region)
{
	if (region.start.line == region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'between lines ' + region.start.line + ' and ' + region.end.line;
}


// TO STRING

function toString(v)
{
	var type = typeof v;
	if (type === 'function')
	{
		return '<function>';
	}

	if (type === 'boolean')
	{
		return v ? 'True' : 'False';
	}

	if (type === 'number')
	{
		return v + '';
	}

	if (v instanceof String)
	{
		return '\'' + addSlashes(v, true) + '\'';
	}

	if (type === 'string')
	{
		return '"' + addSlashes(v, false) + '"';
	}

	if (v === null)
	{
		return 'null';
	}

	if (type === 'object' && 'ctor' in v)
	{
		var ctorStarter = v.ctor.substring(0, 5);

		if (ctorStarter === '_Tupl')
		{
			var output = [];
			for (var k in v)
			{
				if (k === 'ctor') continue;
				output.push(toString(v[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (ctorStarter === '_Task')
		{
			return '<task>'
		}

		if (v.ctor === '_Array')
		{
			var list = _elm_lang$core$Array$toList(v);
			return 'Array.fromList ' + toString(list);
		}

		if (v.ctor === '<decoder>')
		{
			return '<decoder>';
		}

		if (v.ctor === '_Process')
		{
			return '<process:' + v.id + '>';
		}

		if (v.ctor === '::')
		{
			var output = '[' + toString(v._0);
			v = v._1;
			while (v.ctor === '::')
			{
				output += ',' + toString(v._0);
				v = v._1;
			}
			return output + ']';
		}

		if (v.ctor === '[]')
		{
			return '[]';
		}

		if (v.ctor === 'Set_elm_builtin')
		{
			return 'Set.fromList ' + toString(_elm_lang$core$Set$toList(v));
		}

		if (v.ctor === 'RBNode_elm_builtin' || v.ctor === 'RBEmpty_elm_builtin')
		{
			return 'Dict.fromList ' + toString(_elm_lang$core$Dict$toList(v));
		}

		var output = '';
		for (var i in v)
		{
			if (i === 'ctor') continue;
			var str = toString(v[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return v.ctor + output;
	}

	if (type === 'object')
	{
		if (v instanceof Date)
		{
			return '<' + v.toString() + '>';
		}

		if (v.elm_web_socket)
		{
			return '<websocket>';
		}

		var output = [];
		for (var k in v)
		{
			output.push(k + ' = ' + toString(v[k]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return '<internal structure>';
}

function addSlashes(str, isChar)
{
	var s = str.replace(/\\/g, '\\\\')
			  .replace(/\n/g, '\\n')
			  .replace(/\t/g, '\\t')
			  .replace(/\r/g, '\\r')
			  .replace(/\v/g, '\\v')
			  .replace(/\0/g, '\\0');
	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}


return {
	eq: eq,
	cmp: cmp,
	Tuple0: Tuple0,
	Tuple2: Tuple2,
	chr: chr,
	update: update,
	guid: guid,

	append: F2(append),

	crash: crash,
	crashCase: crashCase,

	toString: toString
};

}();
var _elm_lang$core$Basics$never = function (_p0) {
	never:
	while (true) {
		var _p1 = _p0;
		var _v1 = _p1._0;
		_p0 = _v1;
		continue never;
	}
};
var _elm_lang$core$Basics$uncurry = F2(
	function (f, _p2) {
		var _p3 = _p2;
		return A2(f, _p3._0, _p3._1);
	});
var _elm_lang$core$Basics$curry = F3(
	function (f, a, b) {
		return f(
			{ctor: '_Tuple2', _0: a, _1: b});
	});
var _elm_lang$core$Basics$flip = F3(
	function (f, b, a) {
		return A2(f, a, b);
	});
var _elm_lang$core$Basics$always = F2(
	function (a, _p4) {
		return a;
	});
var _elm_lang$core$Basics$identity = function (x) {
	return x;
};
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<|'] = F2(
	function (f, x) {
		return f(x);
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['|>'] = F2(
	function (x, f) {
		return f(x);
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>>'] = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<<'] = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['++'] = _elm_lang$core$Native_Utils.append;
var _elm_lang$core$Basics$toString = _elm_lang$core$Native_Utils.toString;
var _elm_lang$core$Basics$isInfinite = _elm_lang$core$Native_Basics.isInfinite;
var _elm_lang$core$Basics$isNaN = _elm_lang$core$Native_Basics.isNaN;
var _elm_lang$core$Basics$toFloat = _elm_lang$core$Native_Basics.toFloat;
var _elm_lang$core$Basics$ceiling = _elm_lang$core$Native_Basics.ceiling;
var _elm_lang$core$Basics$floor = _elm_lang$core$Native_Basics.floor;
var _elm_lang$core$Basics$truncate = _elm_lang$core$Native_Basics.truncate;
var _elm_lang$core$Basics$round = _elm_lang$core$Native_Basics.round;
var _elm_lang$core$Basics$not = _elm_lang$core$Native_Basics.not;
var _elm_lang$core$Basics$xor = _elm_lang$core$Native_Basics.xor;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['||'] = _elm_lang$core$Native_Basics.or;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['&&'] = _elm_lang$core$Native_Basics.and;
var _elm_lang$core$Basics$max = _elm_lang$core$Native_Basics.max;
var _elm_lang$core$Basics$min = _elm_lang$core$Native_Basics.min;
var _elm_lang$core$Basics$compare = _elm_lang$core$Native_Basics.compare;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>='] = _elm_lang$core$Native_Basics.ge;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<='] = _elm_lang$core$Native_Basics.le;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>'] = _elm_lang$core$Native_Basics.gt;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<'] = _elm_lang$core$Native_Basics.lt;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['/='] = _elm_lang$core$Native_Basics.neq;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['=='] = _elm_lang$core$Native_Basics.eq;
var _elm_lang$core$Basics$e = _elm_lang$core$Native_Basics.e;
var _elm_lang$core$Basics$pi = _elm_lang$core$Native_Basics.pi;
var _elm_lang$core$Basics$clamp = _elm_lang$core$Native_Basics.clamp;
var _elm_lang$core$Basics$logBase = _elm_lang$core$Native_Basics.logBase;
var _elm_lang$core$Basics$abs = _elm_lang$core$Native_Basics.abs;
var _elm_lang$core$Basics$negate = _elm_lang$core$Native_Basics.negate;
var _elm_lang$core$Basics$sqrt = _elm_lang$core$Native_Basics.sqrt;
var _elm_lang$core$Basics$atan2 = _elm_lang$core$Native_Basics.atan2;
var _elm_lang$core$Basics$atan = _elm_lang$core$Native_Basics.atan;
var _elm_lang$core$Basics$asin = _elm_lang$core$Native_Basics.asin;
var _elm_lang$core$Basics$acos = _elm_lang$core$Native_Basics.acos;
var _elm_lang$core$Basics$tan = _elm_lang$core$Native_Basics.tan;
var _elm_lang$core$Basics$sin = _elm_lang$core$Native_Basics.sin;
var _elm_lang$core$Basics$cos = _elm_lang$core$Native_Basics.cos;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['^'] = _elm_lang$core$Native_Basics.exp;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['%'] = _elm_lang$core$Native_Basics.mod;
var _elm_lang$core$Basics$rem = _elm_lang$core$Native_Basics.rem;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['//'] = _elm_lang$core$Native_Basics.div;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['/'] = _elm_lang$core$Native_Basics.floatDiv;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['*'] = _elm_lang$core$Native_Basics.mul;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['-'] = _elm_lang$core$Native_Basics.sub;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['+'] = _elm_lang$core$Native_Basics.add;
var _elm_lang$core$Basics$toPolar = _elm_lang$core$Native_Basics.toPolar;
var _elm_lang$core$Basics$fromPolar = _elm_lang$core$Native_Basics.fromPolar;
var _elm_lang$core$Basics$turns = _elm_lang$core$Native_Basics.turns;
var _elm_lang$core$Basics$degrees = _elm_lang$core$Native_Basics.degrees;
var _elm_lang$core$Basics$radians = function (t) {
	return t;
};
var _elm_lang$core$Basics$GT = {ctor: 'GT'};
var _elm_lang$core$Basics$EQ = {ctor: 'EQ'};
var _elm_lang$core$Basics$LT = {ctor: 'LT'};
var _elm_lang$core$Basics$JustOneMore = function (a) {
	return {ctor: 'JustOneMore', _0: a};
};

var _elm_lang$core$Maybe$withDefault = F2(
	function ($default, maybe) {
		var _p0 = maybe;
		if (_p0.ctor === 'Just') {
			return _p0._0;
		} else {
			return $default;
		}
	});
var _elm_lang$core$Maybe$Nothing = {ctor: 'Nothing'};
var _elm_lang$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		var _p1 = maybeValue;
		if (_p1.ctor === 'Just') {
			return callback(_p1._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$Just = function (a) {
	return {ctor: 'Just', _0: a};
};
var _elm_lang$core$Maybe$map = F2(
	function (f, maybe) {
		var _p2 = maybe;
		if (_p2.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(
				f(_p2._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		var _p3 = {ctor: '_Tuple2', _0: ma, _1: mb};
		if (((_p3.ctor === '_Tuple2') && (_p3._0.ctor === 'Just')) && (_p3._1.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A2(func, _p3._0._0, _p3._1._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map3 = F4(
	function (func, ma, mb, mc) {
		var _p4 = {ctor: '_Tuple3', _0: ma, _1: mb, _2: mc};
		if ((((_p4.ctor === '_Tuple3') && (_p4._0.ctor === 'Just')) && (_p4._1.ctor === 'Just')) && (_p4._2.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A3(func, _p4._0._0, _p4._1._0, _p4._2._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map4 = F5(
	function (func, ma, mb, mc, md) {
		var _p5 = {ctor: '_Tuple4', _0: ma, _1: mb, _2: mc, _3: md};
		if (((((_p5.ctor === '_Tuple4') && (_p5._0.ctor === 'Just')) && (_p5._1.ctor === 'Just')) && (_p5._2.ctor === 'Just')) && (_p5._3.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A4(func, _p5._0._0, _p5._1._0, _p5._2._0, _p5._3._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map5 = F6(
	function (func, ma, mb, mc, md, me) {
		var _p6 = {ctor: '_Tuple5', _0: ma, _1: mb, _2: mc, _3: md, _4: me};
		if ((((((_p6.ctor === '_Tuple5') && (_p6._0.ctor === 'Just')) && (_p6._1.ctor === 'Just')) && (_p6._2.ctor === 'Just')) && (_p6._3.ctor === 'Just')) && (_p6._4.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A5(func, _p6._0._0, _p6._1._0, _p6._2._0, _p6._3._0, _p6._4._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});

//import Native.Utils //

var _elm_lang$core$Native_List = function() {

var Nil = { ctor: '[]' };

function Cons(hd, tl)
{
	return { ctor: '::', _0: hd, _1: tl };
}

function fromArray(arr)
{
	var out = Nil;
	for (var i = arr.length; i--; )
	{
		out = Cons(arr[i], out);
	}
	return out;
}

function toArray(xs)
{
	var out = [];
	while (xs.ctor !== '[]')
	{
		out.push(xs._0);
		xs = xs._1;
	}
	return out;
}

function foldr(f, b, xs)
{
	var arr = toArray(xs);
	var acc = b;
	for (var i = arr.length; i--; )
	{
		acc = A2(f, arr[i], acc);
	}
	return acc;
}

function map2(f, xs, ys)
{
	var arr = [];
	while (xs.ctor !== '[]' && ys.ctor !== '[]')
	{
		arr.push(A2(f, xs._0, ys._0));
		xs = xs._1;
		ys = ys._1;
	}
	return fromArray(arr);
}

function map3(f, xs, ys, zs)
{
	var arr = [];
	while (xs.ctor !== '[]' && ys.ctor !== '[]' && zs.ctor !== '[]')
	{
		arr.push(A3(f, xs._0, ys._0, zs._0));
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function map4(f, ws, xs, ys, zs)
{
	var arr = [];
	while (   ws.ctor !== '[]'
		   && xs.ctor !== '[]'
		   && ys.ctor !== '[]'
		   && zs.ctor !== '[]')
	{
		arr.push(A4(f, ws._0, xs._0, ys._0, zs._0));
		ws = ws._1;
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function map5(f, vs, ws, xs, ys, zs)
{
	var arr = [];
	while (   vs.ctor !== '[]'
		   && ws.ctor !== '[]'
		   && xs.ctor !== '[]'
		   && ys.ctor !== '[]'
		   && zs.ctor !== '[]')
	{
		arr.push(A5(f, vs._0, ws._0, xs._0, ys._0, zs._0));
		vs = vs._1;
		ws = ws._1;
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function sortBy(f, xs)
{
	return fromArray(toArray(xs).sort(function(a, b) {
		return _elm_lang$core$Native_Utils.cmp(f(a), f(b));
	}));
}

function sortWith(f, xs)
{
	return fromArray(toArray(xs).sort(function(a, b) {
		var ord = f(a)(b).ctor;
		return ord === 'EQ' ? 0 : ord === 'LT' ? -1 : 1;
	}));
}

return {
	Nil: Nil,
	Cons: Cons,
	cons: F2(Cons),
	toArray: toArray,
	fromArray: fromArray,

	foldr: F3(foldr),

	map2: F3(map2),
	map3: F4(map3),
	map4: F5(map4),
	map5: F6(map5),
	sortBy: F2(sortBy),
	sortWith: F2(sortWith)
};

}();
var _elm_lang$core$List$sortWith = _elm_lang$core$Native_List.sortWith;
var _elm_lang$core$List$sortBy = _elm_lang$core$Native_List.sortBy;
var _elm_lang$core$List$sort = function (xs) {
	return A2(_elm_lang$core$List$sortBy, _elm_lang$core$Basics$identity, xs);
};
var _elm_lang$core$List$singleton = function (value) {
	return {
		ctor: '::',
		_0: value,
		_1: {ctor: '[]'}
	};
};
var _elm_lang$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return list;
			} else {
				var _p0 = list;
				if (_p0.ctor === '[]') {
					return list;
				} else {
					var _v1 = n - 1,
						_v2 = _p0._1;
					n = _v1;
					list = _v2;
					continue drop;
				}
			}
		}
	});
var _elm_lang$core$List$map5 = _elm_lang$core$Native_List.map5;
var _elm_lang$core$List$map4 = _elm_lang$core$Native_List.map4;
var _elm_lang$core$List$map3 = _elm_lang$core$Native_List.map3;
var _elm_lang$core$List$map2 = _elm_lang$core$Native_List.map2;
var _elm_lang$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			var _p1 = list;
			if (_p1.ctor === '[]') {
				return false;
			} else {
				if (isOkay(_p1._0)) {
					return true;
				} else {
					var _v4 = isOkay,
						_v5 = _p1._1;
					isOkay = _v4;
					list = _v5;
					continue any;
				}
			}
		}
	});
var _elm_lang$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			_elm_lang$core$List$any,
			function (_p2) {
				return !isOkay(_p2);
			},
			list);
	});
var _elm_lang$core$List$foldr = _elm_lang$core$Native_List.foldr;
var _elm_lang$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			var _p3 = list;
			if (_p3.ctor === '[]') {
				return acc;
			} else {
				var _v7 = func,
					_v8 = A2(func, _p3._0, acc),
					_v9 = _p3._1;
				func = _v7;
				acc = _v8;
				list = _v9;
				continue foldl;
			}
		}
	});
var _elm_lang$core$List$length = function (xs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p4, i) {
				return i + 1;
			}),
		0,
		xs);
};
var _elm_lang$core$List$sum = function (numbers) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return x + y;
			}),
		0,
		numbers);
};
var _elm_lang$core$List$product = function (numbers) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return x * y;
			}),
		1,
		numbers);
};
var _elm_lang$core$List$maximum = function (list) {
	var _p5 = list;
	if (_p5.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$max, _p5._0, _p5._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$minimum = function (list) {
	var _p6 = list;
	if (_p6.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$min, _p6._0, _p6._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$member = F2(
	function (x, xs) {
		return A2(
			_elm_lang$core$List$any,
			function (a) {
				return _elm_lang$core$Native_Utils.eq(a, x);
			},
			xs);
	});
var _elm_lang$core$List$isEmpty = function (xs) {
	var _p7 = xs;
	if (_p7.ctor === '[]') {
		return true;
	} else {
		return false;
	}
};
var _elm_lang$core$List$tail = function (list) {
	var _p8 = list;
	if (_p8.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p8._1);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$head = function (list) {
	var _p9 = list;
	if (_p9.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p9._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List_ops = _elm_lang$core$List_ops || {};
_elm_lang$core$List_ops['::'] = _elm_lang$core$Native_List.cons;
var _elm_lang$core$List$map = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, acc) {
					return {
						ctor: '::',
						_0: f(x),
						_1: acc
					};
				}),
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$filter = F2(
	function (pred, xs) {
		var conditionalCons = F2(
			function (front, back) {
				return pred(front) ? {ctor: '::', _0: front, _1: back} : back;
			});
		return A3(
			_elm_lang$core$List$foldr,
			conditionalCons,
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _p10 = f(mx);
		if (_p10.ctor === 'Just') {
			return {ctor: '::', _0: _p10._0, _1: xs};
		} else {
			return xs;
		}
	});
var _elm_lang$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldr,
			_elm_lang$core$List$maybeCons(f),
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$reverse = function (list) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return {ctor: '::', _0: x, _1: y};
			}),
		{ctor: '[]'},
		list);
};
var _elm_lang$core$List$scanl = F3(
	function (f, b, xs) {
		var scan1 = F2(
			function (x, accAcc) {
				var _p11 = accAcc;
				if (_p11.ctor === '::') {
					return {
						ctor: '::',
						_0: A2(f, x, _p11._0),
						_1: accAcc
					};
				} else {
					return {ctor: '[]'};
				}
			});
		return _elm_lang$core$List$reverse(
			A3(
				_elm_lang$core$List$foldl,
				scan1,
				{
					ctor: '::',
					_0: b,
					_1: {ctor: '[]'}
				},
				xs));
	});
var _elm_lang$core$List$append = F2(
	function (xs, ys) {
		var _p12 = ys;
		if (_p12.ctor === '[]') {
			return xs;
		} else {
			return A3(
				_elm_lang$core$List$foldr,
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					}),
				ys,
				xs);
		}
	});
var _elm_lang$core$List$concat = function (lists) {
	return A3(
		_elm_lang$core$List$foldr,
		_elm_lang$core$List$append,
		{ctor: '[]'},
		lists);
};
var _elm_lang$core$List$concatMap = F2(
	function (f, list) {
		return _elm_lang$core$List$concat(
			A2(_elm_lang$core$List$map, f, list));
	});
var _elm_lang$core$List$partition = F2(
	function (pred, list) {
		var step = F2(
			function (x, _p13) {
				var _p14 = _p13;
				var _p16 = _p14._0;
				var _p15 = _p14._1;
				return pred(x) ? {
					ctor: '_Tuple2',
					_0: {ctor: '::', _0: x, _1: _p16},
					_1: _p15
				} : {
					ctor: '_Tuple2',
					_0: _p16,
					_1: {ctor: '::', _0: x, _1: _p15}
				};
			});
		return A3(
			_elm_lang$core$List$foldr,
			step,
			{
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: {ctor: '[]'}
			},
			list);
	});
var _elm_lang$core$List$unzip = function (pairs) {
	var step = F2(
		function (_p18, _p17) {
			var _p19 = _p18;
			var _p20 = _p17;
			return {
				ctor: '_Tuple2',
				_0: {ctor: '::', _0: _p19._0, _1: _p20._0},
				_1: {ctor: '::', _0: _p19._1, _1: _p20._1}
			};
		});
	return A3(
		_elm_lang$core$List$foldr,
		step,
		{
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		},
		pairs);
};
var _elm_lang$core$List$intersperse = F2(
	function (sep, xs) {
		var _p21 = xs;
		if (_p21.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var step = F2(
				function (x, rest) {
					return {
						ctor: '::',
						_0: sep,
						_1: {ctor: '::', _0: x, _1: rest}
					};
				});
			var spersed = A3(
				_elm_lang$core$List$foldr,
				step,
				{ctor: '[]'},
				_p21._1);
			return {ctor: '::', _0: _p21._0, _1: spersed};
		}
	});
var _elm_lang$core$List$takeReverse = F3(
	function (n, list, taken) {
		takeReverse:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return taken;
			} else {
				var _p22 = list;
				if (_p22.ctor === '[]') {
					return taken;
				} else {
					var _v23 = n - 1,
						_v24 = _p22._1,
						_v25 = {ctor: '::', _0: _p22._0, _1: taken};
					n = _v23;
					list = _v24;
					taken = _v25;
					continue takeReverse;
				}
			}
		}
	});
var _elm_lang$core$List$takeTailRec = F2(
	function (n, list) {
		return _elm_lang$core$List$reverse(
			A3(
				_elm_lang$core$List$takeReverse,
				n,
				list,
				{ctor: '[]'}));
	});
var _elm_lang$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
			return {ctor: '[]'};
		} else {
			var _p23 = {ctor: '_Tuple2', _0: n, _1: list};
			_v26_5:
			do {
				_v26_1:
				do {
					if (_p23.ctor === '_Tuple2') {
						if (_p23._1.ctor === '[]') {
							return list;
						} else {
							if (_p23._1._1.ctor === '::') {
								switch (_p23._0) {
									case 1:
										break _v26_1;
									case 2:
										return {
											ctor: '::',
											_0: _p23._1._0,
											_1: {
												ctor: '::',
												_0: _p23._1._1._0,
												_1: {ctor: '[]'}
											}
										};
									case 3:
										if (_p23._1._1._1.ctor === '::') {
											return {
												ctor: '::',
												_0: _p23._1._0,
												_1: {
													ctor: '::',
													_0: _p23._1._1._0,
													_1: {
														ctor: '::',
														_0: _p23._1._1._1._0,
														_1: {ctor: '[]'}
													}
												}
											};
										} else {
											break _v26_5;
										}
									default:
										if ((_p23._1._1._1.ctor === '::') && (_p23._1._1._1._1.ctor === '::')) {
											var _p28 = _p23._1._1._1._0;
											var _p27 = _p23._1._1._0;
											var _p26 = _p23._1._0;
											var _p25 = _p23._1._1._1._1._0;
											var _p24 = _p23._1._1._1._1._1;
											return (_elm_lang$core$Native_Utils.cmp(ctr, 1000) > 0) ? {
												ctor: '::',
												_0: _p26,
												_1: {
													ctor: '::',
													_0: _p27,
													_1: {
														ctor: '::',
														_0: _p28,
														_1: {
															ctor: '::',
															_0: _p25,
															_1: A2(_elm_lang$core$List$takeTailRec, n - 4, _p24)
														}
													}
												}
											} : {
												ctor: '::',
												_0: _p26,
												_1: {
													ctor: '::',
													_0: _p27,
													_1: {
														ctor: '::',
														_0: _p28,
														_1: {
															ctor: '::',
															_0: _p25,
															_1: A3(_elm_lang$core$List$takeFast, ctr + 1, n - 4, _p24)
														}
													}
												}
											};
										} else {
											break _v26_5;
										}
								}
							} else {
								if (_p23._0 === 1) {
									break _v26_1;
								} else {
									break _v26_5;
								}
							}
						}
					} else {
						break _v26_5;
					}
				} while(false);
				return {
					ctor: '::',
					_0: _p23._1._0,
					_1: {ctor: '[]'}
				};
			} while(false);
			return list;
		}
	});
var _elm_lang$core$List$take = F2(
	function (n, list) {
		return A3(_elm_lang$core$List$takeFast, 0, n, list);
	});
var _elm_lang$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return result;
			} else {
				var _v27 = {ctor: '::', _0: value, _1: result},
					_v28 = n - 1,
					_v29 = value;
				result = _v27;
				n = _v28;
				value = _v29;
				continue repeatHelp;
			}
		}
	});
var _elm_lang$core$List$repeat = F2(
	function (n, value) {
		return A3(
			_elm_lang$core$List$repeatHelp,
			{ctor: '[]'},
			n,
			value);
	});
var _elm_lang$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(lo, hi) < 1) {
				var _v30 = lo,
					_v31 = hi - 1,
					_v32 = {ctor: '::', _0: hi, _1: list};
				lo = _v30;
				hi = _v31;
				list = _v32;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var _elm_lang$core$List$range = F2(
	function (lo, hi) {
		return A3(
			_elm_lang$core$List$rangeHelp,
			lo,
			hi,
			{ctor: '[]'});
	});
var _elm_lang$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$map2,
			f,
			A2(
				_elm_lang$core$List$range,
				0,
				_elm_lang$core$List$length(xs) - 1),
			xs);
	});

//import Native.Utils //

var _elm_lang$core$Native_Debug = function() {

function log(tag, value)
{
	var msg = tag + ': ' + _elm_lang$core$Native_Utils.toString(value);
	var process = process || {};
	if (process.stdout)
	{
		process.stdout.write(msg);
	}
	else
	{
		console.log(msg);
	}
	return value;
}

function crash(message)
{
	throw new Error(message);
}

return {
	crash: crash,
	log: F2(log)
};

}();
//import Maybe, Native.List, Native.Utils, Result //

var _elm_lang$core$Native_String = function() {

function isEmpty(str)
{
	return str.length === 0;
}
function cons(chr, str)
{
	return chr + str;
}
function uncons(str)
{
	var hd = str[0];
	if (hd)
	{
		return _elm_lang$core$Maybe$Just(_elm_lang$core$Native_Utils.Tuple2(_elm_lang$core$Native_Utils.chr(hd), str.slice(1)));
	}
	return _elm_lang$core$Maybe$Nothing;
}
function append(a, b)
{
	return a + b;
}
function concat(strs)
{
	return _elm_lang$core$Native_List.toArray(strs).join('');
}
function length(str)
{
	return str.length;
}
function map(f, str)
{
	var out = str.split('');
	for (var i = out.length; i--; )
	{
		out[i] = f(_elm_lang$core$Native_Utils.chr(out[i]));
	}
	return out.join('');
}
function filter(pred, str)
{
	return str.split('').map(_elm_lang$core$Native_Utils.chr).filter(pred).join('');
}
function reverse(str)
{
	return str.split('').reverse().join('');
}
function foldl(f, b, str)
{
	var len = str.length;
	for (var i = 0; i < len; ++i)
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}
function foldr(f, b, str)
{
	for (var i = str.length; i--; )
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}
function split(sep, str)
{
	return _elm_lang$core$Native_List.fromArray(str.split(sep));
}
function join(sep, strs)
{
	return _elm_lang$core$Native_List.toArray(strs).join(sep);
}
function repeat(n, str)
{
	var result = '';
	while (n > 0)
	{
		if (n & 1)
		{
			result += str;
		}
		n >>= 1, str += str;
	}
	return result;
}
function slice(start, end, str)
{
	return str.slice(start, end);
}
function left(n, str)
{
	return n < 1 ? '' : str.slice(0, n);
}
function right(n, str)
{
	return n < 1 ? '' : str.slice(-n);
}
function dropLeft(n, str)
{
	return n < 1 ? str : str.slice(n);
}
function dropRight(n, str)
{
	return n < 1 ? str : str.slice(0, -n);
}
function pad(n, chr, str)
{
	var half = (n - str.length) / 2;
	return repeat(Math.ceil(half), chr) + str + repeat(half | 0, chr);
}
function padRight(n, chr, str)
{
	return str + repeat(n - str.length, chr);
}
function padLeft(n, chr, str)
{
	return repeat(n - str.length, chr) + str;
}

function trim(str)
{
	return str.trim();
}
function trimLeft(str)
{
	return str.replace(/^\s+/, '');
}
function trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function words(str)
{
	return _elm_lang$core$Native_List.fromArray(str.trim().split(/\s+/g));
}
function lines(str)
{
	return _elm_lang$core$Native_List.fromArray(str.split(/\r\n|\r|\n/g));
}

function toUpper(str)
{
	return str.toUpperCase();
}
function toLower(str)
{
	return str.toLowerCase();
}

function any(pred, str)
{
	for (var i = str.length; i--; )
	{
		if (pred(_elm_lang$core$Native_Utils.chr(str[i])))
		{
			return true;
		}
	}
	return false;
}
function all(pred, str)
{
	for (var i = str.length; i--; )
	{
		if (!pred(_elm_lang$core$Native_Utils.chr(str[i])))
		{
			return false;
		}
	}
	return true;
}

function contains(sub, str)
{
	return str.indexOf(sub) > -1;
}
function startsWith(sub, str)
{
	return str.indexOf(sub) === 0;
}
function endsWith(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
}
function indexes(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _elm_lang$core$Native_List.Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _elm_lang$core$Native_List.fromArray(is);
}


function toInt(s)
{
	var len = s.length;

	// if empty
	if (len === 0)
	{
		return intErr(s);
	}

	// if hex
	var c = s[0];
	if (c === '0' && s[1] === 'x')
	{
		for (var i = 2; i < len; ++i)
		{
			var c = s[i];
			if (('0' <= c && c <= '9') || ('A' <= c && c <= 'F') || ('a' <= c && c <= 'f'))
			{
				continue;
			}
			return intErr(s);
		}
		return _elm_lang$core$Result$Ok(parseInt(s, 16));
	}

	// is decimal
	if (c > '9' || (c < '0' && c !== '-' && c !== '+'))
	{
		return intErr(s);
	}
	for (var i = 1; i < len; ++i)
	{
		var c = s[i];
		if (c < '0' || '9' < c)
		{
			return intErr(s);
		}
	}

	return _elm_lang$core$Result$Ok(parseInt(s, 10));
}

function intErr(s)
{
	return _elm_lang$core$Result$Err("could not convert string '" + s + "' to an Int");
}


function toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return floatErr(s);
	}
	var n = +s;
	// faster isNaN check
	return n === n ? _elm_lang$core$Result$Ok(n) : floatErr(s);
}

function floatErr(s)
{
	return _elm_lang$core$Result$Err("could not convert string '" + s + "' to a Float");
}


function toList(str)
{
	return _elm_lang$core$Native_List.fromArray(str.split('').map(_elm_lang$core$Native_Utils.chr));
}
function fromList(chars)
{
	return _elm_lang$core$Native_List.toArray(chars).join('');
}

return {
	isEmpty: isEmpty,
	cons: F2(cons),
	uncons: uncons,
	append: F2(append),
	concat: concat,
	length: length,
	map: F2(map),
	filter: F2(filter),
	reverse: reverse,
	foldl: F3(foldl),
	foldr: F3(foldr),

	split: F2(split),
	join: F2(join),
	repeat: F2(repeat),

	slice: F3(slice),
	left: F2(left),
	right: F2(right),
	dropLeft: F2(dropLeft),
	dropRight: F2(dropRight),

	pad: F3(pad),
	padLeft: F3(padLeft),
	padRight: F3(padRight),

	trim: trim,
	trimLeft: trimLeft,
	trimRight: trimRight,

	words: words,
	lines: lines,

	toUpper: toUpper,
	toLower: toLower,

	any: F2(any),
	all: F2(all),

	contains: F2(contains),
	startsWith: F2(startsWith),
	endsWith: F2(endsWith),
	indexes: F2(indexes),

	toInt: toInt,
	toFloat: toFloat,
	toList: toList,
	fromList: fromList
};

}();

//import Native.Utils //

var _elm_lang$core$Native_Char = function() {

return {
	fromCode: function(c) { return _elm_lang$core$Native_Utils.chr(String.fromCharCode(c)); },
	toCode: function(c) { return c.charCodeAt(0); },
	toUpper: function(c) { return _elm_lang$core$Native_Utils.chr(c.toUpperCase()); },
	toLower: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLowerCase()); },
	toLocaleUpper: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLocaleUpperCase()); },
	toLocaleLower: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLocaleLowerCase()); }
};

}();
var _elm_lang$core$Char$fromCode = _elm_lang$core$Native_Char.fromCode;
var _elm_lang$core$Char$toCode = _elm_lang$core$Native_Char.toCode;
var _elm_lang$core$Char$toLocaleLower = _elm_lang$core$Native_Char.toLocaleLower;
var _elm_lang$core$Char$toLocaleUpper = _elm_lang$core$Native_Char.toLocaleUpper;
var _elm_lang$core$Char$toLower = _elm_lang$core$Native_Char.toLower;
var _elm_lang$core$Char$toUpper = _elm_lang$core$Native_Char.toUpper;
var _elm_lang$core$Char$isBetween = F3(
	function (low, high, $char) {
		var code = _elm_lang$core$Char$toCode($char);
		return (_elm_lang$core$Native_Utils.cmp(
			code,
			_elm_lang$core$Char$toCode(low)) > -1) && (_elm_lang$core$Native_Utils.cmp(
			code,
			_elm_lang$core$Char$toCode(high)) < 1);
	});
var _elm_lang$core$Char$isUpper = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('A'),
	_elm_lang$core$Native_Utils.chr('Z'));
var _elm_lang$core$Char$isLower = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('a'),
	_elm_lang$core$Native_Utils.chr('z'));
var _elm_lang$core$Char$isDigit = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('0'),
	_elm_lang$core$Native_Utils.chr('9'));
var _elm_lang$core$Char$isOctDigit = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('0'),
	_elm_lang$core$Native_Utils.chr('7'));
var _elm_lang$core$Char$isHexDigit = function ($char) {
	return _elm_lang$core$Char$isDigit($char) || (A3(
		_elm_lang$core$Char$isBetween,
		_elm_lang$core$Native_Utils.chr('a'),
		_elm_lang$core$Native_Utils.chr('f'),
		$char) || A3(
		_elm_lang$core$Char$isBetween,
		_elm_lang$core$Native_Utils.chr('A'),
		_elm_lang$core$Native_Utils.chr('F'),
		$char));
};

var _elm_lang$core$Result$toMaybe = function (result) {
	var _p0 = result;
	if (_p0.ctor === 'Ok') {
		return _elm_lang$core$Maybe$Just(_p0._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$Result$withDefault = F2(
	function (def, result) {
		var _p1 = result;
		if (_p1.ctor === 'Ok') {
			return _p1._0;
		} else {
			return def;
		}
	});
var _elm_lang$core$Result$Err = function (a) {
	return {ctor: 'Err', _0: a};
};
var _elm_lang$core$Result$andThen = F2(
	function (callback, result) {
		var _p2 = result;
		if (_p2.ctor === 'Ok') {
			return callback(_p2._0);
		} else {
			return _elm_lang$core$Result$Err(_p2._0);
		}
	});
var _elm_lang$core$Result$Ok = function (a) {
	return {ctor: 'Ok', _0: a};
};
var _elm_lang$core$Result$map = F2(
	function (func, ra) {
		var _p3 = ra;
		if (_p3.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(
				func(_p3._0));
		} else {
			return _elm_lang$core$Result$Err(_p3._0);
		}
	});
var _elm_lang$core$Result$map2 = F3(
	function (func, ra, rb) {
		var _p4 = {ctor: '_Tuple2', _0: ra, _1: rb};
		if (_p4._0.ctor === 'Ok') {
			if (_p4._1.ctor === 'Ok') {
				return _elm_lang$core$Result$Ok(
					A2(func, _p4._0._0, _p4._1._0));
			} else {
				return _elm_lang$core$Result$Err(_p4._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p4._0._0);
		}
	});
var _elm_lang$core$Result$map3 = F4(
	function (func, ra, rb, rc) {
		var _p5 = {ctor: '_Tuple3', _0: ra, _1: rb, _2: rc};
		if (_p5._0.ctor === 'Ok') {
			if (_p5._1.ctor === 'Ok') {
				if (_p5._2.ctor === 'Ok') {
					return _elm_lang$core$Result$Ok(
						A3(func, _p5._0._0, _p5._1._0, _p5._2._0));
				} else {
					return _elm_lang$core$Result$Err(_p5._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p5._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p5._0._0);
		}
	});
var _elm_lang$core$Result$map4 = F5(
	function (func, ra, rb, rc, rd) {
		var _p6 = {ctor: '_Tuple4', _0: ra, _1: rb, _2: rc, _3: rd};
		if (_p6._0.ctor === 'Ok') {
			if (_p6._1.ctor === 'Ok') {
				if (_p6._2.ctor === 'Ok') {
					if (_p6._3.ctor === 'Ok') {
						return _elm_lang$core$Result$Ok(
							A4(func, _p6._0._0, _p6._1._0, _p6._2._0, _p6._3._0));
					} else {
						return _elm_lang$core$Result$Err(_p6._3._0);
					}
				} else {
					return _elm_lang$core$Result$Err(_p6._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p6._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p6._0._0);
		}
	});
var _elm_lang$core$Result$map5 = F6(
	function (func, ra, rb, rc, rd, re) {
		var _p7 = {ctor: '_Tuple5', _0: ra, _1: rb, _2: rc, _3: rd, _4: re};
		if (_p7._0.ctor === 'Ok') {
			if (_p7._1.ctor === 'Ok') {
				if (_p7._2.ctor === 'Ok') {
					if (_p7._3.ctor === 'Ok') {
						if (_p7._4.ctor === 'Ok') {
							return _elm_lang$core$Result$Ok(
								A5(func, _p7._0._0, _p7._1._0, _p7._2._0, _p7._3._0, _p7._4._0));
						} else {
							return _elm_lang$core$Result$Err(_p7._4._0);
						}
					} else {
						return _elm_lang$core$Result$Err(_p7._3._0);
					}
				} else {
					return _elm_lang$core$Result$Err(_p7._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p7._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p7._0._0);
		}
	});
var _elm_lang$core$Result$mapError = F2(
	function (f, result) {
		var _p8 = result;
		if (_p8.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(_p8._0);
		} else {
			return _elm_lang$core$Result$Err(
				f(_p8._0));
		}
	});
var _elm_lang$core$Result$fromMaybe = F2(
	function (err, maybe) {
		var _p9 = maybe;
		if (_p9.ctor === 'Just') {
			return _elm_lang$core$Result$Ok(_p9._0);
		} else {
			return _elm_lang$core$Result$Err(err);
		}
	});

var _elm_lang$core$String$fromList = _elm_lang$core$Native_String.fromList;
var _elm_lang$core$String$toList = _elm_lang$core$Native_String.toList;
var _elm_lang$core$String$toFloat = _elm_lang$core$Native_String.toFloat;
var _elm_lang$core$String$toInt = _elm_lang$core$Native_String.toInt;
var _elm_lang$core$String$indices = _elm_lang$core$Native_String.indexes;
var _elm_lang$core$String$indexes = _elm_lang$core$Native_String.indexes;
var _elm_lang$core$String$endsWith = _elm_lang$core$Native_String.endsWith;
var _elm_lang$core$String$startsWith = _elm_lang$core$Native_String.startsWith;
var _elm_lang$core$String$contains = _elm_lang$core$Native_String.contains;
var _elm_lang$core$String$all = _elm_lang$core$Native_String.all;
var _elm_lang$core$String$any = _elm_lang$core$Native_String.any;
var _elm_lang$core$String$toLower = _elm_lang$core$Native_String.toLower;
var _elm_lang$core$String$toUpper = _elm_lang$core$Native_String.toUpper;
var _elm_lang$core$String$lines = _elm_lang$core$Native_String.lines;
var _elm_lang$core$String$words = _elm_lang$core$Native_String.words;
var _elm_lang$core$String$trimRight = _elm_lang$core$Native_String.trimRight;
var _elm_lang$core$String$trimLeft = _elm_lang$core$Native_String.trimLeft;
var _elm_lang$core$String$trim = _elm_lang$core$Native_String.trim;
var _elm_lang$core$String$padRight = _elm_lang$core$Native_String.padRight;
var _elm_lang$core$String$padLeft = _elm_lang$core$Native_String.padLeft;
var _elm_lang$core$String$pad = _elm_lang$core$Native_String.pad;
var _elm_lang$core$String$dropRight = _elm_lang$core$Native_String.dropRight;
var _elm_lang$core$String$dropLeft = _elm_lang$core$Native_String.dropLeft;
var _elm_lang$core$String$right = _elm_lang$core$Native_String.right;
var _elm_lang$core$String$left = _elm_lang$core$Native_String.left;
var _elm_lang$core$String$slice = _elm_lang$core$Native_String.slice;
var _elm_lang$core$String$repeat = _elm_lang$core$Native_String.repeat;
var _elm_lang$core$String$join = _elm_lang$core$Native_String.join;
var _elm_lang$core$String$split = _elm_lang$core$Native_String.split;
var _elm_lang$core$String$foldr = _elm_lang$core$Native_String.foldr;
var _elm_lang$core$String$foldl = _elm_lang$core$Native_String.foldl;
var _elm_lang$core$String$reverse = _elm_lang$core$Native_String.reverse;
var _elm_lang$core$String$filter = _elm_lang$core$Native_String.filter;
var _elm_lang$core$String$map = _elm_lang$core$Native_String.map;
var _elm_lang$core$String$length = _elm_lang$core$Native_String.length;
var _elm_lang$core$String$concat = _elm_lang$core$Native_String.concat;
var _elm_lang$core$String$append = _elm_lang$core$Native_String.append;
var _elm_lang$core$String$uncons = _elm_lang$core$Native_String.uncons;
var _elm_lang$core$String$cons = _elm_lang$core$Native_String.cons;
var _elm_lang$core$String$fromChar = function ($char) {
	return A2(_elm_lang$core$String$cons, $char, '');
};
var _elm_lang$core$String$isEmpty = _elm_lang$core$Native_String.isEmpty;

var _elm_lang$core$Dict$foldr = F3(
	function (f, acc, t) {
		foldr:
		while (true) {
			var _p0 = t;
			if (_p0.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v1 = f,
					_v2 = A3(
					f,
					_p0._1,
					_p0._2,
					A3(_elm_lang$core$Dict$foldr, f, acc, _p0._4)),
					_v3 = _p0._3;
				f = _v1;
				acc = _v2;
				t = _v3;
				continue foldr;
			}
		}
	});
var _elm_lang$core$Dict$keys = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return {ctor: '::', _0: key, _1: keyList};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$values = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return {ctor: '::', _0: value, _1: valueList};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$toList = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: key, _1: value},
					_1: list
				};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$foldl = F3(
	function (f, acc, dict) {
		foldl:
		while (true) {
			var _p1 = dict;
			if (_p1.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v5 = f,
					_v6 = A3(
					f,
					_p1._1,
					_p1._2,
					A3(_elm_lang$core$Dict$foldl, f, acc, _p1._3)),
					_v7 = _p1._4;
				f = _v5;
				acc = _v6;
				dict = _v7;
				continue foldl;
			}
		}
	});
var _elm_lang$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _p2) {
				stepState:
				while (true) {
					var _p3 = _p2;
					var _p9 = _p3._1;
					var _p8 = _p3._0;
					var _p4 = _p8;
					if (_p4.ctor === '[]') {
						return {
							ctor: '_Tuple2',
							_0: _p8,
							_1: A3(rightStep, rKey, rValue, _p9)
						};
					} else {
						var _p7 = _p4._1;
						var _p6 = _p4._0._1;
						var _p5 = _p4._0._0;
						if (_elm_lang$core$Native_Utils.cmp(_p5, rKey) < 0) {
							var _v10 = rKey,
								_v11 = rValue,
								_v12 = {
								ctor: '_Tuple2',
								_0: _p7,
								_1: A3(leftStep, _p5, _p6, _p9)
							};
							rKey = _v10;
							rValue = _v11;
							_p2 = _v12;
							continue stepState;
						} else {
							if (_elm_lang$core$Native_Utils.cmp(_p5, rKey) > 0) {
								return {
									ctor: '_Tuple2',
									_0: _p8,
									_1: A3(rightStep, rKey, rValue, _p9)
								};
							} else {
								return {
									ctor: '_Tuple2',
									_0: _p7,
									_1: A4(bothStep, _p5, _p6, rValue, _p9)
								};
							}
						}
					}
				}
			});
		var _p10 = A3(
			_elm_lang$core$Dict$foldl,
			stepState,
			{
				ctor: '_Tuple2',
				_0: _elm_lang$core$Dict$toList(leftDict),
				_1: initialResult
			},
			rightDict);
		var leftovers = _p10._0;
		var intermediateResult = _p10._1;
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (_p11, result) {
					var _p12 = _p11;
					return A3(leftStep, _p12._0, _p12._1, result);
				}),
			intermediateResult,
			leftovers);
	});
var _elm_lang$core$Dict$reportRemBug = F4(
	function (msg, c, lgot, rgot) {
		return _elm_lang$core$Native_Debug.crash(
			_elm_lang$core$String$concat(
				{
					ctor: '::',
					_0: 'Internal red-black tree invariant violated, expected ',
					_1: {
						ctor: '::',
						_0: msg,
						_1: {
							ctor: '::',
							_0: ' and got ',
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Basics$toString(c),
								_1: {
									ctor: '::',
									_0: '/',
									_1: {
										ctor: '::',
										_0: lgot,
										_1: {
											ctor: '::',
											_0: '/',
											_1: {
												ctor: '::',
												_0: rgot,
												_1: {
													ctor: '::',
													_0: '\nPlease report this bug to <https://github.com/elm-lang/core/issues>',
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}));
	});
var _elm_lang$core$Dict$isBBlack = function (dict) {
	var _p13 = dict;
	_v14_2:
	do {
		if (_p13.ctor === 'RBNode_elm_builtin') {
			if (_p13._0.ctor === 'BBlack') {
				return true;
			} else {
				break _v14_2;
			}
		} else {
			if (_p13._0.ctor === 'LBBlack') {
				return true;
			} else {
				break _v14_2;
			}
		}
	} while(false);
	return false;
};
var _elm_lang$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			var _p14 = dict;
			if (_p14.ctor === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var _v16 = A2(_elm_lang$core$Dict$sizeHelp, n + 1, _p14._4),
					_v17 = _p14._3;
				n = _v16;
				dict = _v17;
				continue sizeHelp;
			}
		}
	});
var _elm_lang$core$Dict$size = function (dict) {
	return A2(_elm_lang$core$Dict$sizeHelp, 0, dict);
};
var _elm_lang$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			var _p15 = dict;
			if (_p15.ctor === 'RBEmpty_elm_builtin') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p16 = A2(_elm_lang$core$Basics$compare, targetKey, _p15._1);
				switch (_p16.ctor) {
					case 'LT':
						var _v20 = targetKey,
							_v21 = _p15._3;
						targetKey = _v20;
						dict = _v21;
						continue get;
					case 'EQ':
						return _elm_lang$core$Maybe$Just(_p15._2);
					default:
						var _v22 = targetKey,
							_v23 = _p15._4;
						targetKey = _v22;
						dict = _v23;
						continue get;
				}
			}
		}
	});
var _elm_lang$core$Dict$member = F2(
	function (key, dict) {
		var _p17 = A2(_elm_lang$core$Dict$get, key, dict);
		if (_p17.ctor === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var _elm_lang$core$Dict$maxWithDefault = F3(
	function (k, v, r) {
		maxWithDefault:
		while (true) {
			var _p18 = r;
			if (_p18.ctor === 'RBEmpty_elm_builtin') {
				return {ctor: '_Tuple2', _0: k, _1: v};
			} else {
				var _v26 = _p18._1,
					_v27 = _p18._2,
					_v28 = _p18._4;
				k = _v26;
				v = _v27;
				r = _v28;
				continue maxWithDefault;
			}
		}
	});
var _elm_lang$core$Dict$NBlack = {ctor: 'NBlack'};
var _elm_lang$core$Dict$BBlack = {ctor: 'BBlack'};
var _elm_lang$core$Dict$Black = {ctor: 'Black'};
var _elm_lang$core$Dict$blackish = function (t) {
	var _p19 = t;
	if (_p19.ctor === 'RBNode_elm_builtin') {
		var _p20 = _p19._0;
		return _elm_lang$core$Native_Utils.eq(_p20, _elm_lang$core$Dict$Black) || _elm_lang$core$Native_Utils.eq(_p20, _elm_lang$core$Dict$BBlack);
	} else {
		return true;
	}
};
var _elm_lang$core$Dict$Red = {ctor: 'Red'};
var _elm_lang$core$Dict$moreBlack = function (color) {
	var _p21 = color;
	switch (_p21.ctor) {
		case 'Black':
			return _elm_lang$core$Dict$BBlack;
		case 'Red':
			return _elm_lang$core$Dict$Black;
		case 'NBlack':
			return _elm_lang$core$Dict$Red;
		default:
			return _elm_lang$core$Native_Debug.crash('Can\'t make a double black node more black!');
	}
};
var _elm_lang$core$Dict$lessBlack = function (color) {
	var _p22 = color;
	switch (_p22.ctor) {
		case 'BBlack':
			return _elm_lang$core$Dict$Black;
		case 'Black':
			return _elm_lang$core$Dict$Red;
		case 'Red':
			return _elm_lang$core$Dict$NBlack;
		default:
			return _elm_lang$core$Native_Debug.crash('Can\'t make a negative black node less black!');
	}
};
var _elm_lang$core$Dict$LBBlack = {ctor: 'LBBlack'};
var _elm_lang$core$Dict$LBlack = {ctor: 'LBlack'};
var _elm_lang$core$Dict$RBEmpty_elm_builtin = function (a) {
	return {ctor: 'RBEmpty_elm_builtin', _0: a};
};
var _elm_lang$core$Dict$empty = _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
var _elm_lang$core$Dict$isEmpty = function (dict) {
	return _elm_lang$core$Native_Utils.eq(dict, _elm_lang$core$Dict$empty);
};
var _elm_lang$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {ctor: 'RBNode_elm_builtin', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _elm_lang$core$Dict$ensureBlackRoot = function (dict) {
	var _p23 = dict;
	if ((_p23.ctor === 'RBNode_elm_builtin') && (_p23._0.ctor === 'Red')) {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p23._1, _p23._2, _p23._3, _p23._4);
	} else {
		return dict;
	}
};
var _elm_lang$core$Dict$lessBlackTree = function (dict) {
	var _p24 = dict;
	if (_p24.ctor === 'RBNode_elm_builtin') {
		return A5(
			_elm_lang$core$Dict$RBNode_elm_builtin,
			_elm_lang$core$Dict$lessBlack(_p24._0),
			_p24._1,
			_p24._2,
			_p24._3,
			_p24._4);
	} else {
		return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
	}
};
var _elm_lang$core$Dict$balancedTree = function (col) {
	return function (xk) {
		return function (xv) {
			return function (yk) {
				return function (yv) {
					return function (zk) {
						return function (zv) {
							return function (a) {
								return function (b) {
									return function (c) {
										return function (d) {
											return A5(
												_elm_lang$core$Dict$RBNode_elm_builtin,
												_elm_lang$core$Dict$lessBlack(col),
												yk,
												yv,
												A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, xk, xv, a, b),
												A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, zk, zv, c, d));
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _elm_lang$core$Dict$blacken = function (t) {
	var _p25 = t;
	if (_p25.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
	} else {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p25._1, _p25._2, _p25._3, _p25._4);
	}
};
var _elm_lang$core$Dict$redden = function (t) {
	var _p26 = t;
	if (_p26.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Native_Debug.crash('can\'t make a Leaf red');
	} else {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, _p26._1, _p26._2, _p26._3, _p26._4);
	}
};
var _elm_lang$core$Dict$balanceHelp = function (tree) {
	var _p27 = tree;
	_v36_6:
	do {
		_v36_5:
		do {
			_v36_4:
			do {
				_v36_3:
				do {
					_v36_2:
					do {
						_v36_1:
						do {
							_v36_0:
							do {
								if (_p27.ctor === 'RBNode_elm_builtin') {
									if (_p27._3.ctor === 'RBNode_elm_builtin') {
										if (_p27._4.ctor === 'RBNode_elm_builtin') {
											switch (_p27._3._0.ctor) {
												case 'Red':
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																		break _v36_2;
																	} else {
																		if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																			break _v36_3;
																		} else {
																			break _v36_6;
																		}
																	}
																}
															}
														case 'NBlack':
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																		break _v36_4;
																	} else {
																		break _v36_6;
																	}
																}
															}
														default:
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	break _v36_6;
																}
															}
													}
												case 'NBlack':
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																break _v36_2;
															} else {
																if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																	break _v36_3;
																} else {
																	if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																		break _v36_5;
																	} else {
																		break _v36_6;
																	}
																}
															}
														case 'NBlack':
															if (_p27._0.ctor === 'BBlack') {
																if ((((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																	break _v36_4;
																} else {
																	if ((((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																		break _v36_5;
																	} else {
																		break _v36_6;
																	}
																}
															} else {
																break _v36_6;
															}
														default:
															if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																break _v36_5;
															} else {
																break _v36_6;
															}
													}
												default:
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																break _v36_2;
															} else {
																if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																	break _v36_3;
																} else {
																	break _v36_6;
																}
															}
														case 'NBlack':
															if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																break _v36_4;
															} else {
																break _v36_6;
															}
														default:
															break _v36_6;
													}
											}
										} else {
											switch (_p27._3._0.ctor) {
												case 'Red':
													if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
														break _v36_0;
													} else {
														if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
															break _v36_1;
														} else {
															break _v36_6;
														}
													}
												case 'NBlack':
													if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
														break _v36_5;
													} else {
														break _v36_6;
													}
												default:
													break _v36_6;
											}
										}
									} else {
										if (_p27._4.ctor === 'RBNode_elm_builtin') {
											switch (_p27._4._0.ctor) {
												case 'Red':
													if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
														break _v36_2;
													} else {
														if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
															break _v36_3;
														} else {
															break _v36_6;
														}
													}
												case 'NBlack':
													if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
														break _v36_4;
													} else {
														break _v36_6;
													}
												default:
													break _v36_6;
											}
										} else {
											break _v36_6;
										}
									}
								} else {
									break _v36_6;
								}
							} while(false);
							return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._3._3._1)(_p27._3._3._2)(_p27._3._1)(_p27._3._2)(_p27._1)(_p27._2)(_p27._3._3._3)(_p27._3._3._4)(_p27._3._4)(_p27._4);
						} while(false);
						return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._3._1)(_p27._3._2)(_p27._3._4._1)(_p27._3._4._2)(_p27._1)(_p27._2)(_p27._3._3)(_p27._3._4._3)(_p27._3._4._4)(_p27._4);
					} while(false);
					return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._1)(_p27._2)(_p27._4._3._1)(_p27._4._3._2)(_p27._4._1)(_p27._4._2)(_p27._3)(_p27._4._3._3)(_p27._4._3._4)(_p27._4._4);
				} while(false);
				return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._1)(_p27._2)(_p27._4._1)(_p27._4._2)(_p27._4._4._1)(_p27._4._4._2)(_p27._3)(_p27._4._3)(_p27._4._4._3)(_p27._4._4._4);
			} while(false);
			return A5(
				_elm_lang$core$Dict$RBNode_elm_builtin,
				_elm_lang$core$Dict$Black,
				_p27._4._3._1,
				_p27._4._3._2,
				A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._1, _p27._2, _p27._3, _p27._4._3._3),
				A5(
					_elm_lang$core$Dict$balance,
					_elm_lang$core$Dict$Black,
					_p27._4._1,
					_p27._4._2,
					_p27._4._3._4,
					_elm_lang$core$Dict$redden(_p27._4._4)));
		} while(false);
		return A5(
			_elm_lang$core$Dict$RBNode_elm_builtin,
			_elm_lang$core$Dict$Black,
			_p27._3._4._1,
			_p27._3._4._2,
			A5(
				_elm_lang$core$Dict$balance,
				_elm_lang$core$Dict$Black,
				_p27._3._1,
				_p27._3._2,
				_elm_lang$core$Dict$redden(_p27._3._3),
				_p27._3._4._3),
			A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._1, _p27._2, _p27._3._4._4, _p27._4));
	} while(false);
	return tree;
};
var _elm_lang$core$Dict$balance = F5(
	function (c, k, v, l, r) {
		var tree = A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);
		return _elm_lang$core$Dict$blackish(tree) ? _elm_lang$core$Dict$balanceHelp(tree) : tree;
	});
var _elm_lang$core$Dict$bubble = F5(
	function (c, k, v, l, r) {
		return (_elm_lang$core$Dict$isBBlack(l) || _elm_lang$core$Dict$isBBlack(r)) ? A5(
			_elm_lang$core$Dict$balance,
			_elm_lang$core$Dict$moreBlack(c),
			k,
			v,
			_elm_lang$core$Dict$lessBlackTree(l),
			_elm_lang$core$Dict$lessBlackTree(r)) : A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);
	});
var _elm_lang$core$Dict$removeMax = F5(
	function (c, k, v, l, r) {
		var _p28 = r;
		if (_p28.ctor === 'RBEmpty_elm_builtin') {
			return A3(_elm_lang$core$Dict$rem, c, l, r);
		} else {
			return A5(
				_elm_lang$core$Dict$bubble,
				c,
				k,
				v,
				l,
				A5(_elm_lang$core$Dict$removeMax, _p28._0, _p28._1, _p28._2, _p28._3, _p28._4));
		}
	});
var _elm_lang$core$Dict$rem = F3(
	function (color, left, right) {
		var _p29 = {ctor: '_Tuple2', _0: left, _1: right};
		if (_p29._0.ctor === 'RBEmpty_elm_builtin') {
			if (_p29._1.ctor === 'RBEmpty_elm_builtin') {
				var _p30 = color;
				switch (_p30.ctor) {
					case 'Red':
						return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
					case 'Black':
						return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBBlack);
					default:
						return _elm_lang$core$Native_Debug.crash('cannot have bblack or nblack nodes at this point');
				}
			} else {
				var _p33 = _p29._1._0;
				var _p32 = _p29._0._0;
				var _p31 = {ctor: '_Tuple3', _0: color, _1: _p32, _2: _p33};
				if ((((_p31.ctor === '_Tuple3') && (_p31._0.ctor === 'Black')) && (_p31._1.ctor === 'LBlack')) && (_p31._2.ctor === 'Red')) {
					return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p29._1._1, _p29._1._2, _p29._1._3, _p29._1._4);
				} else {
					return A4(
						_elm_lang$core$Dict$reportRemBug,
						'Black/LBlack/Red',
						color,
						_elm_lang$core$Basics$toString(_p32),
						_elm_lang$core$Basics$toString(_p33));
				}
			}
		} else {
			if (_p29._1.ctor === 'RBEmpty_elm_builtin') {
				var _p36 = _p29._1._0;
				var _p35 = _p29._0._0;
				var _p34 = {ctor: '_Tuple3', _0: color, _1: _p35, _2: _p36};
				if ((((_p34.ctor === '_Tuple3') && (_p34._0.ctor === 'Black')) && (_p34._1.ctor === 'Red')) && (_p34._2.ctor === 'LBlack')) {
					return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p29._0._1, _p29._0._2, _p29._0._3, _p29._0._4);
				} else {
					return A4(
						_elm_lang$core$Dict$reportRemBug,
						'Black/Red/LBlack',
						color,
						_elm_lang$core$Basics$toString(_p35),
						_elm_lang$core$Basics$toString(_p36));
				}
			} else {
				var _p40 = _p29._0._2;
				var _p39 = _p29._0._4;
				var _p38 = _p29._0._1;
				var newLeft = A5(_elm_lang$core$Dict$removeMax, _p29._0._0, _p38, _p40, _p29._0._3, _p39);
				var _p37 = A3(_elm_lang$core$Dict$maxWithDefault, _p38, _p40, _p39);
				var k = _p37._0;
				var v = _p37._1;
				return A5(_elm_lang$core$Dict$bubble, color, k, v, newLeft, right);
			}
		}
	});
var _elm_lang$core$Dict$map = F2(
	function (f, dict) {
		var _p41 = dict;
		if (_p41.ctor === 'RBEmpty_elm_builtin') {
			return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
		} else {
			var _p42 = _p41._1;
			return A5(
				_elm_lang$core$Dict$RBNode_elm_builtin,
				_p41._0,
				_p42,
				A2(f, _p42, _p41._2),
				A2(_elm_lang$core$Dict$map, f, _p41._3),
				A2(_elm_lang$core$Dict$map, f, _p41._4));
		}
	});
var _elm_lang$core$Dict$Same = {ctor: 'Same'};
var _elm_lang$core$Dict$Remove = {ctor: 'Remove'};
var _elm_lang$core$Dict$Insert = {ctor: 'Insert'};
var _elm_lang$core$Dict$update = F3(
	function (k, alter, dict) {
		var up = function (dict) {
			var _p43 = dict;
			if (_p43.ctor === 'RBEmpty_elm_builtin') {
				var _p44 = alter(_elm_lang$core$Maybe$Nothing);
				if (_p44.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: _elm_lang$core$Dict$Same, _1: _elm_lang$core$Dict$empty};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Dict$Insert,
						_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, k, _p44._0, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty)
					};
				}
			} else {
				var _p55 = _p43._2;
				var _p54 = _p43._4;
				var _p53 = _p43._3;
				var _p52 = _p43._1;
				var _p51 = _p43._0;
				var _p45 = A2(_elm_lang$core$Basics$compare, k, _p52);
				switch (_p45.ctor) {
					case 'EQ':
						var _p46 = alter(
							_elm_lang$core$Maybe$Just(_p55));
						if (_p46.ctor === 'Nothing') {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Dict$Remove,
								_1: A3(_elm_lang$core$Dict$rem, _p51, _p53, _p54)
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Dict$Same,
								_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p46._0, _p53, _p54)
							};
						}
					case 'LT':
						var _p47 = up(_p53);
						var flag = _p47._0;
						var newLeft = _p47._1;
						var _p48 = flag;
						switch (_p48.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Same,
									_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p55, newLeft, _p54)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Insert,
									_1: A5(_elm_lang$core$Dict$balance, _p51, _p52, _p55, newLeft, _p54)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Remove,
									_1: A5(_elm_lang$core$Dict$bubble, _p51, _p52, _p55, newLeft, _p54)
								};
						}
					default:
						var _p49 = up(_p54);
						var flag = _p49._0;
						var newRight = _p49._1;
						var _p50 = flag;
						switch (_p50.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Same,
									_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p55, _p53, newRight)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Insert,
									_1: A5(_elm_lang$core$Dict$balance, _p51, _p52, _p55, _p53, newRight)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Remove,
									_1: A5(_elm_lang$core$Dict$bubble, _p51, _p52, _p55, _p53, newRight)
								};
						}
				}
			}
		};
		var _p56 = up(dict);
		var flag = _p56._0;
		var updatedDict = _p56._1;
		var _p57 = flag;
		switch (_p57.ctor) {
			case 'Same':
				return updatedDict;
			case 'Insert':
				return _elm_lang$core$Dict$ensureBlackRoot(updatedDict);
			default:
				return _elm_lang$core$Dict$blacken(updatedDict);
		}
	});
var _elm_lang$core$Dict$insert = F3(
	function (key, value, dict) {
		return A3(
			_elm_lang$core$Dict$update,
			key,
			_elm_lang$core$Basics$always(
				_elm_lang$core$Maybe$Just(value)),
			dict);
	});
var _elm_lang$core$Dict$singleton = F2(
	function (key, value) {
		return A3(_elm_lang$core$Dict$insert, key, value, _elm_lang$core$Dict$empty);
	});
var _elm_lang$core$Dict$union = F2(
	function (t1, t2) {
		return A3(_elm_lang$core$Dict$foldl, _elm_lang$core$Dict$insert, t2, t1);
	});
var _elm_lang$core$Dict$filter = F2(
	function (predicate, dictionary) {
		var add = F3(
			function (key, value, dict) {
				return A2(predicate, key, value) ? A3(_elm_lang$core$Dict$insert, key, value, dict) : dict;
			});
		return A3(_elm_lang$core$Dict$foldl, add, _elm_lang$core$Dict$empty, dictionary);
	});
var _elm_lang$core$Dict$intersect = F2(
	function (t1, t2) {
		return A2(
			_elm_lang$core$Dict$filter,
			F2(
				function (k, _p58) {
					return A2(_elm_lang$core$Dict$member, k, t2);
				}),
			t1);
	});
var _elm_lang$core$Dict$partition = F2(
	function (predicate, dict) {
		var add = F3(
			function (key, value, _p59) {
				var _p60 = _p59;
				var _p62 = _p60._1;
				var _p61 = _p60._0;
				return A2(predicate, key, value) ? {
					ctor: '_Tuple2',
					_0: A3(_elm_lang$core$Dict$insert, key, value, _p61),
					_1: _p62
				} : {
					ctor: '_Tuple2',
					_0: _p61,
					_1: A3(_elm_lang$core$Dict$insert, key, value, _p62)
				};
			});
		return A3(
			_elm_lang$core$Dict$foldl,
			add,
			{ctor: '_Tuple2', _0: _elm_lang$core$Dict$empty, _1: _elm_lang$core$Dict$empty},
			dict);
	});
var _elm_lang$core$Dict$fromList = function (assocs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p63, dict) {
				var _p64 = _p63;
				return A3(_elm_lang$core$Dict$insert, _p64._0, _p64._1, dict);
			}),
		_elm_lang$core$Dict$empty,
		assocs);
};
var _elm_lang$core$Dict$remove = F2(
	function (key, dict) {
		return A3(
			_elm_lang$core$Dict$update,
			key,
			_elm_lang$core$Basics$always(_elm_lang$core$Maybe$Nothing),
			dict);
	});
var _elm_lang$core$Dict$diff = F2(
	function (t1, t2) {
		return A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (k, v, t) {
					return A2(_elm_lang$core$Dict$remove, k, t);
				}),
			t1,
			t2);
	});

var _elm_lang$core$Debug$crash = _elm_lang$core$Native_Debug.crash;
var _elm_lang$core$Debug$log = _elm_lang$core$Native_Debug.log;

var _elm_lang$core$Tuple$mapSecond = F2(
	function (func, _p0) {
		var _p1 = _p0;
		return {
			ctor: '_Tuple2',
			_0: _p1._0,
			_1: func(_p1._1)
		};
	});
var _elm_lang$core$Tuple$mapFirst = F2(
	function (func, _p2) {
		var _p3 = _p2;
		return {
			ctor: '_Tuple2',
			_0: func(_p3._0),
			_1: _p3._1
		};
	});
var _elm_lang$core$Tuple$second = function (_p4) {
	var _p5 = _p4;
	return _p5._1;
};
var _elm_lang$core$Tuple$first = function (_p6) {
	var _p7 = _p6;
	return _p7._0;
};

//import //

var _elm_lang$core$Native_Platform = function() {


// PROGRAMS

function program(impl)
{
	return function(flagDecoder)
	{
		return function(object, moduleName)
		{
			object['worker'] = function worker(flags)
			{
				if (typeof flags !== 'undefined')
				{
					throw new Error(
						'The `' + moduleName + '` module does not need flags.\n'
						+ 'Call ' + moduleName + '.worker() with no arguments and you should be all set!'
					);
				}

				return initialize(
					impl.init,
					impl.update,
					impl.subscriptions,
					renderer
				);
			};
		};
	};
}

function programWithFlags(impl)
{
	return function(flagDecoder)
	{
		return function(object, moduleName)
		{
			object['worker'] = function worker(flags)
			{
				if (typeof flagDecoder === 'undefined')
				{
					throw new Error(
						'Are you trying to sneak a Never value into Elm? Trickster!\n'
						+ 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\n'
						+ 'Use `program` instead if you do not want flags.'
					);
				}

				var result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);
				if (result.ctor === 'Err')
				{
					throw new Error(
						moduleName + '.worker(...) was called with an unexpected argument.\n'
						+ 'I tried to convert it to an Elm value, but ran into this problem:\n\n'
						+ result._0
					);
				}

				return initialize(
					impl.init(result._0),
					impl.update,
					impl.subscriptions,
					renderer
				);
			};
		};
	};
}

function renderer(enqueue, _)
{
	return function(_) {};
}


// HTML TO PROGRAM

function htmlToProgram(vnode)
{
	var emptyBag = batch(_elm_lang$core$Native_List.Nil);
	var noChange = _elm_lang$core$Native_Utils.Tuple2(
		_elm_lang$core$Native_Utils.Tuple0,
		emptyBag
	);

	return _elm_lang$virtual_dom$VirtualDom$program({
		init: noChange,
		view: function(model) { return main; },
		update: F2(function(msg, model) { return noChange; }),
		subscriptions: function (model) { return emptyBag; }
	});
}


// INITIALIZE A PROGRAM

function initialize(init, update, subscriptions, renderer)
{
	// ambient state
	var managers = {};
	var updateView;

	// init and update state in main process
	var initApp = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
		var model = init._0;
		updateView = renderer(enqueue, model);
		var cmds = init._1;
		var subs = subscriptions(model);
		dispatchEffects(managers, cmds, subs);
		callback(_elm_lang$core$Native_Scheduler.succeed(model));
	});

	function onMessage(msg, model)
	{
		return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
			var results = A2(update, msg, model);
			model = results._0;
			updateView(model);
			var cmds = results._1;
			var subs = subscriptions(model);
			dispatchEffects(managers, cmds, subs);
			callback(_elm_lang$core$Native_Scheduler.succeed(model));
		});
	}

	var mainProcess = spawnLoop(initApp, onMessage);

	function enqueue(msg)
	{
		_elm_lang$core$Native_Scheduler.rawSend(mainProcess, msg);
	}

	var ports = setupEffects(managers, enqueue);

	return ports ? { ports: ports } : {};
}


// EFFECT MANAGERS

var effectManagers = {};

function setupEffects(managers, callback)
{
	var ports;

	// setup all necessary effect managers
	for (var key in effectManagers)
	{
		var manager = effectManagers[key];

		if (manager.isForeign)
		{
			ports = ports || {};
			ports[key] = manager.tag === 'cmd'
				? setupOutgoingPort(key)
				: setupIncomingPort(key, callback);
		}

		managers[key] = makeManager(manager, callback);
	}

	return ports;
}

function makeManager(info, callback)
{
	var router = {
		main: callback,
		self: undefined
	};

	var tag = info.tag;
	var onEffects = info.onEffects;
	var onSelfMsg = info.onSelfMsg;

	function onMessage(msg, state)
	{
		if (msg.ctor === 'self')
		{
			return A3(onSelfMsg, router, msg._0, state);
		}

		var fx = msg._0;
		switch (tag)
		{
			case 'cmd':
				return A3(onEffects, router, fx.cmds, state);

			case 'sub':
				return A3(onEffects, router, fx.subs, state);

			case 'fx':
				return A4(onEffects, router, fx.cmds, fx.subs, state);
		}
	}

	var process = spawnLoop(info.init, onMessage);
	router.self = process;
	return process;
}

function sendToApp(router, msg)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		router.main(msg);
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function sendToSelf(router, msg)
{
	return A2(_elm_lang$core$Native_Scheduler.send, router.self, {
		ctor: 'self',
		_0: msg
	});
}


// HELPER for STATEFUL LOOPS

function spawnLoop(init, onMessage)
{
	var andThen = _elm_lang$core$Native_Scheduler.andThen;

	function loop(state)
	{
		var handleMsg = _elm_lang$core$Native_Scheduler.receive(function(msg) {
			return onMessage(msg, state);
		});
		return A2(andThen, loop, handleMsg);
	}

	var task = A2(andThen, loop, init);

	return _elm_lang$core$Native_Scheduler.rawSpawn(task);
}


// BAGS

function leaf(home)
{
	return function(value)
	{
		return {
			type: 'leaf',
			home: home,
			value: value
		};
	};
}

function batch(list)
{
	return {
		type: 'node',
		branches: list
	};
}

function map(tagger, bag)
{
	return {
		type: 'map',
		tagger: tagger,
		tree: bag
	}
}


// PIPE BAGS INTO EFFECT MANAGERS

function dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	gatherEffects(true, cmdBag, effectsDict, null);
	gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		var fx = home in effectsDict
			? effectsDict[home]
			: {
				cmds: _elm_lang$core$Native_List.Nil,
				subs: _elm_lang$core$Native_List.Nil
			};

		_elm_lang$core$Native_Scheduler.rawSend(managers[home], { ctor: 'fx', _0: fx });
	}
}

function gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.type)
	{
		case 'leaf':
			var home = bag.home;
			var effect = toEffect(isCmd, home, taggers, bag.value);
			effectsDict[home] = insert(isCmd, effect, effectsDict[home]);
			return;

		case 'node':
			var list = bag.branches;
			while (list.ctor !== '[]')
			{
				gatherEffects(isCmd, list._0, effectsDict, taggers);
				list = list._1;
			}
			return;

		case 'map':
			gatherEffects(isCmd, bag.tree, effectsDict, {
				tagger: bag.tagger,
				rest: taggers
			});
			return;
	}
}

function toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		var temp = taggers;
		while (temp)
		{
			x = temp.tagger(x);
			temp = temp.rest;
		}
		return x;
	}

	var map = isCmd
		? effectManagers[home].cmdMap
		: effectManagers[home].subMap;

	return A2(map, applyTaggers, value)
}

function insert(isCmd, newEffect, effects)
{
	effects = effects || {
		cmds: _elm_lang$core$Native_List.Nil,
		subs: _elm_lang$core$Native_List.Nil
	};
	if (isCmd)
	{
		effects.cmds = _elm_lang$core$Native_List.Cons(newEffect, effects.cmds);
		return effects;
	}
	effects.subs = _elm_lang$core$Native_List.Cons(newEffect, effects.subs);
	return effects;
}


// PORTS

function checkPortName(name)
{
	if (name in effectManagers)
	{
		throw new Error('There can only be one port named `' + name + '`, but your program has multiple.');
	}
}


// OUTGOING PORTS

function outgoingPort(name, converter)
{
	checkPortName(name);
	effectManagers[name] = {
		tag: 'cmd',
		cmdMap: outgoingPortMap,
		converter: converter,
		isForeign: true
	};
	return leaf(name);
}

var outgoingPortMap = F2(function cmdMap(tagger, value) {
	return value;
});

function setupOutgoingPort(name)
{
	var subs = [];
	var converter = effectManagers[name].converter;

	// CREATE MANAGER

	var init = _elm_lang$core$Native_Scheduler.succeed(null);

	function onEffects(router, cmdList, state)
	{
		while (cmdList.ctor !== '[]')
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = converter(cmdList._0);
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
			cmdList = cmdList._1;
		}
		return init;
	}

	effectManagers[name].init = init;
	effectManagers[name].onEffects = F3(onEffects);

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}


// INCOMING PORTS

function incomingPort(name, converter)
{
	checkPortName(name);
	effectManagers[name] = {
		tag: 'sub',
		subMap: incomingPortMap,
		converter: converter,
		isForeign: true
	};
	return leaf(name);
}

var incomingPortMap = F2(function subMap(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});

function setupIncomingPort(name, callback)
{
	var sentBeforeInit = [];
	var subs = _elm_lang$core$Native_List.Nil;
	var converter = effectManagers[name].converter;
	var currentOnEffects = preInitOnEffects;
	var currentSend = preInitSend;

	// CREATE MANAGER

	var init = _elm_lang$core$Native_Scheduler.succeed(null);

	function preInitOnEffects(router, subList, state)
	{
		var postInitResult = postInitOnEffects(router, subList, state);

		for(var i = 0; i < sentBeforeInit.length; i++)
		{
			postInitSend(sentBeforeInit[i]);
		}

		sentBeforeInit = null; // to release objects held in queue
		currentSend = postInitSend;
		currentOnEffects = postInitOnEffects;
		return postInitResult;
	}

	function postInitOnEffects(router, subList, state)
	{
		subs = subList;
		return init;
	}

	function onEffects(router, subList, state)
	{
		return currentOnEffects(router, subList, state);
	}

	effectManagers[name].init = init;
	effectManagers[name].onEffects = F3(onEffects);

	// PUBLIC API

	function preInitSend(value)
	{
		sentBeforeInit.push(value);
	}

	function postInitSend(value)
	{
		var temp = subs;
		while (temp.ctor !== '[]')
		{
			callback(temp._0(value));
			temp = temp._1;
		}
	}

	function send(incomingValue)
	{
		var result = A2(_elm_lang$core$Json_Decode$decodeValue, converter, incomingValue);
		if (result.ctor === 'Err')
		{
			throw new Error('Trying to send an unexpected type of value through port `' + name + '`:\n' + result._0);
		}

		currentSend(result._0);
	}

	return { send: send };
}

return {
	// routers
	sendToApp: F2(sendToApp),
	sendToSelf: F2(sendToSelf),

	// global setup
	effectManagers: effectManagers,
	outgoingPort: outgoingPort,
	incomingPort: incomingPort,

	htmlToProgram: htmlToProgram,
	program: program,
	programWithFlags: programWithFlags,
	initialize: initialize,

	// effect bags
	leaf: leaf,
	batch: batch,
	map: F2(map)
};

}();

//import Native.Utils //

var _elm_lang$core$Native_Scheduler = function() {

var MAX_STEPS = 10000;


// TASKS

function succeed(value)
{
	return {
		ctor: '_Task_succeed',
		value: value
	};
}

function fail(error)
{
	return {
		ctor: '_Task_fail',
		value: error
	};
}

function nativeBinding(callback)
{
	return {
		ctor: '_Task_nativeBinding',
		callback: callback,
		cancel: null
	};
}

function andThen(callback, task)
{
	return {
		ctor: '_Task_andThen',
		callback: callback,
		task: task
	};
}

function onError(callback, task)
{
	return {
		ctor: '_Task_onError',
		callback: callback,
		task: task
	};
}

function receive(callback)
{
	return {
		ctor: '_Task_receive',
		callback: callback
	};
}


// PROCESSES

function rawSpawn(task)
{
	var process = {
		ctor: '_Process',
		id: _elm_lang$core$Native_Utils.guid(),
		root: task,
		stack: null,
		mailbox: []
	};

	enqueue(process);

	return process;
}

function spawn(task)
{
	return nativeBinding(function(callback) {
		var process = rawSpawn(task);
		callback(succeed(process));
	});
}

function rawSend(process, msg)
{
	process.mailbox.push(msg);
	enqueue(process);
}

function send(process, msg)
{
	return nativeBinding(function(callback) {
		rawSend(process, msg);
		callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function kill(process)
{
	return nativeBinding(function(callback) {
		var root = process.root;
		if (root.ctor === '_Task_nativeBinding' && root.cancel)
		{
			root.cancel();
		}

		process.root = null;

		callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function sleep(time)
{
	return nativeBinding(function(callback) {
		var id = setTimeout(function() {
			callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}


// STEP PROCESSES

function step(numSteps, process)
{
	while (numSteps < MAX_STEPS)
	{
		var ctor = process.root.ctor;

		if (ctor === '_Task_succeed')
		{
			while (process.stack && process.stack.ctor === '_Task_onError')
			{
				process.stack = process.stack.rest;
			}
			if (process.stack === null)
			{
				break;
			}
			process.root = process.stack.callback(process.root.value);
			process.stack = process.stack.rest;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_fail')
		{
			while (process.stack && process.stack.ctor === '_Task_andThen')
			{
				process.stack = process.stack.rest;
			}
			if (process.stack === null)
			{
				break;
			}
			process.root = process.stack.callback(process.root.value);
			process.stack = process.stack.rest;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_andThen')
		{
			process.stack = {
				ctor: '_Task_andThen',
				callback: process.root.callback,
				rest: process.stack
			};
			process.root = process.root.task;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_onError')
		{
			process.stack = {
				ctor: '_Task_onError',
				callback: process.root.callback,
				rest: process.stack
			};
			process.root = process.root.task;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_nativeBinding')
		{
			process.root.cancel = process.root.callback(function(newRoot) {
				process.root = newRoot;
				enqueue(process);
			});

			break;
		}

		if (ctor === '_Task_receive')
		{
			var mailbox = process.mailbox;
			if (mailbox.length === 0)
			{
				break;
			}

			process.root = process.root.callback(mailbox.shift());
			++numSteps;
			continue;
		}

		throw new Error(ctor);
	}

	if (numSteps < MAX_STEPS)
	{
		return numSteps + 1;
	}
	enqueue(process);

	return numSteps;
}


// WORK QUEUE

var working = false;
var workQueue = [];

function enqueue(process)
{
	workQueue.push(process);

	if (!working)
	{
		setTimeout(work, 0);
		working = true;
	}
}

function work()
{
	var numSteps = 0;
	var process;
	while (numSteps < MAX_STEPS && (process = workQueue.shift()))
	{
		if (process.root)
		{
			numSteps = step(numSteps, process);
		}
	}
	if (!process)
	{
		working = false;
		return;
	}
	setTimeout(work, 0);
}


return {
	succeed: succeed,
	fail: fail,
	nativeBinding: nativeBinding,
	andThen: F2(andThen),
	onError: F2(onError),
	receive: receive,

	spawn: spawn,
	kill: kill,
	sleep: sleep,
	send: F2(send),

	rawSpawn: rawSpawn,
	rawSend: rawSend
};

}();
var _elm_lang$core$Platform_Cmd$batch = _elm_lang$core$Native_Platform.batch;
var _elm_lang$core$Platform_Cmd$none = _elm_lang$core$Platform_Cmd$batch(
	{ctor: '[]'});
var _elm_lang$core$Platform_Cmd_ops = _elm_lang$core$Platform_Cmd_ops || {};
_elm_lang$core$Platform_Cmd_ops['!'] = F2(
	function (model, commands) {
		return {
			ctor: '_Tuple2',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$batch(commands)
		};
	});
var _elm_lang$core$Platform_Cmd$map = _elm_lang$core$Native_Platform.map;
var _elm_lang$core$Platform_Cmd$Cmd = {ctor: 'Cmd'};

var _elm_lang$core$Platform_Sub$batch = _elm_lang$core$Native_Platform.batch;
var _elm_lang$core$Platform_Sub$none = _elm_lang$core$Platform_Sub$batch(
	{ctor: '[]'});
var _elm_lang$core$Platform_Sub$map = _elm_lang$core$Native_Platform.map;
var _elm_lang$core$Platform_Sub$Sub = {ctor: 'Sub'};

var _elm_lang$core$Platform$hack = _elm_lang$core$Native_Scheduler.succeed;
var _elm_lang$core$Platform$sendToSelf = _elm_lang$core$Native_Platform.sendToSelf;
var _elm_lang$core$Platform$sendToApp = _elm_lang$core$Native_Platform.sendToApp;
var _elm_lang$core$Platform$programWithFlags = _elm_lang$core$Native_Platform.programWithFlags;
var _elm_lang$core$Platform$program = _elm_lang$core$Native_Platform.program;
var _elm_lang$core$Platform$Program = {ctor: 'Program'};
var _elm_lang$core$Platform$Task = {ctor: 'Task'};
var _elm_lang$core$Platform$ProcessId = {ctor: 'ProcessId'};
var _elm_lang$core$Platform$Router = {ctor: 'Router'};

var _eeue56$elm_all_dict$EveryDict$foldr = F3(
	function (f, acc, t) {
		foldr:
		while (true) {
			var _p0 = t;
			if (_p0.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v1 = f,
					_v2 = A3(
					f,
					_p0._1,
					_p0._2,
					A3(_eeue56$elm_all_dict$EveryDict$foldr, f, acc, _p0._4)),
					_v3 = _p0._3;
				f = _v1;
				acc = _v2;
				t = _v3;
				continue foldr;
			}
		}
	});
var _eeue56$elm_all_dict$EveryDict$keys = function (dict) {
	return A3(
		_eeue56$elm_all_dict$EveryDict$foldr,
		F3(
			function (key, value, keyList) {
				return {ctor: '::', _0: key, _1: keyList};
			}),
		{ctor: '[]'},
		dict);
};
var _eeue56$elm_all_dict$EveryDict$values = function (dict) {
	return A3(
		_eeue56$elm_all_dict$EveryDict$foldr,
		F3(
			function (key, value, valueList) {
				return {ctor: '::', _0: value, _1: valueList};
			}),
		{ctor: '[]'},
		dict);
};
var _eeue56$elm_all_dict$EveryDict$toList = function (dict) {
	return A3(
		_eeue56$elm_all_dict$EveryDict$foldr,
		F3(
			function (key, value, list) {
				return {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: key, _1: value},
					_1: list
				};
			}),
		{ctor: '[]'},
		dict);
};
var _eeue56$elm_all_dict$EveryDict$foldl = F3(
	function (f, acc, dict) {
		foldl:
		while (true) {
			var _p1 = dict;
			if (_p1.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v5 = f,
					_v6 = A3(
					f,
					_p1._1,
					_p1._2,
					A3(_eeue56$elm_all_dict$EveryDict$foldl, f, acc, _p1._3)),
					_v7 = _p1._4;
				f = _v5;
				acc = _v6;
				dict = _v7;
				continue foldl;
			}
		}
	});
var _eeue56$elm_all_dict$EveryDict$isBBlack = function (dict) {
	var _p2 = dict;
	_v8_2:
	do {
		if (_p2.ctor === 'RBNode_elm_builtin') {
			if (_p2._0.ctor === 'BBlack') {
				return true;
			} else {
				break _v8_2;
			}
		} else {
			if (_p2._0.ctor === 'LBBlack') {
				return true;
			} else {
				break _v8_2;
			}
		}
	} while(false);
	return false;
};
var _eeue56$elm_all_dict$EveryDict$showFlag = function (f) {
	var _p3 = f;
	switch (_p3.ctor) {
		case 'Insert':
			return 'Insert';
		case 'Remove':
			return 'Remove';
		default:
			return 'Same';
	}
};
var _eeue56$elm_all_dict$EveryDict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			var _p4 = dict;
			if (_p4.ctor === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var _v11 = A2(_eeue56$elm_all_dict$EveryDict$sizeHelp, n + 1, _p4._4),
					_v12 = _p4._3;
				n = _v11;
				dict = _v12;
				continue sizeHelp;
			}
		}
	});
var _eeue56$elm_all_dict$EveryDict$size = function (dict) {
	return A2(_eeue56$elm_all_dict$EveryDict$sizeHelp, 0, dict);
};
var _eeue56$elm_all_dict$EveryDict$isEmpty = function (dict) {
	var _p5 = dict;
	if (_p5.ctor === 'RBEmpty_elm_builtin') {
		return true;
	} else {
		return false;
	}
};
var _eeue56$elm_all_dict$EveryDict$max = function (dict) {
	max:
	while (true) {
		var _p6 = dict;
		if (_p6.ctor === 'RBNode_elm_builtin') {
			if (_p6._4.ctor === 'RBEmpty_elm_builtin') {
				return {ctor: '_Tuple2', _0: _p6._1, _1: _p6._2};
			} else {
				var _v15 = _p6._4;
				dict = _v15;
				continue max;
			}
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'EveryDict',
				{
					start: {line: 127, column: 5},
					end: {line: 135, column: 51}
				},
				_p6)('(max Empty) is not defined');
		}
	}
};
var _eeue56$elm_all_dict$EveryDict$min = function (dict) {
	min:
	while (true) {
		var _p8 = dict;
		if (_p8.ctor === 'RBNode_elm_builtin') {
			if ((_p8._3.ctor === 'RBEmpty_elm_builtin') && (_p8._3._0.ctor === 'LBlack')) {
				return {ctor: '_Tuple2', _0: _p8._1, _1: _p8._2};
			} else {
				var _v17 = _p8._3;
				dict = _v17;
				continue min;
			}
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'EveryDict',
				{
					start: {line: 115, column: 5},
					end: {line: 123, column: 51}
				},
				_p8)('(min Empty) is not defined');
		}
	}
};
var _eeue56$elm_all_dict$EveryDict$eq = F2(
	function (first, second) {
		return _elm_lang$core$Native_Utils.eq(
			_eeue56$elm_all_dict$EveryDict$toList(first),
			_eeue56$elm_all_dict$EveryDict$toList(second));
	});
var _eeue56$elm_all_dict$EveryDict$ord = _elm_lang$core$Basics$toString;
var _eeue56$elm_all_dict$EveryDict$get_ = F2(
	function (targetKey, dict) {
		get_:
		while (true) {
			var _p10 = dict;
			if (_p10.ctor === 'RBEmpty_elm_builtin') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p11 = A2(
					_elm_lang$core$Basics$compare,
					_eeue56$elm_all_dict$EveryDict$ord(targetKey),
					_eeue56$elm_all_dict$EveryDict$ord(_p10._1));
				switch (_p11.ctor) {
					case 'LT':
						var _v20 = targetKey,
							_v21 = _p10._3;
						targetKey = _v20;
						dict = _v21;
						continue get_;
					case 'EQ':
						return _elm_lang$core$Maybe$Just(_p10._2);
					default:
						var _v22 = targetKey,
							_v23 = _p10._4;
						targetKey = _v22;
						dict = _v23;
						continue get_;
				}
			}
		}
	});
var _eeue56$elm_all_dict$EveryDict$get = F2(
	function (targetKey, dict) {
		return A2(_eeue56$elm_all_dict$EveryDict$get_, targetKey, dict);
	});
var _eeue56$elm_all_dict$EveryDict$member = F2(
	function (key, dict) {
		var _p12 = A2(_eeue56$elm_all_dict$EveryDict$get_, key, dict);
		if (_p12.ctor === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var _eeue56$elm_all_dict$EveryDict$showLColor = function (color) {
	var _p13 = color;
	if (_p13.ctor === 'LBlack') {
		return 'LBlack';
	} else {
		return 'LBBlack';
	}
};
var _eeue56$elm_all_dict$EveryDict$showNColor = function (c) {
	var _p14 = c;
	switch (_p14.ctor) {
		case 'Red':
			return 'Red';
		case 'Black':
			return 'Black';
		case 'BBlack':
			return 'BBlack';
		default:
			return 'NBlack';
	}
};
var _eeue56$elm_all_dict$EveryDict$reportRemBug = F4(
	function (msg, c, lgot, rgot) {
		return _elm_lang$core$Native_Utils.crash(
			'EveryDict',
			{
				start: {line: 320, column: 3},
				end: {line: 320, column: 14}
			})(
			_elm_lang$core$String$concat(
				{
					ctor: '::',
					_0: 'Internal red-black tree invariant violated, expected ',
					_1: {
						ctor: '::',
						_0: msg,
						_1: {
							ctor: '::',
							_0: ' and got ',
							_1: {
								ctor: '::',
								_0: _eeue56$elm_all_dict$EveryDict$showNColor(c),
								_1: {
									ctor: '::',
									_0: '/',
									_1: {
										ctor: '::',
										_0: lgot,
										_1: {
											ctor: '::',
											_0: '/',
											_1: {
												ctor: '::',
												_0: rgot,
												_1: {
													ctor: '::',
													_0: '\nPlease report this bug to <https://github.com/elm-lang/Elm/issues>',
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}));
	});
var _eeue56$elm_all_dict$EveryDict$NBlack = {ctor: 'NBlack'};
var _eeue56$elm_all_dict$EveryDict$BBlack = {ctor: 'BBlack'};
var _eeue56$elm_all_dict$EveryDict$Black = {ctor: 'Black'};
var _eeue56$elm_all_dict$EveryDict$blackish = function (t) {
	var _p15 = t;
	if (_p15.ctor === 'RBNode_elm_builtin') {
		var _p16 = _p15._0;
		return _elm_lang$core$Native_Utils.eq(_p16, _eeue56$elm_all_dict$EveryDict$Black) || _elm_lang$core$Native_Utils.eq(_p16, _eeue56$elm_all_dict$EveryDict$BBlack);
	} else {
		return true;
	}
};
var _eeue56$elm_all_dict$EveryDict$Red = {ctor: 'Red'};
var _eeue56$elm_all_dict$EveryDict$moreBlack = function (color) {
	var _p17 = color;
	switch (_p17.ctor) {
		case 'Black':
			return _eeue56$elm_all_dict$EveryDict$BBlack;
		case 'Red':
			return _eeue56$elm_all_dict$EveryDict$Black;
		case 'NBlack':
			return _eeue56$elm_all_dict$EveryDict$Red;
		default:
			return _elm_lang$core$Native_Utils.crashCase(
				'EveryDict',
				{
					start: {line: 294, column: 5},
					end: {line: 298, column: 73}
				},
				_p17)('Can\'t make a double black node more black!');
	}
};
var _eeue56$elm_all_dict$EveryDict$lessBlack = function (color) {
	var _p19 = color;
	switch (_p19.ctor) {
		case 'BBlack':
			return _eeue56$elm_all_dict$EveryDict$Black;
		case 'Black':
			return _eeue56$elm_all_dict$EveryDict$Red;
		case 'Red':
			return _eeue56$elm_all_dict$EveryDict$NBlack;
		default:
			return _elm_lang$core$Native_Utils.crashCase(
				'EveryDict',
				{
					start: {line: 303, column: 5},
					end: {line: 307, column: 75}
				},
				_p19)('Can\'t make a negative black node less black!');
	}
};
var _eeue56$elm_all_dict$EveryDict$LBBlack = {ctor: 'LBBlack'};
var _eeue56$elm_all_dict$EveryDict$LBlack = {ctor: 'LBlack'};
var _eeue56$elm_all_dict$EveryDict$RBEmpty_elm_builtin = function (a) {
	return {ctor: 'RBEmpty_elm_builtin', _0: a};
};
var _eeue56$elm_all_dict$EveryDict$empty = _eeue56$elm_all_dict$EveryDict$RBEmpty_elm_builtin(_eeue56$elm_all_dict$EveryDict$LBlack);
var _eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {ctor: 'RBNode_elm_builtin', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _eeue56$elm_all_dict$EveryDict$ensureBlackRoot = function (dict) {
	var _p21 = dict;
	if (_p21.ctor === 'RBNode_elm_builtin') {
		switch (_p21._0.ctor) {
			case 'Red':
				return A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Black, _p21._1, _p21._2, _p21._3, _p21._4);
			case 'Black':
				return dict;
			default:
				return dict;
		}
	} else {
		return dict;
	}
};
var _eeue56$elm_all_dict$EveryDict$lessBlackTree = function (dict) {
	var _p22 = dict;
	if (_p22.ctor === 'RBNode_elm_builtin') {
		return A5(
			_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin,
			_eeue56$elm_all_dict$EveryDict$lessBlack(_p22._0),
			_p22._1,
			_p22._2,
			_p22._3,
			_p22._4);
	} else {
		if (_p22._0.ctor === 'LBBlack') {
			return _eeue56$elm_all_dict$EveryDict$RBEmpty_elm_builtin(_eeue56$elm_all_dict$EveryDict$LBlack);
		} else {
			return dict;
		}
	}
};
var _eeue56$elm_all_dict$EveryDict$blacken = function (t) {
	var _p23 = t;
	if (_p23.ctor === 'RBEmpty_elm_builtin') {
		return _eeue56$elm_all_dict$EveryDict$RBEmpty_elm_builtin(_eeue56$elm_all_dict$EveryDict$LBlack);
	} else {
		return A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Black, _p23._1, _p23._2, _p23._3, _p23._4);
	}
};
var _eeue56$elm_all_dict$EveryDict$redden = function (t) {
	var _p24 = t;
	if (_p24.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Native_Utils.crashCase(
			'EveryDict',
			{
				start: {line: 440, column: 5},
				end: {line: 442, column: 69}
			},
			_p24)('can\'t make a Leaf red');
	} else {
		return A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Red, _p24._1, _p24._2, _p24._3, _p24._4);
	}
};
var _eeue56$elm_all_dict$EveryDict$balance_node = function (t) {
	var assemble = function (col) {
		return function (xk) {
			return function (xv) {
				return function (yk) {
					return function (yv) {
						return function (zk) {
							return function (zv) {
								return function (a) {
									return function (b) {
										return function (c) {
											return function (d) {
												return A5(
													_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin,
													_eeue56$elm_all_dict$EveryDict$lessBlack(col),
													yk,
													yv,
													A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Black, xk, xv, a, b),
													A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Black, zk, zv, c, d));
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
	if (_eeue56$elm_all_dict$EveryDict$blackish(t)) {
		var _p26 = t;
		_v34_6:
		do {
			_v34_5:
			do {
				_v34_4:
				do {
					_v34_3:
					do {
						_v34_2:
						do {
							_v34_1:
							do {
								_v34_0:
								do {
									if (_p26.ctor === 'RBNode_elm_builtin') {
										if (_p26._3.ctor === 'RBNode_elm_builtin') {
											if (_p26._4.ctor === 'RBNode_elm_builtin') {
												switch (_p26._3._0.ctor) {
													case 'Red':
														switch (_p26._4._0.ctor) {
															case 'Red':
																if ((_p26._3._3.ctor === 'RBNode_elm_builtin') && (_p26._3._3._0.ctor === 'Red')) {
																	break _v34_0;
																} else {
																	if ((_p26._3._4.ctor === 'RBNode_elm_builtin') && (_p26._3._4._0.ctor === 'Red')) {
																		break _v34_1;
																	} else {
																		if ((_p26._4._3.ctor === 'RBNode_elm_builtin') && (_p26._4._3._0.ctor === 'Red')) {
																			break _v34_2;
																		} else {
																			if ((_p26._4._4.ctor === 'RBNode_elm_builtin') && (_p26._4._4._0.ctor === 'Red')) {
																				break _v34_3;
																			} else {
																				break _v34_6;
																			}
																		}
																	}
																}
															case 'NBlack':
																if ((_p26._3._3.ctor === 'RBNode_elm_builtin') && (_p26._3._3._0.ctor === 'Red')) {
																	break _v34_0;
																} else {
																	if ((_p26._3._4.ctor === 'RBNode_elm_builtin') && (_p26._3._4._0.ctor === 'Red')) {
																		break _v34_1;
																	} else {
																		if (((_p26._0.ctor === 'BBlack') && (_p26._4._3.ctor === 'RBNode_elm_builtin')) && (_p26._4._3._0.ctor === 'Black')) {
																			break _v34_4;
																		} else {
																			break _v34_6;
																		}
																	}
																}
															default:
																if ((_p26._3._3.ctor === 'RBNode_elm_builtin') && (_p26._3._3._0.ctor === 'Red')) {
																	break _v34_0;
																} else {
																	if ((_p26._3._4.ctor === 'RBNode_elm_builtin') && (_p26._3._4._0.ctor === 'Red')) {
																		break _v34_1;
																	} else {
																		break _v34_6;
																	}
																}
														}
													case 'NBlack':
														switch (_p26._4._0.ctor) {
															case 'Red':
																if ((_p26._4._3.ctor === 'RBNode_elm_builtin') && (_p26._4._3._0.ctor === 'Red')) {
																	break _v34_2;
																} else {
																	if ((_p26._4._4.ctor === 'RBNode_elm_builtin') && (_p26._4._4._0.ctor === 'Red')) {
																		break _v34_3;
																	} else {
																		if (((_p26._0.ctor === 'BBlack') && (_p26._3._4.ctor === 'RBNode_elm_builtin')) && (_p26._3._4._0.ctor === 'Black')) {
																			break _v34_5;
																		} else {
																			break _v34_6;
																		}
																	}
																}
															case 'NBlack':
																if (_p26._0.ctor === 'BBlack') {
																	if ((_p26._4._3.ctor === 'RBNode_elm_builtin') && (_p26._4._3._0.ctor === 'Black')) {
																		break _v34_4;
																	} else {
																		if ((_p26._3._4.ctor === 'RBNode_elm_builtin') && (_p26._3._4._0.ctor === 'Black')) {
																			break _v34_5;
																		} else {
																			break _v34_6;
																		}
																	}
																} else {
																	break _v34_6;
																}
															default:
																if (((_p26._0.ctor === 'BBlack') && (_p26._3._4.ctor === 'RBNode_elm_builtin')) && (_p26._3._4._0.ctor === 'Black')) {
																	break _v34_5;
																} else {
																	break _v34_6;
																}
														}
													default:
														switch (_p26._4._0.ctor) {
															case 'Red':
																if ((_p26._4._3.ctor === 'RBNode_elm_builtin') && (_p26._4._3._0.ctor === 'Red')) {
																	break _v34_2;
																} else {
																	if ((_p26._4._4.ctor === 'RBNode_elm_builtin') && (_p26._4._4._0.ctor === 'Red')) {
																		break _v34_3;
																	} else {
																		break _v34_6;
																	}
																}
															case 'NBlack':
																if (((_p26._0.ctor === 'BBlack') && (_p26._4._3.ctor === 'RBNode_elm_builtin')) && (_p26._4._3._0.ctor === 'Black')) {
																	break _v34_4;
																} else {
																	break _v34_6;
																}
															default:
																break _v34_6;
														}
												}
											} else {
												switch (_p26._3._0.ctor) {
													case 'Red':
														if ((_p26._3._3.ctor === 'RBNode_elm_builtin') && (_p26._3._3._0.ctor === 'Red')) {
															break _v34_0;
														} else {
															if ((_p26._3._4.ctor === 'RBNode_elm_builtin') && (_p26._3._4._0.ctor === 'Red')) {
																break _v34_1;
															} else {
																break _v34_6;
															}
														}
													case 'NBlack':
														if (((_p26._0.ctor === 'BBlack') && (_p26._3._4.ctor === 'RBNode_elm_builtin')) && (_p26._3._4._0.ctor === 'Black')) {
															break _v34_5;
														} else {
															break _v34_6;
														}
													default:
														break _v34_6;
												}
											}
										} else {
											if (_p26._4.ctor === 'RBNode_elm_builtin') {
												switch (_p26._4._0.ctor) {
													case 'Red':
														if ((_p26._4._3.ctor === 'RBNode_elm_builtin') && (_p26._4._3._0.ctor === 'Red')) {
															break _v34_2;
														} else {
															if ((_p26._4._4.ctor === 'RBNode_elm_builtin') && (_p26._4._4._0.ctor === 'Red')) {
																break _v34_3;
															} else {
																break _v34_6;
															}
														}
													case 'NBlack':
														if (((_p26._0.ctor === 'BBlack') && (_p26._4._3.ctor === 'RBNode_elm_builtin')) && (_p26._4._3._0.ctor === 'Black')) {
															break _v34_4;
														} else {
															break _v34_6;
														}
													default:
														break _v34_6;
												}
											} else {
												break _v34_6;
											}
										}
									} else {
										break _v34_6;
									}
								} while(false);
								return assemble(_p26._0)(_p26._3._3._1)(_p26._3._3._2)(_p26._3._1)(_p26._3._2)(_p26._1)(_p26._2)(_p26._3._3._3)(_p26._3._3._4)(_p26._3._4)(_p26._4);
							} while(false);
							return assemble(_p26._0)(_p26._3._1)(_p26._3._2)(_p26._3._4._1)(_p26._3._4._2)(_p26._1)(_p26._2)(_p26._3._3)(_p26._3._4._3)(_p26._3._4._4)(_p26._4);
						} while(false);
						return assemble(_p26._0)(_p26._1)(_p26._2)(_p26._4._3._1)(_p26._4._3._2)(_p26._4._1)(_p26._4._2)(_p26._3)(_p26._4._3._3)(_p26._4._3._4)(_p26._4._4);
					} while(false);
					return assemble(_p26._0)(_p26._1)(_p26._2)(_p26._4._1)(_p26._4._2)(_p26._4._4._1)(_p26._4._4._2)(_p26._3)(_p26._4._3)(_p26._4._4._3)(_p26._4._4._4);
				} while(false);
				var _p28 = _p26._4._4;
				var _p27 = _p28;
				if ((_p27.ctor === 'RBNode_elm_builtin') && (_p27._0.ctor === 'Black')) {
					return A5(
						_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin,
						_eeue56$elm_all_dict$EveryDict$Black,
						_p26._4._3._1,
						_p26._4._3._2,
						A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Black, _p26._1, _p26._2, _p26._3, _p26._4._3._3),
						A5(
							_eeue56$elm_all_dict$EveryDict$balance,
							_eeue56$elm_all_dict$EveryDict$Black,
							_p26._4._1,
							_p26._4._2,
							_p26._4._3._4,
							_eeue56$elm_all_dict$EveryDict$redden(_p28)));
				} else {
					return t;
				}
			} while(false);
			var _p30 = _p26._3._3;
			var _p29 = _p30;
			if ((_p29.ctor === 'RBNode_elm_builtin') && (_p29._0.ctor === 'Black')) {
				return A5(
					_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin,
					_eeue56$elm_all_dict$EveryDict$Black,
					_p26._3._4._1,
					_p26._3._4._2,
					A5(
						_eeue56$elm_all_dict$EveryDict$balance,
						_eeue56$elm_all_dict$EveryDict$Black,
						_p26._3._1,
						_p26._3._2,
						_eeue56$elm_all_dict$EveryDict$redden(_p30),
						_p26._3._4._3),
					A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Black, _p26._1, _p26._2, _p26._3._4._4, _p26._4));
			} else {
				return t;
			}
		} while(false);
		return t;
	} else {
		return t;
	}
};
var _eeue56$elm_all_dict$EveryDict$balance = F5(
	function (c, k, v, l, r) {
		return _eeue56$elm_all_dict$EveryDict$balance_node(
			A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, c, k, v, l, r));
	});
var _eeue56$elm_all_dict$EveryDict$bubble = F5(
	function (c, k, v, l, r) {
		return (_eeue56$elm_all_dict$EveryDict$isBBlack(l) || _eeue56$elm_all_dict$EveryDict$isBBlack(r)) ? A5(
			_eeue56$elm_all_dict$EveryDict$balance,
			_eeue56$elm_all_dict$EveryDict$moreBlack(c),
			k,
			v,
			_eeue56$elm_all_dict$EveryDict$lessBlackTree(l),
			_eeue56$elm_all_dict$EveryDict$lessBlackTree(r)) : A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, c, k, v, l, r);
	});
var _eeue56$elm_all_dict$EveryDict$remove_max = F5(
	function (c, k, v, l, r) {
		var _p31 = r;
		if (_p31.ctor === 'RBEmpty_elm_builtin') {
			return A3(_eeue56$elm_all_dict$EveryDict$rem, c, l, r);
		} else {
			return A5(
				_eeue56$elm_all_dict$EveryDict$bubble,
				c,
				k,
				v,
				l,
				A5(_eeue56$elm_all_dict$EveryDict$remove_max, _p31._0, _p31._1, _p31._2, _p31._3, _p31._4));
		}
	});
var _eeue56$elm_all_dict$EveryDict$rem = F3(
	function (c, l, r) {
		var _p32 = {ctor: '_Tuple2', _0: l, _1: r};
		if (_p32._0.ctor === 'RBEmpty_elm_builtin') {
			if (_p32._1.ctor === 'RBEmpty_elm_builtin') {
				var _p33 = c;
				switch (_p33.ctor) {
					case 'Red':
						return _eeue56$elm_all_dict$EveryDict$RBEmpty_elm_builtin(_eeue56$elm_all_dict$EveryDict$LBlack);
					case 'Black':
						return _eeue56$elm_all_dict$EveryDict$RBEmpty_elm_builtin(_eeue56$elm_all_dict$EveryDict$LBBlack);
					default:
						return _eeue56$elm_all_dict$Native_Debug.crash('cannot have bblack or nblack nodes at this point');
				}
			} else {
				var _p36 = _p32._1._0;
				var _p35 = _p32._0._0;
				var _p34 = {ctor: '_Tuple3', _0: c, _1: _p35, _2: _p36};
				if ((((_p34.ctor === '_Tuple3') && (_p34._0.ctor === 'Black')) && (_p34._1.ctor === 'LBlack')) && (_p34._2.ctor === 'Red')) {
					return A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Black, _p32._1._1, _p32._1._2, _p32._1._3, _p32._1._4);
				} else {
					return A4(
						_eeue56$elm_all_dict$EveryDict$reportRemBug,
						'Black/LBlack/Red',
						c,
						_eeue56$elm_all_dict$EveryDict$showLColor(_p35),
						_eeue56$elm_all_dict$EveryDict$showNColor(_p36));
				}
			}
		} else {
			if (_p32._1.ctor === 'RBEmpty_elm_builtin') {
				var _p39 = _p32._1._0;
				var _p38 = _p32._0._0;
				var _p37 = {ctor: '_Tuple3', _0: c, _1: _p38, _2: _p39};
				if ((((_p37.ctor === '_Tuple3') && (_p37._0.ctor === 'Black')) && (_p37._1.ctor === 'Red')) && (_p37._2.ctor === 'LBlack')) {
					return A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Black, _p32._0._1, _p32._0._2, _p32._0._3, _p32._0._4);
				} else {
					return A4(
						_eeue56$elm_all_dict$EveryDict$reportRemBug,
						'Black/Red/LBlack',
						c,
						_eeue56$elm_all_dict$EveryDict$showNColor(_p38),
						_eeue56$elm_all_dict$EveryDict$showLColor(_p39));
				}
			} else {
				var _p45 = _p32._0._2;
				var _p44 = _p32._0._4;
				var _p43 = _p32._0._3;
				var _p42 = _p32._0._1;
				var _p41 = _p32._0._0;
				var l_ = A5(_eeue56$elm_all_dict$EveryDict$remove_max, _p41, _p42, _p45, _p43, _p44);
				var r = A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _p32._1._0, _p32._1._1, _p32._1._2, _p32._1._3, _p32._1._4);
				var l = A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _p41, _p42, _p45, _p43, _p44);
				var _p40 = _eeue56$elm_all_dict$EveryDict$max(l);
				var k = _p40._0;
				var v = _p40._1;
				return A5(_eeue56$elm_all_dict$EveryDict$bubble, c, k, v, l_, r);
			}
		}
	});
var _eeue56$elm_all_dict$EveryDict$map = F2(
	function (f, dict) {
		var _p46 = dict;
		if (_p46.ctor === 'RBEmpty_elm_builtin') {
			return _eeue56$elm_all_dict$EveryDict$RBEmpty_elm_builtin(_p46._0);
		} else {
			var _p47 = _p46._1;
			return A5(
				_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin,
				_p46._0,
				_p47,
				A2(f, _p47, _p46._2),
				A2(_eeue56$elm_all_dict$EveryDict$map, f, _p46._3),
				A2(_eeue56$elm_all_dict$EveryDict$map, f, _p46._4));
		}
	});
var _eeue56$elm_all_dict$EveryDict$Same = {ctor: 'Same'};
var _eeue56$elm_all_dict$EveryDict$Remove = {ctor: 'Remove'};
var _eeue56$elm_all_dict$EveryDict$Insert = {ctor: 'Insert'};
var _eeue56$elm_all_dict$EveryDict$update = F3(
	function (k, alter, dict) {
		var up = function (dict) {
			var _p48 = dict;
			if (_p48.ctor === 'RBEmpty_elm_builtin') {
				var _p49 = alter(_elm_lang$core$Maybe$Nothing);
				if (_p49.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: _eeue56$elm_all_dict$EveryDict$Same, _1: _eeue56$elm_all_dict$EveryDict$empty};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _eeue56$elm_all_dict$EveryDict$Insert,
						_1: A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Red, k, _p49._0, _eeue56$elm_all_dict$EveryDict$empty, _eeue56$elm_all_dict$EveryDict$empty)
					};
				}
			} else {
				var _p60 = _p48._2;
				var _p59 = _p48._4;
				var _p58 = _p48._3;
				var _p57 = _p48._1;
				var _p56 = _p48._0;
				var _p50 = A2(
					_elm_lang$core$Basics$compare,
					_eeue56$elm_all_dict$EveryDict$ord(k),
					_eeue56$elm_all_dict$EveryDict$ord(_p57));
				switch (_p50.ctor) {
					case 'EQ':
						var _p51 = alter(
							_elm_lang$core$Maybe$Just(_p60));
						if (_p51.ctor === 'Nothing') {
							return {
								ctor: '_Tuple2',
								_0: _eeue56$elm_all_dict$EveryDict$Remove,
								_1: A3(_eeue56$elm_all_dict$EveryDict$rem, _p56, _p58, _p59)
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: _eeue56$elm_all_dict$EveryDict$Same,
								_1: A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _p56, _p57, _p51._0, _p58, _p59)
							};
						}
					case 'LT':
						var _p52 = up(_p58);
						var flag = _p52._0;
						var newLeft = _p52._1;
						var _p53 = flag;
						switch (_p53.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$EveryDict$Same,
									_1: A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _p56, _p57, _p60, newLeft, _p59)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$EveryDict$Insert,
									_1: A5(_eeue56$elm_all_dict$EveryDict$balance, _p56, _p57, _p60, newLeft, _p59)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$EveryDict$Remove,
									_1: A5(_eeue56$elm_all_dict$EveryDict$bubble, _p56, _p57, _p60, newLeft, _p59)
								};
						}
					default:
						var _p54 = up(_p59);
						var flag = _p54._0;
						var newRight = _p54._1;
						var _p55 = flag;
						switch (_p55.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$EveryDict$Same,
									_1: A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _p56, _p57, _p60, _p58, newRight)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$EveryDict$Insert,
									_1: A5(_eeue56$elm_all_dict$EveryDict$balance, _p56, _p57, _p60, _p58, newRight)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$EveryDict$Remove,
									_1: A5(_eeue56$elm_all_dict$EveryDict$bubble, _p56, _p57, _p60, _p58, newRight)
								};
						}
				}
			}
		};
		var _p61 = up(dict);
		var flag = _p61._0;
		var updatedDict = _p61._1;
		var _p62 = flag;
		switch (_p62.ctor) {
			case 'Same':
				return updatedDict;
			case 'Insert':
				return _eeue56$elm_all_dict$EveryDict$ensureBlackRoot(updatedDict);
			default:
				return _eeue56$elm_all_dict$EveryDict$blacken(updatedDict);
		}
	});
var _eeue56$elm_all_dict$EveryDict$insert = F3(
	function (key, value, dict) {
		return A3(
			_eeue56$elm_all_dict$EveryDict$update,
			key,
			_elm_lang$core$Basics$always(
				_elm_lang$core$Maybe$Just(value)),
			dict);
	});
var _eeue56$elm_all_dict$EveryDict$singleton = F2(
	function (key, value) {
		return A3(_eeue56$elm_all_dict$EveryDict$insert, key, value, _eeue56$elm_all_dict$EveryDict$empty);
	});
var _eeue56$elm_all_dict$EveryDict$union = F2(
	function (t1, t2) {
		return A3(_eeue56$elm_all_dict$EveryDict$foldl, _eeue56$elm_all_dict$EveryDict$insert, t2, t1);
	});
var _eeue56$elm_all_dict$EveryDict$fromList = function (assocs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p63, dict) {
				var _p64 = _p63;
				return A3(_eeue56$elm_all_dict$EveryDict$insert, _p64._0, _p64._1, dict);
			}),
		_eeue56$elm_all_dict$EveryDict$empty,
		assocs);
};
var _eeue56$elm_all_dict$EveryDict$filter = F2(
	function (predicate, dictionary) {
		var add = F3(
			function (key, value, dict) {
				return A2(predicate, key, value) ? A3(_eeue56$elm_all_dict$EveryDict$insert, key, value, dict) : dict;
			});
		return A3(_eeue56$elm_all_dict$EveryDict$foldl, add, _eeue56$elm_all_dict$EveryDict$empty, dictionary);
	});
var _eeue56$elm_all_dict$EveryDict$intersect = F2(
	function (t1, t2) {
		return A2(
			_eeue56$elm_all_dict$EveryDict$filter,
			F2(
				function (k, _p65) {
					return A2(_eeue56$elm_all_dict$EveryDict$member, k, t2);
				}),
			t1);
	});
var _eeue56$elm_all_dict$EveryDict$partition = F2(
	function (predicate, dict) {
		var add = F3(
			function (key, value, _p66) {
				var _p67 = _p66;
				var _p69 = _p67._1;
				var _p68 = _p67._0;
				return A2(predicate, key, value) ? {
					ctor: '_Tuple2',
					_0: A3(_eeue56$elm_all_dict$EveryDict$insert, key, value, _p68),
					_1: _p69
				} : {
					ctor: '_Tuple2',
					_0: _p68,
					_1: A3(_eeue56$elm_all_dict$EveryDict$insert, key, value, _p69)
				};
			});
		return A3(
			_eeue56$elm_all_dict$EveryDict$foldl,
			add,
			{ctor: '_Tuple2', _0: _eeue56$elm_all_dict$EveryDict$empty, _1: _eeue56$elm_all_dict$EveryDict$empty},
			dict);
	});
var _eeue56$elm_all_dict$EveryDict$remove = F2(
	function (key, dict) {
		return A3(
			_eeue56$elm_all_dict$EveryDict$update,
			key,
			_elm_lang$core$Basics$always(_elm_lang$core$Maybe$Nothing),
			dict);
	});
var _eeue56$elm_all_dict$EveryDict$diff = F2(
	function (t1, t2) {
		return A3(
			_eeue56$elm_all_dict$EveryDict$foldl,
			F3(
				function (k, v, t) {
					return A2(_eeue56$elm_all_dict$EveryDict$remove, k, t);
				}),
			t1,
			t2);
	});

var _Gizra$elm_all_set$EverySet$foldr = F3(
	function (f, b, _p0) {
		var _p1 = _p0;
		return A3(
			_eeue56$elm_all_dict$EveryDict$foldr,
			F3(
				function (k, _p2, b) {
					return A2(f, k, b);
				}),
			b,
			_p1._0);
	});
var _Gizra$elm_all_set$EverySet$foldl = F3(
	function (f, b, _p3) {
		var _p4 = _p3;
		return A3(
			_eeue56$elm_all_dict$EveryDict$foldl,
			F3(
				function (k, _p5, b) {
					return A2(f, k, b);
				}),
			b,
			_p4._0);
	});
var _Gizra$elm_all_set$EverySet$toList = function (_p6) {
	var _p7 = _p6;
	return _eeue56$elm_all_dict$EveryDict$keys(_p7._0);
};
var _Gizra$elm_all_set$EverySet$size = function (_p8) {
	var _p9 = _p8;
	return _eeue56$elm_all_dict$EveryDict$size(_p9._0);
};
var _Gizra$elm_all_set$EverySet$member = F2(
	function (k, _p10) {
		var _p11 = _p10;
		return A2(_eeue56$elm_all_dict$EveryDict$member, k, _p11._0);
	});
var _Gizra$elm_all_set$EverySet$isEmpty = function (_p12) {
	var _p13 = _p12;
	return _eeue56$elm_all_dict$EveryDict$isEmpty(_p13._0);
};
var _Gizra$elm_all_set$EverySet$EverySet = function (a) {
	return {ctor: 'EverySet', _0: a};
};
var _Gizra$elm_all_set$EverySet$empty = _Gizra$elm_all_set$EverySet$EverySet(_eeue56$elm_all_dict$EveryDict$empty);
var _Gizra$elm_all_set$EverySet$singleton = function (k) {
	return _Gizra$elm_all_set$EverySet$EverySet(
		A2(
			_eeue56$elm_all_dict$EveryDict$singleton,
			k,
			{ctor: '_Tuple0'}));
};
var _Gizra$elm_all_set$EverySet$insert = F2(
	function (k, _p14) {
		var _p15 = _p14;
		return _Gizra$elm_all_set$EverySet$EverySet(
			A3(
				_eeue56$elm_all_dict$EveryDict$insert,
				k,
				{ctor: '_Tuple0'},
				_p15._0));
	});
var _Gizra$elm_all_set$EverySet$fromList = function (xs) {
	return A3(_elm_lang$core$List$foldl, _Gizra$elm_all_set$EverySet$insert, _Gizra$elm_all_set$EverySet$empty, xs);
};
var _Gizra$elm_all_set$EverySet$map = F2(
	function (f, s) {
		return _Gizra$elm_all_set$EverySet$fromList(
			A2(
				_elm_lang$core$List$map,
				f,
				_Gizra$elm_all_set$EverySet$toList(s)));
	});
var _Gizra$elm_all_set$EverySet$remove = F2(
	function (k, _p16) {
		var _p17 = _p16;
		return _Gizra$elm_all_set$EverySet$EverySet(
			A2(_eeue56$elm_all_dict$EveryDict$remove, k, _p17._0));
	});
var _Gizra$elm_all_set$EverySet$union = F2(
	function (_p19, _p18) {
		var _p20 = _p19;
		var _p21 = _p18;
		return _Gizra$elm_all_set$EverySet$EverySet(
			A2(_eeue56$elm_all_dict$EveryDict$union, _p20._0, _p21._0));
	});
var _Gizra$elm_all_set$EverySet$intersect = F2(
	function (_p23, _p22) {
		var _p24 = _p23;
		var _p25 = _p22;
		return _Gizra$elm_all_set$EverySet$EverySet(
			A2(_eeue56$elm_all_dict$EveryDict$intersect, _p24._0, _p25._0));
	});
var _Gizra$elm_all_set$EverySet$diff = F2(
	function (_p27, _p26) {
		var _p28 = _p27;
		var _p29 = _p26;
		return _Gizra$elm_all_set$EverySet$EverySet(
			A2(_eeue56$elm_all_dict$EveryDict$diff, _p28._0, _p29._0));
	});
var _Gizra$elm_all_set$EverySet$filter = F2(
	function (p, _p30) {
		var _p31 = _p30;
		return _Gizra$elm_all_set$EverySet$EverySet(
			A2(
				_eeue56$elm_all_dict$EveryDict$filter,
				F2(
					function (k, _p32) {
						return p(k);
					}),
				_p31._0));
	});
var _Gizra$elm_all_set$EverySet$partition = F2(
	function (p, _p33) {
		var _p34 = _p33;
		var _p35 = A2(
			_eeue56$elm_all_dict$EveryDict$partition,
			F2(
				function (k, _p36) {
					return p(k);
				}),
			_p34._0);
		var p1 = _p35._0;
		var p2 = _p35._1;
		return {
			ctor: '_Tuple2',
			_0: _Gizra$elm_all_set$EverySet$EverySet(p1),
			_1: _Gizra$elm_all_set$EverySet$EverySet(p2)
		};
	});

//import Native.List //

var _elm_lang$core$Native_Array = function() {

// A RRB-Tree has two distinct data types.
// Leaf -> "height"  is always 0
//         "table"   is an array of elements
// Node -> "height"  is always greater than 0
//         "table"   is an array of child nodes
//         "lengths" is an array of accumulated lengths of the child nodes

// M is the maximal table size. 32 seems fast. E is the allowed increase
// of search steps when concatting to find an index. Lower values will
// decrease balancing, but will increase search steps.
var M = 32;
var E = 2;

// An empty array.
var empty = {
	ctor: '_Array',
	height: 0,
	table: []
};


function get(i, array)
{
	if (i < 0 || i >= length(array))
	{
		throw new Error(
			'Index ' + i + ' is out of range. Check the length of ' +
			'your array first or use getMaybe or getWithDefault.');
	}
	return unsafeGet(i, array);
}


function unsafeGet(i, array)
{
	for (var x = array.height; x > 0; x--)
	{
		var slot = i >> (x * 5);
		while (array.lengths[slot] <= i)
		{
			slot++;
		}
		if (slot > 0)
		{
			i -= array.lengths[slot - 1];
		}
		array = array.table[slot];
	}
	return array.table[i];
}


// Sets the value at the index i. Only the nodes leading to i will get
// copied and updated.
function set(i, item, array)
{
	if (i < 0 || length(array) <= i)
	{
		return array;
	}
	return unsafeSet(i, item, array);
}


function unsafeSet(i, item, array)
{
	array = nodeCopy(array);

	if (array.height === 0)
	{
		array.table[i] = item;
	}
	else
	{
		var slot = getSlot(i, array);
		if (slot > 0)
		{
			i -= array.lengths[slot - 1];
		}
		array.table[slot] = unsafeSet(i, item, array.table[slot]);
	}
	return array;
}


function initialize(len, f)
{
	if (len <= 0)
	{
		return empty;
	}
	var h = Math.floor( Math.log(len) / Math.log(M) );
	return initialize_(f, h, 0, len);
}

function initialize_(f, h, from, to)
{
	if (h === 0)
	{
		var table = new Array((to - from) % (M + 1));
		for (var i = 0; i < table.length; i++)
		{
		  table[i] = f(from + i);
		}
		return {
			ctor: '_Array',
			height: 0,
			table: table
		};
	}

	var step = Math.pow(M, h);
	var table = new Array(Math.ceil((to - from) / step));
	var lengths = new Array(table.length);
	for (var i = 0; i < table.length; i++)
	{
		table[i] = initialize_(f, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
		lengths[i] = length(table[i]) + (i > 0 ? lengths[i-1] : 0);
	}
	return {
		ctor: '_Array',
		height: h,
		table: table,
		lengths: lengths
	};
}

function fromList(list)
{
	if (list.ctor === '[]')
	{
		return empty;
	}

	// Allocate M sized blocks (table) and write list elements to it.
	var table = new Array(M);
	var nodes = [];
	var i = 0;

	while (list.ctor !== '[]')
	{
		table[i] = list._0;
		list = list._1;
		i++;

		// table is full, so we can push a leaf containing it into the
		// next node.
		if (i === M)
		{
			var leaf = {
				ctor: '_Array',
				height: 0,
				table: table
			};
			fromListPush(leaf, nodes);
			table = new Array(M);
			i = 0;
		}
	}

	// Maybe there is something left on the table.
	if (i > 0)
	{
		var leaf = {
			ctor: '_Array',
			height: 0,
			table: table.splice(0, i)
		};
		fromListPush(leaf, nodes);
	}

	// Go through all of the nodes and eventually push them into higher nodes.
	for (var h = 0; h < nodes.length - 1; h++)
	{
		if (nodes[h].table.length > 0)
		{
			fromListPush(nodes[h], nodes);
		}
	}

	var head = nodes[nodes.length - 1];
	if (head.height > 0 && head.table.length === 1)
	{
		return head.table[0];
	}
	else
	{
		return head;
	}
}

// Push a node into a higher node as a child.
function fromListPush(toPush, nodes)
{
	var h = toPush.height;

	// Maybe the node on this height does not exist.
	if (nodes.length === h)
	{
		var node = {
			ctor: '_Array',
			height: h + 1,
			table: [],
			lengths: []
		};
		nodes.push(node);
	}

	nodes[h].table.push(toPush);
	var len = length(toPush);
	if (nodes[h].lengths.length > 0)
	{
		len += nodes[h].lengths[nodes[h].lengths.length - 1];
	}
	nodes[h].lengths.push(len);

	if (nodes[h].table.length === M)
	{
		fromListPush(nodes[h], nodes);
		nodes[h] = {
			ctor: '_Array',
			height: h + 1,
			table: [],
			lengths: []
		};
	}
}

// Pushes an item via push_ to the bottom right of a tree.
function push(item, a)
{
	var pushed = push_(item, a);
	if (pushed !== null)
	{
		return pushed;
	}

	var newTree = create(item, a.height);
	return siblise(a, newTree);
}

// Recursively tries to push an item to the bottom-right most
// tree possible. If there is no space left for the item,
// null will be returned.
function push_(item, a)
{
	// Handle resursion stop at leaf level.
	if (a.height === 0)
	{
		if (a.table.length < M)
		{
			var newA = {
				ctor: '_Array',
				height: 0,
				table: a.table.slice()
			};
			newA.table.push(item);
			return newA;
		}
		else
		{
		  return null;
		}
	}

	// Recursively push
	var pushed = push_(item, botRight(a));

	// There was space in the bottom right tree, so the slot will
	// be updated.
	if (pushed !== null)
	{
		var newA = nodeCopy(a);
		newA.table[newA.table.length - 1] = pushed;
		newA.lengths[newA.lengths.length - 1]++;
		return newA;
	}

	// When there was no space left, check if there is space left
	// for a new slot with a tree which contains only the item
	// at the bottom.
	if (a.table.length < M)
	{
		var newSlot = create(item, a.height - 1);
		var newA = nodeCopy(a);
		newA.table.push(newSlot);
		newA.lengths.push(newA.lengths[newA.lengths.length - 1] + length(newSlot));
		return newA;
	}
	else
	{
		return null;
	}
}

// Converts an array into a list of elements.
function toList(a)
{
	return toList_(_elm_lang$core$Native_List.Nil, a);
}

function toList_(list, a)
{
	for (var i = a.table.length - 1; i >= 0; i--)
	{
		list =
			a.height === 0
				? _elm_lang$core$Native_List.Cons(a.table[i], list)
				: toList_(list, a.table[i]);
	}
	return list;
}

// Maps a function over the elements of an array.
function map(f, a)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: new Array(a.table.length)
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths;
	}
	for (var i = 0; i < a.table.length; i++)
	{
		newA.table[i] =
			a.height === 0
				? f(a.table[i])
				: map(f, a.table[i]);
	}
	return newA;
}

// Maps a function over the elements with their index as first argument.
function indexedMap(f, a)
{
	return indexedMap_(f, a, 0);
}

function indexedMap_(f, a, from)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: new Array(a.table.length)
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths;
	}
	for (var i = 0; i < a.table.length; i++)
	{
		newA.table[i] =
			a.height === 0
				? A2(f, from + i, a.table[i])
				: indexedMap_(f, a.table[i], i == 0 ? from : from + a.lengths[i - 1]);
	}
	return newA;
}

function foldl(f, b, a)
{
	if (a.height === 0)
	{
		for (var i = 0; i < a.table.length; i++)
		{
			b = A2(f, a.table[i], b);
		}
	}
	else
	{
		for (var i = 0; i < a.table.length; i++)
		{
			b = foldl(f, b, a.table[i]);
		}
	}
	return b;
}

function foldr(f, b, a)
{
	if (a.height === 0)
	{
		for (var i = a.table.length; i--; )
		{
			b = A2(f, a.table[i], b);
		}
	}
	else
	{
		for (var i = a.table.length; i--; )
		{
			b = foldr(f, b, a.table[i]);
		}
	}
	return b;
}

// TODO: currently, it slices the right, then the left. This can be
// optimized.
function slice(from, to, a)
{
	if (from < 0)
	{
		from += length(a);
	}
	if (to < 0)
	{
		to += length(a);
	}
	return sliceLeft(from, sliceRight(to, a));
}

function sliceRight(to, a)
{
	if (to === length(a))
	{
		return a;
	}

	// Handle leaf level.
	if (a.height === 0)
	{
		var newA = { ctor:'_Array', height:0 };
		newA.table = a.table.slice(0, to);
		return newA;
	}

	// Slice the right recursively.
	var right = getSlot(to, a);
	var sliced = sliceRight(to - (right > 0 ? a.lengths[right - 1] : 0), a.table[right]);

	// Maybe the a node is not even needed, as sliced contains the whole slice.
	if (right === 0)
	{
		return sliced;
	}

	// Create new node.
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice(0, right),
		lengths: a.lengths.slice(0, right)
	};
	if (sliced.table.length > 0)
	{
		newA.table[right] = sliced;
		newA.lengths[right] = length(sliced) + (right > 0 ? newA.lengths[right - 1] : 0);
	}
	return newA;
}

function sliceLeft(from, a)
{
	if (from === 0)
	{
		return a;
	}

	// Handle leaf level.
	if (a.height === 0)
	{
		var newA = { ctor:'_Array', height:0 };
		newA.table = a.table.slice(from, a.table.length + 1);
		return newA;
	}

	// Slice the left recursively.
	var left = getSlot(from, a);
	var sliced = sliceLeft(from - (left > 0 ? a.lengths[left - 1] : 0), a.table[left]);

	// Maybe the a node is not even needed, as sliced contains the whole slice.
	if (left === a.table.length - 1)
	{
		return sliced;
	}

	// Create new node.
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice(left, a.table.length + 1),
		lengths: new Array(a.table.length - left)
	};
	newA.table[0] = sliced;
	var len = 0;
	for (var i = 0; i < newA.table.length; i++)
	{
		len += length(newA.table[i]);
		newA.lengths[i] = len;
	}

	return newA;
}

// Appends two trees.
function append(a,b)
{
	if (a.table.length === 0)
	{
		return b;
	}
	if (b.table.length === 0)
	{
		return a;
	}

	var c = append_(a, b);

	// Check if both nodes can be crunshed together.
	if (c[0].table.length + c[1].table.length <= M)
	{
		if (c[0].table.length === 0)
		{
			return c[1];
		}
		if (c[1].table.length === 0)
		{
			return c[0];
		}

		// Adjust .table and .lengths
		c[0].table = c[0].table.concat(c[1].table);
		if (c[0].height > 0)
		{
			var len = length(c[0]);
			for (var i = 0; i < c[1].lengths.length; i++)
			{
				c[1].lengths[i] += len;
			}
			c[0].lengths = c[0].lengths.concat(c[1].lengths);
		}

		return c[0];
	}

	if (c[0].height > 0)
	{
		var toRemove = calcToRemove(a, b);
		if (toRemove > E)
		{
			c = shuffle(c[0], c[1], toRemove);
		}
	}

	return siblise(c[0], c[1]);
}

// Returns an array of two nodes; right and left. One node _may_ be empty.
function append_(a, b)
{
	if (a.height === 0 && b.height === 0)
	{
		return [a, b];
	}

	if (a.height !== 1 || b.height !== 1)
	{
		if (a.height === b.height)
		{
			a = nodeCopy(a);
			b = nodeCopy(b);
			var appended = append_(botRight(a), botLeft(b));

			insertRight(a, appended[1]);
			insertLeft(b, appended[0]);
		}
		else if (a.height > b.height)
		{
			a = nodeCopy(a);
			var appended = append_(botRight(a), b);

			insertRight(a, appended[0]);
			b = parentise(appended[1], appended[1].height + 1);
		}
		else
		{
			b = nodeCopy(b);
			var appended = append_(a, botLeft(b));

			var left = appended[0].table.length === 0 ? 0 : 1;
			var right = left === 0 ? 1 : 0;
			insertLeft(b, appended[left]);
			a = parentise(appended[right], appended[right].height + 1);
		}
	}

	// Check if balancing is needed and return based on that.
	if (a.table.length === 0 || b.table.length === 0)
	{
		return [a, b];
	}

	var toRemove = calcToRemove(a, b);
	if (toRemove <= E)
	{
		return [a, b];
	}
	return shuffle(a, b, toRemove);
}

// Helperfunctions for append_. Replaces a child node at the side of the parent.
function insertRight(parent, node)
{
	var index = parent.table.length - 1;
	parent.table[index] = node;
	parent.lengths[index] = length(node);
	parent.lengths[index] += index > 0 ? parent.lengths[index - 1] : 0;
}

function insertLeft(parent, node)
{
	if (node.table.length > 0)
	{
		parent.table[0] = node;
		parent.lengths[0] = length(node);

		var len = length(parent.table[0]);
		for (var i = 1; i < parent.lengths.length; i++)
		{
			len += length(parent.table[i]);
			parent.lengths[i] = len;
		}
	}
	else
	{
		parent.table.shift();
		for (var i = 1; i < parent.lengths.length; i++)
		{
			parent.lengths[i] = parent.lengths[i] - parent.lengths[0];
		}
		parent.lengths.shift();
	}
}

// Returns the extra search steps for E. Refer to the paper.
function calcToRemove(a, b)
{
	var subLengths = 0;
	for (var i = 0; i < a.table.length; i++)
	{
		subLengths += a.table[i].table.length;
	}
	for (var i = 0; i < b.table.length; i++)
	{
		subLengths += b.table[i].table.length;
	}

	var toRemove = a.table.length + b.table.length;
	return toRemove - (Math.floor((subLengths - 1) / M) + 1);
}

// get2, set2 and saveSlot are helpers for accessing elements over two arrays.
function get2(a, b, index)
{
	return index < a.length
		? a[index]
		: b[index - a.length];
}

function set2(a, b, index, value)
{
	if (index < a.length)
	{
		a[index] = value;
	}
	else
	{
		b[index - a.length] = value;
	}
}

function saveSlot(a, b, index, slot)
{
	set2(a.table, b.table, index, slot);

	var l = (index === 0 || index === a.lengths.length)
		? 0
		: get2(a.lengths, a.lengths, index - 1);

	set2(a.lengths, b.lengths, index, l + length(slot));
}

// Creates a node or leaf with a given length at their arrays for perfomance.
// Is only used by shuffle.
function createNode(h, length)
{
	if (length < 0)
	{
		length = 0;
	}
	var a = {
		ctor: '_Array',
		height: h,
		table: new Array(length)
	};
	if (h > 0)
	{
		a.lengths = new Array(length);
	}
	return a;
}

// Returns an array of two balanced nodes.
function shuffle(a, b, toRemove)
{
	var newA = createNode(a.height, Math.min(M, a.table.length + b.table.length - toRemove));
	var newB = createNode(a.height, newA.table.length - (a.table.length + b.table.length - toRemove));

	// Skip the slots with size M. More precise: copy the slot references
	// to the new node
	var read = 0;
	while (get2(a.table, b.table, read).table.length % M === 0)
	{
		set2(newA.table, newB.table, read, get2(a.table, b.table, read));
		set2(newA.lengths, newB.lengths, read, get2(a.lengths, b.lengths, read));
		read++;
	}

	// Pulling items from left to right, caching in a slot before writing
	// it into the new nodes.
	var write = read;
	var slot = new createNode(a.height - 1, 0);
	var from = 0;

	// If the current slot is still containing data, then there will be at
	// least one more write, so we do not break this loop yet.
	while (read - write - (slot.table.length > 0 ? 1 : 0) < toRemove)
	{
		// Find out the max possible items for copying.
		var source = get2(a.table, b.table, read);
		var to = Math.min(M - slot.table.length, source.table.length);

		// Copy and adjust size table.
		slot.table = slot.table.concat(source.table.slice(from, to));
		if (slot.height > 0)
		{
			var len = slot.lengths.length;
			for (var i = len; i < len + to - from; i++)
			{
				slot.lengths[i] = length(slot.table[i]);
				slot.lengths[i] += (i > 0 ? slot.lengths[i - 1] : 0);
			}
		}

		from += to;

		// Only proceed to next slots[i] if the current one was
		// fully copied.
		if (source.table.length <= to)
		{
			read++; from = 0;
		}

		// Only create a new slot if the current one is filled up.
		if (slot.table.length === M)
		{
			saveSlot(newA, newB, write, slot);
			slot = createNode(a.height - 1, 0);
			write++;
		}
	}

	// Cleanup after the loop. Copy the last slot into the new nodes.
	if (slot.table.length > 0)
	{
		saveSlot(newA, newB, write, slot);
		write++;
	}

	// Shift the untouched slots to the left
	while (read < a.table.length + b.table.length )
	{
		saveSlot(newA, newB, write, get2(a.table, b.table, read));
		read++;
		write++;
	}

	return [newA, newB];
}

// Navigation functions
function botRight(a)
{
	return a.table[a.table.length - 1];
}
function botLeft(a)
{
	return a.table[0];
}

// Copies a node for updating. Note that you should not use this if
// only updating only one of "table" or "lengths" for performance reasons.
function nodeCopy(a)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice()
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths.slice();
	}
	return newA;
}

// Returns how many items are in the tree.
function length(array)
{
	if (array.height === 0)
	{
		return array.table.length;
	}
	else
	{
		return array.lengths[array.lengths.length - 1];
	}
}

// Calculates in which slot of "table" the item probably is, then
// find the exact slot via forward searching in  "lengths". Returns the index.
function getSlot(i, a)
{
	var slot = i >> (5 * a.height);
	while (a.lengths[slot] <= i)
	{
		slot++;
	}
	return slot;
}

// Recursively creates a tree with a given height containing
// only the given item.
function create(item, h)
{
	if (h === 0)
	{
		return {
			ctor: '_Array',
			height: 0,
			table: [item]
		};
	}
	return {
		ctor: '_Array',
		height: h,
		table: [create(item, h - 1)],
		lengths: [1]
	};
}

// Recursively creates a tree that contains the given tree.
function parentise(tree, h)
{
	if (h === tree.height)
	{
		return tree;
	}

	return {
		ctor: '_Array',
		height: h,
		table: [parentise(tree, h - 1)],
		lengths: [length(tree)]
	};
}

// Emphasizes blood brotherhood beneath two trees.
function siblise(a, b)
{
	return {
		ctor: '_Array',
		height: a.height + 1,
		table: [a, b],
		lengths: [length(a), length(a) + length(b)]
	};
}

function toJSArray(a)
{
	var jsArray = new Array(length(a));
	toJSArray_(jsArray, 0, a);
	return jsArray;
}

function toJSArray_(jsArray, i, a)
{
	for (var t = 0; t < a.table.length; t++)
	{
		if (a.height === 0)
		{
			jsArray[i + t] = a.table[t];
		}
		else
		{
			var inc = t === 0 ? 0 : a.lengths[t - 1];
			toJSArray_(jsArray, i + inc, a.table[t]);
		}
	}
}

function fromJSArray(jsArray)
{
	if (jsArray.length === 0)
	{
		return empty;
	}
	var h = Math.floor(Math.log(jsArray.length) / Math.log(M));
	return fromJSArray_(jsArray, h, 0, jsArray.length);
}

function fromJSArray_(jsArray, h, from, to)
{
	if (h === 0)
	{
		return {
			ctor: '_Array',
			height: 0,
			table: jsArray.slice(from, to)
		};
	}

	var step = Math.pow(M, h);
	var table = new Array(Math.ceil((to - from) / step));
	var lengths = new Array(table.length);
	for (var i = 0; i < table.length; i++)
	{
		table[i] = fromJSArray_(jsArray, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
		lengths[i] = length(table[i]) + (i > 0 ? lengths[i - 1] : 0);
	}
	return {
		ctor: '_Array',
		height: h,
		table: table,
		lengths: lengths
	};
}

return {
	empty: empty,
	fromList: fromList,
	toList: toList,
	initialize: F2(initialize),
	append: F2(append),
	push: F2(push),
	slice: F3(slice),
	get: F2(get),
	set: F3(set),
	map: F2(map),
	indexedMap: F2(indexedMap),
	foldl: F3(foldl),
	foldr: F3(foldr),
	length: length,

	toJSArray: toJSArray,
	fromJSArray: fromJSArray
};

}();
var _elm_lang$core$Array$append = _elm_lang$core$Native_Array.append;
var _elm_lang$core$Array$length = _elm_lang$core$Native_Array.length;
var _elm_lang$core$Array$isEmpty = function (array) {
	return _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$Array$length(array),
		0);
};
var _elm_lang$core$Array$slice = _elm_lang$core$Native_Array.slice;
var _elm_lang$core$Array$set = _elm_lang$core$Native_Array.set;
var _elm_lang$core$Array$get = F2(
	function (i, array) {
		return ((_elm_lang$core$Native_Utils.cmp(0, i) < 1) && (_elm_lang$core$Native_Utils.cmp(
			i,
			_elm_lang$core$Native_Array.length(array)) < 0)) ? _elm_lang$core$Maybe$Just(
			A2(_elm_lang$core$Native_Array.get, i, array)) : _elm_lang$core$Maybe$Nothing;
	});
var _elm_lang$core$Array$push = _elm_lang$core$Native_Array.push;
var _elm_lang$core$Array$empty = _elm_lang$core$Native_Array.empty;
var _elm_lang$core$Array$filter = F2(
	function (isOkay, arr) {
		var update = F2(
			function (x, xs) {
				return isOkay(x) ? A2(_elm_lang$core$Native_Array.push, x, xs) : xs;
			});
		return A3(_elm_lang$core$Native_Array.foldl, update, _elm_lang$core$Native_Array.empty, arr);
	});
var _elm_lang$core$Array$foldr = _elm_lang$core$Native_Array.foldr;
var _elm_lang$core$Array$foldl = _elm_lang$core$Native_Array.foldl;
var _elm_lang$core$Array$indexedMap = _elm_lang$core$Native_Array.indexedMap;
var _elm_lang$core$Array$map = _elm_lang$core$Native_Array.map;
var _elm_lang$core$Array$toIndexedList = function (array) {
	return A3(
		_elm_lang$core$List$map2,
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		A2(
			_elm_lang$core$List$range,
			0,
			_elm_lang$core$Native_Array.length(array) - 1),
		_elm_lang$core$Native_Array.toList(array));
};
var _elm_lang$core$Array$toList = _elm_lang$core$Native_Array.toList;
var _elm_lang$core$Array$fromList = _elm_lang$core$Native_Array.fromList;
var _elm_lang$core$Array$initialize = _elm_lang$core$Native_Array.initialize;
var _elm_lang$core$Array$repeat = F2(
	function (n, e) {
		return A2(
			_elm_lang$core$Array$initialize,
			n,
			_elm_lang$core$Basics$always(e));
	});
var _elm_lang$core$Array$Array = {ctor: 'Array'};

//import Maybe, Native.Array, Native.List, Native.Utils, Result //

var _elm_lang$core$Native_Json = function() {


// CORE DECODERS

function succeed(msg)
{
	return {
		ctor: '<decoder>',
		tag: 'succeed',
		msg: msg
	};
}

function fail(msg)
{
	return {
		ctor: '<decoder>',
		tag: 'fail',
		msg: msg
	};
}

function decodePrimitive(tag)
{
	return {
		ctor: '<decoder>',
		tag: tag
	};
}

function decodeContainer(tag, decoder)
{
	return {
		ctor: '<decoder>',
		tag: tag,
		decoder: decoder
	};
}

function decodeNull(value)
{
	return {
		ctor: '<decoder>',
		tag: 'null',
		value: value
	};
}

function decodeField(field, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'field',
		field: field,
		decoder: decoder
	};
}

function decodeIndex(index, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'index',
		index: index,
		decoder: decoder
	};
}

function decodeKeyValuePairs(decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'key-value',
		decoder: decoder
	};
}

function mapMany(f, decoders)
{
	return {
		ctor: '<decoder>',
		tag: 'map-many',
		func: f,
		decoders: decoders
	};
}

function andThen(callback, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'andThen',
		decoder: decoder,
		callback: callback
	};
}

function oneOf(decoders)
{
	return {
		ctor: '<decoder>',
		tag: 'oneOf',
		decoders: decoders
	};
}


// DECODING OBJECTS

function map1(f, d1)
{
	return mapMany(f, [d1]);
}

function map2(f, d1, d2)
{
	return mapMany(f, [d1, d2]);
}

function map3(f, d1, d2, d3)
{
	return mapMany(f, [d1, d2, d3]);
}

function map4(f, d1, d2, d3, d4)
{
	return mapMany(f, [d1, d2, d3, d4]);
}

function map5(f, d1, d2, d3, d4, d5)
{
	return mapMany(f, [d1, d2, d3, d4, d5]);
}

function map6(f, d1, d2, d3, d4, d5, d6)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6]);
}

function map7(f, d1, d2, d3, d4, d5, d6, d7)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
}

function map8(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
}


// DECODE HELPERS

function ok(value)
{
	return { tag: 'ok', value: value };
}

function badPrimitive(type, value)
{
	return { tag: 'primitive', type: type, value: value };
}

function badIndex(index, nestedProblems)
{
	return { tag: 'index', index: index, rest: nestedProblems };
}

function badField(field, nestedProblems)
{
	return { tag: 'field', field: field, rest: nestedProblems };
}

function badIndex(index, nestedProblems)
{
	return { tag: 'index', index: index, rest: nestedProblems };
}

function badOneOf(problems)
{
	return { tag: 'oneOf', problems: problems };
}

function bad(msg)
{
	return { tag: 'fail', msg: msg };
}

function badToString(problem)
{
	var context = '_';
	while (problem)
	{
		switch (problem.tag)
		{
			case 'primitive':
				return 'Expecting ' + problem.type
					+ (context === '_' ? '' : ' at ' + context)
					+ ' but instead got: ' + jsToString(problem.value);

			case 'index':
				context += '[' + problem.index + ']';
				problem = problem.rest;
				break;

			case 'field':
				context += '.' + problem.field;
				problem = problem.rest;
				break;

			case 'oneOf':
				var problems = problem.problems;
				for (var i = 0; i < problems.length; i++)
				{
					problems[i] = badToString(problems[i]);
				}
				return 'I ran into the following problems'
					+ (context === '_' ? '' : ' at ' + context)
					+ ':\n\n' + problems.join('\n');

			case 'fail':
				return 'I ran into a `fail` decoder'
					+ (context === '_' ? '' : ' at ' + context)
					+ ': ' + problem.msg;
		}
	}
}

function jsToString(value)
{
	return value === undefined
		? 'undefined'
		: JSON.stringify(value);
}


// DECODE

function runOnString(decoder, string)
{
	var json;
	try
	{
		json = JSON.parse(string);
	}
	catch (e)
	{
		return _elm_lang$core$Result$Err('Given an invalid JSON: ' + e.message);
	}
	return run(decoder, json);
}

function run(decoder, value)
{
	var result = runHelp(decoder, value);
	return (result.tag === 'ok')
		? _elm_lang$core$Result$Ok(result.value)
		: _elm_lang$core$Result$Err(badToString(result));
}

function runHelp(decoder, value)
{
	switch (decoder.tag)
	{
		case 'bool':
			return (typeof value === 'boolean')
				? ok(value)
				: badPrimitive('a Bool', value);

		case 'int':
			if (typeof value !== 'number') {
				return badPrimitive('an Int', value);
			}

			if (-2147483647 < value && value < 2147483647 && (value | 0) === value) {
				return ok(value);
			}

			if (isFinite(value) && !(value % 1)) {
				return ok(value);
			}

			return badPrimitive('an Int', value);

		case 'float':
			return (typeof value === 'number')
				? ok(value)
				: badPrimitive('a Float', value);

		case 'string':
			return (typeof value === 'string')
				? ok(value)
				: (value instanceof String)
					? ok(value + '')
					: badPrimitive('a String', value);

		case 'null':
			return (value === null)
				? ok(decoder.value)
				: badPrimitive('null', value);

		case 'value':
			return ok(value);

		case 'list':
			if (!(value instanceof Array))
			{
				return badPrimitive('a List', value);
			}

			var list = _elm_lang$core$Native_List.Nil;
			for (var i = value.length; i--; )
			{
				var result = runHelp(decoder.decoder, value[i]);
				if (result.tag !== 'ok')
				{
					return badIndex(i, result)
				}
				list = _elm_lang$core$Native_List.Cons(result.value, list);
			}
			return ok(list);

		case 'array':
			if (!(value instanceof Array))
			{
				return badPrimitive('an Array', value);
			}

			var len = value.length;
			var array = new Array(len);
			for (var i = len; i--; )
			{
				var result = runHelp(decoder.decoder, value[i]);
				if (result.tag !== 'ok')
				{
					return badIndex(i, result);
				}
				array[i] = result.value;
			}
			return ok(_elm_lang$core$Native_Array.fromJSArray(array));

		case 'maybe':
			var result = runHelp(decoder.decoder, value);
			return (result.tag === 'ok')
				? ok(_elm_lang$core$Maybe$Just(result.value))
				: ok(_elm_lang$core$Maybe$Nothing);

		case 'field':
			var field = decoder.field;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return badPrimitive('an object with a field named `' + field + '`', value);
			}

			var result = runHelp(decoder.decoder, value[field]);
			return (result.tag === 'ok') ? result : badField(field, result);

		case 'index':
			var index = decoder.index;
			if (!(value instanceof Array))
			{
				return badPrimitive('an array', value);
			}
			if (index >= value.length)
			{
				return badPrimitive('a longer array. Need index ' + index + ' but there are only ' + value.length + ' entries', value);
			}

			var result = runHelp(decoder.decoder, value[index]);
			return (result.tag === 'ok') ? result : badIndex(index, result);

		case 'key-value':
			if (typeof value !== 'object' || value === null || value instanceof Array)
			{
				return badPrimitive('an object', value);
			}

			var keyValuePairs = _elm_lang$core$Native_List.Nil;
			for (var key in value)
			{
				var result = runHelp(decoder.decoder, value[key]);
				if (result.tag !== 'ok')
				{
					return badField(key, result);
				}
				var pair = _elm_lang$core$Native_Utils.Tuple2(key, result.value);
				keyValuePairs = _elm_lang$core$Native_List.Cons(pair, keyValuePairs);
			}
			return ok(keyValuePairs);

		case 'map-many':
			var answer = decoder.func;
			var decoders = decoder.decoders;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = runHelp(decoders[i], value);
				if (result.tag !== 'ok')
				{
					return result;
				}
				answer = answer(result.value);
			}
			return ok(answer);

		case 'andThen':
			var result = runHelp(decoder.decoder, value);
			return (result.tag !== 'ok')
				? result
				: runHelp(decoder.callback(result.value), value);

		case 'oneOf':
			var errors = [];
			var temp = decoder.decoders;
			while (temp.ctor !== '[]')
			{
				var result = runHelp(temp._0, value);

				if (result.tag === 'ok')
				{
					return result;
				}

				errors.push(result);

				temp = temp._1;
			}
			return badOneOf(errors);

		case 'fail':
			return bad(decoder.msg);

		case 'succeed':
			return ok(decoder.msg);
	}
}


// EQUALITY

function equality(a, b)
{
	if (a === b)
	{
		return true;
	}

	if (a.tag !== b.tag)
	{
		return false;
	}

	switch (a.tag)
	{
		case 'succeed':
		case 'fail':
			return a.msg === b.msg;

		case 'bool':
		case 'int':
		case 'float':
		case 'string':
		case 'value':
			return true;

		case 'null':
			return a.value === b.value;

		case 'list':
		case 'array':
		case 'maybe':
		case 'key-value':
			return equality(a.decoder, b.decoder);

		case 'field':
			return a.field === b.field && equality(a.decoder, b.decoder);

		case 'index':
			return a.index === b.index && equality(a.decoder, b.decoder);

		case 'map-many':
			if (a.func !== b.func)
			{
				return false;
			}
			return listEquality(a.decoders, b.decoders);

		case 'andThen':
			return a.callback === b.callback && equality(a.decoder, b.decoder);

		case 'oneOf':
			return listEquality(a.decoders, b.decoders);
	}
}

function listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

function encode(indentLevel, value)
{
	return JSON.stringify(value, null, indentLevel);
}

function identity(value)
{
	return value;
}

function encodeObject(keyValuePairs)
{
	var obj = {};
	while (keyValuePairs.ctor !== '[]')
	{
		var pair = keyValuePairs._0;
		obj[pair._0] = pair._1;
		keyValuePairs = keyValuePairs._1;
	}
	return obj;
}

return {
	encode: F2(encode),
	runOnString: F2(runOnString),
	run: F2(run),

	decodeNull: decodeNull,
	decodePrimitive: decodePrimitive,
	decodeContainer: F2(decodeContainer),

	decodeField: F2(decodeField),
	decodeIndex: F2(decodeIndex),

	map1: F2(map1),
	map2: F3(map2),
	map3: F4(map3),
	map4: F5(map4),
	map5: F6(map5),
	map6: F7(map6),
	map7: F8(map7),
	map8: F9(map8),
	decodeKeyValuePairs: decodeKeyValuePairs,

	andThen: F2(andThen),
	fail: fail,
	succeed: succeed,
	oneOf: oneOf,

	identity: identity,
	encodeNull: null,
	encodeArray: _elm_lang$core$Native_Array.toJSArray,
	encodeList: _elm_lang$core$Native_List.toArray,
	encodeObject: encodeObject,

	equality: equality
};

}();

var _elm_lang$core$Json_Encode$list = _elm_lang$core$Native_Json.encodeList;
var _elm_lang$core$Json_Encode$array = _elm_lang$core$Native_Json.encodeArray;
var _elm_lang$core$Json_Encode$object = _elm_lang$core$Native_Json.encodeObject;
var _elm_lang$core$Json_Encode$null = _elm_lang$core$Native_Json.encodeNull;
var _elm_lang$core$Json_Encode$bool = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$float = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$int = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$string = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$encode = _elm_lang$core$Native_Json.encode;
var _elm_lang$core$Json_Encode$Value = {ctor: 'Value'};

var _elm_lang$core$Json_Decode$null = _elm_lang$core$Native_Json.decodeNull;
var _elm_lang$core$Json_Decode$value = _elm_lang$core$Native_Json.decodePrimitive('value');
var _elm_lang$core$Json_Decode$andThen = _elm_lang$core$Native_Json.andThen;
var _elm_lang$core$Json_Decode$fail = _elm_lang$core$Native_Json.fail;
var _elm_lang$core$Json_Decode$succeed = _elm_lang$core$Native_Json.succeed;
var _elm_lang$core$Json_Decode$lazy = function (thunk) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		thunk,
		_elm_lang$core$Json_Decode$succeed(
			{ctor: '_Tuple0'}));
};
var _elm_lang$core$Json_Decode$decodeValue = _elm_lang$core$Native_Json.run;
var _elm_lang$core$Json_Decode$decodeString = _elm_lang$core$Native_Json.runOnString;
var _elm_lang$core$Json_Decode$map8 = _elm_lang$core$Native_Json.map8;
var _elm_lang$core$Json_Decode$map7 = _elm_lang$core$Native_Json.map7;
var _elm_lang$core$Json_Decode$map6 = _elm_lang$core$Native_Json.map6;
var _elm_lang$core$Json_Decode$map5 = _elm_lang$core$Native_Json.map5;
var _elm_lang$core$Json_Decode$map4 = _elm_lang$core$Native_Json.map4;
var _elm_lang$core$Json_Decode$map3 = _elm_lang$core$Native_Json.map3;
var _elm_lang$core$Json_Decode$map2 = _elm_lang$core$Native_Json.map2;
var _elm_lang$core$Json_Decode$map = _elm_lang$core$Native_Json.map1;
var _elm_lang$core$Json_Decode$oneOf = _elm_lang$core$Native_Json.oneOf;
var _elm_lang$core$Json_Decode$maybe = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'maybe', decoder);
};
var _elm_lang$core$Json_Decode$index = _elm_lang$core$Native_Json.decodeIndex;
var _elm_lang$core$Json_Decode$field = _elm_lang$core$Native_Json.decodeField;
var _elm_lang$core$Json_Decode$at = F2(
	function (fields, decoder) {
		return A3(_elm_lang$core$List$foldr, _elm_lang$core$Json_Decode$field, decoder, fields);
	});
var _elm_lang$core$Json_Decode$keyValuePairs = _elm_lang$core$Native_Json.decodeKeyValuePairs;
var _elm_lang$core$Json_Decode$dict = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$map,
		_elm_lang$core$Dict$fromList,
		_elm_lang$core$Json_Decode$keyValuePairs(decoder));
};
var _elm_lang$core$Json_Decode$array = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'array', decoder);
};
var _elm_lang$core$Json_Decode$list = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'list', decoder);
};
var _elm_lang$core$Json_Decode$nullable = function (decoder) {
	return _elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, decoder),
				_1: {ctor: '[]'}
			}
		});
};
var _elm_lang$core$Json_Decode$float = _elm_lang$core$Native_Json.decodePrimitive('float');
var _elm_lang$core$Json_Decode$int = _elm_lang$core$Native_Json.decodePrimitive('int');
var _elm_lang$core$Json_Decode$bool = _elm_lang$core$Native_Json.decodePrimitive('bool');
var _elm_lang$core$Json_Decode$string = _elm_lang$core$Native_Json.decodePrimitive('string');
var _elm_lang$core$Json_Decode$Decoder = {ctor: 'Decoder'};

var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode = _elm_lang$core$Json_Decode$succeed;
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$resolve = _elm_lang$core$Json_Decode$andThen(_elm_lang$core$Basics$identity);
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom = F2(
	function (decoder, wrapped) {
		return A3(
			_elm_lang$core$Json_Decode$map2,
			F2(
				function (x, y) {
					return x(y);
				}),
			wrapped,
			decoder);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$hardcoded = function (_p0) {
	return _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom(
		_elm_lang$core$Json_Decode$succeed(_p0));
};
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalDecoder = F3(
	function (pathDecoder, valDecoder, fallback) {
		var nullOr = function (decoder) {
			return _elm_lang$core$Json_Decode$oneOf(
				{
					ctor: '::',
					_0: decoder,
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Json_Decode$null(fallback),
						_1: {ctor: '[]'}
					}
				});
		};
		var handleResult = function (input) {
			var _p1 = A2(_elm_lang$core$Json_Decode$decodeValue, pathDecoder, input);
			if (_p1.ctor === 'Ok') {
				var _p2 = A2(
					_elm_lang$core$Json_Decode$decodeValue,
					nullOr(valDecoder),
					_p1._0);
				if (_p2.ctor === 'Ok') {
					return _elm_lang$core$Json_Decode$succeed(_p2._0);
				} else {
					return _elm_lang$core$Json_Decode$fail(_p2._0);
				}
			} else {
				var _p3 = A2(
					_elm_lang$core$Json_Decode$decodeValue,
					_elm_lang$core$Json_Decode$keyValuePairs(_elm_lang$core$Json_Decode$value),
					input);
				if (_p3.ctor === 'Ok') {
					return _elm_lang$core$Json_Decode$succeed(fallback);
				} else {
					return _elm_lang$core$Json_Decode$fail(_p3._0);
				}
			}
		};
		return A2(_elm_lang$core$Json_Decode$andThen, handleResult, _elm_lang$core$Json_Decode$value);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalAt = F4(
	function (path, valDecoder, fallback, decoder) {
		return A2(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalDecoder,
				A2(_elm_lang$core$Json_Decode$at, path, _elm_lang$core$Json_Decode$value),
				valDecoder,
				fallback),
			decoder);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional = F4(
	function (key, valDecoder, fallback, decoder) {
		return A2(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalDecoder,
				A2(_elm_lang$core$Json_Decode$field, key, _elm_lang$core$Json_Decode$value),
				valDecoder,
				fallback),
			decoder);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$requiredAt = F3(
	function (path, valDecoder, decoder) {
		return A2(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
			A2(_elm_lang$core$Json_Decode$at, path, valDecoder),
			decoder);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required = F3(
	function (key, valDecoder, decoder) {
		return A2(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
			A2(_elm_lang$core$Json_Decode$field, key, valDecoder),
			decoder);
	});

var _elm_lang$core$Native_Bitwise = function() {

return {
	and: F2(function and(a, b) { return a & b; }),
	or: F2(function or(a, b) { return a | b; }),
	xor: F2(function xor(a, b) { return a ^ b; }),
	complement: function complement(a) { return ~a; },
	shiftLeftBy: F2(function(offset, a) { return a << offset; }),
	shiftRightBy: F2(function(offset, a) { return a >> offset; }),
	shiftRightZfBy: F2(function(offset, a) { return a >>> offset; })
};

}();

var _elm_lang$core$Bitwise$shiftRightZfBy = _elm_lang$core$Native_Bitwise.shiftRightZfBy;
var _elm_lang$core$Bitwise$shiftRightBy = _elm_lang$core$Native_Bitwise.shiftRightBy;
var _elm_lang$core$Bitwise$shiftLeftBy = _elm_lang$core$Native_Bitwise.shiftLeftBy;
var _elm_lang$core$Bitwise$complement = _elm_lang$core$Native_Bitwise.complement;
var _elm_lang$core$Bitwise$xor = _elm_lang$core$Native_Bitwise.xor;
var _elm_lang$core$Bitwise$or = _elm_lang$core$Native_Bitwise.or;
var _elm_lang$core$Bitwise$and = _elm_lang$core$Native_Bitwise.and;

var _Skinney$elm_array_exploration$Native_JsArray = function() {
/* A thin, but immutable, wrapper over native Javascript arrays. */

var empty = [];

function singleton(val) {
    return [val];
}

function length(arr) {
    return arr.length;
}

function initialize(size, offset, f) {
    var res = new Array(size);

    for (var i = 0; i < size; i++) {
        res[i] = f(offset + i);
    }

    return res;
}

// Create array from Elm list, containing at most max elements.
function listInitialize(ls, max) {
    var res = new Array(max);
    var i = 0;

    for (; i < max; i++) {
        if (ls.ctor === '[]') {
            break;
        }

        res[i] = ls._0;
        ls = ls._1;
    }

    res.length = i;

    return {
        ctor: '_Tuple2',
        _0: ls,
        _1: res
    };
}

// No bounds checking, use with caution!
function unsafeGet(idx, arr) {
    return arr[idx];
}

// No bounds checking, use with caution!
function unsafeSet(idx, val, arr) {
    var res = arr.slice();
    res[idx] = val;
    return res;
}

function push(val, arr) {
    var res = arr.slice();
    res.push(val);
    return res;
}

function foldl(f, init, arr) {
    var a = init,
        len = arr.length;

    for (var i = 0; i < len; i++) {
        a = A2(f, arr[i], a);
    }

    return a;
}

function foldr(f, init, arr) {
    var a = init;

    for (var i = arr.length - 1; i >= 0; i--) {
        a = A2(f, arr[i], a);
    }

    return a;
}

function map(f, arr) {
    var len = arr.length,
        copy = new Array(len);

    for (var i = 0; i < len; i++) {
        copy[i] = f(arr[i]);
    }

    return copy;
}

function slice(from, to, arr) {
    return arr.slice(from, to);
}

// Appends dest onto source, and makes sure it has max elements.
function merge(dest, source, max) {
    var destLen = dest.length,
        toCopy = max - destLen,
        sourceStop = toCopy > source.length ? source.length : toCopy,
        arr = new Array(destLen + sourceStop);

    for (var i = 0; i < destLen; i++) {
        arr[i] = dest[i];
    }

    for (var i = 0; i < sourceStop; i++) {
        arr[i + destLen] = source[i];
    }

    return arr;
}

return {
    empty: empty,
    singleton: singleton,
    length: length,
    initialize: F3(initialize),
    listInitialize: F2(listInitialize),
    unsafeGet: F2(unsafeGet),
    unsafeSet: F3(unsafeSet),
    push: F2(push),
    foldl: F3(foldl),
    foldr: F3(foldr),
    map: F2(map),
    slice: F3(slice),
    merge: F3(merge)
};

}();

var _Skinney$elm_array_exploration$Array_JsArray$merge = _Skinney$elm_array_exploration$Native_JsArray.merge;
var _Skinney$elm_array_exploration$Array_JsArray$slice = _Skinney$elm_array_exploration$Native_JsArray.slice;
var _Skinney$elm_array_exploration$Array_JsArray$map = _Skinney$elm_array_exploration$Native_JsArray.map;
var _Skinney$elm_array_exploration$Array_JsArray$foldr = _Skinney$elm_array_exploration$Native_JsArray.foldr;
var _Skinney$elm_array_exploration$Array_JsArray$foldl = _Skinney$elm_array_exploration$Native_JsArray.foldl;
var _Skinney$elm_array_exploration$Array_JsArray$push = _Skinney$elm_array_exploration$Native_JsArray.push;
var _Skinney$elm_array_exploration$Array_JsArray$unsafeSet = _Skinney$elm_array_exploration$Native_JsArray.unsafeSet;
var _Skinney$elm_array_exploration$Array_JsArray$unsafeGet = _Skinney$elm_array_exploration$Native_JsArray.unsafeGet;
var _Skinney$elm_array_exploration$Array_JsArray$listInitialize = _Skinney$elm_array_exploration$Native_JsArray.listInitialize;
var _Skinney$elm_array_exploration$Array_JsArray$initialize = _Skinney$elm_array_exploration$Native_JsArray.initialize;
var _Skinney$elm_array_exploration$Array_JsArray$length = _Skinney$elm_array_exploration$Native_JsArray.length;
var _Skinney$elm_array_exploration$Array_JsArray$singleton = _Skinney$elm_array_exploration$Native_JsArray.singleton;
var _Skinney$elm_array_exploration$Array_JsArray$empty = _Skinney$elm_array_exploration$Native_JsArray.empty;
var _Skinney$elm_array_exploration$Array_JsArray$JsArray = function (a) {
	return {ctor: 'JsArray', _0: a};
};

var _Skinney$elm_array_exploration$Array_Hamt$translateIndex = F2(
	function (idx, arr) {
		var posIndex = (_elm_lang$core$Native_Utils.cmp(idx, 0) < 0) ? (arr.length + idx) : idx;
		return (_elm_lang$core$Native_Utils.cmp(posIndex, 0) < 0) ? 0 : ((_elm_lang$core$Native_Utils.cmp(posIndex, arr.length) > 0) ? arr.length : posIndex);
	});
var _Skinney$elm_array_exploration$Array_Hamt$foldl = F3(
	function (f, init, arr) {
		var helper = F2(
			function (i, acc) {
				var _p0 = i;
				if (_p0.ctor === 'SubTree') {
					return A3(_Skinney$elm_array_exploration$Array_JsArray$foldl, helper, acc, _p0._0);
				} else {
					return A3(_Skinney$elm_array_exploration$Array_JsArray$foldl, f, acc, _p0._0);
				}
			});
		var tree = A3(_Skinney$elm_array_exploration$Array_JsArray$foldl, helper, init, arr.tree);
		return A3(_Skinney$elm_array_exploration$Array_JsArray$foldl, f, tree, arr.tail);
	});
var _Skinney$elm_array_exploration$Array_Hamt$foldr = F3(
	function (f, init, arr) {
		var tail = A3(_Skinney$elm_array_exploration$Array_JsArray$foldr, f, init, arr.tail);
		var helper = F2(
			function (i, acc) {
				var _p1 = i;
				if (_p1.ctor === 'SubTree') {
					return A3(_Skinney$elm_array_exploration$Array_JsArray$foldr, helper, acc, _p1._0);
				} else {
					return A3(_Skinney$elm_array_exploration$Array_JsArray$foldr, f, acc, _p1._0);
				}
			});
		return A3(_Skinney$elm_array_exploration$Array_JsArray$foldr, helper, tail, arr.tree);
	});
var _Skinney$elm_array_exploration$Array_Hamt$toList = function (arr) {
	return A3(
		_Skinney$elm_array_exploration$Array_Hamt$foldr,
		F2(
			function (x, y) {
				return {ctor: '::', _0: x, _1: y};
			}),
		{ctor: '[]'},
		arr);
};
var _Skinney$elm_array_exploration$Array_Hamt$tailPrefix = function (len) {
	return (_elm_lang$core$Native_Utils.cmp(len, 32) < 0) ? 0 : ((len >>> 5) << 5);
};
var _Skinney$elm_array_exploration$Array_Hamt$getHelp = F3(
	function (shift, idx, tree) {
		getHelp:
		while (true) {
			var pos = 31 & (idx >>> shift);
			var _p2 = A2(_Skinney$elm_array_exploration$Array_JsArray$unsafeGet, pos, tree);
			if (_p2.ctor === 'SubTree') {
				var _v3 = shift - 5,
					_v4 = idx,
					_v5 = _p2._0;
				shift = _v3;
				idx = _v4;
				tree = _v5;
				continue getHelp;
			} else {
				return A2(_Skinney$elm_array_exploration$Array_JsArray$unsafeGet, 31 & idx, _p2._0);
			}
		}
	});
var _Skinney$elm_array_exploration$Array_Hamt$unsafeGet = F2(
	function (idx, arr) {
		return (_elm_lang$core$Native_Utils.cmp(
			idx,
			_Skinney$elm_array_exploration$Array_Hamt$tailPrefix(arr.length)) > -1) ? A2(_Skinney$elm_array_exploration$Array_JsArray$unsafeGet, 31 & idx, arr.tail) : A3(_Skinney$elm_array_exploration$Array_Hamt$getHelp, arr.startShift, idx, arr.tree);
	});
var _Skinney$elm_array_exploration$Array_Hamt$get = F2(
	function (idx, arr) {
		return ((_elm_lang$core$Native_Utils.cmp(idx, 0) < 0) || (_elm_lang$core$Native_Utils.cmp(idx, arr.length) > -1)) ? _elm_lang$core$Maybe$Nothing : ((_elm_lang$core$Native_Utils.cmp(
			idx,
			_Skinney$elm_array_exploration$Array_Hamt$tailPrefix(arr.length)) > -1) ? _elm_lang$core$Maybe$Just(
			A2(_Skinney$elm_array_exploration$Array_JsArray$unsafeGet, 31 & idx, arr.tail)) : _elm_lang$core$Maybe$Just(
			A3(_Skinney$elm_array_exploration$Array_Hamt$getHelp, arr.startShift, idx, arr.tree)));
	});
var _Skinney$elm_array_exploration$Array_Hamt$toString = function (array) {
	var elements = _Skinney$elm_array_exploration$Array_Hamt$toList(array);
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'Array ',
		_elm_lang$core$Basics$toString(elements));
};
var _Skinney$elm_array_exploration$Array_Hamt$length = function (arr) {
	return arr.length;
};
var _Skinney$elm_array_exploration$Array_Hamt$toIndexedList = function (arr) {
	var helper = F2(
		function (n, _p3) {
			var _p4 = _p3;
			var _p5 = _p4._0;
			return {
				ctor: '_Tuple2',
				_0: _p5 - 1,
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: _p5, _1: n},
					_1: _p4._1
				}
			};
		});
	return _elm_lang$core$Tuple$second(
		A3(
			_Skinney$elm_array_exploration$Array_Hamt$foldr,
			helper,
			{
				ctor: '_Tuple2',
				_0: _Skinney$elm_array_exploration$Array_Hamt$length(arr) - 1,
				_1: {ctor: '[]'}
			},
			arr));
};
var _Skinney$elm_array_exploration$Array_Hamt$isEmpty = function (arr) {
	return _elm_lang$core$Native_Utils.eq(arr.length, 0);
};
var _Skinney$elm_array_exploration$Array_Hamt$Array = F4(
	function (a, b, c, d) {
		return {length: a, startShift: b, tree: c, tail: d};
	});
var _Skinney$elm_array_exploration$Array_Hamt$empty = A4(_Skinney$elm_array_exploration$Array_Hamt$Array, 0, 5, _Skinney$elm_array_exploration$Array_JsArray$empty, _Skinney$elm_array_exploration$Array_JsArray$empty);
var _Skinney$elm_array_exploration$Array_Hamt$Leaf = function (a) {
	return {ctor: 'Leaf', _0: a};
};
var _Skinney$elm_array_exploration$Array_Hamt$SubTree = function (a) {
	return {ctor: 'SubTree', _0: a};
};
var _Skinney$elm_array_exploration$Array_Hamt$initializeHelp = F4(
	function (subTreeSize, startIndex, stopIndex, f) {
		var len = stopIndex - startIndex;
		if (_elm_lang$core$Native_Utils.eq(len, 32)) {
			return _Skinney$elm_array_exploration$Array_Hamt$Leaf(
				A3(_Skinney$elm_array_exploration$Array_JsArray$initialize, 32, startIndex, f));
		} else {
			var nextSubTreeSize = (subTreeSize / 32) | 0;
			var helper = function (idx) {
				var start = startIndex + (subTreeSize * idx);
				var stop = A2(_elm_lang$core$Basics$min, start + subTreeSize, stopIndex);
				return A4(_Skinney$elm_array_exploration$Array_Hamt$initializeHelp, nextSubTreeSize, start, stop, f);
			};
			var numberOfSubTrees = _elm_lang$core$Basics$ceiling(
				_elm_lang$core$Basics$toFloat(len) / _elm_lang$core$Basics$toFloat(subTreeSize));
			return _Skinney$elm_array_exploration$Array_Hamt$SubTree(
				A3(_Skinney$elm_array_exploration$Array_JsArray$initialize, numberOfSubTrees, 0, helper));
		}
	});
var _Skinney$elm_array_exploration$Array_Hamt$initialize = F2(
	function (stop, f) {
		if (_elm_lang$core$Native_Utils.cmp(stop, 0) < 1) {
			return _Skinney$elm_array_exploration$Array_Hamt$empty;
		} else {
			if (_elm_lang$core$Native_Utils.cmp(stop, 32) < 0) {
				return {
					length: stop,
					startShift: 5,
					tree: _Skinney$elm_array_exploration$Array_JsArray$empty,
					tail: A3(_Skinney$elm_array_exploration$Array_JsArray$initialize, stop, 0, f)
				};
			} else {
				var tailLen = 31 & stop;
				var treeLen = stop - tailLen;
				var requiredTreeHeight = _elm_lang$core$Basics$floor(
					A2(
						_elm_lang$core$Basics$logBase,
						32,
						_elm_lang$core$Basics$toFloat(treeLen)));
				var subTreeSize = Math.pow(32, requiredTreeHeight);
				var nextSubTreeSize = (subTreeSize / 32) | 0;
				var numberOfSubTrees = _elm_lang$core$Basics$ceiling(
					_elm_lang$core$Basics$toFloat(treeLen) / _elm_lang$core$Basics$toFloat(subTreeSize));
				var helper = function (idx) {
					var startIndex = subTreeSize * idx;
					var stopIndex = A2(_elm_lang$core$Basics$min, startIndex + subTreeSize, treeLen);
					return A4(_Skinney$elm_array_exploration$Array_Hamt$initializeHelp, nextSubTreeSize, startIndex, stopIndex, f);
				};
				return {
					length: stop,
					startShift: requiredTreeHeight * 5,
					tree: A3(_Skinney$elm_array_exploration$Array_JsArray$initialize, numberOfSubTrees, 0, helper),
					tail: A3(_Skinney$elm_array_exploration$Array_JsArray$initialize, tailLen, treeLen, f)
				};
			}
		}
	});
var _Skinney$elm_array_exploration$Array_Hamt$repeat = F2(
	function (n, e) {
		return A2(
			_Skinney$elm_array_exploration$Array_Hamt$initialize,
			n,
			_elm_lang$core$Basics$always(e));
	});
var _Skinney$elm_array_exploration$Array_Hamt$indexedMap = F2(
	function (f, arr) {
		var helper = function (idx) {
			return A2(
				f,
				idx,
				A2(_Skinney$elm_array_exploration$Array_Hamt$unsafeGet, idx, arr));
		};
		return A2(_Skinney$elm_array_exploration$Array_Hamt$initialize, arr.length, helper);
	});
var _Skinney$elm_array_exploration$Array_Hamt$setHelp = F4(
	function (shift, idx, val, tree) {
		var pos = 31 & (idx >>> shift);
		var _p6 = A2(_Skinney$elm_array_exploration$Array_JsArray$unsafeGet, pos, tree);
		if (_p6.ctor === 'SubTree') {
			var newSub = A4(_Skinney$elm_array_exploration$Array_Hamt$setHelp, shift - 5, idx, val, _p6._0);
			return A3(
				_Skinney$elm_array_exploration$Array_JsArray$unsafeSet,
				pos,
				_Skinney$elm_array_exploration$Array_Hamt$SubTree(newSub),
				tree);
		} else {
			var newLeaf = A3(_Skinney$elm_array_exploration$Array_JsArray$unsafeSet, 31 & idx, val, _p6._0);
			return A3(
				_Skinney$elm_array_exploration$Array_JsArray$unsafeSet,
				pos,
				_Skinney$elm_array_exploration$Array_Hamt$Leaf(newLeaf),
				tree);
		}
	});
var _Skinney$elm_array_exploration$Array_Hamt$set = F3(
	function (idx, val, arr) {
		return ((_elm_lang$core$Native_Utils.cmp(idx, 0) < 0) || (_elm_lang$core$Native_Utils.cmp(idx, arr.length) > -1)) ? arr : ((_elm_lang$core$Native_Utils.cmp(
			idx,
			_Skinney$elm_array_exploration$Array_Hamt$tailPrefix(arr.length)) > -1) ? {
			length: arr.length,
			startShift: arr.startShift,
			tree: arr.tree,
			tail: A3(_Skinney$elm_array_exploration$Array_JsArray$unsafeSet, 31 & idx, val, arr.tail)
		} : {
			length: arr.length,
			startShift: arr.startShift,
			tree: A4(_Skinney$elm_array_exploration$Array_Hamt$setHelp, arr.startShift, idx, val, arr.tree),
			tail: arr.tail
		});
	});
var _Skinney$elm_array_exploration$Array_Hamt$pushTailHelp = F4(
	function (shift, idx, tail, tree) {
		var pos = 31 & (idx >>> shift);
		if (_elm_lang$core$Native_Utils.cmp(
			pos,
			_Skinney$elm_array_exploration$Array_JsArray$length(tree)) > -1) {
			return A2(
				_Skinney$elm_array_exploration$Array_JsArray$push,
				_Skinney$elm_array_exploration$Array_Hamt$Leaf(tail),
				tree);
		} else {
			var val = A2(_Skinney$elm_array_exploration$Array_JsArray$unsafeGet, pos, tree);
			var _p7 = val;
			if (_p7.ctor === 'SubTree') {
				var newSub = A4(_Skinney$elm_array_exploration$Array_Hamt$pushTailHelp, shift - 5, idx, tail, _p7._0);
				return A3(
					_Skinney$elm_array_exploration$Array_JsArray$unsafeSet,
					pos,
					_Skinney$elm_array_exploration$Array_Hamt$SubTree(newSub),
					tree);
			} else {
				var newSub = A4(
					_Skinney$elm_array_exploration$Array_Hamt$pushTailHelp,
					shift - 5,
					idx,
					tail,
					_Skinney$elm_array_exploration$Array_JsArray$singleton(val));
				return A3(
					_Skinney$elm_array_exploration$Array_JsArray$unsafeSet,
					pos,
					_Skinney$elm_array_exploration$Array_Hamt$SubTree(newSub),
					tree);
			}
		}
	});
var _Skinney$elm_array_exploration$Array_Hamt$pushTail = F2(
	function (newTail, arr) {
		var tailLen = _Skinney$elm_array_exploration$Array_JsArray$length(newTail);
		var newLen = (arr.length + tailLen) - _Skinney$elm_array_exploration$Array_JsArray$length(arr.tail);
		var overflow = _elm_lang$core$Native_Utils.cmp(newLen >>> 5, 1 << arr.startShift) > -1;
		var newTree = _elm_lang$core$Native_Utils.eq(tailLen, 32) ? A4(_Skinney$elm_array_exploration$Array_Hamt$pushTailHelp, arr.startShift, arr.length, newTail, arr.tree) : arr.tree;
		return {
			length: newLen,
			startShift: overflow ? (arr.startShift + 5) : arr.startShift,
			tree: overflow ? _Skinney$elm_array_exploration$Array_JsArray$singleton(
				_Skinney$elm_array_exploration$Array_Hamt$SubTree(newTree)) : newTree,
			tail: _elm_lang$core$Native_Utils.eq(tailLen, 32) ? _Skinney$elm_array_exploration$Array_JsArray$empty : newTail
		};
	});
var _Skinney$elm_array_exploration$Array_Hamt$fromListHelp = F2(
	function (list, arr) {
		fromListHelp:
		while (true) {
			var _p8 = A2(_Skinney$elm_array_exploration$Array_JsArray$listInitialize, list, 32);
			var newList = _p8._0;
			var newTail = _p8._1;
			var newArray = A2(_Skinney$elm_array_exploration$Array_Hamt$pushTail, newTail, arr);
			var _p9 = newList;
			if (_p9.ctor === '[]') {
				return newArray;
			} else {
				var _v10 = newList,
					_v11 = newArray;
				list = _v10;
				arr = _v11;
				continue fromListHelp;
			}
		}
	});
var _Skinney$elm_array_exploration$Array_Hamt$fromList = function (ls) {
	var _p10 = ls;
	if (_p10.ctor === '[]') {
		return _Skinney$elm_array_exploration$Array_Hamt$empty;
	} else {
		return A2(_Skinney$elm_array_exploration$Array_Hamt$fromListHelp, ls, _Skinney$elm_array_exploration$Array_Hamt$empty);
	}
};
var _Skinney$elm_array_exploration$Array_Hamt$filter = F2(
	function (f, arr) {
		var helper = F2(
			function (n, acc) {
				return f(n) ? {ctor: '::', _0: n, _1: acc} : acc;
			});
		return _Skinney$elm_array_exploration$Array_Hamt$fromList(
			A3(
				_Skinney$elm_array_exploration$Array_Hamt$foldr,
				helper,
				{ctor: '[]'},
				arr));
	});
var _Skinney$elm_array_exploration$Array_Hamt$push = F2(
	function (a, arr) {
		var newTail = A2(_Skinney$elm_array_exploration$Array_JsArray$push, a, arr.tail);
		return A2(_Skinney$elm_array_exploration$Array_Hamt$pushTail, newTail, arr);
	});
var _Skinney$elm_array_exploration$Array_Hamt$map = F2(
	function (f, arr) {
		var helper = function (i) {
			var _p11 = i;
			if (_p11.ctor === 'SubTree') {
				return _Skinney$elm_array_exploration$Array_Hamt$SubTree(
					A2(_Skinney$elm_array_exploration$Array_JsArray$map, helper, _p11._0));
			} else {
				return _Skinney$elm_array_exploration$Array_Hamt$Leaf(
					A2(_Skinney$elm_array_exploration$Array_JsArray$map, f, _p11._0));
			}
		};
		return {
			length: arr.length,
			startShift: arr.startShift,
			tree: A2(_Skinney$elm_array_exploration$Array_JsArray$map, helper, arr.tree),
			tail: A2(_Skinney$elm_array_exploration$Array_JsArray$map, f, arr.tail)
		};
	});
var _Skinney$elm_array_exploration$Array_Hamt$append = F2(
	function (a, b) {
		var tailMerge = F2(
			function (toMerge, arr) {
				var tailToInsert = A3(_Skinney$elm_array_exploration$Array_JsArray$merge, arr.tail, toMerge, 32);
				var tailLen = _Skinney$elm_array_exploration$Array_JsArray$length(tailToInsert);
				var newTree = _elm_lang$core$Native_Utils.eq(tailLen, 32) ? A4(_Skinney$elm_array_exploration$Array_Hamt$pushTailHelp, arr.startShift, arr.length, tailToInsert, arr.tree) : arr.tree;
				var toMergeLen = _Skinney$elm_array_exploration$Array_JsArray$length(toMerge);
				var leftOver = A2(
					_elm_lang$core$Basics$max,
					0,
					(_Skinney$elm_array_exploration$Array_JsArray$length(arr.tail) + toMergeLen) - 32);
				var newLen = arr.length + toMergeLen;
				var overflow = _elm_lang$core$Native_Utils.cmp(newLen >>> 5, 1 << arr.startShift) > -1;
				return {
					length: newLen,
					startShift: overflow ? (arr.startShift + 5) : arr.startShift,
					tree: overflow ? _Skinney$elm_array_exploration$Array_JsArray$singleton(
						_Skinney$elm_array_exploration$Array_Hamt$SubTree(newTree)) : newTree,
					tail: _elm_lang$core$Native_Utils.eq(tailLen, 32) ? A3(_Skinney$elm_array_exploration$Array_JsArray$slice, toMergeLen - leftOver, toMergeLen, toMerge) : tailToInsert
				};
			});
		var helper = F2(
			function (i, acc) {
				var _p12 = i;
				if (_p12.ctor === 'SubTree') {
					return A3(_Skinney$elm_array_exploration$Array_JsArray$foldl, helper, acc, _p12._0);
				} else {
					return A2(tailMerge, _p12._0, acc);
				}
			});
		return A2(
			tailMerge,
			b.tail,
			A3(_Skinney$elm_array_exploration$Array_JsArray$foldl, helper, a, b.tree));
	});
var _Skinney$elm_array_exploration$Array_Hamt$sliceRight = F2(
	function (end, arr) {
		if (_elm_lang$core$Native_Utils.eq(end, arr.length)) {
			return arr;
		} else {
			if (_elm_lang$core$Native_Utils.cmp(
				end,
				_Skinney$elm_array_exploration$Array_Hamt$tailPrefix(arr.length)) > -1) {
				return {
					length: end,
					startShift: arr.startShift,
					tree: arr.tree,
					tail: A3(_Skinney$elm_array_exploration$Array_JsArray$slice, 0, 31 & end, arr.tail)
				};
			} else {
				var hoistTree = F3(
					function (oldShift, newShift, tree) {
						hoistTree:
						while (true) {
							if (_elm_lang$core$Native_Utils.cmp(oldShift, newShift) < 1) {
								return tree;
							} else {
								var _p13 = A2(_Skinney$elm_array_exploration$Array_JsArray$unsafeGet, 0, tree);
								if (_p13.ctor === 'SubTree') {
									var _v16 = oldShift - 5,
										_v17 = newShift,
										_v18 = _p13._0;
									oldShift = _v16;
									newShift = _v17;
									tree = _v18;
									continue hoistTree;
								} else {
									return tree;
								}
							}
						}
					});
				var newShift = (_elm_lang$core$Native_Utils.cmp(end, 1024) < 0) ? 5 : (_elm_lang$core$Basics$floor(
					A2(
						_elm_lang$core$Basics$logBase,
						32,
						_elm_lang$core$Basics$toFloat(end))) * 5);
				var endIdx = _Skinney$elm_array_exploration$Array_Hamt$tailPrefix(end);
				var fetchNewTail = F2(
					function (shift, tree) {
						fetchNewTail:
						while (true) {
							var pos = 31 & (endIdx >>> shift);
							var _p14 = A2(_Skinney$elm_array_exploration$Array_JsArray$unsafeGet, pos, tree);
							if (_p14.ctor === 'SubTree') {
								var _v20 = shift - 5,
									_v21 = _p14._0;
								shift = _v20;
								tree = _v21;
								continue fetchNewTail;
							} else {
								return A3(_Skinney$elm_array_exploration$Array_JsArray$slice, 0, 31 & end, _p14._0);
							}
						}
					});
				var sliceTree = F2(
					function (shift, tree) {
						var lastPos = 31 & (endIdx >>> shift);
						var _p15 = A2(_Skinney$elm_array_exploration$Array_JsArray$unsafeGet, lastPos, tree);
						if (_p15.ctor === 'SubTree') {
							var newSub = A2(sliceTree, shift - 5, _p15._0);
							var _p16 = _Skinney$elm_array_exploration$Array_JsArray$length(newSub);
							switch (_p16) {
								case 0:
									return A3(_Skinney$elm_array_exploration$Array_JsArray$slice, 0, lastPos, tree);
								case 1:
									var val = A2(_Skinney$elm_array_exploration$Array_JsArray$unsafeGet, 0, newSub);
									var nodeToInsert = function () {
										var _p17 = val;
										if (_p17.ctor === 'SubTree') {
											return _Skinney$elm_array_exploration$Array_Hamt$SubTree(newSub);
										} else {
											return val;
										}
									}();
									return A3(
										_Skinney$elm_array_exploration$Array_JsArray$unsafeSet,
										lastPos,
										nodeToInsert,
										A3(_Skinney$elm_array_exploration$Array_JsArray$slice, 0, lastPos + 1, tree));
								default:
									return A3(
										_Skinney$elm_array_exploration$Array_JsArray$unsafeSet,
										lastPos,
										_Skinney$elm_array_exploration$Array_Hamt$SubTree(newSub),
										A3(_Skinney$elm_array_exploration$Array_JsArray$slice, 0, lastPos + 1, tree));
							}
						} else {
							return A3(_Skinney$elm_array_exploration$Array_JsArray$slice, 0, lastPos, tree);
						}
					});
				return {
					length: end,
					startShift: newShift,
					tree: A3(
						hoistTree,
						arr.startShift,
						newShift,
						A2(sliceTree, arr.startShift, arr.tree)),
					tail: A2(fetchNewTail, arr.startShift, arr.tree)
				};
			}
		}
	});
var _Skinney$elm_array_exploration$Array_Hamt$slice = F3(
	function (from, to, arr) {
		var correctTo = A2(_Skinney$elm_array_exploration$Array_Hamt$translateIndex, to, arr);
		var correctFrom = A2(_Skinney$elm_array_exploration$Array_Hamt$translateIndex, from, arr);
		if (_elm_lang$core$Native_Utils.cmp(correctFrom, correctTo) > 0) {
			return _Skinney$elm_array_exploration$Array_Hamt$empty;
		} else {
			if (_elm_lang$core$Native_Utils.cmp(correctFrom, 0) > 0) {
				var helper = function (i) {
					return A2(_Skinney$elm_array_exploration$Array_Hamt$unsafeGet, i + correctFrom, arr);
				};
				var len = correctTo - correctFrom;
				return A2(_Skinney$elm_array_exploration$Array_Hamt$initialize, len, helper);
			} else {
				return A2(_Skinney$elm_array_exploration$Array_Hamt$sliceRight, correctTo, arr);
			}
		}
	});

var _eeue56$elm_all_dict$AllDict$foldr = F3(
	function (f, acc, t) {
		foldr:
		while (true) {
			var _p0 = t;
			if (_p0.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v1 = f,
					_v2 = A3(
					f,
					_p0._1,
					_p0._2,
					A3(_eeue56$elm_all_dict$AllDict$foldr, f, acc, _p0._4)),
					_v3 = _p0._3;
				f = _v1;
				acc = _v2;
				t = _v3;
				continue foldr;
			}
		}
	});
var _eeue56$elm_all_dict$AllDict$keys = function (dict) {
	return A3(
		_eeue56$elm_all_dict$AllDict$foldr,
		F3(
			function (key, value, keyList) {
				return {ctor: '::', _0: key, _1: keyList};
			}),
		{ctor: '[]'},
		dict);
};
var _eeue56$elm_all_dict$AllDict$values = function (dict) {
	return A3(
		_eeue56$elm_all_dict$AllDict$foldr,
		F3(
			function (key, value, valueList) {
				return {ctor: '::', _0: value, _1: valueList};
			}),
		{ctor: '[]'},
		dict);
};
var _eeue56$elm_all_dict$AllDict$toList = function (dict) {
	return A3(
		_eeue56$elm_all_dict$AllDict$foldr,
		F3(
			function (key, value, list) {
				return {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: key, _1: value},
					_1: list
				};
			}),
		{ctor: '[]'},
		dict);
};
var _eeue56$elm_all_dict$AllDict$foldl = F3(
	function (f, acc, dict) {
		foldl:
		while (true) {
			var _p1 = dict;
			if (_p1.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v5 = f,
					_v6 = A3(
					f,
					_p1._1,
					_p1._2,
					A3(_eeue56$elm_all_dict$AllDict$foldl, f, acc, _p1._3)),
					_v7 = _p1._4;
				f = _v5;
				acc = _v6;
				dict = _v7;
				continue foldl;
			}
		}
	});
var _eeue56$elm_all_dict$AllDict$isBBlack = function (dict) {
	var _p2 = dict;
	_v8_2:
	do {
		if (_p2.ctor === 'RBNode_elm_builtin') {
			if (_p2._0.ctor === 'BBlack') {
				return true;
			} else {
				break _v8_2;
			}
		} else {
			if (_p2._0.ctor === 'LBBlack') {
				return true;
			} else {
				break _v8_2;
			}
		}
	} while(false);
	return false;
};
var _eeue56$elm_all_dict$AllDict$showFlag = function (f) {
	var _p3 = f;
	switch (_p3.ctor) {
		case 'Insert':
			return 'Insert';
		case 'Remove':
			return 'Remove';
		default:
			return 'Same';
	}
};
var _eeue56$elm_all_dict$AllDict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			var _p4 = dict;
			if (_p4.ctor === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var _v11 = A2(_eeue56$elm_all_dict$AllDict$sizeHelp, n + 1, _p4._4),
					_v12 = _p4._3;
				n = _v11;
				dict = _v12;
				continue sizeHelp;
			}
		}
	});
var _eeue56$elm_all_dict$AllDict$size = function (dict) {
	return A2(_eeue56$elm_all_dict$AllDict$sizeHelp, 0, dict);
};
var _eeue56$elm_all_dict$AllDict$isEmpty = function (dict) {
	var _p5 = dict;
	if (_p5.ctor === 'RBEmpty_elm_builtin') {
		return true;
	} else {
		return false;
	}
};
var _eeue56$elm_all_dict$AllDict$getOrd = function (dict) {
	getOrd:
	while (true) {
		var _p6 = dict;
		if (_p6.ctor === 'RBEmpty_elm_builtin') {
			return _p6._1;
		} else {
			var _v15 = _p6._3;
			dict = _v15;
			continue getOrd;
		}
	}
};
var _eeue56$elm_all_dict$AllDict$getHelper = F2(
	function (targetKey, dict) {
		getHelper:
		while (true) {
			var ord = _eeue56$elm_all_dict$AllDict$getOrd(dict);
			var _p7 = dict;
			if (_p7.ctor === 'RBEmpty_elm_builtin') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p8 = A2(
					_elm_lang$core$Basics$compare,
					ord(targetKey),
					ord(_p7._1));
				switch (_p8.ctor) {
					case 'LT':
						var _v18 = targetKey,
							_v19 = _p7._3;
						targetKey = _v18;
						dict = _v19;
						continue getHelper;
					case 'EQ':
						return _elm_lang$core$Maybe$Just(_p7._2);
					default:
						var _v20 = targetKey,
							_v21 = _p7._4;
						targetKey = _v20;
						dict = _v21;
						continue getHelper;
				}
			}
		}
	});
var _eeue56$elm_all_dict$AllDict$get = F2(
	function (targetKey, dict) {
		return A2(_eeue56$elm_all_dict$AllDict$getHelper, targetKey, dict);
	});
var _eeue56$elm_all_dict$AllDict$member = F2(
	function (key, dict) {
		var _p9 = A2(_eeue56$elm_all_dict$AllDict$getHelper, key, dict);
		if (_p9.ctor === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var _eeue56$elm_all_dict$AllDict$max = function (dict) {
	max:
	while (true) {
		var _p10 = dict;
		if (_p10.ctor === 'RBNode_elm_builtin') {
			if (_p10._4.ctor === 'RBEmpty_elm_builtin') {
				return {ctor: '_Tuple2', _0: _p10._1, _1: _p10._2};
			} else {
				var _v24 = _p10._4;
				dict = _v24;
				continue max;
			}
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'AllDict',
				{
					start: {line: 157, column: 5},
					end: {line: 165, column: 51}
				},
				_p10)('(max Empty) is not defined');
		}
	}
};
var _eeue56$elm_all_dict$AllDict$min = function (dict) {
	min:
	while (true) {
		var _p12 = dict;
		if (_p12.ctor === 'RBNode_elm_builtin') {
			if ((_p12._3.ctor === 'RBEmpty_elm_builtin') && (_p12._3._0.ctor === 'LBlack')) {
				return {ctor: '_Tuple2', _0: _p12._1, _1: _p12._2};
			} else {
				var _v26 = _p12._3;
				dict = _v26;
				continue min;
			}
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'AllDict',
				{
					start: {line: 145, column: 5},
					end: {line: 153, column: 51}
				},
				_p12)('(min Empty) is not defined');
		}
	}
};
var _eeue56$elm_all_dict$AllDict$fullEq = F2(
	function (first, second) {
		return _elm_lang$core$Native_Utils.eq(
			_eeue56$elm_all_dict$AllDict$toList(first),
			_eeue56$elm_all_dict$AllDict$toList(second)) && _elm_lang$core$Native_Utils.eq(
			_eeue56$elm_all_dict$AllDict$getOrd(first),
			_eeue56$elm_all_dict$AllDict$getOrd(second));
	});
var _eeue56$elm_all_dict$AllDict$eq = F2(
	function (first, second) {
		return _elm_lang$core$Native_Utils.eq(
			_eeue56$elm_all_dict$AllDict$toList(first),
			_eeue56$elm_all_dict$AllDict$toList(second));
	});
var _eeue56$elm_all_dict$AllDict$showLColor = function (color) {
	var _p14 = color;
	if (_p14.ctor === 'LBlack') {
		return 'LBlack';
	} else {
		return 'LBBlack';
	}
};
var _eeue56$elm_all_dict$AllDict$showNColor = function (c) {
	var _p15 = c;
	switch (_p15.ctor) {
		case 'Red':
			return 'Red';
		case 'Black':
			return 'Black';
		case 'BBlack':
			return 'BBlack';
		default:
			return 'NBlack';
	}
};
var _eeue56$elm_all_dict$AllDict$reportRemBug = F4(
	function (msg, c, lgot, rgot) {
		return _elm_lang$core$Native_Utils.crash(
			'AllDict',
			{
				start: {line: 365, column: 3},
				end: {line: 365, column: 14}
			})(
			_elm_lang$core$String$concat(
				{
					ctor: '::',
					_0: 'Internal red-black tree invariant violated, expected ',
					_1: {
						ctor: '::',
						_0: msg,
						_1: {
							ctor: '::',
							_0: ' and got ',
							_1: {
								ctor: '::',
								_0: _eeue56$elm_all_dict$AllDict$showNColor(c),
								_1: {
									ctor: '::',
									_0: '/',
									_1: {
										ctor: '::',
										_0: lgot,
										_1: {
											ctor: '::',
											_0: '/',
											_1: {
												ctor: '::',
												_0: rgot,
												_1: {
													ctor: '::',
													_0: '\nPlease report this bug to <https://github.com/elm-lang/Elm/issues>',
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}));
	});
var _eeue56$elm_all_dict$AllDict$NBlack = {ctor: 'NBlack'};
var _eeue56$elm_all_dict$AllDict$BBlack = {ctor: 'BBlack'};
var _eeue56$elm_all_dict$AllDict$Black = {ctor: 'Black'};
var _eeue56$elm_all_dict$AllDict$blackish = function (t) {
	var _p16 = t;
	if (_p16.ctor === 'RBNode_elm_builtin') {
		var _p17 = _p16._0;
		return _elm_lang$core$Native_Utils.eq(_p17, _eeue56$elm_all_dict$AllDict$Black) || _elm_lang$core$Native_Utils.eq(_p17, _eeue56$elm_all_dict$AllDict$BBlack);
	} else {
		return true;
	}
};
var _eeue56$elm_all_dict$AllDict$Red = {ctor: 'Red'};
var _eeue56$elm_all_dict$AllDict$moreBlack = function (color) {
	var _p18 = color;
	switch (_p18.ctor) {
		case 'Black':
			return _eeue56$elm_all_dict$AllDict$BBlack;
		case 'Red':
			return _eeue56$elm_all_dict$AllDict$Black;
		case 'NBlack':
			return _eeue56$elm_all_dict$AllDict$Red;
		default:
			return _elm_lang$core$Native_Utils.crashCase(
				'AllDict',
				{
					start: {line: 339, column: 5},
					end: {line: 343, column: 73}
				},
				_p18)('Can\'t make a double black node more black!');
	}
};
var _eeue56$elm_all_dict$AllDict$lessBlack = function (color) {
	var _p20 = color;
	switch (_p20.ctor) {
		case 'BBlack':
			return _eeue56$elm_all_dict$AllDict$Black;
		case 'Black':
			return _eeue56$elm_all_dict$AllDict$Red;
		case 'Red':
			return _eeue56$elm_all_dict$AllDict$NBlack;
		default:
			return _elm_lang$core$Native_Utils.crashCase(
				'AllDict',
				{
					start: {line: 348, column: 5},
					end: {line: 352, column: 75}
				},
				_p20)('Can\'t make a negative black node less black!');
	}
};
var _eeue56$elm_all_dict$AllDict$LBBlack = {ctor: 'LBBlack'};
var _eeue56$elm_all_dict$AllDict$LBlack = {ctor: 'LBlack'};
var _eeue56$elm_all_dict$AllDict$RBEmpty_elm_builtin = F2(
	function (a, b) {
		return {ctor: 'RBEmpty_elm_builtin', _0: a, _1: b};
	});
var _eeue56$elm_all_dict$AllDict$empty = function (ord) {
	return A2(_eeue56$elm_all_dict$AllDict$RBEmpty_elm_builtin, _eeue56$elm_all_dict$AllDict$LBlack, ord);
};
var _eeue56$elm_all_dict$AllDict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {ctor: 'RBNode_elm_builtin', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _eeue56$elm_all_dict$AllDict$ensureBlackRoot = function (dict) {
	var _p22 = dict;
	_v32_2:
	do {
		if (_p22.ctor === 'RBNode_elm_builtin') {
			switch (_p22._0.ctor) {
				case 'Red':
					return A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _eeue56$elm_all_dict$AllDict$Black, _p22._1, _p22._2, _p22._3, _p22._4);
				case 'Black':
					return dict;
				default:
					break _v32_2;
			}
		} else {
			break _v32_2;
		}
	} while(false);
	return dict;
};
var _eeue56$elm_all_dict$AllDict$lessBlackTree = function (dict) {
	var _p23 = dict;
	if (_p23.ctor === 'RBNode_elm_builtin') {
		return A5(
			_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin,
			_eeue56$elm_all_dict$AllDict$lessBlack(_p23._0),
			_p23._1,
			_p23._2,
			_p23._3,
			_p23._4);
	} else {
		if (_p23._0.ctor === 'LBBlack') {
			return A2(_eeue56$elm_all_dict$AllDict$RBEmpty_elm_builtin, _eeue56$elm_all_dict$AllDict$LBlack, _p23._1);
		} else {
			return dict;
		}
	}
};
var _eeue56$elm_all_dict$AllDict$blacken = function (t) {
	var _p24 = t;
	if (_p24.ctor === 'RBEmpty_elm_builtin') {
		return A2(_eeue56$elm_all_dict$AllDict$RBEmpty_elm_builtin, _eeue56$elm_all_dict$AllDict$LBlack, _p24._1);
	} else {
		return A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _eeue56$elm_all_dict$AllDict$Black, _p24._1, _p24._2, _p24._3, _p24._4);
	}
};
var _eeue56$elm_all_dict$AllDict$redden = function (t) {
	var _p25 = t;
	if (_p25.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Native_Utils.crashCase(
			'AllDict',
			{
				start: {line: 486, column: 5},
				end: {line: 488, column: 69}
			},
			_p25)('can\'t make a Leaf red');
	} else {
		return A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _eeue56$elm_all_dict$AllDict$Red, _p25._1, _p25._2, _p25._3, _p25._4);
	}
};
var _eeue56$elm_all_dict$AllDict$balance_node = function (t) {
	var assemble = function (col) {
		return function (xk) {
			return function (xv) {
				return function (yk) {
					return function (yv) {
						return function (zk) {
							return function (zv) {
								return function (a) {
									return function (b) {
										return function (c) {
											return function (d) {
												return A5(
													_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin,
													_eeue56$elm_all_dict$AllDict$lessBlack(col),
													yk,
													yv,
													A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _eeue56$elm_all_dict$AllDict$Black, xk, xv, a, b),
													A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _eeue56$elm_all_dict$AllDict$Black, zk, zv, c, d));
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
	if (_eeue56$elm_all_dict$AllDict$blackish(t)) {
		var _p27 = t;
		_v36_6:
		do {
			_v36_5:
			do {
				_v36_4:
				do {
					_v36_3:
					do {
						_v36_2:
						do {
							_v36_1:
							do {
								_v36_0:
								do {
									if (_p27.ctor === 'RBNode_elm_builtin') {
										if (_p27._3.ctor === 'RBNode_elm_builtin') {
											if (_p27._4.ctor === 'RBNode_elm_builtin') {
												switch (_p27._3._0.ctor) {
													case 'Red':
														switch (_p27._4._0.ctor) {
															case 'Red':
																if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																	break _v36_0;
																} else {
																	if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																		break _v36_1;
																	} else {
																		if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																			break _v36_2;
																		} else {
																			if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																				break _v36_3;
																			} else {
																				break _v36_6;
																			}
																		}
																	}
																}
															case 'NBlack':
																if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																	break _v36_0;
																} else {
																	if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																		break _v36_1;
																	} else {
																		if (((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) {
																			break _v36_4;
																		} else {
																			break _v36_6;
																		}
																	}
																}
															default:
																if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																	break _v36_0;
																} else {
																	if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																		break _v36_1;
																	} else {
																		break _v36_6;
																	}
																}
														}
													case 'NBlack':
														switch (_p27._4._0.ctor) {
															case 'Red':
																if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																	break _v36_2;
																} else {
																	if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																		break _v36_3;
																	} else {
																		if (((_p27._0.ctor === 'BBlack') && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																			break _v36_5;
																		} else {
																			break _v36_6;
																		}
																	}
																}
															case 'NBlack':
																if (_p27._0.ctor === 'BBlack') {
																	if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Black')) {
																		break _v36_4;
																	} else {
																		if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Black')) {
																			break _v36_5;
																		} else {
																			break _v36_6;
																		}
																	}
																} else {
																	break _v36_6;
																}
															default:
																if (((_p27._0.ctor === 'BBlack') && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																	break _v36_5;
																} else {
																	break _v36_6;
																}
														}
													default:
														switch (_p27._4._0.ctor) {
															case 'Red':
																if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																	break _v36_2;
																} else {
																	if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																		break _v36_3;
																	} else {
																		break _v36_6;
																	}
																}
															case 'NBlack':
																if (((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) {
																	break _v36_4;
																} else {
																	break _v36_6;
																}
															default:
																break _v36_6;
														}
												}
											} else {
												switch (_p27._3._0.ctor) {
													case 'Red':
														if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
															break _v36_0;
														} else {
															if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																break _v36_1;
															} else {
																break _v36_6;
															}
														}
													case 'NBlack':
														if (((_p27._0.ctor === 'BBlack') && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
															break _v36_5;
														} else {
															break _v36_6;
														}
													default:
														break _v36_6;
												}
											}
										} else {
											if (_p27._4.ctor === 'RBNode_elm_builtin') {
												switch (_p27._4._0.ctor) {
													case 'Red':
														if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
															break _v36_2;
														} else {
															if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																break _v36_3;
															} else {
																break _v36_6;
															}
														}
													case 'NBlack':
														if (((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) {
															break _v36_4;
														} else {
															break _v36_6;
														}
													default:
														break _v36_6;
												}
											} else {
												break _v36_6;
											}
										}
									} else {
										break _v36_6;
									}
								} while(false);
								return assemble(_p27._0)(_p27._3._3._1)(_p27._3._3._2)(_p27._3._1)(_p27._3._2)(_p27._1)(_p27._2)(_p27._3._3._3)(_p27._3._3._4)(_p27._3._4)(_p27._4);
							} while(false);
							return assemble(_p27._0)(_p27._3._1)(_p27._3._2)(_p27._3._4._1)(_p27._3._4._2)(_p27._1)(_p27._2)(_p27._3._3)(_p27._3._4._3)(_p27._3._4._4)(_p27._4);
						} while(false);
						return assemble(_p27._0)(_p27._1)(_p27._2)(_p27._4._3._1)(_p27._4._3._2)(_p27._4._1)(_p27._4._2)(_p27._3)(_p27._4._3._3)(_p27._4._3._4)(_p27._4._4);
					} while(false);
					return assemble(_p27._0)(_p27._1)(_p27._2)(_p27._4._1)(_p27._4._2)(_p27._4._4._1)(_p27._4._4._2)(_p27._3)(_p27._4._3)(_p27._4._4._3)(_p27._4._4._4);
				} while(false);
				var _p29 = _p27._4._4;
				var _p28 = _p29;
				if ((_p28.ctor === 'RBNode_elm_builtin') && (_p28._0.ctor === 'Black')) {
					return A5(
						_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin,
						_eeue56$elm_all_dict$AllDict$Black,
						_p27._4._3._1,
						_p27._4._3._2,
						A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _eeue56$elm_all_dict$AllDict$Black, _p27._1, _p27._2, _p27._3, _p27._4._3._3),
						A5(
							_eeue56$elm_all_dict$AllDict$balance,
							_eeue56$elm_all_dict$AllDict$Black,
							_p27._4._1,
							_p27._4._2,
							_p27._4._3._4,
							_eeue56$elm_all_dict$AllDict$redden(_p29)));
				} else {
					return t;
				}
			} while(false);
			var _p31 = _p27._3._3;
			var _p30 = _p31;
			if ((_p30.ctor === 'RBNode_elm_builtin') && (_p30._0.ctor === 'Black')) {
				return A5(
					_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin,
					_eeue56$elm_all_dict$AllDict$Black,
					_p27._3._4._1,
					_p27._3._4._2,
					A5(
						_eeue56$elm_all_dict$AllDict$balance,
						_eeue56$elm_all_dict$AllDict$Black,
						_p27._3._1,
						_p27._3._2,
						_eeue56$elm_all_dict$AllDict$redden(_p31),
						_p27._3._4._3),
					A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _eeue56$elm_all_dict$AllDict$Black, _p27._1, _p27._2, _p27._3._4._4, _p27._4));
			} else {
				return t;
			}
		} while(false);
		return t;
	} else {
		return t;
	}
};
var _eeue56$elm_all_dict$AllDict$balance = F5(
	function (c, k, v, l, r) {
		return _eeue56$elm_all_dict$AllDict$balance_node(
			A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, c, k, v, l, r));
	});
var _eeue56$elm_all_dict$AllDict$bubble = F5(
	function (c, k, v, l, r) {
		return (_eeue56$elm_all_dict$AllDict$isBBlack(l) || _eeue56$elm_all_dict$AllDict$isBBlack(r)) ? A5(
			_eeue56$elm_all_dict$AllDict$balance,
			_eeue56$elm_all_dict$AllDict$moreBlack(c),
			k,
			v,
			_eeue56$elm_all_dict$AllDict$lessBlackTree(l),
			_eeue56$elm_all_dict$AllDict$lessBlackTree(r)) : A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, c, k, v, l, r);
	});
var _eeue56$elm_all_dict$AllDict$remove_max = F5(
	function (c, k, v, l, r) {
		var _p32 = r;
		if (_p32.ctor === 'RBEmpty_elm_builtin') {
			return A3(_eeue56$elm_all_dict$AllDict$rem, c, l, r);
		} else {
			return A5(
				_eeue56$elm_all_dict$AllDict$bubble,
				c,
				k,
				v,
				l,
				A5(_eeue56$elm_all_dict$AllDict$remove_max, _p32._0, _p32._1, _p32._2, _p32._3, _p32._4));
		}
	});
var _eeue56$elm_all_dict$AllDict$rem = F3(
	function (c, l, r) {
		var _p33 = {ctor: '_Tuple2', _0: l, _1: r};
		if (_p33._0.ctor === 'RBEmpty_elm_builtin') {
			if (_p33._1.ctor === 'RBEmpty_elm_builtin') {
				var _p35 = _p33._0._1;
				var _p34 = c;
				switch (_p34.ctor) {
					case 'Red':
						return A2(_eeue56$elm_all_dict$AllDict$RBEmpty_elm_builtin, _eeue56$elm_all_dict$AllDict$LBlack, _p35);
					case 'Black':
						return A2(_eeue56$elm_all_dict$AllDict$RBEmpty_elm_builtin, _eeue56$elm_all_dict$AllDict$LBBlack, _p35);
					default:
						return _eeue56$elm_all_dict$Native_Debug.crash('cannot have bblack or nblack nodes at this point');
				}
			} else {
				var _p38 = _p33._1._0;
				var _p37 = _p33._0._0;
				var _p36 = {ctor: '_Tuple3', _0: c, _1: _p37, _2: _p38};
				if ((((_p36.ctor === '_Tuple3') && (_p36._0.ctor === 'Black')) && (_p36._1.ctor === 'LBlack')) && (_p36._2.ctor === 'Red')) {
					return A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _eeue56$elm_all_dict$AllDict$Black, _p33._1._1, _p33._1._2, _p33._1._3, _p33._1._4);
				} else {
					return A4(
						_eeue56$elm_all_dict$AllDict$reportRemBug,
						'Black/LBlack/Red',
						c,
						_eeue56$elm_all_dict$AllDict$showLColor(_p37),
						_eeue56$elm_all_dict$AllDict$showNColor(_p38));
				}
			}
		} else {
			if (_p33._1.ctor === 'RBEmpty_elm_builtin') {
				var _p41 = _p33._1._0;
				var _p40 = _p33._0._0;
				var _p39 = {ctor: '_Tuple3', _0: c, _1: _p40, _2: _p41};
				if ((((_p39.ctor === '_Tuple3') && (_p39._0.ctor === 'Black')) && (_p39._1.ctor === 'Red')) && (_p39._2.ctor === 'LBlack')) {
					return A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _eeue56$elm_all_dict$AllDict$Black, _p33._0._1, _p33._0._2, _p33._0._3, _p33._0._4);
				} else {
					return A4(
						_eeue56$elm_all_dict$AllDict$reportRemBug,
						'Black/Red/LBlack',
						c,
						_eeue56$elm_all_dict$AllDict$showNColor(_p40),
						_eeue56$elm_all_dict$AllDict$showLColor(_p41));
				}
			} else {
				var _p47 = _p33._0._2;
				var _p46 = _p33._0._4;
				var _p45 = _p33._0._3;
				var _p44 = _p33._0._1;
				var _p43 = _p33._0._0;
				var l_ = A5(_eeue56$elm_all_dict$AllDict$remove_max, _p43, _p44, _p47, _p45, _p46);
				var r = A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _p33._1._0, _p33._1._1, _p33._1._2, _p33._1._3, _p33._1._4);
				var l = A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _p43, _p44, _p47, _p45, _p46);
				var _p42 = _eeue56$elm_all_dict$AllDict$max(l);
				var k = _p42._0;
				var v = _p42._1;
				return A5(_eeue56$elm_all_dict$AllDict$bubble, c, k, v, l_, r);
			}
		}
	});
var _eeue56$elm_all_dict$AllDict$map = F2(
	function (f, dict) {
		var _p48 = dict;
		if (_p48.ctor === 'RBEmpty_elm_builtin') {
			return A2(_eeue56$elm_all_dict$AllDict$RBEmpty_elm_builtin, _p48._0, _p48._1);
		} else {
			var _p49 = _p48._1;
			return A5(
				_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin,
				_p48._0,
				_p49,
				A2(f, _p49, _p48._2),
				A2(_eeue56$elm_all_dict$AllDict$map, f, _p48._3),
				A2(_eeue56$elm_all_dict$AllDict$map, f, _p48._4));
		}
	});
var _eeue56$elm_all_dict$AllDict$Same = {ctor: 'Same'};
var _eeue56$elm_all_dict$AllDict$Remove = {ctor: 'Remove'};
var _eeue56$elm_all_dict$AllDict$Insert = {ctor: 'Insert'};
var _eeue56$elm_all_dict$AllDict$update = F3(
	function (k, alter, dict) {
		var ord = _eeue56$elm_all_dict$AllDict$getOrd(dict);
		var empty_ = _eeue56$elm_all_dict$AllDict$empty(ord);
		var up = function (dict) {
			var _p50 = dict;
			if (_p50.ctor === 'RBEmpty_elm_builtin') {
				var _p51 = alter(_elm_lang$core$Maybe$Nothing);
				if (_p51.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: _eeue56$elm_all_dict$AllDict$Same, _1: empty_};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _eeue56$elm_all_dict$AllDict$Insert,
						_1: A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _eeue56$elm_all_dict$AllDict$Red, k, _p51._0, empty_, empty_)
					};
				}
			} else {
				var _p62 = _p50._2;
				var _p61 = _p50._4;
				var _p60 = _p50._3;
				var _p59 = _p50._1;
				var _p58 = _p50._0;
				var _p52 = A2(
					_elm_lang$core$Basics$compare,
					ord(k),
					ord(_p59));
				switch (_p52.ctor) {
					case 'EQ':
						var _p53 = alter(
							_elm_lang$core$Maybe$Just(_p62));
						if (_p53.ctor === 'Nothing') {
							return {
								ctor: '_Tuple2',
								_0: _eeue56$elm_all_dict$AllDict$Remove,
								_1: A3(_eeue56$elm_all_dict$AllDict$rem, _p58, _p60, _p61)
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: _eeue56$elm_all_dict$AllDict$Same,
								_1: A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _p58, _p59, _p53._0, _p60, _p61)
							};
						}
					case 'LT':
						var _p54 = up(_p60);
						var flag = _p54._0;
						var newLeft = _p54._1;
						var _p55 = flag;
						switch (_p55.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$AllDict$Same,
									_1: A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _p58, _p59, _p62, newLeft, _p61)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$AllDict$Insert,
									_1: A5(_eeue56$elm_all_dict$AllDict$balance, _p58, _p59, _p62, newLeft, _p61)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$AllDict$Remove,
									_1: A5(_eeue56$elm_all_dict$AllDict$bubble, _p58, _p59, _p62, newLeft, _p61)
								};
						}
					default:
						var _p56 = up(_p61);
						var flag = _p56._0;
						var newRight = _p56._1;
						var _p57 = flag;
						switch (_p57.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$AllDict$Same,
									_1: A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _p58, _p59, _p62, _p60, newRight)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$AllDict$Insert,
									_1: A5(_eeue56$elm_all_dict$AllDict$balance, _p58, _p59, _p62, _p60, newRight)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$AllDict$Remove,
									_1: A5(_eeue56$elm_all_dict$AllDict$bubble, _p58, _p59, _p62, _p60, newRight)
								};
						}
				}
			}
		};
		var _p63 = up(dict);
		var flag = _p63._0;
		var updatedDict = _p63._1;
		var _p64 = flag;
		switch (_p64.ctor) {
			case 'Same':
				return updatedDict;
			case 'Insert':
				return _eeue56$elm_all_dict$AllDict$ensureBlackRoot(updatedDict);
			default:
				return _eeue56$elm_all_dict$AllDict$blacken(updatedDict);
		}
	});
var _eeue56$elm_all_dict$AllDict$insert = F3(
	function (key, value, dict) {
		return A3(
			_eeue56$elm_all_dict$AllDict$update,
			key,
			_elm_lang$core$Basics$always(
				_elm_lang$core$Maybe$Just(value)),
			dict);
	});
var _eeue56$elm_all_dict$AllDict$singleton = F3(
	function (ord, key, value) {
		return A3(
			_eeue56$elm_all_dict$AllDict$insert,
			key,
			value,
			_eeue56$elm_all_dict$AllDict$empty(ord));
	});
var _eeue56$elm_all_dict$AllDict$union = F2(
	function (t1, t2) {
		return A3(_eeue56$elm_all_dict$AllDict$foldl, _eeue56$elm_all_dict$AllDict$insert, t2, t1);
	});
var _eeue56$elm_all_dict$AllDict$fromList = F2(
	function (ord, assocs) {
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (_p65, dict) {
					var _p66 = _p65;
					return A3(_eeue56$elm_all_dict$AllDict$insert, _p66._0, _p66._1, dict);
				}),
			_eeue56$elm_all_dict$AllDict$empty(ord),
			assocs);
	});
var _eeue56$elm_all_dict$AllDict$filter = F2(
	function (predicate, dictionary) {
		var add = F3(
			function (key, value, dict) {
				return A2(predicate, key, value) ? A3(_eeue56$elm_all_dict$AllDict$insert, key, value, dict) : dict;
			});
		return A3(
			_eeue56$elm_all_dict$AllDict$foldl,
			add,
			_eeue56$elm_all_dict$AllDict$empty(
				_eeue56$elm_all_dict$AllDict$getOrd(dictionary)),
			dictionary);
	});
var _eeue56$elm_all_dict$AllDict$intersect = F2(
	function (t1, t2) {
		return A2(
			_eeue56$elm_all_dict$AllDict$filter,
			F2(
				function (k, _p67) {
					return A2(_eeue56$elm_all_dict$AllDict$member, k, t2);
				}),
			t1);
	});
var _eeue56$elm_all_dict$AllDict$partition = F2(
	function (predicate, dict) {
		var ord = _eeue56$elm_all_dict$AllDict$getOrd(dict);
		var add = F3(
			function (key, value, _p68) {
				var _p69 = _p68;
				var _p71 = _p69._1;
				var _p70 = _p69._0;
				return A2(predicate, key, value) ? {
					ctor: '_Tuple2',
					_0: A3(_eeue56$elm_all_dict$AllDict$insert, key, value, _p70),
					_1: _p71
				} : {
					ctor: '_Tuple2',
					_0: _p70,
					_1: A3(_eeue56$elm_all_dict$AllDict$insert, key, value, _p71)
				};
			});
		return A3(
			_eeue56$elm_all_dict$AllDict$foldl,
			add,
			{
				ctor: '_Tuple2',
				_0: _eeue56$elm_all_dict$AllDict$empty(ord),
				_1: _eeue56$elm_all_dict$AllDict$empty(ord)
			},
			dict);
	});
var _eeue56$elm_all_dict$AllDict$remove = F2(
	function (key, dict) {
		return A3(
			_eeue56$elm_all_dict$AllDict$update,
			key,
			_elm_lang$core$Basics$always(_elm_lang$core$Maybe$Nothing),
			dict);
	});
var _eeue56$elm_all_dict$AllDict$diff = F2(
	function (t1, t2) {
		return A3(
			_eeue56$elm_all_dict$AllDict$foldl,
			F3(
				function (k, v, t) {
					return A2(_eeue56$elm_all_dict$AllDict$remove, k, t);
				}),
			t1,
			t2);
	});

var _elm_lang$lazy$Native_Lazy = function() {

function memoize(thunk)
{
    var value;
    var isForced = false;
    return function(tuple0) {
        if (!isForced) {
            value = thunk(tuple0);
            isForced = true;
        }
        return value;
    };
}

return {
    memoize: memoize
};

}();

var _elm_lang$lazy$Lazy$force = function (_p0) {
	var _p1 = _p0;
	return _p1._0(
		{ctor: '_Tuple0'});
};
var _elm_lang$lazy$Lazy$Lazy = function (a) {
	return {ctor: 'Lazy', _0: a};
};
var _elm_lang$lazy$Lazy$lazy = function (thunk) {
	return _elm_lang$lazy$Lazy$Lazy(
		_elm_lang$lazy$Native_Lazy.memoize(thunk));
};
var _elm_lang$lazy$Lazy$map = F2(
	function (f, a) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p2) {
				var _p3 = _p2;
				return f(
					_elm_lang$lazy$Lazy$force(a));
			});
	});
var _elm_lang$lazy$Lazy$map2 = F3(
	function (f, a, b) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p4) {
				var _p5 = _p4;
				return A2(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b));
			});
	});
var _elm_lang$lazy$Lazy$map3 = F4(
	function (f, a, b, c) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p6) {
				var _p7 = _p6;
				return A3(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b),
					_elm_lang$lazy$Lazy$force(c));
			});
	});
var _elm_lang$lazy$Lazy$map4 = F5(
	function (f, a, b, c, d) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p8) {
				var _p9 = _p8;
				return A4(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b),
					_elm_lang$lazy$Lazy$force(c),
					_elm_lang$lazy$Lazy$force(d));
			});
	});
var _elm_lang$lazy$Lazy$map5 = F6(
	function (f, a, b, c, d, e) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p10) {
				var _p11 = _p10;
				return A5(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b),
					_elm_lang$lazy$Lazy$force(c),
					_elm_lang$lazy$Lazy$force(d),
					_elm_lang$lazy$Lazy$force(e));
			});
	});
var _elm_lang$lazy$Lazy$apply = F2(
	function (f, x) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p12) {
				var _p13 = _p12;
				return A2(
					_elm_lang$lazy$Lazy$force,
					f,
					_elm_lang$lazy$Lazy$force(x));
			});
	});
var _elm_lang$lazy$Lazy$andThen = F2(
	function (callback, a) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p14) {
				var _p15 = _p14;
				return _elm_lang$lazy$Lazy$force(
					callback(
						_elm_lang$lazy$Lazy$force(a)));
			});
	});

//import Maybe, Native.List //

var _elm_lang$core$Native_Regex = function() {

function escape(str)
{
	return str.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}
function caseInsensitive(re)
{
	return new RegExp(re.source, 'gi');
}
function regex(raw)
{
	return new RegExp(raw, 'g');
}

function contains(re, string)
{
	return string.match(re) !== null;
}

function find(n, re, str)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex === re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch === undefined
				? _elm_lang$core$Maybe$Nothing
				: _elm_lang$core$Maybe$Just(submatch);
		}
		out.push({
			match: result[0],
			submatches: _elm_lang$core$Native_List.fromArray(subs),
			index: result.index,
			number: number
		});
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _elm_lang$core$Native_List.fromArray(out);
}

function replace(n, re, replacer, string)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch === undefined
				? _elm_lang$core$Maybe$Nothing
				: _elm_lang$core$Maybe$Just(submatch);
		}
		return replacer({
			match: match,
			submatches: _elm_lang$core$Native_List.fromArray(submatches),
			index: arguments[arguments.length - 2],
			number: count
		});
	}
	return string.replace(re, jsReplacer);
}

function split(n, re, str)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	if (n === Infinity)
	{
		return _elm_lang$core$Native_List.fromArray(str.split(re));
	}
	var string = str;
	var result;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		if (!(result = re.exec(string))) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _elm_lang$core$Native_List.fromArray(out);
}

return {
	regex: regex,
	caseInsensitive: caseInsensitive,
	escape: escape,

	contains: F2(contains),
	find: F3(find),
	replace: F4(replace),
	split: F3(split)
};

}();

var _elm_lang$core$Regex$split = _elm_lang$core$Native_Regex.split;
var _elm_lang$core$Regex$replace = _elm_lang$core$Native_Regex.replace;
var _elm_lang$core$Regex$find = _elm_lang$core$Native_Regex.find;
var _elm_lang$core$Regex$contains = _elm_lang$core$Native_Regex.contains;
var _elm_lang$core$Regex$caseInsensitive = _elm_lang$core$Native_Regex.caseInsensitive;
var _elm_lang$core$Regex$regex = _elm_lang$core$Native_Regex.regex;
var _elm_lang$core$Regex$escape = _elm_lang$core$Native_Regex.escape;
var _elm_lang$core$Regex$Match = F4(
	function (a, b, c, d) {
		return {match: a, submatches: b, index: c, number: d};
	});
var _elm_lang$core$Regex$Regex = {ctor: 'Regex'};
var _elm_lang$core$Regex$AtMost = function (a) {
	return {ctor: 'AtMost', _0: a};
};
var _elm_lang$core$Regex$All = {ctor: 'All'};

var _elm_community$parser_combinators$Combine$app = function (p) {
	var _p0 = p;
	if (_p0.ctor === 'Parser') {
		return _p0._0;
	} else {
		return _elm_lang$lazy$Lazy$force(_p0._0);
	}
};
var _elm_community$parser_combinators$Combine$InputStream = F3(
	function (a, b, c) {
		return {data: a, input: b, position: c};
	});
var _elm_community$parser_combinators$Combine$initStream = function (s) {
	return A3(_elm_community$parser_combinators$Combine$InputStream, s, s, 0);
};
var _elm_community$parser_combinators$Combine$runParser = F3(
	function (p, st, s) {
		var _p1 = A3(
			_elm_community$parser_combinators$Combine$app,
			p,
			st,
			_elm_community$parser_combinators$Combine$initStream(s));
		if (_p1._2.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(
				{ctor: '_Tuple3', _0: _p1._0, _1: _p1._1, _2: _p1._2._0});
		} else {
			return _elm_lang$core$Result$Err(
				{ctor: '_Tuple3', _0: _p1._0, _1: _p1._1, _2: _p1._2._0});
		}
	});
var _elm_community$parser_combinators$Combine$parse = function (p) {
	return A2(
		_elm_community$parser_combinators$Combine$runParser,
		p,
		{ctor: '_Tuple0'});
};
var _elm_community$parser_combinators$Combine$ParseLocation = F3(
	function (a, b, c) {
		return {source: a, line: b, column: c};
	});
var _elm_community$parser_combinators$Combine$currentLocation = function (stream) {
	var find = F3(
		function (position, currentLine, lines) {
			find:
			while (true) {
				var _p2 = lines;
				if (_p2.ctor === '[]') {
					return A3(_elm_community$parser_combinators$Combine$ParseLocation, '', currentLine, position);
				} else {
					var _p3 = _p2._0;
					var length = _elm_lang$core$String$length(_p3);
					var lengthPlusNL = length + 1;
					if (_elm_lang$core$Native_Utils.eq(position, length)) {
						return A3(_elm_community$parser_combinators$Combine$ParseLocation, _p3, currentLine, position);
					} else {
						if (_elm_lang$core$Native_Utils.cmp(position, length) > 0) {
							var _v3 = position - lengthPlusNL,
								_v4 = currentLine + 1,
								_v5 = _p2._1;
							position = _v3;
							currentLine = _v4;
							lines = _v5;
							continue find;
						} else {
							return A3(_elm_community$parser_combinators$Combine$ParseLocation, _p3, currentLine, position);
						}
					}
				}
			}
		});
	return A3(
		find,
		stream.position,
		0,
		A2(_elm_lang$core$String$split, '\n', stream.data));
};
var _elm_community$parser_combinators$Combine$currentSourceLine = function (_p4) {
	return function (_) {
		return _.source;
	}(
		_elm_community$parser_combinators$Combine$currentLocation(_p4));
};
var _elm_community$parser_combinators$Combine$currentLine = function (_p5) {
	return function (_) {
		return _.line;
	}(
		_elm_community$parser_combinators$Combine$currentLocation(_p5));
};
var _elm_community$parser_combinators$Combine$currentColumn = function (_p6) {
	return function (_) {
		return _.column;
	}(
		_elm_community$parser_combinators$Combine$currentLocation(_p6));
};
var _elm_community$parser_combinators$Combine$RecursiveParser = function (a) {
	return {ctor: 'RecursiveParser', _0: a};
};
var _elm_community$parser_combinators$Combine$lazy = function (t) {
	return _elm_community$parser_combinators$Combine$RecursiveParser(
		_elm_lang$lazy$Lazy$lazy(
			function (_p7) {
				var _p8 = _p7;
				return _elm_community$parser_combinators$Combine$app(
					t(
						{ctor: '_Tuple0'}));
			}));
};
var _elm_community$parser_combinators$Combine$Parser = function (a) {
	return {ctor: 'Parser', _0: a};
};
var _elm_community$parser_combinators$Combine$primitive = _elm_community$parser_combinators$Combine$Parser;
var _elm_community$parser_combinators$Combine$bimap = F3(
	function (fok, ferr, p) {
		return _elm_community$parser_combinators$Combine$Parser(
			F2(
				function (state, stream) {
					var _p9 = A3(_elm_community$parser_combinators$Combine$app, p, state, stream);
					if (_p9._2.ctor === 'Ok') {
						return {
							ctor: '_Tuple3',
							_0: _p9._0,
							_1: _p9._1,
							_2: _elm_lang$core$Result$Ok(
								fok(_p9._2._0))
						};
					} else {
						return {
							ctor: '_Tuple3',
							_0: _p9._0,
							_1: _p9._1,
							_2: _elm_lang$core$Result$Err(
								ferr(_p9._2._0))
						};
					}
				}));
	});
var _elm_community$parser_combinators$Combine$map = F2(
	function (f, p) {
		return A3(_elm_community$parser_combinators$Combine$bimap, f, _elm_lang$core$Basics$identity, p);
	});
var _elm_community$parser_combinators$Combine_ops = _elm_community$parser_combinators$Combine_ops || {};
_elm_community$parser_combinators$Combine_ops['<$>'] = _elm_community$parser_combinators$Combine$map;
var _elm_community$parser_combinators$Combine_ops = _elm_community$parser_combinators$Combine_ops || {};
_elm_community$parser_combinators$Combine_ops['<$'] = function (res) {
	return _elm_community$parser_combinators$Combine$map(
		_elm_lang$core$Basics$always(res));
};
var _elm_community$parser_combinators$Combine$skip = function (p) {
	return A2(
		_elm_community$parser_combinators$Combine_ops['<$'],
		{ctor: '_Tuple0'},
		p);
};
var _elm_community$parser_combinators$Combine_ops = _elm_community$parser_combinators$Combine_ops || {};
_elm_community$parser_combinators$Combine_ops['$>'] = _elm_lang$core$Basics$flip(
	F2(
		function (x, y) {
			return A2(_elm_community$parser_combinators$Combine_ops['<$'], x, y);
		}));
var _elm_community$parser_combinators$Combine$mapError = _elm_community$parser_combinators$Combine$bimap(_elm_lang$core$Basics$identity);
var _elm_community$parser_combinators$Combine_ops = _elm_community$parser_combinators$Combine_ops || {};
_elm_community$parser_combinators$Combine_ops['<?>'] = F2(
	function (p, m) {
		return A2(
			_elm_community$parser_combinators$Combine$mapError,
			_elm_lang$core$Basics$always(
				{
					ctor: '::',
					_0: m,
					_1: {ctor: '[]'}
				}),
			p);
	});
var _elm_community$parser_combinators$Combine$withState = function (f) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_elm_community$parser_combinators$Combine$app,
					f(state),
					state,
					stream);
			}));
};
var _elm_community$parser_combinators$Combine$withLocation = function (f) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_elm_community$parser_combinators$Combine$app,
					f(
						_elm_community$parser_combinators$Combine$currentLocation(stream)),
					state,
					stream);
			}));
};
var _elm_community$parser_combinators$Combine$withLine = function (f) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_elm_community$parser_combinators$Combine$app,
					f(
						_elm_community$parser_combinators$Combine$currentLine(stream)),
					state,
					stream);
			}));
};
var _elm_community$parser_combinators$Combine$withColumn = function (f) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_elm_community$parser_combinators$Combine$app,
					f(
						_elm_community$parser_combinators$Combine$currentColumn(stream)),
					state,
					stream);
			}));
};
var _elm_community$parser_combinators$Combine$andThen = F2(
	function (f, p) {
		return _elm_community$parser_combinators$Combine$Parser(
			F2(
				function (state, stream) {
					var _p10 = A3(_elm_community$parser_combinators$Combine$app, p, state, stream);
					if (_p10._2.ctor === 'Ok') {
						return A3(
							_elm_community$parser_combinators$Combine$app,
							f(_p10._2._0),
							_p10._0,
							_p10._1);
					} else {
						return {
							ctor: '_Tuple3',
							_0: _p10._0,
							_1: _p10._1,
							_2: _elm_lang$core$Result$Err(_p10._2._0)
						};
					}
				}));
	});
var _elm_community$parser_combinators$Combine_ops = _elm_community$parser_combinators$Combine_ops || {};
_elm_community$parser_combinators$Combine_ops['>>='] = _elm_lang$core$Basics$flip(_elm_community$parser_combinators$Combine$andThen);
var _elm_community$parser_combinators$Combine$andMap = F2(
	function (rp, lp) {
		return A2(
			_elm_community$parser_combinators$Combine_ops['>>='],
			lp,
			A2(_elm_lang$core$Basics$flip, _elm_community$parser_combinators$Combine$map, rp));
	});
var _elm_community$parser_combinators$Combine_ops = _elm_community$parser_combinators$Combine_ops || {};
_elm_community$parser_combinators$Combine_ops['<*>'] = _elm_lang$core$Basics$flip(_elm_community$parser_combinators$Combine$andMap);
var _elm_community$parser_combinators$Combine_ops = _elm_community$parser_combinators$Combine_ops || {};
_elm_community$parser_combinators$Combine_ops['<*'] = F2(
	function (lp, rp) {
		return A2(
			_elm_community$parser_combinators$Combine$andMap,
			rp,
			A2(_elm_community$parser_combinators$Combine$map, _elm_lang$core$Basics$always, lp));
	});
var _elm_community$parser_combinators$Combine_ops = _elm_community$parser_combinators$Combine_ops || {};
_elm_community$parser_combinators$Combine_ops['*>'] = F2(
	function (lp, rp) {
		return A2(
			_elm_community$parser_combinators$Combine$andMap,
			rp,
			A2(
				_elm_community$parser_combinators$Combine$map,
				_elm_lang$core$Basics$flip(_elm_lang$core$Basics$always),
				lp));
	});
var _elm_community$parser_combinators$Combine$between = F3(
	function (lp, rp, p) {
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*'],
			A2(_elm_community$parser_combinators$Combine_ops['*>'], lp, p),
			rp);
	});
var _elm_community$parser_combinators$Combine$sequence = function (parsers) {
	var accumulate = F4(
		function (acc, ps, state, stream) {
			accumulate:
			while (true) {
				var _p11 = ps;
				if (_p11.ctor === '[]') {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Ok(
							_elm_lang$core$List$reverse(acc))
					};
				} else {
					var _p12 = A3(_elm_community$parser_combinators$Combine$app, _p11._0, state, stream);
					if (_p12._2.ctor === 'Ok') {
						var _v11 = {ctor: '::', _0: _p12._2._0, _1: acc},
							_v12 = _p11._1,
							_v13 = _p12._0,
							_v14 = _p12._1;
						acc = _v11;
						ps = _v12;
						state = _v13;
						stream = _v14;
						continue accumulate;
					} else {
						return {
							ctor: '_Tuple3',
							_0: _p12._0,
							_1: _p12._1,
							_2: _elm_lang$core$Result$Err(_p12._2._0)
						};
					}
				}
			}
		});
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return A4(
					accumulate,
					{ctor: '[]'},
					parsers,
					state,
					stream);
			}));
};
var _elm_community$parser_combinators$Combine$fail = function (m) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return {
					ctor: '_Tuple3',
					_0: state,
					_1: stream,
					_2: _elm_lang$core$Result$Err(
						{
							ctor: '::',
							_0: m,
							_1: {ctor: '[]'}
						})
				};
			}));
};
var _elm_community$parser_combinators$Combine$emptyErr = _elm_community$parser_combinators$Combine$Parser(
	F2(
		function (state, stream) {
			return {
				ctor: '_Tuple3',
				_0: state,
				_1: stream,
				_2: _elm_lang$core$Result$Err(
					{ctor: '[]'})
			};
		}));
var _elm_community$parser_combinators$Combine$succeed = function (res) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return {
					ctor: '_Tuple3',
					_0: state,
					_1: stream,
					_2: _elm_lang$core$Result$Ok(res)
				};
			}));
};
var _elm_community$parser_combinators$Combine$putState = function (state) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (_p13, stream) {
				return A3(
					_elm_community$parser_combinators$Combine$app,
					_elm_community$parser_combinators$Combine$succeed(
						{ctor: '_Tuple0'}),
					state,
					stream);
			}));
};
var _elm_community$parser_combinators$Combine$modifyState = function (f) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_elm_community$parser_combinators$Combine$app,
					_elm_community$parser_combinators$Combine$succeed(
						{ctor: '_Tuple0'}),
					f(state),
					stream);
			}));
};
var _elm_community$parser_combinators$Combine$count = F2(
	function (n, p) {
		var accumulate = F2(
			function (x, acc) {
				return (_elm_lang$core$Native_Utils.cmp(x, 0) < 1) ? _elm_community$parser_combinators$Combine$succeed(
					_elm_lang$core$List$reverse(acc)) : A2(
					_elm_community$parser_combinators$Combine$andThen,
					function (res) {
						return A2(
							accumulate,
							x - 1,
							{ctor: '::', _0: res, _1: acc});
					},
					p);
			});
		return A2(
			accumulate,
			n,
			{ctor: '[]'});
	});
var _elm_community$parser_combinators$Combine$string = function (s) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				if (A2(_elm_lang$core$String$startsWith, s, stream.input)) {
					var len = _elm_lang$core$String$length(s);
					var rem = A2(_elm_lang$core$String$dropLeft, len, stream.input);
					var pos = stream.position + len;
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: _elm_lang$core$Native_Utils.update(
							stream,
							{input: rem, position: pos}),
						_2: _elm_lang$core$Result$Ok(s)
					};
				} else {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Err(
							{
								ctor: '::',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									'expected ',
									_elm_lang$core$Basics$toString(s)),
								_1: {ctor: '[]'}
							})
					};
				}
			}));
};
var _elm_community$parser_combinators$Combine$parens = A2(
	_elm_community$parser_combinators$Combine$between,
	_elm_community$parser_combinators$Combine$string('('),
	_elm_community$parser_combinators$Combine$string(')'));
var _elm_community$parser_combinators$Combine$braces = A2(
	_elm_community$parser_combinators$Combine$between,
	_elm_community$parser_combinators$Combine$string('{'),
	_elm_community$parser_combinators$Combine$string('}'));
var _elm_community$parser_combinators$Combine$brackets = A2(
	_elm_community$parser_combinators$Combine$between,
	_elm_community$parser_combinators$Combine$string('['),
	_elm_community$parser_combinators$Combine$string(']'));
var _elm_community$parser_combinators$Combine$regex = function (pat) {
	var pattern = A2(_elm_lang$core$String$startsWith, '^', pat) ? pat : A2(_elm_lang$core$Basics_ops['++'], '^', pat);
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				var _p14 = A3(
					_elm_lang$core$Regex$find,
					_elm_lang$core$Regex$AtMost(1),
					_elm_lang$core$Regex$regex(pattern),
					stream.input);
				if ((_p14.ctor === '::') && (_p14._1.ctor === '[]')) {
					var _p15 = _p14._0;
					var len = _elm_lang$core$String$length(_p15.match);
					var rem = A2(_elm_lang$core$String$dropLeft, len, stream.input);
					var pos = stream.position + len;
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: _elm_lang$core$Native_Utils.update(
							stream,
							{input: rem, position: pos}),
						_2: _elm_lang$core$Result$Ok(_p15.match)
					};
				} else {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Err(
							{
								ctor: '::',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									'expected input matching Regexp /',
									A2(_elm_lang$core$Basics_ops['++'], pattern, '/')),
								_1: {ctor: '[]'}
							})
					};
				}
			}));
};
var _elm_community$parser_combinators$Combine$whitespace = A2(
	_elm_community$parser_combinators$Combine_ops['<?>'],
	_elm_community$parser_combinators$Combine$regex('[ \t\r\n]*'),
	'whitespace');
var _elm_community$parser_combinators$Combine$whitespace1 = A2(
	_elm_community$parser_combinators$Combine_ops['<?>'],
	_elm_community$parser_combinators$Combine$regex('[ \t\r\n]+'),
	'whitespace');
var _elm_community$parser_combinators$Combine$while = function (pred) {
	var accumulate = F3(
		function (acc, state, stream) {
			accumulate:
			while (true) {
				var _p16 = _elm_lang$core$String$uncons(stream.input);
				if (_p16.ctor === 'Just') {
					var _p17 = _p16._0._0;
					if (pred(_p17)) {
						var pos = stream.position + 1;
						var c = A2(_elm_lang$core$String$cons, _p17, '');
						var _v17 = A2(_elm_lang$core$Basics_ops['++'], acc, c),
							_v18 = state,
							_v19 = _elm_lang$core$Native_Utils.update(
							stream,
							{input: _p16._0._1, position: pos});
						acc = _v17;
						state = _v18;
						stream = _v19;
						continue accumulate;
					} else {
						return {ctor: '_Tuple3', _0: state, _1: stream, _2: acc};
					}
				} else {
					return {ctor: '_Tuple3', _0: state, _1: stream, _2: acc};
				}
			}
		});
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				var _p18 = A3(accumulate, '', state, stream);
				var rstate = _p18._0;
				var rstream = _p18._1;
				var res = _p18._2;
				return {
					ctor: '_Tuple3',
					_0: rstate,
					_1: rstream,
					_2: _elm_lang$core$Result$Ok(res)
				};
			}));
};
var _elm_community$parser_combinators$Combine$end = _elm_community$parser_combinators$Combine$Parser(
	F2(
		function (state, stream) {
			return _elm_lang$core$Native_Utils.eq(stream.input, '') ? {
				ctor: '_Tuple3',
				_0: state,
				_1: stream,
				_2: _elm_lang$core$Result$Ok(
					{ctor: '_Tuple0'})
			} : {
				ctor: '_Tuple3',
				_0: state,
				_1: stream,
				_2: _elm_lang$core$Result$Err(
					{
						ctor: '::',
						_0: 'expected end of input',
						_1: {ctor: '[]'}
					})
			};
		}));
var _elm_community$parser_combinators$Combine$lookAhead = function (p) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				var _p19 = A3(_elm_community$parser_combinators$Combine$app, p, state, stream);
				if ((_p19.ctor === '_Tuple3') && (_p19._2.ctor === 'Ok')) {
					return {
						ctor: '_Tuple3',
						_0: _p19._0,
						_1: stream,
						_2: _elm_lang$core$Result$Ok(_p19._2._0)
					};
				} else {
					return _p19;
				}
			}));
};
var _elm_community$parser_combinators$Combine$or = F2(
	function (lp, rp) {
		return _elm_community$parser_combinators$Combine$Parser(
			F2(
				function (state, stream) {
					var _p20 = A3(_elm_community$parser_combinators$Combine$app, lp, state, stream);
					if (_p20._2.ctor === 'Ok') {
						return _p20;
					} else {
						var _p21 = A3(_elm_community$parser_combinators$Combine$app, rp, state, stream);
						if (_p21._2.ctor === 'Ok') {
							return _p21;
						} else {
							return {
								ctor: '_Tuple3',
								_0: state,
								_1: stream,
								_2: _elm_lang$core$Result$Err(
									A2(_elm_lang$core$Basics_ops['++'], _p20._2._0, _p21._2._0))
							};
						}
					}
				}));
	});
var _elm_community$parser_combinators$Combine$choice = function (xs) {
	return A3(_elm_lang$core$List$foldr, _elm_community$parser_combinators$Combine$or, _elm_community$parser_combinators$Combine$emptyErr, xs);
};
var _elm_community$parser_combinators$Combine_ops = _elm_community$parser_combinators$Combine_ops || {};
_elm_community$parser_combinators$Combine_ops['<|>'] = _elm_community$parser_combinators$Combine$or;
var _elm_community$parser_combinators$Combine$optional = F2(
	function (res, p) {
		return A2(
			_elm_community$parser_combinators$Combine_ops['<|>'],
			p,
			_elm_community$parser_combinators$Combine$succeed(res));
	});
var _elm_community$parser_combinators$Combine$chainl = F2(
	function (op, p) {
		var accumulate = function (x) {
			return A2(
				_elm_community$parser_combinators$Combine_ops['<|>'],
				A2(
					_elm_community$parser_combinators$Combine$andThen,
					function (f) {
						return A2(
							_elm_community$parser_combinators$Combine$andThen,
							function (y) {
								return accumulate(
									A2(f, x, y));
							},
							p);
					},
					op),
				_elm_community$parser_combinators$Combine$succeed(x));
		};
		return A2(_elm_community$parser_combinators$Combine$andThen, accumulate, p);
	});
var _elm_community$parser_combinators$Combine$chainr = F2(
	function (op, p) {
		var accumulate = function (x) {
			return A2(
				_elm_community$parser_combinators$Combine_ops['<|>'],
				A2(
					_elm_community$parser_combinators$Combine$andThen,
					function (f) {
						return A2(
							_elm_community$parser_combinators$Combine$andThen,
							function (y) {
								return _elm_community$parser_combinators$Combine$succeed(
									A2(f, x, y));
							},
							A2(_elm_community$parser_combinators$Combine$andThen, accumulate, p));
					},
					op),
				_elm_community$parser_combinators$Combine$succeed(x));
		};
		return A2(_elm_community$parser_combinators$Combine$andThen, accumulate, p);
	});
var _elm_community$parser_combinators$Combine$maybe = function (p) {
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				var _p22 = A3(_elm_community$parser_combinators$Combine$app, p, state, stream);
				if ((_p22.ctor === '_Tuple3') && (_p22._2.ctor === 'Ok')) {
					return {
						ctor: '_Tuple3',
						_0: _p22._0,
						_1: _p22._1,
						_2: _elm_lang$core$Result$Ok(
							_elm_lang$core$Maybe$Just(_p22._2._0))
					};
				} else {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Ok(_elm_lang$core$Maybe$Nothing)
					};
				}
			}));
};
var _elm_community$parser_combinators$Combine$many = function (p) {
	var accumulate = F3(
		function (acc, state, stream) {
			accumulate:
			while (true) {
				var _p23 = A3(_elm_community$parser_combinators$Combine$app, p, state, stream);
				if ((_p23.ctor === '_Tuple3') && (_p23._2.ctor === 'Ok')) {
					var _p25 = _p23._1;
					var _p24 = _p23._0;
					if (_elm_lang$core$Native_Utils.eq(stream, _p25)) {
						return {
							ctor: '_Tuple3',
							_0: _p24,
							_1: _p25,
							_2: _elm_lang$core$List$reverse(acc)
						};
					} else {
						var _v25 = {ctor: '::', _0: _p23._2._0, _1: acc},
							_v26 = _p24,
							_v27 = _p25;
						acc = _v25;
						state = _v26;
						stream = _v27;
						continue accumulate;
					}
				} else {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$List$reverse(acc)
					};
				}
			}
		});
	return _elm_community$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				var _p26 = A3(
					accumulate,
					{ctor: '[]'},
					state,
					stream);
				var rstate = _p26._0;
				var rstream = _p26._1;
				var res = _p26._2;
				return {
					ctor: '_Tuple3',
					_0: rstate,
					_1: rstream,
					_2: _elm_lang$core$Result$Ok(res)
				};
			}));
};
var _elm_community$parser_combinators$Combine$many1 = function (p) {
	return A2(
		_elm_community$parser_combinators$Combine_ops['<*>'],
		A2(
			_elm_community$parser_combinators$Combine_ops['<$>'],
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			p),
		_elm_community$parser_combinators$Combine$many(p));
};
var _elm_community$parser_combinators$Combine$skipMany1 = function (p) {
	return A2(
		_elm_community$parser_combinators$Combine_ops['<$'],
		{ctor: '_Tuple0'},
		_elm_community$parser_combinators$Combine$many1(
			_elm_community$parser_combinators$Combine$skip(p)));
};
var _elm_community$parser_combinators$Combine$sepBy1 = F2(
	function (sep, p) {
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<$>'],
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					}),
				p),
			_elm_community$parser_combinators$Combine$many(
				A2(_elm_community$parser_combinators$Combine_ops['*>'], sep, p)));
	});
var _elm_community$parser_combinators$Combine$sepBy = F2(
	function (sep, p) {
		return A2(
			_elm_community$parser_combinators$Combine_ops['<|>'],
			A2(_elm_community$parser_combinators$Combine$sepBy1, sep, p),
			_elm_community$parser_combinators$Combine$succeed(
				{ctor: '[]'}));
	});
var _elm_community$parser_combinators$Combine$sepEndBy1 = F2(
	function (sep, p) {
		return A2(
			_elm_community$parser_combinators$Combine_ops['<*'],
			A2(_elm_community$parser_combinators$Combine$sepBy1, sep, p),
			_elm_community$parser_combinators$Combine$maybe(sep));
	});
var _elm_community$parser_combinators$Combine$sepEndBy = F2(
	function (sep, p) {
		return A2(
			_elm_community$parser_combinators$Combine_ops['<|>'],
			A2(_elm_community$parser_combinators$Combine$sepEndBy1, sep, p),
			_elm_community$parser_combinators$Combine$succeed(
				{ctor: '[]'}));
	});
var _elm_community$parser_combinators$Combine$skipMany = function (p) {
	return A2(
		_elm_community$parser_combinators$Combine_ops['<$'],
		{ctor: '_Tuple0'},
		_elm_community$parser_combinators$Combine$many(
			_elm_community$parser_combinators$Combine$skip(p)));
};
var _elm_community$parser_combinators$Combine$manyTill = F2(
	function (p, end) {
		var accumulate = F3(
			function (acc, state, stream) {
				accumulate:
				while (true) {
					var _p27 = A3(_elm_community$parser_combinators$Combine$app, end, state, stream);
					if (_p27._2.ctor === 'Ok') {
						return {
							ctor: '_Tuple3',
							_0: _p27._0,
							_1: _p27._1,
							_2: _elm_lang$core$Result$Ok(
								_elm_lang$core$List$reverse(acc))
						};
					} else {
						var _p28 = A3(_elm_community$parser_combinators$Combine$app, p, state, stream);
						if ((_p28.ctor === '_Tuple3') && (_p28._2.ctor === 'Ok')) {
							var _v30 = {ctor: '::', _0: _p28._2._0, _1: acc},
								_v31 = _p28._0,
								_v32 = _p28._1;
							acc = _v30;
							state = _v31;
							stream = _v32;
							continue accumulate;
						} else {
							return {
								ctor: '_Tuple3',
								_0: _p27._0,
								_1: _p27._1,
								_2: _elm_lang$core$Result$Err(_p27._2._0)
							};
						}
					}
				}
			});
		return _elm_community$parser_combinators$Combine$Parser(
			accumulate(
				{ctor: '[]'}));
	});

var _elm_community$parser_combinators$Combine_Char$crlf = A2(
	_elm_community$parser_combinators$Combine_ops['<$'],
	_elm_lang$core$Native_Utils.chr('\n'),
	A2(
		_elm_community$parser_combinators$Combine_ops['<?>'],
		_elm_community$parser_combinators$Combine$regex('\r\n'),
		'expected crlf'));
var _elm_community$parser_combinators$Combine_Char$satisfy = function (pred) {
	return _elm_community$parser_combinators$Combine$primitive(
		F2(
			function (state, stream) {
				var message = 'could not satisfy predicate';
				var _p0 = _elm_lang$core$String$uncons(stream.input);
				if (_p0.ctor === 'Just') {
					var _p1 = _p0._0._0;
					return pred(_p1) ? {
						ctor: '_Tuple3',
						_0: state,
						_1: _elm_lang$core$Native_Utils.update(
							stream,
							{input: _p0._0._1, position: stream.position + 1}),
						_2: _elm_lang$core$Result$Ok(_p1)
					} : {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Err(
							{
								ctor: '::',
								_0: message,
								_1: {ctor: '[]'}
							})
					};
				} else {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Err(
							{
								ctor: '::',
								_0: message,
								_1: {ctor: '[]'}
							})
					};
				}
			}));
};
var _elm_community$parser_combinators$Combine_Char$char = function (c) {
	return A2(
		_elm_community$parser_combinators$Combine_ops['<?>'],
		_elm_community$parser_combinators$Combine_Char$satisfy(
			F2(
				function (x, y) {
					return _elm_lang$core$Native_Utils.eq(x, y);
				})(c)),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'expected ',
			_elm_lang$core$Basics$toString(c)));
};
var _elm_community$parser_combinators$Combine_Char$anyChar = A2(
	_elm_community$parser_combinators$Combine_ops['<?>'],
	_elm_community$parser_combinators$Combine_Char$satisfy(
		_elm_lang$core$Basics$always(true)),
	'expected any character');
var _elm_community$parser_combinators$Combine_Char$oneOf = function (cs) {
	return A2(
		_elm_community$parser_combinators$Combine_ops['<?>'],
		_elm_community$parser_combinators$Combine_Char$satisfy(
			A2(_elm_lang$core$Basics$flip, _elm_lang$core$List$member, cs)),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'expected one of ',
			_elm_lang$core$Basics$toString(cs)));
};
var _elm_community$parser_combinators$Combine_Char$noneOf = function (cs) {
	return A2(
		_elm_community$parser_combinators$Combine_ops['<?>'],
		_elm_community$parser_combinators$Combine_Char$satisfy(
			function (_p2) {
				return !A3(_elm_lang$core$Basics$flip, _elm_lang$core$List$member, cs, _p2);
			}),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'expected none of ',
			_elm_lang$core$Basics$toString(cs)));
};
var _elm_community$parser_combinators$Combine_Char$space = A2(
	_elm_community$parser_combinators$Combine_ops['<?>'],
	_elm_community$parser_combinators$Combine_Char$satisfy(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(
			_elm_lang$core$Native_Utils.chr(' '))),
	'expected space');
var _elm_community$parser_combinators$Combine_Char$tab = A2(
	_elm_community$parser_combinators$Combine_ops['<?>'],
	_elm_community$parser_combinators$Combine_Char$satisfy(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(
			_elm_lang$core$Native_Utils.chr('\t'))),
	'expected tab');
var _elm_community$parser_combinators$Combine_Char$newline = A2(
	_elm_community$parser_combinators$Combine_ops['<?>'],
	_elm_community$parser_combinators$Combine_Char$satisfy(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(
			_elm_lang$core$Native_Utils.chr('\n'))),
	'expected newline');
var _elm_community$parser_combinators$Combine_Char$eol = A2(_elm_community$parser_combinators$Combine_ops['<|>'], _elm_community$parser_combinators$Combine_Char$newline, _elm_community$parser_combinators$Combine_Char$crlf);
var _elm_community$parser_combinators$Combine_Char$lower = A2(
	_elm_community$parser_combinators$Combine_ops['<?>'],
	_elm_community$parser_combinators$Combine_Char$satisfy(_elm_lang$core$Char$isLower),
	'expected a lowercase character');
var _elm_community$parser_combinators$Combine_Char$upper = A2(
	_elm_community$parser_combinators$Combine_ops['<?>'],
	_elm_community$parser_combinators$Combine_Char$satisfy(_elm_lang$core$Char$isUpper),
	'expected an uppercase character');
var _elm_community$parser_combinators$Combine_Char$digit = A2(
	_elm_community$parser_combinators$Combine_ops['<?>'],
	_elm_community$parser_combinators$Combine_Char$satisfy(_elm_lang$core$Char$isDigit),
	'expected a digit');
var _elm_community$parser_combinators$Combine_Char$octDigit = A2(
	_elm_community$parser_combinators$Combine_ops['<?>'],
	_elm_community$parser_combinators$Combine_Char$satisfy(_elm_lang$core$Char$isOctDigit),
	'expected an octal digit');
var _elm_community$parser_combinators$Combine_Char$hexDigit = A2(
	_elm_community$parser_combinators$Combine_ops['<?>'],
	_elm_community$parser_combinators$Combine_Char$satisfy(_elm_lang$core$Char$isHexDigit),
	'expected a hexadecimal digit');

var _elm_community$parser_combinators$Combine_Num$digit = function () {
	var toDigit = function (c) {
		return _elm_lang$core$Char$toCode(c) - _elm_lang$core$Char$toCode(
			_elm_lang$core$Native_Utils.chr('0'));
	};
	return A2(
		_elm_community$parser_combinators$Combine_ops['<$>'],
		toDigit,
		A2(_elm_community$parser_combinators$Combine_ops['<?>'], _elm_community$parser_combinators$Combine_Char$digit, 'expected a digit'));
}();
var _elm_community$parser_combinators$Combine_Num$sign = A2(
	_elm_community$parser_combinators$Combine$optional,
	1,
	_elm_community$parser_combinators$Combine$choice(
		{
			ctor: '::',
			_0: A2(
				_elm_community$parser_combinators$Combine_ops['<$'],
				1,
				_elm_community$parser_combinators$Combine$string('+')),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_community$parser_combinators$Combine_ops['<$'],
					-1,
					_elm_community$parser_combinators$Combine$string('-')),
				_1: {ctor: '[]'}
			}
		}));
var _elm_community$parser_combinators$Combine_Num$unwrap = F2(
	function (f, s) {
		var _p0 = f(s);
		if (_p0.ctor === 'Ok') {
			return _p0._0;
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'Combine.Num',
				{
					start: {line: 23, column: 5},
					end: {line: 28, column: 83}
				},
				_p0)(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'impossible state in Combine.Num.unwrap: ',
					_elm_lang$core$Basics$toString(_p0._0)));
		}
	});
var _elm_community$parser_combinators$Combine_Num$toInt = _elm_community$parser_combinators$Combine_Num$unwrap(_elm_lang$core$String$toInt);
var _elm_community$parser_combinators$Combine_Num$int = A2(
	_elm_community$parser_combinators$Combine_ops['<*>'],
	A2(
		_elm_community$parser_combinators$Combine_ops['<$>'],
		F2(
			function (x, y) {
				return x * y;
			}),
		_elm_community$parser_combinators$Combine_Num$sign),
	A2(
		_elm_community$parser_combinators$Combine_ops['<?>'],
		A2(
			_elm_community$parser_combinators$Combine_ops['<$>'],
			_elm_community$parser_combinators$Combine_Num$toInt,
			_elm_community$parser_combinators$Combine$regex('(0|[1-9][0-9]*)')),
		'expected an integer'));
var _elm_community$parser_combinators$Combine_Num$toFloat = _elm_community$parser_combinators$Combine_Num$unwrap(_elm_lang$core$String$toFloat);
var _elm_community$parser_combinators$Combine_Num$float = A2(
	_elm_community$parser_combinators$Combine_ops['<*>'],
	A2(
		_elm_community$parser_combinators$Combine_ops['<$>'],
		function (_p2) {
			return F2(
				function (x, y) {
					return x * y;
				})(
				_elm_lang$core$Basics$toFloat(_p2));
		},
		_elm_community$parser_combinators$Combine_Num$sign),
	A2(
		_elm_community$parser_combinators$Combine_ops['<?>'],
		A2(
			_elm_community$parser_combinators$Combine_ops['<$>'],
			_elm_community$parser_combinators$Combine_Num$toFloat,
			_elm_community$parser_combinators$Combine$regex('(0|[1-9][0-9]*)(\\.[0-9]+)')),
		'expected a float'));

var _elm_community$elm_time$Time_Internal$digitsInRange = F3(
	function (digitsToParse, lo, hi) {
		var failure = _elm_community$parser_combinators$Combine$fail(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'expected ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(digitsToParse),
					A2(
						_elm_lang$core$Basics_ops['++'],
						' digits in the range [',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(lo),
							A2(
								_elm_lang$core$Basics_ops['++'],
								', ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(hi),
									']')))))));
		return A2(
			_elm_community$parser_combinators$Combine$andThen,
			function (digits) {
				var _p0 = _elm_lang$core$String$toInt(digits);
				if (_p0.ctor === 'Ok') {
					var _p1 = _p0._0;
					return ((_elm_lang$core$Native_Utils.cmp(_p1, lo) > -1) && (_elm_lang$core$Native_Utils.cmp(_p1, hi) < 1)) ? _elm_community$parser_combinators$Combine$succeed(_p1) : failure;
				} else {
					return failure;
				}
			},
			_elm_community$parser_combinators$Combine$regex(
				A2(_elm_lang$core$String$repeat, digitsToParse, '\\d')));
	});
var _elm_community$elm_time$Time_Internal$paddedInt = A2(
	_elm_community$parser_combinators$Combine_ops['*>'],
	A2(
		_elm_community$parser_combinators$Combine$optional,
		'',
		_elm_community$parser_combinators$Combine$string('0')),
	_elm_community$parser_combinators$Combine_Num$int);
var _elm_community$elm_time$Time_Internal$intRange = F2(
	function (lo, hi) {
		var validate = function (n) {
			return ((_elm_lang$core$Native_Utils.cmp(n, lo) > -1) && (_elm_lang$core$Native_Utils.cmp(n, hi) < 1)) ? _elm_community$parser_combinators$Combine$succeed(n) : _elm_community$parser_combinators$Combine$fail(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'expected an integer in the range [',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(lo),
						A2(
							_elm_lang$core$Basics_ops['++'],
							', ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(hi),
								']')))));
		};
		return A2(_elm_community$parser_combinators$Combine_ops['>>='], _elm_community$elm_time$Time_Internal$paddedInt, validate);
	});
var _elm_community$elm_time$Time_Internal$secondMs = 1000;
var _elm_community$elm_time$Time_Internal$minuteMs = 60000;
var _elm_community$elm_time$Time_Internal$hourMs = 3600000;
var _elm_community$elm_time$Time_Internal$dayMs = 86400000;
var _elm_community$elm_time$Time_Internal$padded3 = function (n) {
	return A3(
		_elm_lang$core$String$padLeft,
		3,
		_elm_lang$core$Native_Utils.chr('0'),
		_elm_lang$core$Basics$toString(n));
};
var _elm_community$elm_time$Time_Internal$padded = function (n) {
	return (_elm_lang$core$Native_Utils.cmp(n, 10) < 0) ? A2(
		_elm_lang$core$Basics_ops['++'],
		'0',
		_elm_lang$core$Basics$toString(n)) : _elm_lang$core$Basics$toString(n);
};
var _elm_community$elm_time$Time_Internal$zero = {year: 0, month: 1, day: 1, hour: 0, minute: 0, second: 0, millisecond: 0};
var _elm_community$elm_time$Time_Internal$offsetFromTimeData = function (_p2) {
	var _p3 = _p2;
	return (((A3(_elm_lang$core$Basics$clamp, 0, 23, _p3.hour) * _elm_community$elm_time$Time_Internal$hourMs) + (A3(_elm_lang$core$Basics$clamp, 0, 59, _p3.minute) * _elm_community$elm_time$Time_Internal$minuteMs)) + (A3(_elm_lang$core$Basics$clamp, 0, 59, _p3.second) * _elm_community$elm_time$Time_Internal$secondMs)) + A3(_elm_lang$core$Basics$clamp, 0, 999, _p3.millisecond);
};
var _elm_community$elm_time$Time_Internal$DateTimeData = F7(
	function (a, b, c, d, e, f, g) {
		return {year: a, month: b, day: c, hour: d, minute: e, second: f, millisecond: g};
	});

var _elm_community$elm_time$Time_Date$clampDay = function (day) {
	return A3(_elm_lang$core$Basics$clamp, 1, 31, day);
};
var _elm_community$elm_time$Time_Date$clampMonth = function (month) {
	return A3(_elm_lang$core$Basics$clamp, 1, 12, month);
};
var _elm_community$elm_time$Time_Date$daysFromYear = function (y) {
	return (_elm_lang$core$Native_Utils.cmp(y, 0) > 0) ? ((((366 + ((y - 1) * 365)) + (((y - 1) / 4) | 0)) - (((y - 1) / 100) | 0)) + (((y - 1) / 400) | 0)) : ((_elm_lang$core$Native_Utils.cmp(y, 0) < 0) ? ((((y * 365) + ((y / 4) | 0)) - ((y / 100) | 0)) + ((y / 400) | 0)) : 0);
};
var _elm_community$elm_time$Time_Date$yearFromDays = function (ds) {
	var y = (ds / 365) | 0;
	var d = _elm_community$elm_time$Time_Date$daysFromYear(y);
	return (_elm_lang$core$Native_Utils.cmp(ds, d) < 1) ? (y - 1) : y;
};
var _elm_community$elm_time$Time_Date$isLeapYear = function (y) {
	return _elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], y, 400),
		0) || ((!_elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], y, 100),
		0)) && _elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], y, 4),
		0));
};
var _elm_community$elm_time$Time_Date$unsafeDaysInMonth = F2(
	function (y, m) {
		return _elm_lang$core$Native_Utils.eq(m, 1) ? 31 : ((_elm_lang$core$Native_Utils.eq(m, 2) && _elm_community$elm_time$Time_Date$isLeapYear(y)) ? 29 : (_elm_lang$core$Native_Utils.eq(m, 2) ? 28 : (_elm_lang$core$Native_Utils.eq(m, 3) ? 31 : (_elm_lang$core$Native_Utils.eq(m, 4) ? 30 : (_elm_lang$core$Native_Utils.eq(m, 5) ? 31 : (_elm_lang$core$Native_Utils.eq(m, 6) ? 30 : (_elm_lang$core$Native_Utils.eq(m, 7) ? 31 : (_elm_lang$core$Native_Utils.eq(m, 8) ? 31 : (_elm_lang$core$Native_Utils.eq(m, 9) ? 30 : (_elm_lang$core$Native_Utils.eq(m, 10) ? 31 : (_elm_lang$core$Native_Utils.eq(m, 11) ? 30 : (_elm_lang$core$Native_Utils.eq(m, 12) ? 31 : _elm_lang$core$Native_Utils.crash(
			'Time.Date',
			{
				start: {line: 343, column: 9},
				end: {line: 343, column: 20}
			})(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'invalid call to unsafeDaysInMonth: year=',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(y),
					A2(
						_elm_lang$core$Basics_ops['++'],
						' month=',
						_elm_lang$core$Basics$toString(m)))))))))))))))));
	});
var _elm_community$elm_time$Time_Date$daysInMonth = F2(
	function (y, m) {
		return ((_elm_lang$core$Native_Utils.cmp(m, 1) > -1) && (_elm_lang$core$Native_Utils.cmp(m, 12) < 1)) ? _elm_lang$core$Maybe$Just(
			A2(_elm_community$elm_time$Time_Date$unsafeDaysInMonth, y, m)) : _elm_lang$core$Maybe$Nothing;
	});
var _elm_community$elm_time$Time_Date$daysFromYearMonth = F2(
	function (year, month) {
		var go = F3(
			function (year, month, acc) {
				go:
				while (true) {
					if (_elm_lang$core$Native_Utils.eq(month, 0)) {
						return acc;
					} else {
						var _v0 = year,
							_v1 = month - 1,
							_v2 = acc + A2(_elm_community$elm_time$Time_Date$unsafeDaysInMonth, year, month);
						year = _v0;
						month = _v1;
						acc = _v2;
						continue go;
					}
				}
			});
		return A3(go, year, month - 1, 0);
	});
var _elm_community$elm_time$Time_Date$daysFromYearMonthDay = F3(
	function (year, month, day) {
		var dds = day - 1;
		var mds = A2(_elm_community$elm_time$Time_Date$daysFromYearMonth, year, month);
		var yds = _elm_community$elm_time$Time_Date$daysFromYear(year);
		return (yds + mds) + dds;
	});
var _elm_community$elm_time$Time_Date$isValidDate = F3(
	function (year, month, day) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			false,
			A2(
				_elm_lang$core$Maybe$map,
				function (days) {
					return (_elm_lang$core$Native_Utils.cmp(day, 1) > -1) && (_elm_lang$core$Native_Utils.cmp(day, days) < 1);
				},
				A2(_elm_community$elm_time$Time_Date$daysInMonth, year, month)));
	});
var _elm_community$elm_time$Time_Date$toTuple = function (_p0) {
	var _p1 = _p0;
	return {ctor: '_Tuple3', _0: _p1._0.year, _1: _p1._0.month, _2: _p1._0.day};
};
var _elm_community$elm_time$Time_Date$delta = F2(
	function (_p3, _p2) {
		var _p4 = _p3;
		var _p7 = _p4._0;
		var _p5 = _p2;
		var _p6 = _p5._0;
		return {
			years: _p7.year - _p6.year,
			months: ((_elm_lang$core$Basics$abs(_p7.year) * 12) + _p7.month) - ((_elm_lang$core$Basics$abs(_p6.year) * 12) + _p6.month),
			days: A3(_elm_community$elm_time$Time_Date$daysFromYearMonthDay, _p7.year, _p7.month, _p7.day) - A3(_elm_community$elm_time$Time_Date$daysFromYearMonthDay, _p6.year, _p6.month, _p6.day)
		};
	});
var _elm_community$elm_time$Time_Date$compare = F2(
	function (d1, d2) {
		return A2(
			_elm_lang$core$Basics$compare,
			_elm_community$elm_time$Time_Date$toTuple(d1),
			_elm_community$elm_time$Time_Date$toTuple(d2));
	});
var _elm_community$elm_time$Time_Date$day = function (_p8) {
	var _p9 = _p8;
	return _p9._0.day;
};
var _elm_community$elm_time$Time_Date$month = function (_p10) {
	var _p11 = _p10;
	return _p11._0.month;
};
var _elm_community$elm_time$Time_Date$year = function (_p12) {
	var _p13 = _p12;
	return _p13._0.year;
};
var _elm_community$elm_time$Time_Date$toISO8601 = function (d) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(
			_elm_community$elm_time$Time_Date$year(d)),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'-',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_community$elm_time$Time_Internal$padded(
					_elm_community$elm_time$Time_Date$month(d)),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'-',
					_elm_community$elm_time$Time_Internal$padded(
						_elm_community$elm_time$Time_Date$day(d))))));
};
var _elm_community$elm_time$Time_Date$DateDelta = F3(
	function (a, b, c) {
		return {years: a, months: b, days: c};
	});
var _elm_community$elm_time$Time_Date$Date = function (a) {
	return {ctor: 'Date', _0: a};
};
var _elm_community$elm_time$Time_Date$firstValid = F3(
	function (year, month, day) {
		var _p14 = A3(_elm_community$elm_time$Time_Date$isValidDate, year, month, day) ? {ctor: '_Tuple3', _0: year, _1: month, _2: day} : (A3(_elm_community$elm_time$Time_Date$isValidDate, year, month, day - 1) ? {ctor: '_Tuple3', _0: year, _1: month, _2: day - 1} : (A3(_elm_community$elm_time$Time_Date$isValidDate, year, month, day - 2) ? {ctor: '_Tuple3', _0: year, _1: month, _2: day - 2} : {ctor: '_Tuple3', _0: year, _1: month, _2: day - 3}));
		var y = _p14._0;
		var m = _p14._1;
		var d = _p14._2;
		return _elm_community$elm_time$Time_Date$Date(
			{year: y, month: m, day: d});
	});
var _elm_community$elm_time$Time_Date$date = F3(
	function (year, month, day) {
		return A3(
			_elm_community$elm_time$Time_Date$firstValid,
			year,
			_elm_community$elm_time$Time_Date$clampMonth(month),
			_elm_community$elm_time$Time_Date$clampDay(day));
	});
var _elm_community$elm_time$Time_Date$addMonths = F2(
	function (months, _p15) {
		var _p16 = _p15;
		var ms = (((_p16._0.year * 12) + _p16._0.month) - 1) + months;
		var yo = (_elm_lang$core$Native_Utils.cmp(ms, 0) < 0) ? -1 : 0;
		return A3(
			_elm_community$elm_time$Time_Date$date,
			(((ms - yo) / 12) | 0) + yo,
			A2(_elm_lang$core$Basics_ops['%'], ms, 12) + 1,
			_p16._0.day);
	});
var _elm_community$elm_time$Time_Date$fromTuple = function (_p17) {
	var _p18 = _p17;
	return A3(_elm_community$elm_time$Time_Date$date, _p18._0, _p18._1, _p18._2);
};
var _elm_community$elm_time$Time_Date$fromISO8601 = function (input) {
	var convert = function (_p19) {
		var _p20 = _p19;
		var _p23 = _p20._0;
		var _p22 = _p20._1;
		var _p21 = _p20._2;
		return A3(_elm_community$elm_time$Time_Date$isValidDate, _p23, _p22, _p21) ? _elm_community$parser_combinators$Combine$succeed(
			A3(_elm_community$elm_time$Time_Date$date, _p23, _p22, _p21)) : _elm_community$parser_combinators$Combine$fail('invalid date');
	};
	var dateTuple = A2(
		_elm_community$parser_combinators$Combine_ops['<*>'],
		A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<$>'],
				F3(
					function (v0, v1, v2) {
						return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
					}),
				_elm_community$parser_combinators$Combine_Num$int),
			A2(
				_elm_community$parser_combinators$Combine_ops['*>'],
				_elm_community$parser_combinators$Combine$string('-'),
				A2(_elm_community$elm_time$Time_Internal$intRange, 1, 12))),
		A2(
			_elm_community$parser_combinators$Combine_ops['*>'],
			_elm_community$parser_combinators$Combine$string('-'),
			A2(_elm_community$elm_time$Time_Internal$intRange, 1, 31)));
	var _p24 = A2(
		_elm_community$parser_combinators$Combine$parse,
		A2(_elm_community$parser_combinators$Combine_ops['>>='], dateTuple, convert),
		input);
	if (_p24.ctor === 'Ok') {
		return _elm_lang$core$Result$Ok(_p24._0._2);
	} else {
		var messages = A2(_elm_lang$core$String$join, ' or ', _p24._0._2);
		return _elm_lang$core$Result$Err(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Errors encountered at position ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p24._0._1.position),
					A2(_elm_lang$core$Basics_ops['++'], ': ', messages))));
	}
};
var _elm_community$elm_time$Time_Date$setYear = F2(
	function (year, _p25) {
		var _p26 = _p25;
		return A3(_elm_community$elm_time$Time_Date$firstValid, year, _p26._0.month, _p26._0.day);
	});
var _elm_community$elm_time$Time_Date$setMonth = F2(
	function (month, _p27) {
		var _p28 = _p27;
		return A3(
			_elm_community$elm_time$Time_Date$firstValid,
			_p28._0.year,
			_elm_community$elm_time$Time_Date$clampMonth(month),
			_p28._0.day);
	});
var _elm_community$elm_time$Time_Date$setDay = F2(
	function (day, _p29) {
		var _p30 = _p29;
		return A3(
			_elm_community$elm_time$Time_Date$firstValid,
			_p30._0.year,
			_p30._0.month,
			_elm_community$elm_time$Time_Date$clampDay(day));
	});
var _elm_community$elm_time$Time_Date$addYears = F2(
	function (years, _p31) {
		var _p32 = _p31;
		return A3(_elm_community$elm_time$Time_Date$firstValid, _p32._0.year + years, _p32._0.month, _p32._0.day);
	});
var _elm_community$elm_time$Time_Date$dateFromDays = function (ds) {
	var d400 = _elm_community$elm_time$Time_Date$daysFromYear(400);
	var y400 = (ds / d400) | 0;
	var d = A2(_elm_lang$core$Basics$rem, ds, d400);
	var year = _elm_community$elm_time$Time_Date$yearFromDays(d + 1);
	var leap = _elm_community$elm_time$Time_Date$isLeapYear(year) ? F2(
		function (x, y) {
			return x + y;
		})(1) : _elm_lang$core$Basics$identity;
	var doy = d - _elm_community$elm_time$Time_Date$daysFromYear(year);
	var _p33 = (_elm_lang$core$Native_Utils.cmp(doy, 31) < 0) ? {ctor: '_Tuple2', _0: 1, _1: doy + 1} : ((_elm_lang$core$Native_Utils.cmp(
		doy,
		leap(59)) < 0) ? {ctor: '_Tuple2', _0: 2, _1: (doy - 31) + 1} : ((_elm_lang$core$Native_Utils.cmp(
		doy,
		leap(90)) < 0) ? {
		ctor: '_Tuple2',
		_0: 3,
		_1: (doy - leap(59)) + 1
	} : ((_elm_lang$core$Native_Utils.cmp(
		doy,
		leap(120)) < 0) ? {
		ctor: '_Tuple2',
		_0: 4,
		_1: (doy - leap(90)) + 1
	} : ((_elm_lang$core$Native_Utils.cmp(
		doy,
		leap(151)) < 0) ? {
		ctor: '_Tuple2',
		_0: 5,
		_1: (doy - leap(120)) + 1
	} : ((_elm_lang$core$Native_Utils.cmp(
		doy,
		leap(181)) < 0) ? {
		ctor: '_Tuple2',
		_0: 6,
		_1: (doy - leap(151)) + 1
	} : ((_elm_lang$core$Native_Utils.cmp(
		doy,
		leap(212)) < 0) ? {
		ctor: '_Tuple2',
		_0: 7,
		_1: (doy - leap(181)) + 1
	} : ((_elm_lang$core$Native_Utils.cmp(
		doy,
		leap(243)) < 0) ? {
		ctor: '_Tuple2',
		_0: 8,
		_1: (doy - leap(212)) + 1
	} : ((_elm_lang$core$Native_Utils.cmp(
		doy,
		leap(273)) < 0) ? {
		ctor: '_Tuple2',
		_0: 9,
		_1: (doy - leap(243)) + 1
	} : ((_elm_lang$core$Native_Utils.cmp(
		doy,
		leap(304)) < 0) ? {
		ctor: '_Tuple2',
		_0: 10,
		_1: (doy - leap(273)) + 1
	} : ((_elm_lang$core$Native_Utils.cmp(
		doy,
		leap(334)) < 0) ? {
		ctor: '_Tuple2',
		_0: 11,
		_1: (doy - leap(304)) + 1
	} : {
		ctor: '_Tuple2',
		_0: 12,
		_1: (doy - leap(334)) + 1
	}))))))))));
	var month = _p33._0;
	var day = _p33._1;
	return _elm_community$elm_time$Time_Date$Date(
		{year: year + (y400 * 400), month: month, day: day});
};
var _elm_community$elm_time$Time_Date$addDays = F2(
	function (days, _p34) {
		var _p35 = _p34;
		return _elm_community$elm_time$Time_Date$dateFromDays(
			A2(
				F2(
					function (x, y) {
						return x + y;
					}),
				days,
				A3(_elm_community$elm_time$Time_Date$daysFromYearMonthDay, _p35._0.year, _p35._0.month, _p35._0.day)));
	});
var _elm_community$elm_time$Time_Date$Sun = {ctor: 'Sun'};
var _elm_community$elm_time$Time_Date$Sat = {ctor: 'Sat'};
var _elm_community$elm_time$Time_Date$Fri = {ctor: 'Fri'};
var _elm_community$elm_time$Time_Date$Thu = {ctor: 'Thu'};
var _elm_community$elm_time$Time_Date$Wed = {ctor: 'Wed'};
var _elm_community$elm_time$Time_Date$Tue = {ctor: 'Tue'};
var _elm_community$elm_time$Time_Date$Mon = {ctor: 'Mon'};
var _elm_community$elm_time$Time_Date$weekday = function (_p36) {
	var _p37 = _p36;
	var _p39 = _p37._0.year;
	var _p38 = _p37._0.month;
	var y = (_elm_lang$core$Native_Utils.cmp(_p38, 3) < 0) ? (_p39 - 1) : _p39;
	var m = _elm_lang$core$Native_Utils.eq(_p38, 1) ? 0 : (_elm_lang$core$Native_Utils.eq(_p38, 2) ? 3 : (_elm_lang$core$Native_Utils.eq(_p38, 3) ? 2 : (_elm_lang$core$Native_Utils.eq(_p38, 4) ? 5 : (_elm_lang$core$Native_Utils.eq(_p38, 5) ? 0 : (_elm_lang$core$Native_Utils.eq(_p38, 6) ? 3 : (_elm_lang$core$Native_Utils.eq(_p38, 7) ? 5 : (_elm_lang$core$Native_Utils.eq(_p38, 8) ? 1 : (_elm_lang$core$Native_Utils.eq(_p38, 9) ? 4 : (_elm_lang$core$Native_Utils.eq(_p38, 10) ? 6 : (_elm_lang$core$Native_Utils.eq(_p38, 11) ? 2 : 4))))))))));
	var d = A2(_elm_lang$core$Basics_ops['%'], ((((y + ((y / 4) | 0)) - ((y / 100) | 0)) + ((y / 400) | 0)) + m) + _p37._0.day, 7);
	return _elm_lang$core$Native_Utils.eq(d, 0) ? _elm_community$elm_time$Time_Date$Sun : (_elm_lang$core$Native_Utils.eq(d, 1) ? _elm_community$elm_time$Time_Date$Mon : (_elm_lang$core$Native_Utils.eq(d, 2) ? _elm_community$elm_time$Time_Date$Tue : (_elm_lang$core$Native_Utils.eq(d, 3) ? _elm_community$elm_time$Time_Date$Wed : (_elm_lang$core$Native_Utils.eq(d, 4) ? _elm_community$elm_time$Time_Date$Thu : (_elm_lang$core$Native_Utils.eq(d, 5) ? _elm_community$elm_time$Time_Date$Fri : _elm_community$elm_time$Time_Date$Sat)))));
};

//import Native.Scheduler //

var _elm_lang$core$Native_Time = function() {

var now = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
{
	callback(_elm_lang$core$Native_Scheduler.succeed(Date.now()));
});

function setInterval_(interval, task)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var id = setInterval(function() {
			_elm_lang$core$Native_Scheduler.rawSpawn(task);
		}, interval);

		return function() { clearInterval(id); };
	});
}

return {
	now: now,
	setInterval_: F2(setInterval_)
};

}();
var _elm_lang$core$Task$onError = _elm_lang$core$Native_Scheduler.onError;
var _elm_lang$core$Task$andThen = _elm_lang$core$Native_Scheduler.andThen;
var _elm_lang$core$Task$spawnCmd = F2(
	function (router, _p0) {
		var _p1 = _p0;
		return _elm_lang$core$Native_Scheduler.spawn(
			A2(
				_elm_lang$core$Task$andThen,
				_elm_lang$core$Platform$sendToApp(router),
				_p1._0));
	});
var _elm_lang$core$Task$fail = _elm_lang$core$Native_Scheduler.fail;
var _elm_lang$core$Task$mapError = F2(
	function (convert, task) {
		return A2(
			_elm_lang$core$Task$onError,
			function (_p2) {
				return _elm_lang$core$Task$fail(
					convert(_p2));
			},
			task);
	});
var _elm_lang$core$Task$succeed = _elm_lang$core$Native_Scheduler.succeed;
var _elm_lang$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return _elm_lang$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var _elm_lang$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return _elm_lang$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map3 = F4(
	function (func, taskA, taskB, taskC) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return _elm_lang$core$Task$succeed(
									A3(func, a, b, c));
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map4 = F5(
	function (func, taskA, taskB, taskC, taskD) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Task$andThen,
									function (d) {
										return _elm_lang$core$Task$succeed(
											A4(func, a, b, c, d));
									},
									taskD);
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map5 = F6(
	function (func, taskA, taskB, taskC, taskD, taskE) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Task$andThen,
									function (d) {
										return A2(
											_elm_lang$core$Task$andThen,
											function (e) {
												return _elm_lang$core$Task$succeed(
													A5(func, a, b, c, d, e));
											},
											taskE);
									},
									taskD);
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$sequence = function (tasks) {
	var _p3 = tasks;
	if (_p3.ctor === '[]') {
		return _elm_lang$core$Task$succeed(
			{ctor: '[]'});
	} else {
		return A3(
			_elm_lang$core$Task$map2,
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			_p3._0,
			_elm_lang$core$Task$sequence(_p3._1));
	}
};
var _elm_lang$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			_elm_lang$core$Task$map,
			function (_p4) {
				return {ctor: '_Tuple0'};
			},
			_elm_lang$core$Task$sequence(
				A2(
					_elm_lang$core$List$map,
					_elm_lang$core$Task$spawnCmd(router),
					commands)));
	});
var _elm_lang$core$Task$init = _elm_lang$core$Task$succeed(
	{ctor: '_Tuple0'});
var _elm_lang$core$Task$onSelfMsg = F3(
	function (_p7, _p6, _p5) {
		return _elm_lang$core$Task$succeed(
			{ctor: '_Tuple0'});
	});
var _elm_lang$core$Task$command = _elm_lang$core$Native_Platform.leaf('Task');
var _elm_lang$core$Task$Perform = function (a) {
	return {ctor: 'Perform', _0: a};
};
var _elm_lang$core$Task$perform = F2(
	function (toMessage, task) {
		return _elm_lang$core$Task$command(
			_elm_lang$core$Task$Perform(
				A2(_elm_lang$core$Task$map, toMessage, task)));
	});
var _elm_lang$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return _elm_lang$core$Task$command(
			_elm_lang$core$Task$Perform(
				A2(
					_elm_lang$core$Task$onError,
					function (_p8) {
						return _elm_lang$core$Task$succeed(
							resultToMessage(
								_elm_lang$core$Result$Err(_p8)));
					},
					A2(
						_elm_lang$core$Task$andThen,
						function (_p9) {
							return _elm_lang$core$Task$succeed(
								resultToMessage(
									_elm_lang$core$Result$Ok(_p9)));
						},
						task))));
	});
var _elm_lang$core$Task$cmdMap = F2(
	function (tagger, _p10) {
		var _p11 = _p10;
		return _elm_lang$core$Task$Perform(
			A2(_elm_lang$core$Task$map, tagger, _p11._0));
	});
_elm_lang$core$Native_Platform.effectManagers['Task'] = {pkg: 'elm-lang/core', init: _elm_lang$core$Task$init, onEffects: _elm_lang$core$Task$onEffects, onSelfMsg: _elm_lang$core$Task$onSelfMsg, tag: 'cmd', cmdMap: _elm_lang$core$Task$cmdMap};

var _elm_lang$core$Time$setInterval = _elm_lang$core$Native_Time.setInterval_;
var _elm_lang$core$Time$spawnHelp = F3(
	function (router, intervals, processes) {
		var _p0 = intervals;
		if (_p0.ctor === '[]') {
			return _elm_lang$core$Task$succeed(processes);
		} else {
			var _p1 = _p0._0;
			var spawnRest = function (id) {
				return A3(
					_elm_lang$core$Time$spawnHelp,
					router,
					_p0._1,
					A3(_elm_lang$core$Dict$insert, _p1, id, processes));
			};
			var spawnTimer = _elm_lang$core$Native_Scheduler.spawn(
				A2(
					_elm_lang$core$Time$setInterval,
					_p1,
					A2(_elm_lang$core$Platform$sendToSelf, router, _p1)));
			return A2(_elm_lang$core$Task$andThen, spawnRest, spawnTimer);
		}
	});
var _elm_lang$core$Time$addMySub = F2(
	function (_p2, state) {
		var _p3 = _p2;
		var _p6 = _p3._1;
		var _p5 = _p3._0;
		var _p4 = A2(_elm_lang$core$Dict$get, _p5, state);
		if (_p4.ctor === 'Nothing') {
			return A3(
				_elm_lang$core$Dict$insert,
				_p5,
				{
					ctor: '::',
					_0: _p6,
					_1: {ctor: '[]'}
				},
				state);
		} else {
			return A3(
				_elm_lang$core$Dict$insert,
				_p5,
				{ctor: '::', _0: _p6, _1: _p4._0},
				state);
		}
	});
var _elm_lang$core$Time$inMilliseconds = function (t) {
	return t;
};
var _elm_lang$core$Time$millisecond = 1;
var _elm_lang$core$Time$second = 1000 * _elm_lang$core$Time$millisecond;
var _elm_lang$core$Time$minute = 60 * _elm_lang$core$Time$second;
var _elm_lang$core$Time$hour = 60 * _elm_lang$core$Time$minute;
var _elm_lang$core$Time$inHours = function (t) {
	return t / _elm_lang$core$Time$hour;
};
var _elm_lang$core$Time$inMinutes = function (t) {
	return t / _elm_lang$core$Time$minute;
};
var _elm_lang$core$Time$inSeconds = function (t) {
	return t / _elm_lang$core$Time$second;
};
var _elm_lang$core$Time$now = _elm_lang$core$Native_Time.now;
var _elm_lang$core$Time$onSelfMsg = F3(
	function (router, interval, state) {
		var _p7 = A2(_elm_lang$core$Dict$get, interval, state.taggers);
		if (_p7.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var tellTaggers = function (time) {
				return _elm_lang$core$Task$sequence(
					A2(
						_elm_lang$core$List$map,
						function (tagger) {
							return A2(
								_elm_lang$core$Platform$sendToApp,
								router,
								tagger(time));
						},
						_p7._0));
			};
			return A2(
				_elm_lang$core$Task$andThen,
				function (_p8) {
					return _elm_lang$core$Task$succeed(state);
				},
				A2(_elm_lang$core$Task$andThen, tellTaggers, _elm_lang$core$Time$now));
		}
	});
var _elm_lang$core$Time$subscription = _elm_lang$core$Native_Platform.leaf('Time');
var _elm_lang$core$Time$State = F2(
	function (a, b) {
		return {taggers: a, processes: b};
	});
var _elm_lang$core$Time$init = _elm_lang$core$Task$succeed(
	A2(_elm_lang$core$Time$State, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty));
var _elm_lang$core$Time$onEffects = F3(
	function (router, subs, _p9) {
		var _p10 = _p9;
		var rightStep = F3(
			function (_p12, id, _p11) {
				var _p13 = _p11;
				return {
					ctor: '_Tuple3',
					_0: _p13._0,
					_1: _p13._1,
					_2: A2(
						_elm_lang$core$Task$andThen,
						function (_p14) {
							return _p13._2;
						},
						_elm_lang$core$Native_Scheduler.kill(id))
				};
			});
		var bothStep = F4(
			function (interval, taggers, id, _p15) {
				var _p16 = _p15;
				return {
					ctor: '_Tuple3',
					_0: _p16._0,
					_1: A3(_elm_lang$core$Dict$insert, interval, id, _p16._1),
					_2: _p16._2
				};
			});
		var leftStep = F3(
			function (interval, taggers, _p17) {
				var _p18 = _p17;
				return {
					ctor: '_Tuple3',
					_0: {ctor: '::', _0: interval, _1: _p18._0},
					_1: _p18._1,
					_2: _p18._2
				};
			});
		var newTaggers = A3(_elm_lang$core$List$foldl, _elm_lang$core$Time$addMySub, _elm_lang$core$Dict$empty, subs);
		var _p19 = A6(
			_elm_lang$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			newTaggers,
			_p10.processes,
			{
				ctor: '_Tuple3',
				_0: {ctor: '[]'},
				_1: _elm_lang$core$Dict$empty,
				_2: _elm_lang$core$Task$succeed(
					{ctor: '_Tuple0'})
			});
		var spawnList = _p19._0;
		var existingDict = _p19._1;
		var killTask = _p19._2;
		return A2(
			_elm_lang$core$Task$andThen,
			function (newProcesses) {
				return _elm_lang$core$Task$succeed(
					A2(_elm_lang$core$Time$State, newTaggers, newProcesses));
			},
			A2(
				_elm_lang$core$Task$andThen,
				function (_p20) {
					return A3(_elm_lang$core$Time$spawnHelp, router, spawnList, existingDict);
				},
				killTask));
	});
var _elm_lang$core$Time$Every = F2(
	function (a, b) {
		return {ctor: 'Every', _0: a, _1: b};
	});
var _elm_lang$core$Time$every = F2(
	function (interval, tagger) {
		return _elm_lang$core$Time$subscription(
			A2(_elm_lang$core$Time$Every, interval, tagger));
	});
var _elm_lang$core$Time$subMap = F2(
	function (f, _p21) {
		var _p22 = _p21;
		return A2(
			_elm_lang$core$Time$Every,
			_p22._0,
			function (_p23) {
				return f(
					_p22._1(_p23));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Time'] = {pkg: 'elm-lang/core', init: _elm_lang$core$Time$init, onEffects: _elm_lang$core$Time$onEffects, onSelfMsg: _elm_lang$core$Time$onSelfMsg, tag: 'sub', subMap: _elm_lang$core$Time$subMap};

var _elm_community$elm_time$Time_DateTime$isValidTime = F4(
	function (hour, minute, second, millisecond) {
		return (_elm_lang$core$Native_Utils.cmp(hour, 0) > -1) && ((_elm_lang$core$Native_Utils.cmp(hour, 24) < 0) && ((_elm_lang$core$Native_Utils.cmp(minute, 0) > -1) && ((_elm_lang$core$Native_Utils.cmp(minute, 60) < 0) && ((_elm_lang$core$Native_Utils.cmp(second, 0) > -1) && ((_elm_lang$core$Native_Utils.cmp(second, 60) < 0) && ((_elm_lang$core$Native_Utils.cmp(millisecond, 0) > -1) && (_elm_lang$core$Native_Utils.cmp(millisecond, 1000) < 0)))))));
	});
var _elm_community$elm_time$Time_DateTime$delta = F2(
	function (_p1, _p0) {
		var _p2 = _p1;
		var _p6 = _p2._0;
		var _p3 = _p0;
		var _p5 = _p3._0;
		var _p4 = A2(_elm_community$elm_time$Time_Date$delta, _p6.date, _p5.date);
		var years = _p4.years;
		var months = _p4.months;
		var days = _p4.days;
		var milliseconds = (days * _elm_community$elm_time$Time_Internal$dayMs) + (_p6.offset - _p5.offset);
		var hours = (milliseconds / _elm_community$elm_time$Time_Internal$hourMs) | 0;
		var minutes = (milliseconds / _elm_community$elm_time$Time_Internal$minuteMs) | 0;
		var seconds = (milliseconds / _elm_community$elm_time$Time_Internal$secondMs) | 0;
		return {years: years, months: months, days: days, hours: hours, minutes: minutes, seconds: seconds, milliseconds: milliseconds};
	});
var _elm_community$elm_time$Time_DateTime$millisecond = function (_p7) {
	var _p8 = _p7;
	return A2(
		_elm_lang$core$Basics_ops['%'],
		A2(
			_elm_lang$core$Basics_ops['%'],
			A2(_elm_lang$core$Basics_ops['%'], _p8._0.offset, _elm_community$elm_time$Time_Internal$hourMs),
			_elm_community$elm_time$Time_Internal$minuteMs),
		_elm_community$elm_time$Time_Internal$secondMs);
};
var _elm_community$elm_time$Time_DateTime$second = function (_p9) {
	var _p10 = _p9;
	return (A2(
		_elm_lang$core$Basics_ops['%'],
		A2(_elm_lang$core$Basics_ops['%'], _p10._0.offset, _elm_community$elm_time$Time_Internal$hourMs),
		_elm_community$elm_time$Time_Internal$minuteMs) / _elm_community$elm_time$Time_Internal$secondMs) | 0;
};
var _elm_community$elm_time$Time_DateTime$minute = function (_p11) {
	var _p12 = _p11;
	return (A2(_elm_lang$core$Basics_ops['%'], _p12._0.offset, _elm_community$elm_time$Time_Internal$hourMs) / _elm_community$elm_time$Time_Internal$minuteMs) | 0;
};
var _elm_community$elm_time$Time_DateTime$hour = function (_p13) {
	var _p14 = _p13;
	return (_p14._0.offset / _elm_community$elm_time$Time_Internal$hourMs) | 0;
};
var _elm_community$elm_time$Time_DateTime$toTuple = function (_p15) {
	var _p16 = _p15;
	var _p18 = _p16;
	var _p17 = _elm_community$elm_time$Time_Date$toTuple(_p16._0.date);
	var year = _p17._0;
	var month = _p17._1;
	var day = _p17._2;
	return {
		ctor: '_Tuple7',
		_0: year,
		_1: month,
		_2: day,
		_3: _elm_community$elm_time$Time_DateTime$hour(_p18),
		_4: _elm_community$elm_time$Time_DateTime$minute(_p18),
		_5: _elm_community$elm_time$Time_DateTime$second(_p18),
		_6: _elm_community$elm_time$Time_DateTime$millisecond(_p18)
	};
};
var _elm_community$elm_time$Time_DateTime$weekday = function (_p19) {
	var _p20 = _p19;
	return _elm_community$elm_time$Time_Date$weekday(_p20._0.date);
};
var _elm_community$elm_time$Time_DateTime$day = function (_p21) {
	var _p22 = _p21;
	return _elm_community$elm_time$Time_Date$day(_p22._0.date);
};
var _elm_community$elm_time$Time_DateTime$month = function (_p23) {
	var _p24 = _p23;
	return _elm_community$elm_time$Time_Date$month(_p24._0.date);
};
var _elm_community$elm_time$Time_DateTime$year = function (_p25) {
	var _p26 = _p25;
	return _elm_community$elm_time$Time_Date$year(_p26._0.date);
};
var _elm_community$elm_time$Time_DateTime$toISO8601 = function (time) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(
			_elm_community$elm_time$Time_DateTime$year(time)),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'-',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_community$elm_time$Time_Internal$padded(
					_elm_community$elm_time$Time_DateTime$month(time)),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'-',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_community$elm_time$Time_Internal$padded(
							_elm_community$elm_time$Time_DateTime$day(time)),
						A2(
							_elm_lang$core$Basics_ops['++'],
							'T',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_community$elm_time$Time_Internal$padded(
									_elm_community$elm_time$Time_DateTime$hour(time)),
								A2(
									_elm_lang$core$Basics_ops['++'],
									':',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_community$elm_time$Time_Internal$padded(
											_elm_community$elm_time$Time_DateTime$minute(time)),
										A2(
											_elm_lang$core$Basics_ops['++'],
											':',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_elm_community$elm_time$Time_Internal$padded(
													_elm_community$elm_time$Time_DateTime$second(time)),
												A2(
													_elm_lang$core$Basics_ops['++'],
													'.',
													A2(
														_elm_lang$core$Basics_ops['++'],
														_elm_community$elm_time$Time_Internal$padded3(
															_elm_community$elm_time$Time_DateTime$millisecond(time)),
														'Z')))))))))))));
};
var _elm_community$elm_time$Time_DateTime$compare = F2(
	function (dt1, dt2) {
		return A2(
			_elm_lang$core$Basics$compare,
			_elm_community$elm_time$Time_DateTime$toISO8601(dt1),
			_elm_community$elm_time$Time_DateTime$toISO8601(dt2));
	});
var _elm_community$elm_time$Time_DateTime$date = function (_p27) {
	var _p28 = _p27;
	return _p28._0.date;
};
var _elm_community$elm_time$Time_DateTime$zero = _elm_community$elm_time$Time_Internal$zero;
var _elm_community$elm_time$Time_DateTime$DateTimeDelta = F7(
	function (a, b, c, d, e, f, g) {
		return {years: a, months: b, days: c, hours: d, minutes: e, seconds: f, milliseconds: g};
	});
var _elm_community$elm_time$Time_DateTime$DateTime = function (a) {
	return {ctor: 'DateTime', _0: a};
};
var _elm_community$elm_time$Time_DateTime$dateTime = function (_p29) {
	var _p30 = _p29;
	return _elm_community$elm_time$Time_DateTime$DateTime(
		{
			date: A3(_elm_community$elm_time$Time_Date$date, _p30.year, _p30.month, _p30.day),
			offset: _elm_community$elm_time$Time_Internal$offsetFromTimeData(_p30)
		});
};
var _elm_community$elm_time$Time_DateTime$epoch = _elm_community$elm_time$Time_DateTime$dateTime(
	_elm_lang$core$Native_Utils.update(
		_elm_community$elm_time$Time_DateTime$zero,
		{year: 1970}));
var _elm_community$elm_time$Time_DateTime$toTimestamp = function (time) {
	return _elm_lang$core$Basics$toFloat(
		function (_) {
			return _.milliseconds;
		}(
			A2(_elm_community$elm_time$Time_DateTime$delta, time, _elm_community$elm_time$Time_DateTime$epoch)));
};
var _elm_community$elm_time$Time_DateTime$fromTuple = function (_p31) {
	var _p32 = _p31;
	return _elm_community$elm_time$Time_DateTime$dateTime(
		{year: _p32._0, month: _p32._1, day: _p32._2, hour: _p32._3, minute: _p32._4, second: _p32._5, millisecond: _p32._6});
};
var _elm_community$elm_time$Time_DateTime$mkDateTime = F2(
	function (date, time) {
		return _elm_community$elm_time$Time_DateTime$DateTime(
			{
				date: date,
				offset: _elm_community$elm_time$Time_Internal$offsetFromTimeData(time)
			});
	});
var _elm_community$elm_time$Time_DateTime$setHour = F2(
	function (hour, _p33) {
		var _p34 = _p33;
		var _p35 = _p34;
		return A2(
			_elm_community$elm_time$Time_DateTime$mkDateTime,
			_p34._0.date,
			{
				hour: hour,
				minute: _elm_community$elm_time$Time_DateTime$minute(_p35),
				second: _elm_community$elm_time$Time_DateTime$second(_p35),
				millisecond: _elm_community$elm_time$Time_DateTime$millisecond(_p35)
			});
	});
var _elm_community$elm_time$Time_DateTime$setMinute = F2(
	function (minute, _p36) {
		var _p37 = _p36;
		var _p38 = _p37;
		return A2(
			_elm_community$elm_time$Time_DateTime$mkDateTime,
			_p37._0.date,
			{
				hour: _elm_community$elm_time$Time_DateTime$hour(_p38),
				minute: minute,
				second: _elm_community$elm_time$Time_DateTime$second(_p38),
				millisecond: _elm_community$elm_time$Time_DateTime$millisecond(_p38)
			});
	});
var _elm_community$elm_time$Time_DateTime$setSecond = F2(
	function (second, _p39) {
		var _p40 = _p39;
		var _p41 = _p40;
		return A2(
			_elm_community$elm_time$Time_DateTime$mkDateTime,
			_p40._0.date,
			{
				hour: _elm_community$elm_time$Time_DateTime$hour(_p41),
				minute: _elm_community$elm_time$Time_DateTime$minute(_p41),
				second: second,
				millisecond: _elm_community$elm_time$Time_DateTime$millisecond(_p41)
			});
	});
var _elm_community$elm_time$Time_DateTime$setMillisecond = F2(
	function (millisecond, _p42) {
		var _p43 = _p42;
		var _p44 = _p43;
		return A2(
			_elm_community$elm_time$Time_DateTime$mkDateTime,
			_p43._0.date,
			{
				hour: _elm_community$elm_time$Time_DateTime$hour(_p44),
				minute: _elm_community$elm_time$Time_DateTime$minute(_p44),
				second: _elm_community$elm_time$Time_DateTime$second(_p44),
				millisecond: millisecond
			});
	});
var _elm_community$elm_time$Time_DateTime$setDate = F2(
	function (date, _p45) {
		var _p46 = _p45;
		return _elm_community$elm_time$Time_DateTime$DateTime(
			{date: date, offset: _p46._0.offset});
	});
var _elm_community$elm_time$Time_DateTime$setYear = F2(
	function (year, _p47) {
		var _p48 = _p47;
		return _elm_community$elm_time$Time_DateTime$DateTime(
			{
				date: A2(_elm_community$elm_time$Time_Date$setYear, year, _p48._0.date),
				offset: _p48._0.offset
			});
	});
var _elm_community$elm_time$Time_DateTime$setMonth = F2(
	function (month, _p49) {
		var _p50 = _p49;
		return _elm_community$elm_time$Time_DateTime$DateTime(
			{
				date: A2(_elm_community$elm_time$Time_Date$setMonth, month, _p50._0.date),
				offset: _p50._0.offset
			});
	});
var _elm_community$elm_time$Time_DateTime$setDay = F2(
	function (day, _p51) {
		var _p52 = _p51;
		return _elm_community$elm_time$Time_DateTime$DateTime(
			{
				date: A2(_elm_community$elm_time$Time_Date$setDay, day, _p52._0.date),
				offset: _p52._0.offset
			});
	});
var _elm_community$elm_time$Time_DateTime$addYears = F2(
	function (years, _p53) {
		var _p54 = _p53;
		return _elm_community$elm_time$Time_DateTime$DateTime(
			{
				date: A2(_elm_community$elm_time$Time_Date$addYears, years, _p54._0.date),
				offset: _p54._0.offset
			});
	});
var _elm_community$elm_time$Time_DateTime$addMonths = F2(
	function (months, _p55) {
		var _p56 = _p55;
		return _elm_community$elm_time$Time_DateTime$DateTime(
			{
				date: A2(_elm_community$elm_time$Time_Date$addMonths, months, _p56._0.date),
				offset: _p56._0.offset
			});
	});
var _elm_community$elm_time$Time_DateTime$addDays = F2(
	function (days, _p57) {
		var _p58 = _p57;
		return _elm_community$elm_time$Time_DateTime$DateTime(
			{
				date: A2(_elm_community$elm_time$Time_Date$addDays, days, _p58._0.date),
				offset: _p58._0.offset
			});
	});
var _elm_community$elm_time$Time_DateTime$addMilliseconds = F2(
	function (ms, _p59) {
		var _p60 = _p59;
		var total = ms + _p60._0.offset;
		var _p61 = function () {
			if (_elm_lang$core$Native_Utils.cmp(total, 0) < 0) {
				var offset = A2(_elm_lang$core$Basics$rem, total, _elm_community$elm_time$Time_Internal$dayMs);
				var days = 0 - (((_elm_lang$core$Basics$abs(total) / _elm_community$elm_time$Time_Internal$dayMs) | 0) + 1);
				return _elm_lang$core$Native_Utils.eq(offset, 0) ? {ctor: '_Tuple2', _0: days + 1, _1: 0} : {
					ctor: '_Tuple2',
					_0: days,
					_1: _elm_community$elm_time$Time_Internal$dayMs + A2(_elm_lang$core$Basics$rem, offset, _elm_community$elm_time$Time_Internal$dayMs)
				};
			} else {
				return {
					ctor: '_Tuple2',
					_0: (total / _elm_community$elm_time$Time_Internal$dayMs) | 0,
					_1: A2(_elm_lang$core$Basics$rem, total, _elm_community$elm_time$Time_Internal$dayMs)
				};
			}
		}();
		var days = _p61._0;
		var newOffset = _p61._1;
		return _elm_community$elm_time$Time_DateTime$DateTime(
			{
				date: A2(_elm_community$elm_time$Time_Date$addDays, days, _p60._0.date),
				offset: newOffset
			});
	});
var _elm_community$elm_time$Time_DateTime$addHours = F2(
	function (hours, time) {
		return A2(_elm_community$elm_time$Time_DateTime$addMilliseconds, hours * _elm_community$elm_time$Time_Internal$hourMs, time);
	});
var _elm_community$elm_time$Time_DateTime$addMinutes = F2(
	function (minutes, time) {
		return A2(_elm_community$elm_time$Time_DateTime$addMilliseconds, minutes * _elm_community$elm_time$Time_Internal$minuteMs, time);
	});
var _elm_community$elm_time$Time_DateTime$fromISO8601 = function (input) {
	var convert = function (_p62) {
		var _p63 = _p62;
		var _p69 = _p63._0._0;
		var _p68 = _p63._1._2;
		var _p67 = _p63._0._1;
		var _p66 = _p63._1._1;
		var _p65 = _p63._1._0;
		var _p64 = _p63._0._2;
		return (A3(_elm_community$elm_time$Time_Date$isValidDate, _p69, _p67, _p64) && A4(_elm_community$elm_time$Time_DateTime$isValidTime, _p65, _p66, _p68, 0)) ? _elm_community$parser_combinators$Combine$succeed(
			A2(
				_elm_community$elm_time$Time_DateTime$addMinutes,
				0 - _p63._2,
				_elm_community$elm_time$Time_DateTime$dateTime(
					A7(_elm_community$elm_time$Time_Internal$DateTimeData, _p69, _p67, _p64, _p65, _p66, _p68, _p63._1._3)))) : _elm_community$parser_combinators$Combine$fail('invalid date');
	};
	var offset = A2(
		_elm_community$parser_combinators$Combine_ops['<|>'],
		A2(
			_elm_community$parser_combinators$Combine_ops['<$'],
			0,
			_elm_community$parser_combinators$Combine$string('Z')),
		A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<*>'],
				A2(
					_elm_community$parser_combinators$Combine_ops['<$>'],
					F3(
						function (s, h, m) {
							return ((s * h) * 60) + (s * m);
						}),
					_elm_community$parser_combinators$Combine$choice(
						{
							ctor: '::',
							_0: A2(
								_elm_community$parser_combinators$Combine_ops['<$'],
								1,
								_elm_community$parser_combinators$Combine$string('+')),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_community$parser_combinators$Combine_ops['<$'],
									-1,
									_elm_community$parser_combinators$Combine$string('-')),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_community$parser_combinators$Combine_ops['<$'],
										-1,
										_elm_community$parser_combinators$Combine$string('−')),
									_1: {ctor: '[]'}
								}
							}
						})),
				A3(_elm_community$elm_time$Time_Internal$digitsInRange, 2, 0, 23)),
			A2(
				_elm_community$parser_combinators$Combine_ops['*>'],
				A2(
					_elm_community$parser_combinators$Combine$optional,
					':',
					_elm_community$parser_combinators$Combine$string(':')),
				A3(_elm_community$elm_time$Time_Internal$digitsInRange, 2, 0, 59))));
	var basicDate = A2(
		_elm_community$parser_combinators$Combine_ops['<*>'],
		A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<$>'],
				F3(
					function (v0, v1, v2) {
						return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
					}),
				A3(_elm_community$elm_time$Time_Internal$digitsInRange, 4, 0, 9999)),
			A3(_elm_community$elm_time$Time_Internal$digitsInRange, 2, 1, 12)),
		A3(_elm_community$elm_time$Time_Internal$digitsInRange, 2, 1, 31));
	var extendedDate = A2(
		_elm_community$parser_combinators$Combine_ops['<*>'],
		A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<$>'],
				F3(
					function (v0, v1, v2) {
						return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
					}),
				_elm_community$parser_combinators$Combine_Num$int),
			A2(
				_elm_community$parser_combinators$Combine_ops['*>'],
				_elm_community$parser_combinators$Combine$string('-'),
				A2(_elm_community$elm_time$Time_Internal$intRange, 1, 12))),
		A2(
			_elm_community$parser_combinators$Combine_ops['*>'],
			_elm_community$parser_combinators$Combine$string('-'),
			A2(_elm_community$elm_time$Time_Internal$intRange, 1, 31)));
	var fraction = function () {
		var parseInteger = function (s) {
			var _p70 = _elm_lang$core$String$toInt(s);
			if (_p70.ctor === 'Err') {
				return 0;
			} else {
				return _p70._0;
			}
		};
		var keepUpTo3Places = function (fractionString) {
			var denominator = Math.pow(
				10,
				_elm_lang$core$String$length(fractionString));
			var numerator = parseInteger(fractionString);
			return _elm_lang$core$Basics$round(
				(_elm_community$elm_time$Time_Internal$secondMs * _elm_lang$core$Basics$toFloat(numerator)) / _elm_lang$core$Basics$toFloat(denominator));
		};
		var convert = function (fractionString) {
			return keepUpTo3Places(fractionString);
		};
		var getFractionString = A2(
			_elm_community$parser_combinators$Combine_ops['<$>'],
			function (p) {
				return p;
			},
			_elm_community$parser_combinators$Combine$regex('\\d*'));
		return A2(_elm_community$parser_combinators$Combine_ops['<$>'], convert, getFractionString);
	}();
	var extendedTime = A2(
		_elm_community$parser_combinators$Combine_ops['<*>'],
		A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<*>'],
				A2(
					_elm_community$parser_combinators$Combine_ops['<$>'],
					F4(
						function (v0, v1, v2, v3) {
							return {ctor: '_Tuple4', _0: v0, _1: v1, _2: v2, _3: v3};
						}),
					A2(
						_elm_community$parser_combinators$Combine_ops['*>'],
						_elm_community$parser_combinators$Combine$string('T'),
						A2(_elm_community$elm_time$Time_Internal$intRange, 0, 23))),
				A2(
					_elm_community$parser_combinators$Combine_ops['*>'],
					_elm_community$parser_combinators$Combine$string(':'),
					A2(_elm_community$elm_time$Time_Internal$intRange, 0, 59))),
			A2(
				_elm_community$parser_combinators$Combine_ops['*>'],
				_elm_community$parser_combinators$Combine$string(':'),
				A2(_elm_community$elm_time$Time_Internal$intRange, 0, 59))),
		A2(
			_elm_community$parser_combinators$Combine$optional,
			0,
			A2(
				_elm_community$parser_combinators$Combine_ops['*>'],
				_elm_community$parser_combinators$Combine$regex('[,.]'),
				fraction)));
	var basicTime = A2(
		_elm_community$parser_combinators$Combine_ops['<*>'],
		A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<*>'],
				A2(
					_elm_community$parser_combinators$Combine_ops['<$>'],
					F4(
						function (v0, v1, v2, v3) {
							return {ctor: '_Tuple4', _0: v0, _1: v1, _2: v2, _3: v3};
						}),
					A2(
						_elm_community$parser_combinators$Combine_ops['*>'],
						_elm_community$parser_combinators$Combine$string('T'),
						A3(_elm_community$elm_time$Time_Internal$digitsInRange, 2, 0, 23))),
				A3(_elm_community$elm_time$Time_Internal$digitsInRange, 2, 0, 59)),
			A3(_elm_community$elm_time$Time_Internal$digitsInRange, 2, 0, 59)),
		A2(
			_elm_community$parser_combinators$Combine$optional,
			0,
			A2(
				_elm_community$parser_combinators$Combine_ops['*>'],
				_elm_community$parser_combinators$Combine$regex('[,.]'),
				fraction)));
	var datetime = A2(
		_elm_community$parser_combinators$Combine_ops['<*'],
		A2(
			_elm_community$parser_combinators$Combine_ops['<*>'],
			A2(
				_elm_community$parser_combinators$Combine_ops['<*>'],
				A2(
					_elm_community$parser_combinators$Combine_ops['<$>'],
					F3(
						function (v0, v1, v2) {
							return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
						}),
					A2(_elm_community$parser_combinators$Combine_ops['<|>'], extendedDate, basicDate)),
				A2(_elm_community$parser_combinators$Combine_ops['<|>'], extendedTime, basicTime)),
			offset),
		_elm_community$parser_combinators$Combine$end);
	var _p71 = A2(
		_elm_community$parser_combinators$Combine$parse,
		A2(_elm_community$parser_combinators$Combine_ops['>>='], datetime, convert),
		input);
	if (_p71.ctor === 'Ok') {
		return _elm_lang$core$Result$Ok(_p71._0._2);
	} else {
		var messages = A2(_elm_lang$core$String$join, ' or ', _p71._0._2);
		return _elm_lang$core$Result$Err(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Errors encountered at position ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p71._0._1.position),
					A2(_elm_lang$core$Basics_ops['++'], ': ', messages))));
	}
};
var _elm_community$elm_time$Time_DateTime$addSeconds = F2(
	function (seconds, time) {
		return A2(_elm_community$elm_time$Time_DateTime$addMilliseconds, seconds * _elm_community$elm_time$Time_Internal$secondMs, time);
	});
var _elm_community$elm_time$Time_DateTime$fromTimestamp = function (timestamp) {
	return A2(
		_elm_community$elm_time$Time_DateTime$addMilliseconds,
		_elm_lang$core$Basics$round(timestamp),
		_elm_community$elm_time$Time_DateTime$epoch);
};

var _elm_lang$core$Set$foldr = F3(
	function (f, b, _p0) {
		var _p1 = _p0;
		return A3(
			_elm_lang$core$Dict$foldr,
			F3(
				function (k, _p2, b) {
					return A2(f, k, b);
				}),
			b,
			_p1._0);
	});
var _elm_lang$core$Set$foldl = F3(
	function (f, b, _p3) {
		var _p4 = _p3;
		return A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (k, _p5, b) {
					return A2(f, k, b);
				}),
			b,
			_p4._0);
	});
var _elm_lang$core$Set$toList = function (_p6) {
	var _p7 = _p6;
	return _elm_lang$core$Dict$keys(_p7._0);
};
var _elm_lang$core$Set$size = function (_p8) {
	var _p9 = _p8;
	return _elm_lang$core$Dict$size(_p9._0);
};
var _elm_lang$core$Set$member = F2(
	function (k, _p10) {
		var _p11 = _p10;
		return A2(_elm_lang$core$Dict$member, k, _p11._0);
	});
var _elm_lang$core$Set$isEmpty = function (_p12) {
	var _p13 = _p12;
	return _elm_lang$core$Dict$isEmpty(_p13._0);
};
var _elm_lang$core$Set$Set_elm_builtin = function (a) {
	return {ctor: 'Set_elm_builtin', _0: a};
};
var _elm_lang$core$Set$empty = _elm_lang$core$Set$Set_elm_builtin(_elm_lang$core$Dict$empty);
var _elm_lang$core$Set$singleton = function (k) {
	return _elm_lang$core$Set$Set_elm_builtin(
		A2(
			_elm_lang$core$Dict$singleton,
			k,
			{ctor: '_Tuple0'}));
};
var _elm_lang$core$Set$insert = F2(
	function (k, _p14) {
		var _p15 = _p14;
		return _elm_lang$core$Set$Set_elm_builtin(
			A3(
				_elm_lang$core$Dict$insert,
				k,
				{ctor: '_Tuple0'},
				_p15._0));
	});
var _elm_lang$core$Set$fromList = function (xs) {
	return A3(_elm_lang$core$List$foldl, _elm_lang$core$Set$insert, _elm_lang$core$Set$empty, xs);
};
var _elm_lang$core$Set$map = F2(
	function (f, s) {
		return _elm_lang$core$Set$fromList(
			A2(
				_elm_lang$core$List$map,
				f,
				_elm_lang$core$Set$toList(s)));
	});
var _elm_lang$core$Set$remove = F2(
	function (k, _p16) {
		var _p17 = _p16;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$remove, k, _p17._0));
	});
var _elm_lang$core$Set$union = F2(
	function (_p19, _p18) {
		var _p20 = _p19;
		var _p21 = _p18;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$union, _p20._0, _p21._0));
	});
var _elm_lang$core$Set$intersect = F2(
	function (_p23, _p22) {
		var _p24 = _p23;
		var _p25 = _p22;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$intersect, _p24._0, _p25._0));
	});
var _elm_lang$core$Set$diff = F2(
	function (_p27, _p26) {
		var _p28 = _p27;
		var _p29 = _p26;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$diff, _p28._0, _p29._0));
	});
var _elm_lang$core$Set$filter = F2(
	function (p, _p30) {
		var _p31 = _p30;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(
				_elm_lang$core$Dict$filter,
				F2(
					function (k, _p32) {
						return p(k);
					}),
				_p31._0));
	});
var _elm_lang$core$Set$partition = F2(
	function (p, _p33) {
		var _p34 = _p33;
		var _p35 = A2(
			_elm_lang$core$Dict$partition,
			F2(
				function (k, _p36) {
					return p(k);
				}),
			_p34._0);
		var p1 = _p35._0;
		var p2 = _p35._1;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Set$Set_elm_builtin(p1),
			_1: _elm_lang$core$Set$Set_elm_builtin(p2)
		};
	});

var _elm_community$list_extra$List_Extra$greedyGroupsOfWithStep = F3(
	function (size, step, xs) {
		var okayXs = _elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(xs),
			0) > 0;
		var okayArgs = (_elm_lang$core$Native_Utils.cmp(size, 0) > 0) && (_elm_lang$core$Native_Utils.cmp(step, 0) > 0);
		var xs_ = A2(_elm_lang$core$List$drop, step, xs);
		var group = A2(_elm_lang$core$List$take, size, xs);
		return (okayArgs && okayXs) ? {
			ctor: '::',
			_0: group,
			_1: A3(_elm_community$list_extra$List_Extra$greedyGroupsOfWithStep, size, step, xs_)
		} : {ctor: '[]'};
	});
var _elm_community$list_extra$List_Extra$greedyGroupsOf = F2(
	function (size, xs) {
		return A3(_elm_community$list_extra$List_Extra$greedyGroupsOfWithStep, size, size, xs);
	});
var _elm_community$list_extra$List_Extra$groupsOfWithStep = F3(
	function (size, step, xs) {
		var okayArgs = (_elm_lang$core$Native_Utils.cmp(size, 0) > 0) && (_elm_lang$core$Native_Utils.cmp(step, 0) > 0);
		var xs_ = A2(_elm_lang$core$List$drop, step, xs);
		var group = A2(_elm_lang$core$List$take, size, xs);
		var okayLength = _elm_lang$core$Native_Utils.eq(
			size,
			_elm_lang$core$List$length(group));
		return (okayArgs && okayLength) ? {
			ctor: '::',
			_0: group,
			_1: A3(_elm_community$list_extra$List_Extra$groupsOfWithStep, size, step, xs_)
		} : {ctor: '[]'};
	});
var _elm_community$list_extra$List_Extra$groupsOf = F2(
	function (size, xs) {
		return A3(_elm_community$list_extra$List_Extra$groupsOfWithStep, size, size, xs);
	});
var _elm_community$list_extra$List_Extra$zip5 = _elm_lang$core$List$map5(
	F5(
		function (v0, v1, v2, v3, v4) {
			return {ctor: '_Tuple5', _0: v0, _1: v1, _2: v2, _3: v3, _4: v4};
		}));
var _elm_community$list_extra$List_Extra$zip4 = _elm_lang$core$List$map4(
	F4(
		function (v0, v1, v2, v3) {
			return {ctor: '_Tuple4', _0: v0, _1: v1, _2: v2, _3: v3};
		}));
var _elm_community$list_extra$List_Extra$zip3 = _elm_lang$core$List$map3(
	F3(
		function (v0, v1, v2) {
			return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
		}));
var _elm_community$list_extra$List_Extra$zip = _elm_lang$core$List$map2(
	F2(
		function (v0, v1) {
			return {ctor: '_Tuple2', _0: v0, _1: v1};
		}));
var _elm_community$list_extra$List_Extra$isPrefixOf = function (prefix) {
	return function (_p0) {
		return A2(
			_elm_lang$core$List$all,
			_elm_lang$core$Basics$identity,
			A3(
				_elm_lang$core$List$map2,
				F2(
					function (x, y) {
						return _elm_lang$core$Native_Utils.eq(x, y);
					}),
				prefix,
				_p0));
	};
};
var _elm_community$list_extra$List_Extra$isSuffixOf = F2(
	function (suffix, xs) {
		return A2(
			_elm_community$list_extra$List_Extra$isPrefixOf,
			_elm_lang$core$List$reverse(suffix),
			_elm_lang$core$List$reverse(xs));
	});
var _elm_community$list_extra$List_Extra$selectSplit = function (xs) {
	var _p1 = xs;
	if (_p1.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		var _p5 = _p1._1;
		var _p4 = _p1._0;
		return {
			ctor: '::',
			_0: {
				ctor: '_Tuple3',
				_0: {ctor: '[]'},
				_1: _p4,
				_2: _p5
			},
			_1: A2(
				_elm_lang$core$List$map,
				function (_p2) {
					var _p3 = _p2;
					return {
						ctor: '_Tuple3',
						_0: {ctor: '::', _0: _p4, _1: _p3._0},
						_1: _p3._1,
						_2: _p3._2
					};
				},
				_elm_community$list_extra$List_Extra$selectSplit(_p5))
		};
	}
};
var _elm_community$list_extra$List_Extra$select = function (xs) {
	var _p6 = xs;
	if (_p6.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		var _p10 = _p6._1;
		var _p9 = _p6._0;
		return {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: _p9, _1: _p10},
			_1: A2(
				_elm_lang$core$List$map,
				function (_p7) {
					var _p8 = _p7;
					return {
						ctor: '_Tuple2',
						_0: _p8._0,
						_1: {ctor: '::', _0: _p9, _1: _p8._1}
					};
				},
				_elm_community$list_extra$List_Extra$select(_p10))
		};
	}
};
var _elm_community$list_extra$List_Extra$tailsHelp = F2(
	function (e, list) {
		var _p11 = list;
		if (_p11.ctor === '::') {
			var _p12 = _p11._0;
			return {
				ctor: '::',
				_0: {ctor: '::', _0: e, _1: _p12},
				_1: {ctor: '::', _0: _p12, _1: _p11._1}
			};
		} else {
			return {ctor: '[]'};
		}
	});
var _elm_community$list_extra$List_Extra$tails = A2(
	_elm_lang$core$List$foldr,
	_elm_community$list_extra$List_Extra$tailsHelp,
	{
		ctor: '::',
		_0: {ctor: '[]'},
		_1: {ctor: '[]'}
	});
var _elm_community$list_extra$List_Extra$isInfixOf = F2(
	function (infix, xs) {
		return A2(
			_elm_lang$core$List$any,
			_elm_community$list_extra$List_Extra$isPrefixOf(infix),
			_elm_community$list_extra$List_Extra$tails(xs));
	});
var _elm_community$list_extra$List_Extra$inits = A2(
	_elm_lang$core$List$foldr,
	F2(
		function (e, acc) {
			return {
				ctor: '::',
				_0: {ctor: '[]'},
				_1: A2(
					_elm_lang$core$List$map,
					F2(
						function (x, y) {
							return {ctor: '::', _0: x, _1: y};
						})(e),
					acc)
			};
		}),
	{
		ctor: '::',
		_0: {ctor: '[]'},
		_1: {ctor: '[]'}
	});
var _elm_community$list_extra$List_Extra$groupWhileTransitively = F2(
	function (cmp, xs_) {
		var _p13 = xs_;
		if (_p13.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p13._1.ctor === '[]') {
				return {
					ctor: '::',
					_0: {
						ctor: '::',
						_0: _p13._0,
						_1: {ctor: '[]'}
					},
					_1: {ctor: '[]'}
				};
			} else {
				var _p15 = _p13._0;
				var _p14 = A2(_elm_community$list_extra$List_Extra$groupWhileTransitively, cmp, _p13._1);
				if (_p14.ctor === '::') {
					return A2(cmp, _p15, _p13._1._0) ? {
						ctor: '::',
						_0: {ctor: '::', _0: _p15, _1: _p14._0},
						_1: _p14._1
					} : {
						ctor: '::',
						_0: {
							ctor: '::',
							_0: _p15,
							_1: {ctor: '[]'}
						},
						_1: _p14
					};
				} else {
					return {ctor: '[]'};
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$stripPrefix = F2(
	function (prefix, xs) {
		var step = F2(
			function (e, m) {
				var _p16 = m;
				if (_p16.ctor === 'Nothing') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					if (_p16._0.ctor === '[]') {
						return _elm_lang$core$Maybe$Nothing;
					} else {
						return _elm_lang$core$Native_Utils.eq(e, _p16._0._0) ? _elm_lang$core$Maybe$Just(_p16._0._1) : _elm_lang$core$Maybe$Nothing;
					}
				}
			});
		return A3(
			_elm_lang$core$List$foldl,
			step,
			_elm_lang$core$Maybe$Just(xs),
			prefix);
	});
var _elm_community$list_extra$List_Extra$dropWhileRight = function (p) {
	return A2(
		_elm_lang$core$List$foldr,
		F2(
			function (x, xs) {
				return (p(x) && _elm_lang$core$List$isEmpty(xs)) ? {ctor: '[]'} : {ctor: '::', _0: x, _1: xs};
			}),
		{ctor: '[]'});
};
var _elm_community$list_extra$List_Extra$takeWhileRight = function (p) {
	var step = F2(
		function (x, _p17) {
			var _p18 = _p17;
			var _p19 = _p18._0;
			return (p(x) && _p18._1) ? {
				ctor: '_Tuple2',
				_0: {ctor: '::', _0: x, _1: _p19},
				_1: true
			} : {ctor: '_Tuple2', _0: _p19, _1: false};
		});
	return function (_p20) {
		return _elm_lang$core$Tuple$first(
			A3(
				_elm_lang$core$List$foldr,
				step,
				{
					ctor: '_Tuple2',
					_0: {ctor: '[]'},
					_1: true
				},
				_p20));
	};
};
var _elm_community$list_extra$List_Extra$splitAt = F2(
	function (n, xs) {
		return {
			ctor: '_Tuple2',
			_0: A2(_elm_lang$core$List$take, n, xs),
			_1: A2(_elm_lang$core$List$drop, n, xs)
		};
	});
var _elm_community$list_extra$List_Extra$groupsOfVarying_ = F3(
	function (listOflengths, list, accu) {
		groupsOfVarying_:
		while (true) {
			var _p21 = {ctor: '_Tuple2', _0: listOflengths, _1: list};
			if (((_p21.ctor === '_Tuple2') && (_p21._0.ctor === '::')) && (_p21._1.ctor === '::')) {
				var _p22 = A2(_elm_community$list_extra$List_Extra$splitAt, _p21._0._0, list);
				var head = _p22._0;
				var tail = _p22._1;
				var _v10 = _p21._0._1,
					_v11 = tail,
					_v12 = {ctor: '::', _0: head, _1: accu};
				listOflengths = _v10;
				list = _v11;
				accu = _v12;
				continue groupsOfVarying_;
			} else {
				return _elm_lang$core$List$reverse(accu);
			}
		}
	});
var _elm_community$list_extra$List_Extra$groupsOfVarying = F2(
	function (listOflengths, list) {
		return A3(
			_elm_community$list_extra$List_Extra$groupsOfVarying_,
			listOflengths,
			list,
			{ctor: '[]'});
	});
var _elm_community$list_extra$List_Extra$unfoldr = F2(
	function (f, seed) {
		var _p23 = f(seed);
		if (_p23.ctor === 'Nothing') {
			return {ctor: '[]'};
		} else {
			return {
				ctor: '::',
				_0: _p23._0._0,
				_1: A2(_elm_community$list_extra$List_Extra$unfoldr, f, _p23._0._1)
			};
		}
	});
var _elm_community$list_extra$List_Extra$scanr1 = F2(
	function (f, xs_) {
		var _p24 = xs_;
		if (_p24.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p24._1.ctor === '[]') {
				return {
					ctor: '::',
					_0: _p24._0,
					_1: {ctor: '[]'}
				};
			} else {
				var _p25 = A2(_elm_community$list_extra$List_Extra$scanr1, f, _p24._1);
				if (_p25.ctor === '::') {
					return {
						ctor: '::',
						_0: A2(f, _p24._0, _p25._0),
						_1: _p25
					};
				} else {
					return {ctor: '[]'};
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$scanr = F3(
	function (f, acc, xs_) {
		var _p26 = xs_;
		if (_p26.ctor === '[]') {
			return {
				ctor: '::',
				_0: acc,
				_1: {ctor: '[]'}
			};
		} else {
			var _p27 = A3(_elm_community$list_extra$List_Extra$scanr, f, acc, _p26._1);
			if (_p27.ctor === '::') {
				return {
					ctor: '::',
					_0: A2(f, _p26._0, _p27._0),
					_1: _p27
				};
			} else {
				return {ctor: '[]'};
			}
		}
	});
var _elm_community$list_extra$List_Extra$scanl1 = F2(
	function (f, xs_) {
		var _p28 = xs_;
		if (_p28.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			return A3(_elm_lang$core$List$scanl, f, _p28._0, _p28._1);
		}
	});
var _elm_community$list_extra$List_Extra$indexedFoldr = F3(
	function (func, acc, list) {
		var step = F2(
			function (x, _p29) {
				var _p30 = _p29;
				var _p31 = _p30._0;
				return {
					ctor: '_Tuple2',
					_0: _p31 - 1,
					_1: A3(func, _p31, x, _p30._1)
				};
			});
		return _elm_lang$core$Tuple$second(
			A3(
				_elm_lang$core$List$foldr,
				step,
				{
					ctor: '_Tuple2',
					_0: _elm_lang$core$List$length(list) - 1,
					_1: acc
				},
				list));
	});
var _elm_community$list_extra$List_Extra$indexedFoldl = F3(
	function (func, acc, list) {
		var step = F2(
			function (x, _p32) {
				var _p33 = _p32;
				var _p34 = _p33._0;
				return {
					ctor: '_Tuple2',
					_0: _p34 + 1,
					_1: A3(func, _p34, x, _p33._1)
				};
			});
		return _elm_lang$core$Tuple$second(
			A3(
				_elm_lang$core$List$foldl,
				step,
				{ctor: '_Tuple2', _0: 0, _1: acc},
				list));
	});
var _elm_community$list_extra$List_Extra$foldr1 = F2(
	function (f, xs) {
		var mf = F2(
			function (x, m) {
				return _elm_lang$core$Maybe$Just(
					function () {
						var _p35 = m;
						if (_p35.ctor === 'Nothing') {
							return x;
						} else {
							return A2(f, x, _p35._0);
						}
					}());
			});
		return A3(_elm_lang$core$List$foldr, mf, _elm_lang$core$Maybe$Nothing, xs);
	});
var _elm_community$list_extra$List_Extra$foldl1 = F2(
	function (f, xs) {
		var mf = F2(
			function (x, m) {
				return _elm_lang$core$Maybe$Just(
					function () {
						var _p36 = m;
						if (_p36.ctor === 'Nothing') {
							return x;
						} else {
							return A2(f, _p36._0, x);
						}
					}());
			});
		return A3(_elm_lang$core$List$foldl, mf, _elm_lang$core$Maybe$Nothing, xs);
	});
var _elm_community$list_extra$List_Extra$interweaveHelp = F3(
	function (l1, l2, acc) {
		interweaveHelp:
		while (true) {
			var _p37 = {ctor: '_Tuple2', _0: l1, _1: l2};
			_v23_1:
			do {
				if (_p37._0.ctor === '::') {
					if (_p37._1.ctor === '::') {
						var _v24 = _p37._0._1,
							_v25 = _p37._1._1,
							_v26 = A2(
							_elm_lang$core$Basics_ops['++'],
							acc,
							{
								ctor: '::',
								_0: _p37._0._0,
								_1: {
									ctor: '::',
									_0: _p37._1._0,
									_1: {ctor: '[]'}
								}
							});
						l1 = _v24;
						l2 = _v25;
						acc = _v26;
						continue interweaveHelp;
					} else {
						break _v23_1;
					}
				} else {
					if (_p37._1.ctor === '[]') {
						break _v23_1;
					} else {
						return A2(_elm_lang$core$Basics_ops['++'], acc, _p37._1);
					}
				}
			} while(false);
			return A2(_elm_lang$core$Basics_ops['++'], acc, _p37._0);
		}
	});
var _elm_community$list_extra$List_Extra$interweave = F2(
	function (l1, l2) {
		return A3(
			_elm_community$list_extra$List_Extra$interweaveHelp,
			l1,
			l2,
			{ctor: '[]'});
	});
var _elm_community$list_extra$List_Extra$permutations = function (xs_) {
	var _p38 = xs_;
	if (_p38.ctor === '[]') {
		return {
			ctor: '::',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		};
	} else {
		var f = function (_p39) {
			var _p40 = _p39;
			return A2(
				_elm_lang$core$List$map,
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					})(_p40._0),
				_elm_community$list_extra$List_Extra$permutations(_p40._1));
		};
		return A2(
			_elm_lang$core$List$concatMap,
			f,
			_elm_community$list_extra$List_Extra$select(_p38));
	}
};
var _elm_community$list_extra$List_Extra$isPermutationOf = F2(
	function (permut, xs) {
		return A2(
			_elm_lang$core$List$member,
			permut,
			_elm_community$list_extra$List_Extra$permutations(xs));
	});
var _elm_community$list_extra$List_Extra$subsequencesNonEmpty = function (xs) {
	var _p41 = xs;
	if (_p41.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		var _p42 = _p41._0;
		var f = F2(
			function (ys, r) {
				return {
					ctor: '::',
					_0: ys,
					_1: {
						ctor: '::',
						_0: {ctor: '::', _0: _p42, _1: ys},
						_1: r
					}
				};
			});
		return {
			ctor: '::',
			_0: {
				ctor: '::',
				_0: _p42,
				_1: {ctor: '[]'}
			},
			_1: A3(
				_elm_lang$core$List$foldr,
				f,
				{ctor: '[]'},
				_elm_community$list_extra$List_Extra$subsequencesNonEmpty(_p41._1))
		};
	}
};
var _elm_community$list_extra$List_Extra$subsequences = function (xs) {
	return {
		ctor: '::',
		_0: {ctor: '[]'},
		_1: _elm_community$list_extra$List_Extra$subsequencesNonEmpty(xs)
	};
};
var _elm_community$list_extra$List_Extra$isSubsequenceOf = F2(
	function (subseq, xs) {
		return A2(
			_elm_lang$core$List$member,
			subseq,
			_elm_community$list_extra$List_Extra$subsequences(xs));
	});
var _elm_community$list_extra$List_Extra$transpose = function (ll) {
	transpose:
	while (true) {
		var _p43 = ll;
		if (_p43.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p43._0.ctor === '[]') {
				var _v31 = _p43._1;
				ll = _v31;
				continue transpose;
			} else {
				var _p44 = _p43._1;
				var tails = A2(_elm_lang$core$List$filterMap, _elm_lang$core$List$tail, _p44);
				var heads = A2(_elm_lang$core$List$filterMap, _elm_lang$core$List$head, _p44);
				return {
					ctor: '::',
					_0: {ctor: '::', _0: _p43._0._0, _1: heads},
					_1: _elm_community$list_extra$List_Extra$transpose(
						{ctor: '::', _0: _p43._0._1, _1: tails})
				};
			}
		}
	}
};
var _elm_community$list_extra$List_Extra$intercalate = function (xs) {
	return function (_p45) {
		return _elm_lang$core$List$concat(
			A2(_elm_lang$core$List$intersperse, xs, _p45));
	};
};
var _elm_community$list_extra$List_Extra$filterNot = F2(
	function (pred, list) {
		return A2(
			_elm_lang$core$List$filter,
			function (_p46) {
				return !pred(_p46);
			},
			list);
	});
var _elm_community$list_extra$List_Extra$removeAt = F2(
	function (index, l) {
		if (_elm_lang$core$Native_Utils.cmp(index, 0) < 0) {
			return l;
		} else {
			var tail = _elm_lang$core$List$tail(
				A2(_elm_lang$core$List$drop, index, l));
			var head = A2(_elm_lang$core$List$take, index, l);
			var _p47 = tail;
			if (_p47.ctor === 'Nothing') {
				return l;
			} else {
				return A2(_elm_lang$core$List$append, head, _p47._0);
			}
		}
	});
var _elm_community$list_extra$List_Extra$singleton = function (x) {
	return {
		ctor: '::',
		_0: x,
		_1: {ctor: '[]'}
	};
};
var _elm_community$list_extra$List_Extra$stableSortWith = F2(
	function (pred, list) {
		var predWithIndex = F2(
			function (_p49, _p48) {
				var _p50 = _p49;
				var _p51 = _p48;
				var result = A2(pred, _p50._0, _p51._0);
				var _p52 = result;
				if (_p52.ctor === 'EQ') {
					return A2(_elm_lang$core$Basics$compare, _p50._1, _p51._1);
				} else {
					return result;
				}
			});
		var listWithIndex = A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (i, a) {
					return {ctor: '_Tuple2', _0: a, _1: i};
				}),
			list);
		return A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Tuple$first,
			A2(_elm_lang$core$List$sortWith, predWithIndex, listWithIndex));
	});
var _elm_community$list_extra$List_Extra$setAt = F3(
	function (index, value, l) {
		if (_elm_lang$core$Native_Utils.cmp(index, 0) < 0) {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var tail = _elm_lang$core$List$tail(
				A2(_elm_lang$core$List$drop, index, l));
			var head = A2(_elm_lang$core$List$take, index, l);
			var _p53 = tail;
			if (_p53.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				return _elm_lang$core$Maybe$Just(
					A2(
						_elm_lang$core$List$append,
						head,
						{ctor: '::', _0: value, _1: _p53._0}));
			}
		}
	});
var _elm_community$list_extra$List_Extra$remove = F2(
	function (x, xs) {
		var _p54 = xs;
		if (_p54.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p56 = _p54._1;
			var _p55 = _p54._0;
			return _elm_lang$core$Native_Utils.eq(x, _p55) ? _p56 : {
				ctor: '::',
				_0: _p55,
				_1: A2(_elm_community$list_extra$List_Extra$remove, x, _p56)
			};
		}
	});
var _elm_community$list_extra$List_Extra$updateIfIndex = F3(
	function (predicate, update, list) {
		return A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (i, x) {
					return predicate(i) ? update(x) : x;
				}),
			list);
	});
var _elm_community$list_extra$List_Extra$updateAt = F3(
	function (index, update, list) {
		return ((_elm_lang$core$Native_Utils.cmp(index, 0) < 0) || (_elm_lang$core$Native_Utils.cmp(
			index,
			_elm_lang$core$List$length(list)) > -1)) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
			A3(
				_elm_community$list_extra$List_Extra$updateIfIndex,
				F2(
					function (x, y) {
						return _elm_lang$core$Native_Utils.eq(x, y);
					})(index),
				update,
				list));
	});
var _elm_community$list_extra$List_Extra$updateIf = F3(
	function (predicate, update, list) {
		return A2(
			_elm_lang$core$List$map,
			function (item) {
				return predicate(item) ? update(item) : item;
			},
			list);
	});
var _elm_community$list_extra$List_Extra$replaceIf = F3(
	function (predicate, replacement, list) {
		return A3(
			_elm_community$list_extra$List_Extra$updateIf,
			predicate,
			_elm_lang$core$Basics$always(replacement),
			list);
	});
var _elm_community$list_extra$List_Extra$findIndices = function (p) {
	return function (_p57) {
		return A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Tuple$first,
			A2(
				_elm_lang$core$List$filter,
				function (_p58) {
					var _p59 = _p58;
					return p(_p59._1);
				},
				A2(
					_elm_lang$core$List$indexedMap,
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						}),
					_p57)));
	};
};
var _elm_community$list_extra$List_Extra$findIndex = function (p) {
	return function (_p60) {
		return _elm_lang$core$List$head(
			A2(_elm_community$list_extra$List_Extra$findIndices, p, _p60));
	};
};
var _elm_community$list_extra$List_Extra$elemIndices = function (x) {
	return _elm_community$list_extra$List_Extra$findIndices(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(x));
};
var _elm_community$list_extra$List_Extra$elemIndex = function (x) {
	return _elm_community$list_extra$List_Extra$findIndex(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(x));
};
var _elm_community$list_extra$List_Extra$find = F2(
	function (predicate, list) {
		find:
		while (true) {
			var _p61 = list;
			if (_p61.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p62 = _p61._0;
				if (predicate(_p62)) {
					return _elm_lang$core$Maybe$Just(_p62);
				} else {
					var _v40 = predicate,
						_v41 = _p61._1;
					predicate = _v40;
					list = _v41;
					continue find;
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$notMember = function (x) {
	return function (_p63) {
		return !A2(_elm_lang$core$List$member, x, _p63);
	};
};
var _elm_community$list_extra$List_Extra$andThen = _elm_lang$core$List$concatMap;
var _elm_community$list_extra$List_Extra$lift2 = F3(
	function (f, la, lb) {
		return A2(
			_elm_community$list_extra$List_Extra$andThen,
			function (a) {
				return A2(
					_elm_community$list_extra$List_Extra$andThen,
					function (b) {
						return {
							ctor: '::',
							_0: A2(f, a, b),
							_1: {ctor: '[]'}
						};
					},
					lb);
			},
			la);
	});
var _elm_community$list_extra$List_Extra$lift3 = F4(
	function (f, la, lb, lc) {
		return A2(
			_elm_community$list_extra$List_Extra$andThen,
			function (a) {
				return A2(
					_elm_community$list_extra$List_Extra$andThen,
					function (b) {
						return A2(
							_elm_community$list_extra$List_Extra$andThen,
							function (c) {
								return {
									ctor: '::',
									_0: A3(f, a, b, c),
									_1: {ctor: '[]'}
								};
							},
							lc);
					},
					lb);
			},
			la);
	});
var _elm_community$list_extra$List_Extra$lift4 = F5(
	function (f, la, lb, lc, ld) {
		return A2(
			_elm_community$list_extra$List_Extra$andThen,
			function (a) {
				return A2(
					_elm_community$list_extra$List_Extra$andThen,
					function (b) {
						return A2(
							_elm_community$list_extra$List_Extra$andThen,
							function (c) {
								return A2(
									_elm_community$list_extra$List_Extra$andThen,
									function (d) {
										return {
											ctor: '::',
											_0: A4(f, a, b, c, d),
											_1: {ctor: '[]'}
										};
									},
									ld);
							},
							lc);
					},
					lb);
			},
			la);
	});
var _elm_community$list_extra$List_Extra$andMap = F2(
	function (fl, l) {
		return A3(
			_elm_lang$core$List$map2,
			F2(
				function (x, y) {
					return x(y);
				}),
			fl,
			l);
	});
var _elm_community$list_extra$List_Extra$uniqueHelp = F3(
	function (f, existing, remaining) {
		uniqueHelp:
		while (true) {
			var _p64 = remaining;
			if (_p64.ctor === '[]') {
				return {ctor: '[]'};
			} else {
				var _p66 = _p64._1;
				var _p65 = _p64._0;
				var computedFirst = f(_p65);
				if (A2(_elm_lang$core$Set$member, computedFirst, existing)) {
					var _v43 = f,
						_v44 = existing,
						_v45 = _p66;
					f = _v43;
					existing = _v44;
					remaining = _v45;
					continue uniqueHelp;
				} else {
					return {
						ctor: '::',
						_0: _p65,
						_1: A3(
							_elm_community$list_extra$List_Extra$uniqueHelp,
							f,
							A2(_elm_lang$core$Set$insert, computedFirst, existing),
							_p66)
					};
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$uniqueBy = F2(
	function (f, list) {
		return A3(_elm_community$list_extra$List_Extra$uniqueHelp, f, _elm_lang$core$Set$empty, list);
	});
var _elm_community$list_extra$List_Extra$allDifferentBy = F2(
	function (f, list) {
		return _elm_lang$core$Native_Utils.eq(
			_elm_lang$core$List$length(list),
			_elm_lang$core$List$length(
				A2(_elm_community$list_extra$List_Extra$uniqueBy, f, list)));
	});
var _elm_community$list_extra$List_Extra$unique = function (list) {
	return A3(_elm_community$list_extra$List_Extra$uniqueHelp, _elm_lang$core$Basics$identity, _elm_lang$core$Set$empty, list);
};
var _elm_community$list_extra$List_Extra$allDifferent = function (list) {
	return _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$List$length(list),
		_elm_lang$core$List$length(
			_elm_community$list_extra$List_Extra$unique(list)));
};
var _elm_community$list_extra$List_Extra$dropWhile = F2(
	function (predicate, list) {
		dropWhile:
		while (true) {
			var _p67 = list;
			if (_p67.ctor === '[]') {
				return {ctor: '[]'};
			} else {
				if (predicate(_p67._0)) {
					var _v47 = predicate,
						_v48 = _p67._1;
					predicate = _v47;
					list = _v48;
					continue dropWhile;
				} else {
					return list;
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$takeWhile = F2(
	function (predicate, list) {
		var _p68 = list;
		if (_p68.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p69 = _p68._0;
			return predicate(_p69) ? {
				ctor: '::',
				_0: _p69,
				_1: A2(_elm_community$list_extra$List_Extra$takeWhile, predicate, _p68._1)
			} : {ctor: '[]'};
		}
	});
var _elm_community$list_extra$List_Extra$span = F2(
	function (p, xs) {
		return {
			ctor: '_Tuple2',
			_0: A2(_elm_community$list_extra$List_Extra$takeWhile, p, xs),
			_1: A2(_elm_community$list_extra$List_Extra$dropWhile, p, xs)
		};
	});
var _elm_community$list_extra$List_Extra$break = function (p) {
	return _elm_community$list_extra$List_Extra$span(
		function (_p70) {
			return !p(_p70);
		});
};
var _elm_community$list_extra$List_Extra$groupWhile = F2(
	function (eq, xs_) {
		var _p71 = xs_;
		if (_p71.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p73 = _p71._0;
			var _p72 = A2(
				_elm_community$list_extra$List_Extra$span,
				eq(_p73),
				_p71._1);
			var ys = _p72._0;
			var zs = _p72._1;
			return {
				ctor: '::',
				_0: {ctor: '::', _0: _p73, _1: ys},
				_1: A2(_elm_community$list_extra$List_Extra$groupWhile, eq, zs)
			};
		}
	});
var _elm_community$list_extra$List_Extra$group = _elm_community$list_extra$List_Extra$groupWhile(
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.eq(x, y);
		}));
var _elm_community$list_extra$List_Extra$minimumBy = F2(
	function (f, ls) {
		var minBy = F2(
			function (x, _p74) {
				var _p75 = _p74;
				var _p76 = _p75._1;
				var fx = f(x);
				return (_elm_lang$core$Native_Utils.cmp(fx, _p76) < 0) ? {ctor: '_Tuple2', _0: x, _1: fx} : {ctor: '_Tuple2', _0: _p75._0, _1: _p76};
			});
		var _p77 = ls;
		if (_p77.ctor === '::') {
			if (_p77._1.ctor === '[]') {
				return _elm_lang$core$Maybe$Just(_p77._0);
			} else {
				var _p78 = _p77._0;
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Tuple$first(
						A3(
							_elm_lang$core$List$foldl,
							minBy,
							{
								ctor: '_Tuple2',
								_0: _p78,
								_1: f(_p78)
							},
							_p77._1)));
			}
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_community$list_extra$List_Extra$maximumBy = F2(
	function (f, ls) {
		var maxBy = F2(
			function (x, _p79) {
				var _p80 = _p79;
				var _p81 = _p80._1;
				var fx = f(x);
				return (_elm_lang$core$Native_Utils.cmp(fx, _p81) > 0) ? {ctor: '_Tuple2', _0: x, _1: fx} : {ctor: '_Tuple2', _0: _p80._0, _1: _p81};
			});
		var _p82 = ls;
		if (_p82.ctor === '::') {
			if (_p82._1.ctor === '[]') {
				return _elm_lang$core$Maybe$Just(_p82._0);
			} else {
				var _p83 = _p82._0;
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Tuple$first(
						A3(
							_elm_lang$core$List$foldl,
							maxBy,
							{
								ctor: '_Tuple2',
								_0: _p83,
								_1: f(_p83)
							},
							_p82._1)));
			}
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_community$list_extra$List_Extra$uncons = function (xs) {
	var _p84 = xs;
	if (_p84.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(
			{ctor: '_Tuple2', _0: _p84._0, _1: _p84._1});
	}
};
var _elm_community$list_extra$List_Extra$swapAt = F3(
	function (index1, index2, l) {
		swapAt:
		while (true) {
			if (_elm_lang$core$Native_Utils.eq(index1, index2)) {
				return _elm_lang$core$Maybe$Just(l);
			} else {
				if (_elm_lang$core$Native_Utils.cmp(index1, index2) > 0) {
					var _v56 = index2,
						_v57 = index1,
						_v58 = l;
					index1 = _v56;
					index2 = _v57;
					l = _v58;
					continue swapAt;
				} else {
					if (_elm_lang$core$Native_Utils.cmp(index1, 0) < 0) {
						return _elm_lang$core$Maybe$Nothing;
					} else {
						var _p85 = A2(_elm_community$list_extra$List_Extra$splitAt, index1, l);
						var part1 = _p85._0;
						var tail1 = _p85._1;
						var _p86 = A2(_elm_community$list_extra$List_Extra$splitAt, index2 - index1, tail1);
						var head2 = _p86._0;
						var tail2 = _p86._1;
						return A3(
							_elm_lang$core$Maybe$map2,
							F2(
								function (_p88, _p87) {
									var _p89 = _p88;
									var _p90 = _p87;
									return _elm_lang$core$List$concat(
										{
											ctor: '::',
											_0: part1,
											_1: {
												ctor: '::',
												_0: {ctor: '::', _0: _p90._0, _1: _p89._1},
												_1: {
													ctor: '::',
													_0: {ctor: '::', _0: _p89._0, _1: _p90._1},
													_1: {ctor: '[]'}
												}
											}
										});
								}),
							_elm_community$list_extra$List_Extra$uncons(head2),
							_elm_community$list_extra$List_Extra$uncons(tail2));
					}
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$iterate = F2(
	function (f, x) {
		var _p91 = f(x);
		if (_p91.ctor === 'Just') {
			return {
				ctor: '::',
				_0: x,
				_1: A2(_elm_community$list_extra$List_Extra$iterate, f, _p91._0)
			};
		} else {
			return {
				ctor: '::',
				_0: x,
				_1: {ctor: '[]'}
			};
		}
	});
var _elm_community$list_extra$List_Extra$getAt = F2(
	function (idx, xs) {
		return (_elm_lang$core$Native_Utils.cmp(idx, 0) < 0) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$List$head(
			A2(_elm_lang$core$List$drop, idx, xs));
	});
var _elm_community$list_extra$List_Extra_ops = _elm_community$list_extra$List_Extra_ops || {};
_elm_community$list_extra$List_Extra_ops['!!'] = _elm_lang$core$Basics$flip(_elm_community$list_extra$List_Extra$getAt);
var _elm_community$list_extra$List_Extra$init = function () {
	var maybe = F2(
		function (d, f) {
			return function (_p92) {
				return A2(
					_elm_lang$core$Maybe$withDefault,
					d,
					A2(_elm_lang$core$Maybe$map, f, _p92));
			};
		});
	return A2(
		_elm_lang$core$List$foldr,
		function (x) {
			return function (_p93) {
				return _elm_lang$core$Maybe$Just(
					A3(
						maybe,
						{ctor: '[]'},
						F2(
							function (x, y) {
								return {ctor: '::', _0: x, _1: y};
							})(x),
						_p93));
			};
		},
		_elm_lang$core$Maybe$Nothing);
}();
var _elm_community$list_extra$List_Extra$last = _elm_community$list_extra$List_Extra$foldl1(
	_elm_lang$core$Basics$flip(_elm_lang$core$Basics$always));

var _elm_community$maybe_extra$Maybe_Extra$foldrValues = F2(
	function (item, list) {
		var _p0 = item;
		if (_p0.ctor === 'Nothing') {
			return list;
		} else {
			return {ctor: '::', _0: _p0._0, _1: list};
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$values = A2(
	_elm_lang$core$List$foldr,
	_elm_community$maybe_extra$Maybe_Extra$foldrValues,
	{ctor: '[]'});
var _elm_community$maybe_extra$Maybe_Extra$filter = F2(
	function (f, m) {
		var _p1 = A2(_elm_lang$core$Maybe$map, f, m);
		if ((_p1.ctor === 'Just') && (_p1._0 === true)) {
			return m;
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$traverseArray = function (f) {
	var step = F2(
		function (e, acc) {
			var _p2 = f(e);
			if (_p2.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				return A2(
					_elm_lang$core$Maybe$map,
					_elm_lang$core$Array$push(_p2._0),
					acc);
			}
		});
	return A2(
		_elm_lang$core$Array$foldl,
		step,
		_elm_lang$core$Maybe$Just(_elm_lang$core$Array$empty));
};
var _elm_community$maybe_extra$Maybe_Extra$combineArray = _elm_community$maybe_extra$Maybe_Extra$traverseArray(_elm_lang$core$Basics$identity);
var _elm_community$maybe_extra$Maybe_Extra$traverse = function (f) {
	var step = F2(
		function (e, acc) {
			var _p3 = f(e);
			if (_p3.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				return A2(
					_elm_lang$core$Maybe$map,
					F2(
						function (x, y) {
							return {ctor: '::', _0: x, _1: y};
						})(_p3._0),
					acc);
			}
		});
	return A2(
		_elm_lang$core$List$foldr,
		step,
		_elm_lang$core$Maybe$Just(
			{ctor: '[]'}));
};
var _elm_community$maybe_extra$Maybe_Extra$combine = _elm_community$maybe_extra$Maybe_Extra$traverse(_elm_lang$core$Basics$identity);
var _elm_community$maybe_extra$Maybe_Extra$maybeToArray = function (m) {
	var _p4 = m;
	if (_p4.ctor === 'Nothing') {
		return _elm_lang$core$Array$empty;
	} else {
		return A2(_elm_lang$core$Array$repeat, 1, _p4._0);
	}
};
var _elm_community$maybe_extra$Maybe_Extra$maybeToList = function (m) {
	var _p5 = m;
	if (_p5.ctor === 'Nothing') {
		return {ctor: '[]'};
	} else {
		return {
			ctor: '::',
			_0: _p5._0,
			_1: {ctor: '[]'}
		};
	}
};
var _elm_community$maybe_extra$Maybe_Extra$orElse = F2(
	function (ma, mb) {
		var _p6 = mb;
		if (_p6.ctor === 'Nothing') {
			return ma;
		} else {
			return mb;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$orElseLazy = F2(
	function (fma, mb) {
		var _p7 = mb;
		if (_p7.ctor === 'Nothing') {
			return fma(
				{ctor: '_Tuple0'});
		} else {
			return mb;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$orLazy = F2(
	function (ma, fmb) {
		var _p8 = ma;
		if (_p8.ctor === 'Nothing') {
			return fmb(
				{ctor: '_Tuple0'});
		} else {
			return ma;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$or = F2(
	function (ma, mb) {
		var _p9 = ma;
		if (_p9.ctor === 'Nothing') {
			return mb;
		} else {
			return ma;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$prev = _elm_lang$core$Maybe$map2(_elm_lang$core$Basics$always);
var _elm_community$maybe_extra$Maybe_Extra$next = _elm_lang$core$Maybe$map2(
	_elm_lang$core$Basics$flip(_elm_lang$core$Basics$always));
var _elm_community$maybe_extra$Maybe_Extra$andMap = _elm_lang$core$Maybe$map2(
	F2(
		function (x, y) {
			return y(x);
		}));
var _elm_community$maybe_extra$Maybe_Extra$unpack = F3(
	function (d, f, m) {
		var _p10 = m;
		if (_p10.ctor === 'Nothing') {
			return d(
				{ctor: '_Tuple0'});
		} else {
			return f(_p10._0);
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$unwrap = F3(
	function (d, f, m) {
		var _p11 = m;
		if (_p11.ctor === 'Nothing') {
			return d;
		} else {
			return f(_p11._0);
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$isJust = function (m) {
	var _p12 = m;
	if (_p12.ctor === 'Nothing') {
		return false;
	} else {
		return true;
	}
};
var _elm_community$maybe_extra$Maybe_Extra$isNothing = function (m) {
	var _p13 = m;
	if (_p13.ctor === 'Nothing') {
		return true;
	} else {
		return false;
	}
};
var _elm_community$maybe_extra$Maybe_Extra$join = function (mx) {
	var _p14 = mx;
	if (_p14.ctor === 'Just') {
		return _p14._0;
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_community$maybe_extra$Maybe_Extra_ops = _elm_community$maybe_extra$Maybe_Extra_ops || {};
_elm_community$maybe_extra$Maybe_Extra_ops['?'] = F2(
	function (mx, x) {
		return A2(_elm_lang$core$Maybe$withDefault, x, mx);
	});

var _elm_lang$core$Color$fmod = F2(
	function (f, n) {
		var integer = _elm_lang$core$Basics$floor(f);
		return (_elm_lang$core$Basics$toFloat(
			A2(_elm_lang$core$Basics_ops['%'], integer, n)) + f) - _elm_lang$core$Basics$toFloat(integer);
	});
var _elm_lang$core$Color$rgbToHsl = F3(
	function (red, green, blue) {
		var b = _elm_lang$core$Basics$toFloat(blue) / 255;
		var g = _elm_lang$core$Basics$toFloat(green) / 255;
		var r = _elm_lang$core$Basics$toFloat(red) / 255;
		var cMax = A2(
			_elm_lang$core$Basics$max,
			A2(_elm_lang$core$Basics$max, r, g),
			b);
		var cMin = A2(
			_elm_lang$core$Basics$min,
			A2(_elm_lang$core$Basics$min, r, g),
			b);
		var c = cMax - cMin;
		var lightness = (cMax + cMin) / 2;
		var saturation = _elm_lang$core$Native_Utils.eq(lightness, 0) ? 0 : (c / (1 - _elm_lang$core$Basics$abs((2 * lightness) - 1)));
		var hue = _elm_lang$core$Basics$degrees(60) * (_elm_lang$core$Native_Utils.eq(cMax, r) ? A2(_elm_lang$core$Color$fmod, (g - b) / c, 6) : (_elm_lang$core$Native_Utils.eq(cMax, g) ? (((b - r) / c) + 2) : (((r - g) / c) + 4)));
		return {ctor: '_Tuple3', _0: hue, _1: saturation, _2: lightness};
	});
var _elm_lang$core$Color$hslToRgb = F3(
	function (hue, saturation, lightness) {
		var normHue = hue / _elm_lang$core$Basics$degrees(60);
		var chroma = (1 - _elm_lang$core$Basics$abs((2 * lightness) - 1)) * saturation;
		var x = chroma * (1 - _elm_lang$core$Basics$abs(
			A2(_elm_lang$core$Color$fmod, normHue, 2) - 1));
		var _p0 = (_elm_lang$core$Native_Utils.cmp(normHue, 0) < 0) ? {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0} : ((_elm_lang$core$Native_Utils.cmp(normHue, 1) < 0) ? {ctor: '_Tuple3', _0: chroma, _1: x, _2: 0} : ((_elm_lang$core$Native_Utils.cmp(normHue, 2) < 0) ? {ctor: '_Tuple3', _0: x, _1: chroma, _2: 0} : ((_elm_lang$core$Native_Utils.cmp(normHue, 3) < 0) ? {ctor: '_Tuple3', _0: 0, _1: chroma, _2: x} : ((_elm_lang$core$Native_Utils.cmp(normHue, 4) < 0) ? {ctor: '_Tuple3', _0: 0, _1: x, _2: chroma} : ((_elm_lang$core$Native_Utils.cmp(normHue, 5) < 0) ? {ctor: '_Tuple3', _0: x, _1: 0, _2: chroma} : ((_elm_lang$core$Native_Utils.cmp(normHue, 6) < 0) ? {ctor: '_Tuple3', _0: chroma, _1: 0, _2: x} : {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0}))))));
		var r = _p0._0;
		var g = _p0._1;
		var b = _p0._2;
		var m = lightness - (chroma / 2);
		return {ctor: '_Tuple3', _0: r + m, _1: g + m, _2: b + m};
	});
var _elm_lang$core$Color$toRgb = function (color) {
	var _p1 = color;
	if (_p1.ctor === 'RGBA') {
		return {red: _p1._0, green: _p1._1, blue: _p1._2, alpha: _p1._3};
	} else {
		var _p2 = A3(_elm_lang$core$Color$hslToRgb, _p1._0, _p1._1, _p1._2);
		var r = _p2._0;
		var g = _p2._1;
		var b = _p2._2;
		return {
			red: _elm_lang$core$Basics$round(255 * r),
			green: _elm_lang$core$Basics$round(255 * g),
			blue: _elm_lang$core$Basics$round(255 * b),
			alpha: _p1._3
		};
	}
};
var _elm_lang$core$Color$toHsl = function (color) {
	var _p3 = color;
	if (_p3.ctor === 'HSLA') {
		return {hue: _p3._0, saturation: _p3._1, lightness: _p3._2, alpha: _p3._3};
	} else {
		var _p4 = A3(_elm_lang$core$Color$rgbToHsl, _p3._0, _p3._1, _p3._2);
		var h = _p4._0;
		var s = _p4._1;
		var l = _p4._2;
		return {hue: h, saturation: s, lightness: l, alpha: _p3._3};
	}
};
var _elm_lang$core$Color$HSLA = F4(
	function (a, b, c, d) {
		return {ctor: 'HSLA', _0: a, _1: b, _2: c, _3: d};
	});
var _elm_lang$core$Color$hsla = F4(
	function (hue, saturation, lightness, alpha) {
		return A4(
			_elm_lang$core$Color$HSLA,
			hue - _elm_lang$core$Basics$turns(
				_elm_lang$core$Basics$toFloat(
					_elm_lang$core$Basics$floor(hue / (2 * _elm_lang$core$Basics$pi)))),
			saturation,
			lightness,
			alpha);
	});
var _elm_lang$core$Color$hsl = F3(
	function (hue, saturation, lightness) {
		return A4(_elm_lang$core$Color$hsla, hue, saturation, lightness, 1);
	});
var _elm_lang$core$Color$complement = function (color) {
	var _p5 = color;
	if (_p5.ctor === 'HSLA') {
		return A4(
			_elm_lang$core$Color$hsla,
			_p5._0 + _elm_lang$core$Basics$degrees(180),
			_p5._1,
			_p5._2,
			_p5._3);
	} else {
		var _p6 = A3(_elm_lang$core$Color$rgbToHsl, _p5._0, _p5._1, _p5._2);
		var h = _p6._0;
		var s = _p6._1;
		var l = _p6._2;
		return A4(
			_elm_lang$core$Color$hsla,
			h + _elm_lang$core$Basics$degrees(180),
			s,
			l,
			_p5._3);
	}
};
var _elm_lang$core$Color$grayscale = function (p) {
	return A4(_elm_lang$core$Color$HSLA, 0, 0, 1 - p, 1);
};
var _elm_lang$core$Color$greyscale = function (p) {
	return A4(_elm_lang$core$Color$HSLA, 0, 0, 1 - p, 1);
};
var _elm_lang$core$Color$RGBA = F4(
	function (a, b, c, d) {
		return {ctor: 'RGBA', _0: a, _1: b, _2: c, _3: d};
	});
var _elm_lang$core$Color$rgba = _elm_lang$core$Color$RGBA;
var _elm_lang$core$Color$rgb = F3(
	function (r, g, b) {
		return A4(_elm_lang$core$Color$RGBA, r, g, b, 1);
	});
var _elm_lang$core$Color$lightRed = A4(_elm_lang$core$Color$RGBA, 239, 41, 41, 1);
var _elm_lang$core$Color$red = A4(_elm_lang$core$Color$RGBA, 204, 0, 0, 1);
var _elm_lang$core$Color$darkRed = A4(_elm_lang$core$Color$RGBA, 164, 0, 0, 1);
var _elm_lang$core$Color$lightOrange = A4(_elm_lang$core$Color$RGBA, 252, 175, 62, 1);
var _elm_lang$core$Color$orange = A4(_elm_lang$core$Color$RGBA, 245, 121, 0, 1);
var _elm_lang$core$Color$darkOrange = A4(_elm_lang$core$Color$RGBA, 206, 92, 0, 1);
var _elm_lang$core$Color$lightYellow = A4(_elm_lang$core$Color$RGBA, 255, 233, 79, 1);
var _elm_lang$core$Color$yellow = A4(_elm_lang$core$Color$RGBA, 237, 212, 0, 1);
var _elm_lang$core$Color$darkYellow = A4(_elm_lang$core$Color$RGBA, 196, 160, 0, 1);
var _elm_lang$core$Color$lightGreen = A4(_elm_lang$core$Color$RGBA, 138, 226, 52, 1);
var _elm_lang$core$Color$green = A4(_elm_lang$core$Color$RGBA, 115, 210, 22, 1);
var _elm_lang$core$Color$darkGreen = A4(_elm_lang$core$Color$RGBA, 78, 154, 6, 1);
var _elm_lang$core$Color$lightBlue = A4(_elm_lang$core$Color$RGBA, 114, 159, 207, 1);
var _elm_lang$core$Color$blue = A4(_elm_lang$core$Color$RGBA, 52, 101, 164, 1);
var _elm_lang$core$Color$darkBlue = A4(_elm_lang$core$Color$RGBA, 32, 74, 135, 1);
var _elm_lang$core$Color$lightPurple = A4(_elm_lang$core$Color$RGBA, 173, 127, 168, 1);
var _elm_lang$core$Color$purple = A4(_elm_lang$core$Color$RGBA, 117, 80, 123, 1);
var _elm_lang$core$Color$darkPurple = A4(_elm_lang$core$Color$RGBA, 92, 53, 102, 1);
var _elm_lang$core$Color$lightBrown = A4(_elm_lang$core$Color$RGBA, 233, 185, 110, 1);
var _elm_lang$core$Color$brown = A4(_elm_lang$core$Color$RGBA, 193, 125, 17, 1);
var _elm_lang$core$Color$darkBrown = A4(_elm_lang$core$Color$RGBA, 143, 89, 2, 1);
var _elm_lang$core$Color$black = A4(_elm_lang$core$Color$RGBA, 0, 0, 0, 1);
var _elm_lang$core$Color$white = A4(_elm_lang$core$Color$RGBA, 255, 255, 255, 1);
var _elm_lang$core$Color$lightGrey = A4(_elm_lang$core$Color$RGBA, 238, 238, 236, 1);
var _elm_lang$core$Color$grey = A4(_elm_lang$core$Color$RGBA, 211, 215, 207, 1);
var _elm_lang$core$Color$darkGrey = A4(_elm_lang$core$Color$RGBA, 186, 189, 182, 1);
var _elm_lang$core$Color$lightGray = A4(_elm_lang$core$Color$RGBA, 238, 238, 236, 1);
var _elm_lang$core$Color$gray = A4(_elm_lang$core$Color$RGBA, 211, 215, 207, 1);
var _elm_lang$core$Color$darkGray = A4(_elm_lang$core$Color$RGBA, 186, 189, 182, 1);
var _elm_lang$core$Color$lightCharcoal = A4(_elm_lang$core$Color$RGBA, 136, 138, 133, 1);
var _elm_lang$core$Color$charcoal = A4(_elm_lang$core$Color$RGBA, 85, 87, 83, 1);
var _elm_lang$core$Color$darkCharcoal = A4(_elm_lang$core$Color$RGBA, 46, 52, 54, 1);
var _elm_lang$core$Color$Radial = F5(
	function (a, b, c, d, e) {
		return {ctor: 'Radial', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _elm_lang$core$Color$radial = _elm_lang$core$Color$Radial;
var _elm_lang$core$Color$Linear = F3(
	function (a, b, c) {
		return {ctor: 'Linear', _0: a, _1: b, _2: c};
	});
var _elm_lang$core$Color$linear = _elm_lang$core$Color$Linear;

var _elm_community$string_extra$String_Extra$accentRegex = function () {
	var matches = {
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: '[à-æ]', _1: 'a'},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: '[À-Æ]', _1: 'A'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'ç', _1: 'c'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'Ç', _1: 'C'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: '[è-ë]', _1: 'e'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: '[È-Ë]', _1: 'E'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: '[ì-ï]', _1: 'i'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: '[Ì-Ï]', _1: 'I'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'ñ', _1: 'n'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'Ñ', _1: 'N'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: '[ò-ö]', _1: 'o'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: '[Ò-Ö]', _1: 'O'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: '[ù-ü]', _1: 'u'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: '[Ù-Ü]', _1: 'U'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'ý', _1: 'y'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'ÿ', _1: 'y'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'Ý', _1: 'Y'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	};
	return A2(
		_elm_lang$core$List$map,
		function (_p0) {
			var _p1 = _p0;
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Regex$regex(_p1._0),
				_1: _p1._1
			};
		},
		matches);
}();
var _elm_community$string_extra$String_Extra$removeAccents = function (string) {
	if (_elm_lang$core$String$isEmpty(string)) {
		return string;
	} else {
		var do_regex_to_remove_acents = function (_p2) {
			var _p3 = _p2;
			return A3(
				_elm_lang$core$Regex$replace,
				_elm_lang$core$Regex$All,
				_p3._0,
				function (_p4) {
					return _p3._1;
				});
		};
		return A3(_elm_lang$core$List$foldl, do_regex_to_remove_acents, string, _elm_community$string_extra$String_Extra$accentRegex);
	}
};
var _elm_community$string_extra$String_Extra$nonEmpty = function (string) {
	return _elm_lang$core$String$isEmpty(string) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(string);
};
var _elm_community$string_extra$String_Extra$replacementCodePoint = 65533;
var _elm_community$string_extra$String_Extra$toCodePoints = function (string) {
	var allCodeUnits = A2(
		_elm_lang$core$List$map,
		_elm_lang$core$Char$toCode,
		_elm_lang$core$String$toList(string));
	var combineAndReverse = F2(
		function (codeUnits, accumulated) {
			combineAndReverse:
			while (true) {
				var _p5 = codeUnits;
				if (_p5.ctor === '[]') {
					return accumulated;
				} else {
					var _p9 = _p5._0;
					var _p8 = _p5._1;
					if ((_elm_lang$core$Native_Utils.cmp(_p9, 0) > -1) && (_elm_lang$core$Native_Utils.cmp(_p9, 55295) < 1)) {
						var _v3 = _p8,
							_v4 = {ctor: '::', _0: _p9, _1: accumulated};
						codeUnits = _v3;
						accumulated = _v4;
						continue combineAndReverse;
					} else {
						if ((_elm_lang$core$Native_Utils.cmp(_p9, 55296) > -1) && (_elm_lang$core$Native_Utils.cmp(_p9, 56319) < 1)) {
							var _p6 = _p8;
							if (_p6.ctor === '[]') {
								return {ctor: '::', _0: _elm_community$string_extra$String_Extra$replacementCodePoint, _1: accumulated};
							} else {
								var _p7 = _p6._0;
								if ((_elm_lang$core$Native_Utils.cmp(_p7, 56320) > -1) && (_elm_lang$core$Native_Utils.cmp(_p7, 57343) < 1)) {
									var codePoint = (65536 + ((_p9 - 55296) * 1024)) + (_p7 - 56320);
									var _v6 = _p6._1,
										_v7 = {ctor: '::', _0: codePoint, _1: accumulated};
									codeUnits = _v6;
									accumulated = _v7;
									continue combineAndReverse;
								} else {
									var _v8 = _p8,
										_v9 = {ctor: '::', _0: _elm_community$string_extra$String_Extra$replacementCodePoint, _1: accumulated};
									codeUnits = _v8;
									accumulated = _v9;
									continue combineAndReverse;
								}
							}
						} else {
							if ((_elm_lang$core$Native_Utils.cmp(_p9, 57344) > -1) && (_elm_lang$core$Native_Utils.cmp(_p9, 65535) < 1)) {
								var _v10 = _p8,
									_v11 = {ctor: '::', _0: _p9, _1: accumulated};
								codeUnits = _v10;
								accumulated = _v11;
								continue combineAndReverse;
							} else {
								var _v12 = _p8,
									_v13 = {ctor: '::', _0: _elm_community$string_extra$String_Extra$replacementCodePoint, _1: accumulated};
								codeUnits = _v12;
								accumulated = _v13;
								continue combineAndReverse;
							}
						}
					}
				}
			}
		});
	return _elm_lang$core$List$reverse(
		A2(
			combineAndReverse,
			allCodeUnits,
			{ctor: '[]'}));
};
var _elm_community$string_extra$String_Extra$fromCodePoints = function (allCodePoints) {
	var splitAndReverse = F2(
		function (codePoints, accumulated) {
			splitAndReverse:
			while (true) {
				var _p10 = codePoints;
				if (_p10.ctor === '[]') {
					return accumulated;
				} else {
					var _p12 = _p10._1;
					var _p11 = _p10._0;
					if ((_elm_lang$core$Native_Utils.cmp(_p11, 0) > -1) && (_elm_lang$core$Native_Utils.cmp(_p11, 55295) < 1)) {
						var _v15 = _p12,
							_v16 = {ctor: '::', _0: _p11, _1: accumulated};
						codePoints = _v15;
						accumulated = _v16;
						continue splitAndReverse;
					} else {
						if ((_elm_lang$core$Native_Utils.cmp(_p11, 65536) > -1) && (_elm_lang$core$Native_Utils.cmp(_p11, 1114111) < 1)) {
							var subtracted = _p11 - 65536;
							var leading = (subtracted >> 10) + 55296;
							var trailing = (subtracted & 1023) + 56320;
							var _v17 = _p12,
								_v18 = {
								ctor: '::',
								_0: trailing,
								_1: {ctor: '::', _0: leading, _1: accumulated}
							};
							codePoints = _v17;
							accumulated = _v18;
							continue splitAndReverse;
						} else {
							if ((_elm_lang$core$Native_Utils.cmp(_p11, 57344) > -1) && (_elm_lang$core$Native_Utils.cmp(_p11, 65535) < 1)) {
								var _v19 = _p12,
									_v20 = {ctor: '::', _0: _p11, _1: accumulated};
								codePoints = _v19;
								accumulated = _v20;
								continue splitAndReverse;
							} else {
								var _v21 = _p12,
									_v22 = {ctor: '::', _0: _elm_community$string_extra$String_Extra$replacementCodePoint, _1: accumulated};
								codePoints = _v21;
								accumulated = _v22;
								continue splitAndReverse;
							}
						}
					}
				}
			}
		});
	var allCodeUnits = _elm_lang$core$List$reverse(
		A2(
			splitAndReverse,
			allCodePoints,
			{ctor: '[]'}));
	return _elm_lang$core$String$fromList(
		A2(_elm_lang$core$List$map, _elm_lang$core$Char$fromCode, allCodeUnits));
};
var _elm_community$string_extra$String_Extra$fromFloat = _elm_lang$core$Basics$toString;
var _elm_community$string_extra$String_Extra$fromInt = _elm_lang$core$Basics$toString;
var _elm_community$string_extra$String_Extra$leftOfBack = F2(
	function (pattern, string) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			A2(
				_elm_lang$core$Maybe$map,
				A2(_elm_lang$core$Basics$flip, _elm_lang$core$String$left, string),
				_elm_lang$core$List$head(
					_elm_lang$core$List$reverse(
						A2(_elm_lang$core$String$indexes, pattern, string)))));
	});
var _elm_community$string_extra$String_Extra$rightOfBack = F2(
	function (pattern, string) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			A2(
				_elm_lang$core$Maybe$map,
				function (_p13) {
					return A3(
						_elm_lang$core$Basics$flip,
						_elm_lang$core$String$dropLeft,
						string,
						A2(
							F2(
								function (x, y) {
									return x + y;
								}),
							_elm_lang$core$String$length(pattern),
							_p13));
				},
				_elm_lang$core$List$head(
					_elm_lang$core$List$reverse(
						A2(_elm_lang$core$String$indexes, pattern, string)))));
	});
var _elm_community$string_extra$String_Extra$firstResultHelp = F2(
	function ($default, list) {
		firstResultHelp:
		while (true) {
			var _p14 = list;
			if (_p14.ctor === '[]') {
				return $default;
			} else {
				if (_p14._0.ctor === 'Just') {
					return _p14._0._0;
				} else {
					var _v24 = $default,
						_v25 = _p14._1;
					$default = _v24;
					list = _v25;
					continue firstResultHelp;
				}
			}
		}
	});
var _elm_community$string_extra$String_Extra$firstResult = function (list) {
	return A2(_elm_community$string_extra$String_Extra$firstResultHelp, '', list);
};
var _elm_community$string_extra$String_Extra$leftOf = F2(
	function (pattern, string) {
		return A2(
			_elm_lang$core$String$join,
			'',
			A2(
				_elm_lang$core$List$map,
				function (_p15) {
					return _elm_community$string_extra$String_Extra$firstResult(
						function (_) {
							return _.submatches;
						}(_p15));
				},
				A3(
					_elm_lang$core$Regex$find,
					_elm_lang$core$Regex$AtMost(1),
					_elm_lang$core$Regex$regex(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'^(.*?)',
							_elm_lang$core$Regex$escape(pattern))),
					string)));
	});
var _elm_community$string_extra$String_Extra$rightOf = F2(
	function (pattern, string) {
		return A2(
			_elm_lang$core$String$join,
			'',
			A2(
				_elm_lang$core$List$map,
				function (_p16) {
					return _elm_community$string_extra$String_Extra$firstResult(
						function (_) {
							return _.submatches;
						}(_p16));
				},
				A3(
					_elm_lang$core$Regex$find,
					_elm_lang$core$Regex$AtMost(1),
					_elm_lang$core$Regex$regex(
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Regex$escape(pattern),
							'(.*)$')),
					string)));
	});
var _elm_community$string_extra$String_Extra$pluralize = F3(
	function (singular, plural, count) {
		return _elm_lang$core$Native_Utils.eq(count, 1) ? A2(_elm_lang$core$Basics_ops['++'], '1 ', singular) : A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(count),
			A2(_elm_lang$core$Basics_ops['++'], ' ', plural));
	});
var _elm_community$string_extra$String_Extra$stripTags = function (string) {
	return A4(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$All,
		_elm_lang$core$Regex$regex('<\\/?[^>]+>'),
		_elm_lang$core$Basics$always(''),
		string);
};
var _elm_community$string_extra$String_Extra$toSentenceHelper = F3(
	function (lastPart, sentence, list) {
		toSentenceHelper:
		while (true) {
			var _p17 = list;
			if (_p17.ctor === '[]') {
				return sentence;
			} else {
				if (_p17._1.ctor === '[]') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						sentence,
						A2(_elm_lang$core$Basics_ops['++'], lastPart, _p17._0));
				} else {
					var _v27 = lastPart,
						_v28 = A2(
						_elm_lang$core$Basics_ops['++'],
						sentence,
						A2(_elm_lang$core$Basics_ops['++'], ', ', _p17._0)),
						_v29 = _p17._1;
					lastPart = _v27;
					sentence = _v28;
					list = _v29;
					continue toSentenceHelper;
				}
			}
		}
	});
var _elm_community$string_extra$String_Extra$toSentenceBaseCase = function (list) {
	var _p18 = list;
	_v30_2:
	do {
		if (_p18.ctor === '::') {
			if (_p18._1.ctor === '[]') {
				return _p18._0;
			} else {
				if (_p18._1._1.ctor === '[]') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_p18._0,
						A2(_elm_lang$core$Basics_ops['++'], ' and ', _p18._1._0));
				} else {
					break _v30_2;
				}
			}
		} else {
			break _v30_2;
		}
	} while(false);
	return '';
};
var _elm_community$string_extra$String_Extra$toSentenceOxford = function (list) {
	var _p19 = list;
	if (((_p19.ctor === '::') && (_p19._1.ctor === '::')) && (_p19._1._1.ctor === '::')) {
		return A3(
			_elm_community$string_extra$String_Extra$toSentenceHelper,
			', and ',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_p19._0,
				A2(_elm_lang$core$Basics_ops['++'], ', ', _p19._1._0)),
			{ctor: '::', _0: _p19._1._1._0, _1: _p19._1._1._1});
	} else {
		return _elm_community$string_extra$String_Extra$toSentenceBaseCase(list);
	}
};
var _elm_community$string_extra$String_Extra$toSentence = function (list) {
	var _p20 = list;
	if (((_p20.ctor === '::') && (_p20._1.ctor === '::')) && (_p20._1._1.ctor === '::')) {
		return A3(
			_elm_community$string_extra$String_Extra$toSentenceHelper,
			' and ',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_p20._0,
				A2(_elm_lang$core$Basics_ops['++'], ', ', _p20._1._0)),
			{ctor: '::', _0: _p20._1._1._0, _1: _p20._1._1._1});
	} else {
		return _elm_community$string_extra$String_Extra$toSentenceBaseCase(list);
	}
};
var _elm_community$string_extra$String_Extra$ellipsisWith = F3(
	function (howLong, append, string) {
		return (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$String$length(string),
			howLong) < 1) ? string : A2(
			_elm_lang$core$Basics_ops['++'],
			A2(
				_elm_lang$core$String$left,
				howLong - _elm_lang$core$String$length(append),
				string),
			append);
	});
var _elm_community$string_extra$String_Extra$ellipsis = F2(
	function (howLong, string) {
		return A3(_elm_community$string_extra$String_Extra$ellipsisWith, howLong, '...', string);
	});
var _elm_community$string_extra$String_Extra$countOccurrences = F2(
	function (needle, haystack) {
		return (_elm_lang$core$Native_Utils.eq(
			_elm_lang$core$String$length(needle),
			0) || _elm_lang$core$Native_Utils.eq(
			_elm_lang$core$String$length(haystack),
			0)) ? 0 : _elm_lang$core$List$length(
			A2(_elm_lang$core$String$indexes, needle, haystack));
	});
var _elm_community$string_extra$String_Extra$unindent = function (multilineSting) {
	var isNotWhitespace = function ($char) {
		return (!_elm_lang$core$Native_Utils.eq(
			$char,
			_elm_lang$core$Native_Utils.chr(' '))) && (!_elm_lang$core$Native_Utils.eq(
			$char,
			_elm_lang$core$Native_Utils.chr('\t')));
	};
	var countLeadingWhitespace = F2(
		function (count, line) {
			countLeadingWhitespace:
			while (true) {
				var _p21 = _elm_lang$core$String$uncons(line);
				if (_p21.ctor === 'Nothing') {
					return count;
				} else {
					var _p23 = _p21._0._1;
					var _p22 = _p21._0._0;
					switch (_p22.valueOf()) {
						case ' ':
							var _v35 = count + 1,
								_v36 = _p23;
							count = _v35;
							line = _v36;
							continue countLeadingWhitespace;
						case '\t':
							var _v37 = count + 1,
								_v38 = _p23;
							count = _v37;
							line = _v38;
							continue countLeadingWhitespace;
						default:
							return count;
					}
				}
			}
		});
	var lines = _elm_lang$core$String$lines(multilineSting);
	var minLead = A2(
		_elm_lang$core$Maybe$withDefault,
		0,
		_elm_lang$core$List$minimum(
			A2(
				_elm_lang$core$List$map,
				countLeadingWhitespace(0),
				A2(
					_elm_lang$core$List$filter,
					_elm_lang$core$String$any(isNotWhitespace),
					lines))));
	return A2(
		_elm_lang$core$String$join,
		'\n',
		A2(
			_elm_lang$core$List$map,
			_elm_lang$core$String$dropLeft(minLead),
			lines));
};
var _elm_community$string_extra$String_Extra$dasherize = function (string) {
	return _elm_lang$core$String$toLower(
		A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex('[_-\\s]+'),
			_elm_lang$core$Basics$always('-'),
			A4(
				_elm_lang$core$Regex$replace,
				_elm_lang$core$Regex$All,
				_elm_lang$core$Regex$regex('([A-Z])'),
				function (_p24) {
					return A2(
						_elm_lang$core$String$append,
						'-',
						function (_) {
							return _.match;
						}(_p24));
				},
				_elm_lang$core$String$trim(string))));
};
var _elm_community$string_extra$String_Extra$underscored = function (string) {
	return _elm_lang$core$String$toLower(
		A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex('[_-\\s]+'),
			_elm_lang$core$Basics$always('_'),
			A4(
				_elm_lang$core$Regex$replace,
				_elm_lang$core$Regex$All,
				_elm_lang$core$Regex$regex('([a-z\\d])([A-Z]+)'),
				function (_p25) {
					return A2(
						_elm_lang$core$String$join,
						'_',
						A2(
							_elm_lang$core$List$filterMap,
							_elm_lang$core$Basics$identity,
							function (_) {
								return _.submatches;
							}(_p25)));
				},
				_elm_lang$core$String$trim(string))));
};
var _elm_community$string_extra$String_Extra$unsurround = F2(
	function (wrap, string) {
		if (A2(_elm_lang$core$String$startsWith, wrap, string) && A2(_elm_lang$core$String$endsWith, wrap, string)) {
			var length = _elm_lang$core$String$length(wrap);
			return A2(
				_elm_lang$core$String$dropRight,
				length,
				A2(_elm_lang$core$String$dropLeft, length, string));
		} else {
			return string;
		}
	});
var _elm_community$string_extra$String_Extra$unquote = function (string) {
	return A2(_elm_community$string_extra$String_Extra$unsurround, '\"', string);
};
var _elm_community$string_extra$String_Extra$surround = F2(
	function (wrap, string) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			wrap,
			A2(_elm_lang$core$Basics_ops['++'], string, wrap));
	});
var _elm_community$string_extra$String_Extra$quote = function (string) {
	return A2(_elm_community$string_extra$String_Extra$surround, '\"', string);
};
var _elm_community$string_extra$String_Extra$camelize = function (string) {
	return A4(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$All,
		_elm_lang$core$Regex$regex('[-_\\s]+(.)?'),
		function (_p26) {
			var _p27 = _p26;
			var _p28 = _p27.submatches;
			if ((_p28.ctor === '::') && (_p28._0.ctor === 'Just')) {
				return _elm_lang$core$String$toUpper(_p28._0._0);
			} else {
				return '';
			}
		},
		_elm_lang$core$String$trim(string));
};
var _elm_community$string_extra$String_Extra$isBlank = function (string) {
	return A2(
		_elm_lang$core$Regex$contains,
		_elm_lang$core$Regex$regex('^\\s*$'),
		string);
};
var _elm_community$string_extra$String_Extra$nonBlank = function (string) {
	return _elm_community$string_extra$String_Extra$isBlank(string) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(string);
};
var _elm_community$string_extra$String_Extra$clean = function (string) {
	return _elm_lang$core$String$trim(
		A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex('\\s\\s+'),
			_elm_lang$core$Basics$always(' '),
			string));
};
var _elm_community$string_extra$String_Extra$softBreakRegexp = function (width) {
	return _elm_lang$core$Regex$regex(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'.{1,',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(width),
				'}(\\s+|$)|\\S+?(\\s+|$)')));
};
var _elm_community$string_extra$String_Extra$softEllipsis = F2(
	function (howLong, string) {
		return (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$String$length(string),
			howLong) < 1) ? string : A3(
			_elm_lang$core$Basics$flip,
			_elm_lang$core$String$append,
			'...',
			A4(
				_elm_lang$core$Regex$replace,
				_elm_lang$core$Regex$All,
				_elm_lang$core$Regex$regex('([\\.,;:\\s])+$'),
				_elm_lang$core$Basics$always(''),
				A2(
					_elm_lang$core$String$join,
					'',
					A2(
						_elm_lang$core$List$map,
						function (_) {
							return _.match;
						},
						A3(
							_elm_lang$core$Regex$find,
							_elm_lang$core$Regex$AtMost(1),
							_elm_community$string_extra$String_Extra$softBreakRegexp(howLong),
							string)))));
	});
var _elm_community$string_extra$String_Extra$softBreak = F2(
	function (width, string) {
		return (_elm_lang$core$Native_Utils.cmp(width, 0) < 1) ? {ctor: '[]'} : A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.match;
			},
			A3(
				_elm_lang$core$Regex$find,
				_elm_lang$core$Regex$All,
				_elm_community$string_extra$String_Extra$softBreakRegexp(width),
				string));
	});
var _elm_community$string_extra$String_Extra$softWrapWith = F3(
	function (width, separator, string) {
		return A2(
			_elm_lang$core$String$join,
			separator,
			A2(_elm_community$string_extra$String_Extra$softBreak, width, string));
	});
var _elm_community$string_extra$String_Extra$softWrap = F2(
	function (width, string) {
		return A3(_elm_community$string_extra$String_Extra$softWrapWith, width, '\n', string);
	});
var _elm_community$string_extra$String_Extra$breaker = F3(
	function (width, string, acc) {
		breaker:
		while (true) {
			var _p29 = string;
			if (_p29 === '') {
				return _elm_lang$core$List$reverse(acc);
			} else {
				var _v42 = width,
					_v43 = A2(_elm_lang$core$String$dropLeft, width, string),
					_v44 = {
					ctor: '::',
					_0: A3(_elm_lang$core$String$slice, 0, width, string),
					_1: acc
				};
				width = _v42;
				string = _v43;
				acc = _v44;
				continue breaker;
			}
		}
	});
var _elm_community$string_extra$String_Extra$break = F2(
	function (width, string) {
		return (_elm_lang$core$Native_Utils.eq(width, 0) || _elm_lang$core$Native_Utils.eq(string, '')) ? {
			ctor: '::',
			_0: string,
			_1: {ctor: '[]'}
		} : A3(
			_elm_community$string_extra$String_Extra$breaker,
			width,
			string,
			{ctor: '[]'});
	});
var _elm_community$string_extra$String_Extra$wrapWith = F3(
	function (width, separator, string) {
		return A2(
			_elm_lang$core$String$join,
			separator,
			A2(_elm_community$string_extra$String_Extra$break, width, string));
	});
var _elm_community$string_extra$String_Extra$wrap = F2(
	function (width, string) {
		return A3(_elm_community$string_extra$String_Extra$wrapWith, width, '\n', string);
	});
var _elm_community$string_extra$String_Extra$replaceSlice = F4(
	function (substitution, start, end, string) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			A3(_elm_lang$core$String$slice, 0, start, string),
			A2(
				_elm_lang$core$Basics_ops['++'],
				substitution,
				A3(
					_elm_lang$core$String$slice,
					end,
					_elm_lang$core$String$length(string),
					string)));
	});
var _elm_community$string_extra$String_Extra$insertAt = F3(
	function (insert, pos, string) {
		return A4(_elm_community$string_extra$String_Extra$replaceSlice, insert, pos, pos, string);
	});
var _elm_community$string_extra$String_Extra$replace = F3(
	function (search, substitution, string) {
		return A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex(
				_elm_lang$core$Regex$escape(search)),
			function (_p30) {
				return substitution;
			},
			string);
	});
var _elm_community$string_extra$String_Extra$changeCase = F2(
	function (mutator, word) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			A2(
				_elm_lang$core$Maybe$map,
				function (_p31) {
					var _p32 = _p31;
					return A2(
						_elm_lang$core$String$cons,
						mutator(_p32._0),
						_p32._1);
				},
				_elm_lang$core$String$uncons(word)));
	});
var _elm_community$string_extra$String_Extra$toSentenceCase = function (word) {
	return A2(_elm_community$string_extra$String_Extra$changeCase, _elm_lang$core$Char$toUpper, word);
};
var _elm_community$string_extra$String_Extra$toTitleCase = function (ws) {
	var uppercaseMatch = A3(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$All,
		_elm_lang$core$Regex$regex('\\w+'),
		function (_p33) {
			return _elm_community$string_extra$String_Extra$toSentenceCase(
				function (_) {
					return _.match;
				}(_p33));
		});
	return A4(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$All,
		_elm_lang$core$Regex$regex('^([a-z])|\\s+([a-z])'),
		function (_p34) {
			return uppercaseMatch(
				function (_) {
					return _.match;
				}(_p34));
		},
		ws);
};
var _elm_community$string_extra$String_Extra$classify = function (string) {
	return _elm_community$string_extra$String_Extra$toSentenceCase(
		A3(
			_elm_community$string_extra$String_Extra$replace,
			' ',
			'',
			_elm_community$string_extra$String_Extra$camelize(
				A4(
					_elm_lang$core$Regex$replace,
					_elm_lang$core$Regex$All,
					_elm_lang$core$Regex$regex('[\\W_]'),
					_elm_lang$core$Basics$always(' '),
					string))));
};
var _elm_community$string_extra$String_Extra$humanize = function (string) {
	return _elm_community$string_extra$String_Extra$toSentenceCase(
		_elm_lang$core$String$toLower(
			_elm_lang$core$String$trim(
				A4(
					_elm_lang$core$Regex$replace,
					_elm_lang$core$Regex$All,
					_elm_lang$core$Regex$regex('_id$|[-_\\s]+'),
					_elm_lang$core$Basics$always(' '),
					A4(
						_elm_lang$core$Regex$replace,
						_elm_lang$core$Regex$All,
						_elm_lang$core$Regex$regex('[A-Z]'),
						function (_p35) {
							return A2(
								_elm_lang$core$String$append,
								'-',
								function (_) {
									return _.match;
								}(_p35));
						},
						string)))));
};
var _elm_community$string_extra$String_Extra$decapitalize = function (word) {
	return A2(_elm_community$string_extra$String_Extra$changeCase, _elm_lang$core$Char$toLower, word);
};

var _elm_lang$core$Process$kill = _elm_lang$core$Native_Scheduler.kill;
var _elm_lang$core$Process$sleep = _elm_lang$core$Native_Scheduler.sleep;
var _elm_lang$core$Process$spawn = _elm_lang$core$Native_Scheduler.spawn;

var _elm_lang$dom$Native_Dom = function() {

var fakeNode = {
	addEventListener: function() {},
	removeEventListener: function() {}
};

var onDocument = on(typeof document !== 'undefined' ? document : fakeNode);
var onWindow = on(typeof window !== 'undefined' ? window : fakeNode);

function on(node)
{
	return function(eventName, decoder, toTask)
	{
		return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {

			function performTask(event)
			{
				var result = A2(_elm_lang$core$Json_Decode$decodeValue, decoder, event);
				if (result.ctor === 'Ok')
				{
					_elm_lang$core$Native_Scheduler.rawSpawn(toTask(result._0));
				}
			}

			node.addEventListener(eventName, performTask);

			return function()
			{
				node.removeEventListener(eventName, performTask);
			};
		});
	};
}

var rAF = typeof requestAnimationFrame !== 'undefined'
	? requestAnimationFrame
	: function(callback) { callback(); };

function withNode(id, doStuff)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		rAF(function()
		{
			var node = document.getElementById(id);
			if (node === null)
			{
				callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'NotFound', _0: id }));
				return;
			}
			callback(_elm_lang$core$Native_Scheduler.succeed(doStuff(node)));
		});
	});
}


// FOCUS

function focus(id)
{
	return withNode(id, function(node) {
		node.focus();
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function blur(id)
{
	return withNode(id, function(node) {
		node.blur();
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}


// SCROLLING

function getScrollTop(id)
{
	return withNode(id, function(node) {
		return node.scrollTop;
	});
}

function setScrollTop(id, desiredScrollTop)
{
	return withNode(id, function(node) {
		node.scrollTop = desiredScrollTop;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function toBottom(id)
{
	return withNode(id, function(node) {
		node.scrollTop = node.scrollHeight;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function getScrollLeft(id)
{
	return withNode(id, function(node) {
		return node.scrollLeft;
	});
}

function setScrollLeft(id, desiredScrollLeft)
{
	return withNode(id, function(node) {
		node.scrollLeft = desiredScrollLeft;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function toRight(id)
{
	return withNode(id, function(node) {
		node.scrollLeft = node.scrollWidth;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}


// SIZE

function width(options, id)
{
	return withNode(id, function(node) {
		switch (options.ctor)
		{
			case 'Content':
				return node.scrollWidth;
			case 'VisibleContent':
				return node.clientWidth;
			case 'VisibleContentWithBorders':
				return node.offsetWidth;
			case 'VisibleContentWithBordersAndMargins':
				var rect = node.getBoundingClientRect();
				return rect.right - rect.left;
		}
	});
}

function height(options, id)
{
	return withNode(id, function(node) {
		switch (options.ctor)
		{
			case 'Content':
				return node.scrollHeight;
			case 'VisibleContent':
				return node.clientHeight;
			case 'VisibleContentWithBorders':
				return node.offsetHeight;
			case 'VisibleContentWithBordersAndMargins':
				var rect = node.getBoundingClientRect();
				return rect.bottom - rect.top;
		}
	});
}

return {
	onDocument: F3(onDocument),
	onWindow: F3(onWindow),

	focus: focus,
	blur: blur,

	getScrollTop: getScrollTop,
	setScrollTop: F2(setScrollTop),
	getScrollLeft: getScrollLeft,
	setScrollLeft: F2(setScrollLeft),
	toBottom: toBottom,
	toRight: toRight,

	height: F2(height),
	width: F2(width)
};

}();

var _elm_lang$dom$Dom$blur = _elm_lang$dom$Native_Dom.blur;
var _elm_lang$dom$Dom$focus = _elm_lang$dom$Native_Dom.focus;
var _elm_lang$dom$Dom$NotFound = function (a) {
	return {ctor: 'NotFound', _0: a};
};

var _elm_lang$dom$Dom_LowLevel$onWindow = _elm_lang$dom$Native_Dom.onWindow;
var _elm_lang$dom$Dom_LowLevel$onDocument = _elm_lang$dom$Native_Dom.onDocument;

var _elm_lang$dom$Dom_Size$width = _elm_lang$dom$Native_Dom.width;
var _elm_lang$dom$Dom_Size$height = _elm_lang$dom$Native_Dom.height;
var _elm_lang$dom$Dom_Size$VisibleContentWithBordersAndMargins = {ctor: 'VisibleContentWithBordersAndMargins'};
var _elm_lang$dom$Dom_Size$VisibleContentWithBorders = {ctor: 'VisibleContentWithBorders'};
var _elm_lang$dom$Dom_Size$VisibleContent = {ctor: 'VisibleContent'};
var _elm_lang$dom$Dom_Size$Content = {ctor: 'Content'};

var _elm_lang$dom$Dom_Scroll$toX = _elm_lang$dom$Native_Dom.setScrollLeft;
var _elm_lang$dom$Dom_Scroll$x = _elm_lang$dom$Native_Dom.getScrollLeft;
var _elm_lang$dom$Dom_Scroll$toRight = _elm_lang$dom$Native_Dom.toRight;
var _elm_lang$dom$Dom_Scroll$toLeft = function (id) {
	return A2(_elm_lang$dom$Dom_Scroll$toX, id, 0);
};
var _elm_lang$dom$Dom_Scroll$toY = _elm_lang$dom$Native_Dom.setScrollTop;
var _elm_lang$dom$Dom_Scroll$y = _elm_lang$dom$Native_Dom.getScrollTop;
var _elm_lang$dom$Dom_Scroll$toBottom = _elm_lang$dom$Native_Dom.toBottom;
var _elm_lang$dom$Dom_Scroll$toTop = function (id) {
	return A2(_elm_lang$dom$Dom_Scroll$toY, id, 0);
};

var _elm_lang$virtual_dom$VirtualDom_Debug$wrap;
var _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags;

var _elm_lang$virtual_dom$Native_VirtualDom = function() {

var STYLE_KEY = 'STYLE';
var EVENT_KEY = 'EVENT';
var ATTR_KEY = 'ATTR';
var ATTR_NS_KEY = 'ATTR_NS';

var localDoc = typeof document !== 'undefined' ? document : {};


////////////  VIRTUAL DOM NODES  ////////////


function text(string)
{
	return {
		type: 'text',
		text: string
	};
}


function node(tag)
{
	return F2(function(factList, kidList) {
		return nodeHelp(tag, factList, kidList);
	});
}


function nodeHelp(tag, factList, kidList)
{
	var organized = organizeFacts(factList);
	var namespace = organized.namespace;
	var facts = organized.facts;

	var children = [];
	var descendantsCount = 0;
	while (kidList.ctor !== '[]')
	{
		var kid = kidList._0;
		descendantsCount += (kid.descendantsCount || 0);
		children.push(kid);
		kidList = kidList._1;
	}
	descendantsCount += children.length;

	return {
		type: 'node',
		tag: tag,
		facts: facts,
		children: children,
		namespace: namespace,
		descendantsCount: descendantsCount
	};
}


function keyedNode(tag, factList, kidList)
{
	var organized = organizeFacts(factList);
	var namespace = organized.namespace;
	var facts = organized.facts;

	var children = [];
	var descendantsCount = 0;
	while (kidList.ctor !== '[]')
	{
		var kid = kidList._0;
		descendantsCount += (kid._1.descendantsCount || 0);
		children.push(kid);
		kidList = kidList._1;
	}
	descendantsCount += children.length;

	return {
		type: 'keyed-node',
		tag: tag,
		facts: facts,
		children: children,
		namespace: namespace,
		descendantsCount: descendantsCount
	};
}


function custom(factList, model, impl)
{
	var facts = organizeFacts(factList).facts;

	return {
		type: 'custom',
		facts: facts,
		model: model,
		impl: impl
	};
}


function map(tagger, node)
{
	return {
		type: 'tagger',
		tagger: tagger,
		node: node,
		descendantsCount: 1 + (node.descendantsCount || 0)
	};
}


function thunk(func, args, thunk)
{
	return {
		type: 'thunk',
		func: func,
		args: args,
		thunk: thunk,
		node: undefined
	};
}

function lazy(fn, a)
{
	return thunk(fn, [a], function() {
		return fn(a);
	});
}

function lazy2(fn, a, b)
{
	return thunk(fn, [a,b], function() {
		return A2(fn, a, b);
	});
}

function lazy3(fn, a, b, c)
{
	return thunk(fn, [a,b,c], function() {
		return A3(fn, a, b, c);
	});
}



// FACTS


function organizeFacts(factList)
{
	var namespace, facts = {};

	while (factList.ctor !== '[]')
	{
		var entry = factList._0;
		var key = entry.key;

		if (key === ATTR_KEY || key === ATTR_NS_KEY || key === EVENT_KEY)
		{
			var subFacts = facts[key] || {};
			subFacts[entry.realKey] = entry.value;
			facts[key] = subFacts;
		}
		else if (key === STYLE_KEY)
		{
			var styles = facts[key] || {};
			var styleList = entry.value;
			while (styleList.ctor !== '[]')
			{
				var style = styleList._0;
				styles[style._0] = style._1;
				styleList = styleList._1;
			}
			facts[key] = styles;
		}
		else if (key === 'namespace')
		{
			namespace = entry.value;
		}
		else if (key === 'className')
		{
			var classes = facts[key];
			facts[key] = typeof classes === 'undefined'
				? entry.value
				: classes + ' ' + entry.value;
		}
 		else
		{
			facts[key] = entry.value;
		}
		factList = factList._1;
	}

	return {
		facts: facts,
		namespace: namespace
	};
}



////////////  PROPERTIES AND ATTRIBUTES  ////////////


function style(value)
{
	return {
		key: STYLE_KEY,
		value: value
	};
}


function property(key, value)
{
	return {
		key: key,
		value: value
	};
}


function attribute(key, value)
{
	return {
		key: ATTR_KEY,
		realKey: key,
		value: value
	};
}


function attributeNS(namespace, key, value)
{
	return {
		key: ATTR_NS_KEY,
		realKey: key,
		value: {
			value: value,
			namespace: namespace
		}
	};
}


function on(name, options, decoder)
{
	return {
		key: EVENT_KEY,
		realKey: name,
		value: {
			options: options,
			decoder: decoder
		}
	};
}


function equalEvents(a, b)
{
	if (a.options !== b.options)
	{
		if (a.options.stopPropagation !== b.options.stopPropagation || a.options.preventDefault !== b.options.preventDefault)
		{
			return false;
		}
	}
	return _elm_lang$core$Native_Json.equality(a.decoder, b.decoder);
}


function mapProperty(func, property)
{
	if (property.key !== EVENT_KEY)
	{
		return property;
	}
	return on(
		property.realKey,
		property.value.options,
		A2(_elm_lang$core$Json_Decode$map, func, property.value.decoder)
	);
}


////////////  RENDER  ////////////


function render(vNode, eventNode)
{
	switch (vNode.type)
	{
		case 'thunk':
			if (!vNode.node)
			{
				vNode.node = vNode.thunk();
			}
			return render(vNode.node, eventNode);

		case 'tagger':
			var subNode = vNode.node;
			var tagger = vNode.tagger;

			while (subNode.type === 'tagger')
			{
				typeof tagger !== 'object'
					? tagger = [tagger, subNode.tagger]
					: tagger.push(subNode.tagger);

				subNode = subNode.node;
			}

			var subEventRoot = { tagger: tagger, parent: eventNode };
			var domNode = render(subNode, subEventRoot);
			domNode.elm_event_node_ref = subEventRoot;
			return domNode;

		case 'text':
			return localDoc.createTextNode(vNode.text);

		case 'node':
			var domNode = vNode.namespace
				? localDoc.createElementNS(vNode.namespace, vNode.tag)
				: localDoc.createElement(vNode.tag);

			applyFacts(domNode, eventNode, vNode.facts);

			var children = vNode.children;

			for (var i = 0; i < children.length; i++)
			{
				domNode.appendChild(render(children[i], eventNode));
			}

			return domNode;

		case 'keyed-node':
			var domNode = vNode.namespace
				? localDoc.createElementNS(vNode.namespace, vNode.tag)
				: localDoc.createElement(vNode.tag);

			applyFacts(domNode, eventNode, vNode.facts);

			var children = vNode.children;

			for (var i = 0; i < children.length; i++)
			{
				domNode.appendChild(render(children[i]._1, eventNode));
			}

			return domNode;

		case 'custom':
			var domNode = vNode.impl.render(vNode.model);
			applyFacts(domNode, eventNode, vNode.facts);
			return domNode;
	}
}



////////////  APPLY FACTS  ////////////


function applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		switch (key)
		{
			case STYLE_KEY:
				applyStyles(domNode, value);
				break;

			case EVENT_KEY:
				applyEvents(domNode, eventNode, value);
				break;

			case ATTR_KEY:
				applyAttrs(domNode, value);
				break;

			case ATTR_NS_KEY:
				applyAttrsNS(domNode, value);
				break;

			case 'value':
				if (domNode[key] !== value)
				{
					domNode[key] = value;
				}
				break;

			default:
				domNode[key] = value;
				break;
		}
	}
}

function applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}

function applyEvents(domNode, eventNode, events)
{
	var allHandlers = domNode.elm_handlers || {};

	for (var key in events)
	{
		var handler = allHandlers[key];
		var value = events[key];

		if (typeof value === 'undefined')
		{
			domNode.removeEventListener(key, handler);
			allHandlers[key] = undefined;
		}
		else if (typeof handler === 'undefined')
		{
			var handler = makeEventHandler(eventNode, value);
			domNode.addEventListener(key, handler);
			allHandlers[key] = handler;
		}
		else
		{
			handler.info = value;
		}
	}

	domNode.elm_handlers = allHandlers;
}

function makeEventHandler(eventNode, info)
{
	function eventHandler(event)
	{
		var info = eventHandler.info;

		var value = A2(_elm_lang$core$Native_Json.run, info.decoder, event);

		if (value.ctor === 'Ok')
		{
			var options = info.options;
			if (options.stopPropagation)
			{
				event.stopPropagation();
			}
			if (options.preventDefault)
			{
				event.preventDefault();
			}

			var message = value._0;

			var currentEventNode = eventNode;
			while (currentEventNode)
			{
				var tagger = currentEventNode.tagger;
				if (typeof tagger === 'function')
				{
					message = tagger(message);
				}
				else
				{
					for (var i = tagger.length; i--; )
					{
						message = tagger[i](message);
					}
				}
				currentEventNode = currentEventNode.parent;
			}
		}
	};

	eventHandler.info = info;

	return eventHandler;
}

function applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		if (typeof value === 'undefined')
		{
			domNode.removeAttribute(key);
		}
		else
		{
			domNode.setAttribute(key, value);
		}
	}
}

function applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.namespace;
		var value = pair.value;

		if (typeof value === 'undefined')
		{
			domNode.removeAttributeNS(namespace, key);
		}
		else
		{
			domNode.setAttributeNS(namespace, key, value);
		}
	}
}



////////////  DIFF  ////////////


function diff(a, b)
{
	var patches = [];
	diffHelp(a, b, patches, 0);
	return patches;
}


function makePatch(type, index, data)
{
	return {
		index: index,
		type: type,
		data: data,
		domNode: undefined,
		eventNode: undefined
	};
}


function diffHelp(a, b, patches, index)
{
	if (a === b)
	{
		return;
	}

	var aType = a.type;
	var bType = b.type;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (aType !== bType)
	{
		patches.push(makePatch('p-redraw', index, b));
		return;
	}

	// Now we know that both nodes are the same type.
	switch (bType)
	{
		case 'thunk':
			var aArgs = a.args;
			var bArgs = b.args;
			var i = aArgs.length;
			var same = a.func === b.func && i === bArgs.length;
			while (same && i--)
			{
				same = aArgs[i] === bArgs[i];
			}
			if (same)
			{
				b.node = a.node;
				return;
			}
			b.node = b.thunk();
			var subPatches = [];
			diffHelp(a.node, b.node, subPatches, 0);
			if (subPatches.length > 0)
			{
				patches.push(makePatch('p-thunk', index, subPatches));
			}
			return;

		case 'tagger':
			// gather nested taggers
			var aTaggers = a.tagger;
			var bTaggers = b.tagger;
			var nesting = false;

			var aSubNode = a.node;
			while (aSubNode.type === 'tagger')
			{
				nesting = true;

				typeof aTaggers !== 'object'
					? aTaggers = [aTaggers, aSubNode.tagger]
					: aTaggers.push(aSubNode.tagger);

				aSubNode = aSubNode.node;
			}

			var bSubNode = b.node;
			while (bSubNode.type === 'tagger')
			{
				nesting = true;

				typeof bTaggers !== 'object'
					? bTaggers = [bTaggers, bSubNode.tagger]
					: bTaggers.push(bSubNode.tagger);

				bSubNode = bSubNode.node;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && aTaggers.length !== bTaggers.length)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !pairwiseRefEqual(aTaggers, bTaggers) : aTaggers !== bTaggers)
			{
				patches.push(makePatch('p-tagger', index, bTaggers));
			}

			// diff everything below the taggers
			diffHelp(aSubNode, bSubNode, patches, index + 1);
			return;

		case 'text':
			if (a.text !== b.text)
			{
				patches.push(makePatch('p-text', index, b.text));
				return;
			}

			return;

		case 'node':
			// Bail if obvious indicators have changed. Implies more serious
			// structural changes such that it's not worth it to diff.
			if (a.tag !== b.tag || a.namespace !== b.namespace)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);

			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			diffChildren(a, b, patches, index);
			return;

		case 'keyed-node':
			// Bail if obvious indicators have changed. Implies more serious
			// structural changes such that it's not worth it to diff.
			if (a.tag !== b.tag || a.namespace !== b.namespace)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);

			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			diffKeyedChildren(a, b, patches, index);
			return;

		case 'custom':
			if (a.impl !== b.impl)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);
			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			var patch = b.impl.diff(a,b);
			if (patch)
			{
				patches.push(makePatch('p-custom', index, patch));
				return;
			}

			return;
	}
}


// assumes the incoming arrays are the same length
function pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function diffFacts(a, b, category)
{
	var diff;

	// look for changes and removals
	for (var aKey in a)
	{
		if (aKey === STYLE_KEY || aKey === EVENT_KEY || aKey === ATTR_KEY || aKey === ATTR_NS_KEY)
		{
			var subDiff = diffFacts(a[aKey], b[aKey] || {}, aKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[aKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(aKey in b))
		{
			diff = diff || {};
			diff[aKey] =
				(typeof category === 'undefined')
					? (typeof a[aKey] === 'string' ? '' : null)
					:
				(category === STYLE_KEY)
					? ''
					:
				(category === EVENT_KEY || category === ATTR_KEY)
					? undefined
					:
				{ namespace: a[aKey].namespace, value: undefined };

			continue;
		}

		var aValue = a[aKey];
		var bValue = b[aKey];

		// reference equal, so don't worry about it
		if (aValue === bValue && aKey !== 'value'
			|| category === EVENT_KEY && equalEvents(aValue, bValue))
		{
			continue;
		}

		diff = diff || {};
		diff[aKey] = bValue;
	}

	// add new stuff
	for (var bKey in b)
	{
		if (!(bKey in a))
		{
			diff = diff || {};
			diff[bKey] = b[bKey];
		}
	}

	return diff;
}


function diffChildren(aParent, bParent, patches, rootIndex)
{
	var aChildren = aParent.children;
	var bChildren = bParent.children;

	var aLen = aChildren.length;
	var bLen = bChildren.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (aLen > bLen)
	{
		patches.push(makePatch('p-remove-last', rootIndex, aLen - bLen));
	}
	else if (aLen < bLen)
	{
		patches.push(makePatch('p-append', rootIndex, bChildren.slice(aLen)));
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	var index = rootIndex;
	var minLen = aLen < bLen ? aLen : bLen;
	for (var i = 0; i < minLen; i++)
	{
		index++;
		var aChild = aChildren[i];
		diffHelp(aChild, bChildren[i], patches, index);
		index += aChild.descendantsCount || 0;
	}
}



////////////  KEYED DIFF  ////////////


function diffKeyedChildren(aParent, bParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var aChildren = aParent.children;
	var bChildren = bParent.children;
	var aLen = aChildren.length;
	var bLen = bChildren.length;
	var aIndex = 0;
	var bIndex = 0;

	var index = rootIndex;

	while (aIndex < aLen && bIndex < bLen)
	{
		var a = aChildren[aIndex];
		var b = bChildren[bIndex];

		var aKey = a._0;
		var bKey = b._0;
		var aNode = a._1;
		var bNode = b._1;

		// check if keys match

		if (aKey === bKey)
		{
			index++;
			diffHelp(aNode, bNode, localPatches, index);
			index += aNode.descendantsCount || 0;

			aIndex++;
			bIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var aLookAhead = aIndex + 1 < aLen;
		var bLookAhead = bIndex + 1 < bLen;

		if (aLookAhead)
		{
			var aNext = aChildren[aIndex + 1];
			var aNextKey = aNext._0;
			var aNextNode = aNext._1;
			var oldMatch = bKey === aNextKey;
		}

		if (bLookAhead)
		{
			var bNext = bChildren[bIndex + 1];
			var bNextKey = bNext._0;
			var bNextNode = bNext._1;
			var newMatch = aKey === bNextKey;
		}


		// swap a and b
		if (aLookAhead && bLookAhead && newMatch && oldMatch)
		{
			index++;
			diffHelp(aNode, bNextNode, localPatches, index);
			insertNode(changes, localPatches, aKey, bNode, bIndex, inserts);
			index += aNode.descendantsCount || 0;

			index++;
			removeNode(changes, localPatches, aKey, aNextNode, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 2;
			continue;
		}

		// insert b
		if (bLookAhead && newMatch)
		{
			index++;
			insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
			diffHelp(aNode, bNextNode, localPatches, index);
			index += aNode.descendantsCount || 0;

			aIndex += 1;
			bIndex += 2;
			continue;
		}

		// remove a
		if (aLookAhead && oldMatch)
		{
			index++;
			removeNode(changes, localPatches, aKey, aNode, index);
			index += aNode.descendantsCount || 0;

			index++;
			diffHelp(aNextNode, bNode, localPatches, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 1;
			continue;
		}

		// remove a, insert b
		if (aLookAhead && bLookAhead && aNextKey === bNextKey)
		{
			index++;
			removeNode(changes, localPatches, aKey, aNode, index);
			insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
			index += aNode.descendantsCount || 0;

			index++;
			diffHelp(aNextNode, bNextNode, localPatches, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (aIndex < aLen)
	{
		index++;
		var a = aChildren[aIndex];
		var aNode = a._1;
		removeNode(changes, localPatches, a._0, aNode, index);
		index += aNode.descendantsCount || 0;
		aIndex++;
	}

	var endInserts;
	while (bIndex < bLen)
	{
		endInserts = endInserts || [];
		var b = bChildren[bIndex];
		insertNode(changes, localPatches, b._0, b._1, undefined, endInserts);
		bIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || typeof endInserts !== 'undefined')
	{
		patches.push(makePatch('p-reorder', rootIndex, {
			patches: localPatches,
			inserts: inserts,
			endInserts: endInserts
		}));
	}
}



////////////  CHANGES FROM KEYED DIFF  ////////////


var POSTFIX = '_elmW6BL';


function insertNode(changes, localPatches, key, vnode, bIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (typeof entry === 'undefined')
	{
		entry = {
			tag: 'insert',
			vnode: vnode,
			index: bIndex,
			data: undefined
		};

		inserts.push({ index: bIndex, entry: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.tag === 'remove')
	{
		inserts.push({ index: bIndex, entry: entry });

		entry.tag = 'move';
		var subPatches = [];
		diffHelp(entry.vnode, vnode, subPatches, entry.index);
		entry.index = bIndex;
		entry.data.data = {
			patches: subPatches,
			entry: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	insertNode(changes, localPatches, key + POSTFIX, vnode, bIndex, inserts);
}


function removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (typeof entry === 'undefined')
	{
		var patch = makePatch('p-remove', index, undefined);
		localPatches.push(patch);

		changes[key] = {
			tag: 'remove',
			vnode: vnode,
			index: index,
			data: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.tag === 'insert')
	{
		entry.tag = 'move';
		var subPatches = [];
		diffHelp(vnode, entry.vnode, subPatches, index);

		var patch = makePatch('p-remove', index, {
			patches: subPatches,
			entry: entry
		});
		localPatches.push(patch);

		return;
	}

	// this key has already been removed or moved, a duplicate!
	removeNode(changes, localPatches, key + POSTFIX, vnode, index);
}



////////////  ADD DOM NODES  ////////////
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function addDomNodes(domNode, vNode, patches, eventNode)
{
	addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.descendantsCount, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.index;

	while (index === low)
	{
		var patchType = patch.type;

		if (patchType === 'p-thunk')
		{
			addDomNodes(domNode, vNode.node, patch.data, eventNode);
		}
		else if (patchType === 'p-reorder')
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;

			var subPatches = patch.data.patches;
			if (subPatches.length > 0)
			{
				addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 'p-remove')
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;

			var data = patch.data;
			if (typeof data !== 'undefined')
			{
				data.entry.data = domNode;
				var subPatches = data.patches;
				if (subPatches.length > 0)
				{
					addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.index) > high)
		{
			return i;
		}
	}

	switch (vNode.type)
	{
		case 'tagger':
			var subNode = vNode.node;

			while (subNode.type === "tagger")
			{
				subNode = subNode.node;
			}

			return addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);

		case 'node':
			var vChildren = vNode.children;
			var childNodes = domNode.childNodes;
			for (var j = 0; j < vChildren.length; j++)
			{
				low++;
				var vChild = vChildren[j];
				var nextLow = low + (vChild.descendantsCount || 0);
				if (low <= index && index <= nextLow)
				{
					i = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);
					if (!(patch = patches[i]) || (index = patch.index) > high)
					{
						return i;
					}
				}
				low = nextLow;
			}
			return i;

		case 'keyed-node':
			var vChildren = vNode.children;
			var childNodes = domNode.childNodes;
			for (var j = 0; j < vChildren.length; j++)
			{
				low++;
				var vChild = vChildren[j]._1;
				var nextLow = low + (vChild.descendantsCount || 0);
				if (low <= index && index <= nextLow)
				{
					i = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);
					if (!(patch = patches[i]) || (index = patch.index) > high)
					{
						return i;
					}
				}
				low = nextLow;
			}
			return i;

		case 'text':
		case 'thunk':
			throw new Error('should never traverse `text` or `thunk` nodes like this');
	}
}



////////////  APPLY PATCHES  ////////////


function applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return applyPatchesHelp(rootDomNode, patches);
}

function applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.domNode
		var newNode = applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function applyPatch(domNode, patch)
{
	switch (patch.type)
	{
		case 'p-redraw':
			return applyPatchRedraw(domNode, patch.data, patch.eventNode);

		case 'p-facts':
			applyFacts(domNode, patch.eventNode, patch.data);
			return domNode;

		case 'p-text':
			domNode.replaceData(0, domNode.length, patch.data);
			return domNode;

		case 'p-thunk':
			return applyPatchesHelp(domNode, patch.data);

		case 'p-tagger':
			if (typeof domNode.elm_event_node_ref !== 'undefined')
			{
				domNode.elm_event_node_ref.tagger = patch.data;
			}
			else
			{
				domNode.elm_event_node_ref = { tagger: patch.data, parent: patch.eventNode };
			}
			return domNode;

		case 'p-remove-last':
			var i = patch.data;
			while (i--)
			{
				domNode.removeChild(domNode.lastChild);
			}
			return domNode;

		case 'p-append':
			var newNodes = patch.data;
			for (var i = 0; i < newNodes.length; i++)
			{
				domNode.appendChild(render(newNodes[i], patch.eventNode));
			}
			return domNode;

		case 'p-remove':
			var data = patch.data;
			if (typeof data === 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.entry;
			if (typeof entry.index !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.data = applyPatchesHelp(domNode, data.patches);
			return domNode;

		case 'p-reorder':
			return applyPatchReorder(domNode, patch);

		case 'p-custom':
			var impl = patch.data;
			return impl.applyPatch(domNode, impl.data);

		default:
			throw new Error('Ran into an unknown patch!');
	}
}


function applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = render(vNode, eventNode);

	if (typeof newNode.elm_event_node_ref === 'undefined')
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function applyPatchReorder(domNode, patch)
{
	var data = patch.data;

	// remove end inserts
	var frag = applyPatchReorderEndInsertsHelp(data.endInserts, patch);

	// removals
	domNode = applyPatchesHelp(domNode, data.patches);

	// inserts
	var inserts = data.inserts;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.entry;
		var node = entry.tag === 'move'
			? entry.data
			: render(entry.vnode, patch.eventNode);
		domNode.insertBefore(node, domNode.childNodes[insert.index]);
	}

	// add end inserts
	if (typeof frag !== 'undefined')
	{
		domNode.appendChild(frag);
	}

	return domNode;
}


function applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (typeof endInserts === 'undefined')
	{
		return;
	}

	var frag = localDoc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.entry;
		frag.appendChild(entry.tag === 'move'
			? entry.data
			: render(entry.vnode, patch.eventNode)
		);
	}
	return frag;
}


// PROGRAMS

var program = makeProgram(checkNoFlags);
var programWithFlags = makeProgram(checkYesFlags);

function makeProgram(flagChecker)
{
	return F2(function(debugWrap, impl)
	{
		return function(flagDecoder)
		{
			return function(object, moduleName, debugMetadata)
			{
				var checker = flagChecker(flagDecoder, moduleName);
				if (typeof debugMetadata === 'undefined')
				{
					normalSetup(impl, object, moduleName, checker);
				}
				else
				{
					debugSetup(A2(debugWrap, debugMetadata, impl), object, moduleName, checker);
				}
			};
		};
	});
}

function staticProgram(vNode)
{
	var nothing = _elm_lang$core$Native_Utils.Tuple2(
		_elm_lang$core$Native_Utils.Tuple0,
		_elm_lang$core$Platform_Cmd$none
	);
	return A2(program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, {
		init: nothing,
		view: function() { return vNode; },
		update: F2(function() { return nothing; }),
		subscriptions: function() { return _elm_lang$core$Platform_Sub$none; }
	})();
}


// FLAG CHECKERS

function checkNoFlags(flagDecoder, moduleName)
{
	return function(init, flags, domNode)
	{
		if (typeof flags === 'undefined')
		{
			return init;
		}

		var errorMessage =
			'The `' + moduleName + '` module does not need flags.\n'
			+ 'Initialize it with no arguments and you should be all set!';

		crash(errorMessage, domNode);
	};
}

function checkYesFlags(flagDecoder, moduleName)
{
	return function(init, flags, domNode)
	{
		if (typeof flagDecoder === 'undefined')
		{
			var errorMessage =
				'Are you trying to sneak a Never value into Elm? Trickster!\n'
				+ 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\n'
				+ 'Use `program` instead if you do not want flags.'

			crash(errorMessage, domNode);
		}

		var result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);
		if (result.ctor === 'Ok')
		{
			return init(result._0);
		}

		var errorMessage =
			'Trying to initialize the `' + moduleName + '` module with an unexpected flag.\n'
			+ 'I tried to convert it to an Elm value, but ran into this problem:\n\n'
			+ result._0;

		crash(errorMessage, domNode);
	};
}

function crash(errorMessage, domNode)
{
	if (domNode)
	{
		domNode.innerHTML =
			'<div style="padding-left:1em;">'
			+ '<h2 style="font-weight:normal;"><b>Oops!</b> Something went wrong when starting your Elm program.</h2>'
			+ '<pre style="padding-left:1em;">' + errorMessage + '</pre>'
			+ '</div>';
	}

	throw new Error(errorMessage);
}


//  NORMAL SETUP

function normalSetup(impl, object, moduleName, flagChecker)
{
	object['embed'] = function embed(node, flags)
	{
		while (node.lastChild)
		{
			node.removeChild(node.lastChild);
		}

		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, node),
			impl.update,
			impl.subscriptions,
			normalRenderer(node, impl.view)
		);
	};

	object['fullscreen'] = function fullscreen(flags)
	{
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, document.body),
			impl.update,
			impl.subscriptions,
			normalRenderer(document.body, impl.view)
		);
	};
}

function normalRenderer(parentNode, view)
{
	return function(tagger, initialModel)
	{
		var eventNode = { tagger: tagger, parent: undefined };
		var initialVirtualNode = view(initialModel);
		var domNode = render(initialVirtualNode, eventNode);
		parentNode.appendChild(domNode);
		return makeStepper(domNode, view, initialVirtualNode, eventNode);
	};
}


// STEPPER

var rAF =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { setTimeout(callback, 1000 / 60); };

function makeStepper(domNode, view, initialVirtualNode, eventNode)
{
	var state = 'NO_REQUEST';
	var currNode = initialVirtualNode;
	var nextModel;

	function updateIfNeeded()
	{
		switch (state)
		{
			case 'NO_REQUEST':
				throw new Error(
					'Unexpected draw callback.\n' +
					'Please report this to <https://github.com/elm-lang/virtual-dom/issues>.'
				);

			case 'PENDING_REQUEST':
				rAF(updateIfNeeded);
				state = 'EXTRA_REQUEST';

				var nextNode = view(nextModel);
				var patches = diff(currNode, nextNode);
				domNode = applyPatches(domNode, currNode, patches, eventNode);
				currNode = nextNode;

				return;

			case 'EXTRA_REQUEST':
				state = 'NO_REQUEST';
				return;
		}
	}

	return function stepper(model)
	{
		if (state === 'NO_REQUEST')
		{
			rAF(updateIfNeeded);
		}
		state = 'PENDING_REQUEST';
		nextModel = model;
	};
}


// DEBUG SETUP

function debugSetup(impl, object, moduleName, flagChecker)
{
	object['fullscreen'] = function fullscreen(flags)
	{
		var popoutRef = { doc: undefined };
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, document.body),
			impl.update(scrollTask(popoutRef)),
			impl.subscriptions,
			debugRenderer(moduleName, document.body, popoutRef, impl.view, impl.viewIn, impl.viewOut)
		);
	};

	object['embed'] = function fullscreen(node, flags)
	{
		var popoutRef = { doc: undefined };
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, node),
			impl.update(scrollTask(popoutRef)),
			impl.subscriptions,
			debugRenderer(moduleName, node, popoutRef, impl.view, impl.viewIn, impl.viewOut)
		);
	};
}

function scrollTask(popoutRef)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var doc = popoutRef.doc;
		if (doc)
		{
			var msgs = doc.getElementsByClassName('debugger-sidebar-messages')[0];
			if (msgs)
			{
				msgs.scrollTop = msgs.scrollHeight;
			}
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}


function debugRenderer(moduleName, parentNode, popoutRef, view, viewIn, viewOut)
{
	return function(tagger, initialModel)
	{
		var appEventNode = { tagger: tagger, parent: undefined };
		var eventNode = { tagger: tagger, parent: undefined };

		// make normal stepper
		var appVirtualNode = view(initialModel);
		var appNode = render(appVirtualNode, appEventNode);
		parentNode.appendChild(appNode);
		var appStepper = makeStepper(appNode, view, appVirtualNode, appEventNode);

		// make overlay stepper
		var overVirtualNode = viewIn(initialModel)._1;
		var overNode = render(overVirtualNode, eventNode);
		parentNode.appendChild(overNode);
		var wrappedViewIn = wrapViewIn(appEventNode, overNode, viewIn);
		var overStepper = makeStepper(overNode, wrappedViewIn, overVirtualNode, eventNode);

		// make debugger stepper
		var debugStepper = makeDebugStepper(initialModel, viewOut, eventNode, parentNode, moduleName, popoutRef);

		return function stepper(model)
		{
			appStepper(model);
			overStepper(model);
			debugStepper(model);
		}
	};
}

function makeDebugStepper(initialModel, view, eventNode, parentNode, moduleName, popoutRef)
{
	var curr;
	var domNode;

	return function stepper(model)
	{
		if (!model.isDebuggerOpen)
		{
			return;
		}

		if (!popoutRef.doc)
		{
			curr = view(model);
			domNode = openDebugWindow(moduleName, popoutRef, curr, eventNode);
			return;
		}

		// switch to document of popout
		localDoc = popoutRef.doc;

		var next = view(model);
		var patches = diff(curr, next);
		domNode = applyPatches(domNode, curr, patches, eventNode);
		curr = next;

		// switch back to normal document
		localDoc = document;
	};
}

function openDebugWindow(moduleName, popoutRef, virtualNode, eventNode)
{
	var w = 900;
	var h = 360;
	var x = screen.width - w;
	var y = screen.height - h;
	var debugWindow = window.open('', '', 'width=' + w + ',height=' + h + ',left=' + x + ',top=' + y);

	// switch to window document
	localDoc = debugWindow.document;

	popoutRef.doc = localDoc;
	localDoc.title = 'Debugger - ' + moduleName;
	localDoc.body.style.margin = '0';
	localDoc.body.style.padding = '0';
	var domNode = render(virtualNode, eventNode);
	localDoc.body.appendChild(domNode);

	localDoc.addEventListener('keydown', function(event) {
		if (event.metaKey && event.which === 82)
		{
			window.location.reload();
		}
		if (event.which === 38)
		{
			eventNode.tagger({ ctor: 'Up' });
			event.preventDefault();
		}
		if (event.which === 40)
		{
			eventNode.tagger({ ctor: 'Down' });
			event.preventDefault();
		}
	});

	function close()
	{
		popoutRef.doc = undefined;
		debugWindow.close();
	}
	window.addEventListener('unload', close);
	debugWindow.addEventListener('unload', function() {
		popoutRef.doc = undefined;
		window.removeEventListener('unload', close);
		eventNode.tagger({ ctor: 'Close' });
	});

	// switch back to the normal document
	localDoc = document;

	return domNode;
}


// BLOCK EVENTS

function wrapViewIn(appEventNode, overlayNode, viewIn)
{
	var ignorer = makeIgnorer(overlayNode);
	var blocking = 'Normal';
	var overflow;

	var normalTagger = appEventNode.tagger;
	var blockTagger = function() {};

	return function(model)
	{
		var tuple = viewIn(model);
		var newBlocking = tuple._0.ctor;
		appEventNode.tagger = newBlocking === 'Normal' ? normalTagger : blockTagger;
		if (blocking !== newBlocking)
		{
			traverse('removeEventListener', ignorer, blocking);
			traverse('addEventListener', ignorer, newBlocking);

			if (blocking === 'Normal')
			{
				overflow = document.body.style.overflow;
				document.body.style.overflow = 'hidden';
			}

			if (newBlocking === 'Normal')
			{
				document.body.style.overflow = overflow;
			}

			blocking = newBlocking;
		}
		return tuple._1;
	}
}

function traverse(verbEventListener, ignorer, blocking)
{
	switch(blocking)
	{
		case 'Normal':
			return;

		case 'Pause':
			return traverseHelp(verbEventListener, ignorer, mostEvents);

		case 'Message':
			return traverseHelp(verbEventListener, ignorer, allEvents);
	}
}

function traverseHelp(verbEventListener, handler, eventNames)
{
	for (var i = 0; i < eventNames.length; i++)
	{
		document.body[verbEventListener](eventNames[i], handler, true);
	}
}

function makeIgnorer(overlayNode)
{
	return function(event)
	{
		if (event.type === 'keydown' && event.metaKey && event.which === 82)
		{
			return;
		}

		var isScroll = event.type === 'scroll' || event.type === 'wheel';

		var node = event.target;
		while (node !== null)
		{
			if (node.className === 'elm-overlay-message-details' && isScroll)
			{
				return;
			}

			if (node === overlayNode && !isScroll)
			{
				return;
			}
			node = node.parentNode;
		}

		event.stopPropagation();
		event.preventDefault();
	}
}

var mostEvents = [
	'click', 'dblclick', 'mousemove',
	'mouseup', 'mousedown', 'mouseenter', 'mouseleave',
	'touchstart', 'touchend', 'touchcancel', 'touchmove',
	'pointerdown', 'pointerup', 'pointerover', 'pointerout',
	'pointerenter', 'pointerleave', 'pointermove', 'pointercancel',
	'dragstart', 'drag', 'dragend', 'dragenter', 'dragover', 'dragleave', 'drop',
	'keyup', 'keydown', 'keypress',
	'input', 'change',
	'focus', 'blur'
];

var allEvents = mostEvents.concat('wheel', 'scroll');


return {
	node: node,
	text: text,
	custom: custom,
	map: F2(map),

	on: F3(on),
	style: style,
	property: F2(property),
	attribute: F2(attribute),
	attributeNS: F3(attributeNS),
	mapProperty: F2(mapProperty),

	lazy: F2(lazy),
	lazy2: F3(lazy2),
	lazy3: F4(lazy3),
	keyedNode: F3(keyedNode),

	program: program,
	programWithFlags: programWithFlags,
	staticProgram: staticProgram
};

}();

var _elm_lang$virtual_dom$VirtualDom$programWithFlags = function (impl) {
	return A2(_elm_lang$virtual_dom$Native_VirtualDom.programWithFlags, _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags, impl);
};
var _elm_lang$virtual_dom$VirtualDom$program = function (impl) {
	return A2(_elm_lang$virtual_dom$Native_VirtualDom.program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, impl);
};
var _elm_lang$virtual_dom$VirtualDom$keyedNode = _elm_lang$virtual_dom$Native_VirtualDom.keyedNode;
var _elm_lang$virtual_dom$VirtualDom$lazy3 = _elm_lang$virtual_dom$Native_VirtualDom.lazy3;
var _elm_lang$virtual_dom$VirtualDom$lazy2 = _elm_lang$virtual_dom$Native_VirtualDom.lazy2;
var _elm_lang$virtual_dom$VirtualDom$lazy = _elm_lang$virtual_dom$Native_VirtualDom.lazy;
var _elm_lang$virtual_dom$VirtualDom$defaultOptions = {stopPropagation: false, preventDefault: false};
var _elm_lang$virtual_dom$VirtualDom$onWithOptions = _elm_lang$virtual_dom$Native_VirtualDom.on;
var _elm_lang$virtual_dom$VirtualDom$on = F2(
	function (eventName, decoder) {
		return A3(_elm_lang$virtual_dom$VirtualDom$onWithOptions, eventName, _elm_lang$virtual_dom$VirtualDom$defaultOptions, decoder);
	});
var _elm_lang$virtual_dom$VirtualDom$style = _elm_lang$virtual_dom$Native_VirtualDom.style;
var _elm_lang$virtual_dom$VirtualDom$mapProperty = _elm_lang$virtual_dom$Native_VirtualDom.mapProperty;
var _elm_lang$virtual_dom$VirtualDom$attributeNS = _elm_lang$virtual_dom$Native_VirtualDom.attributeNS;
var _elm_lang$virtual_dom$VirtualDom$attribute = _elm_lang$virtual_dom$Native_VirtualDom.attribute;
var _elm_lang$virtual_dom$VirtualDom$property = _elm_lang$virtual_dom$Native_VirtualDom.property;
var _elm_lang$virtual_dom$VirtualDom$map = _elm_lang$virtual_dom$Native_VirtualDom.map;
var _elm_lang$virtual_dom$VirtualDom$text = _elm_lang$virtual_dom$Native_VirtualDom.text;
var _elm_lang$virtual_dom$VirtualDom$node = _elm_lang$virtual_dom$Native_VirtualDom.node;
var _elm_lang$virtual_dom$VirtualDom$Options = F2(
	function (a, b) {
		return {stopPropagation: a, preventDefault: b};
	});
var _elm_lang$virtual_dom$VirtualDom$Node = {ctor: 'Node'};
var _elm_lang$virtual_dom$VirtualDom$Property = {ctor: 'Property'};

var _elm_lang$html$Html$programWithFlags = _elm_lang$virtual_dom$VirtualDom$programWithFlags;
var _elm_lang$html$Html$program = _elm_lang$virtual_dom$VirtualDom$program;
var _elm_lang$html$Html$beginnerProgram = function (_p0) {
	var _p1 = _p0;
	return _elm_lang$html$Html$program(
		{
			init: A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_p1.model,
				{ctor: '[]'}),
			update: F2(
				function (msg, model) {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						A2(_p1.update, msg, model),
						{ctor: '[]'});
				}),
			view: _p1.view,
			subscriptions: function (_p2) {
				return _elm_lang$core$Platform_Sub$none;
			}
		});
};
var _elm_lang$html$Html$map = _elm_lang$virtual_dom$VirtualDom$map;
var _elm_lang$html$Html$text = _elm_lang$virtual_dom$VirtualDom$text;
var _elm_lang$html$Html$node = _elm_lang$virtual_dom$VirtualDom$node;
var _elm_lang$html$Html$body = _elm_lang$html$Html$node('body');
var _elm_lang$html$Html$section = _elm_lang$html$Html$node('section');
var _elm_lang$html$Html$nav = _elm_lang$html$Html$node('nav');
var _elm_lang$html$Html$article = _elm_lang$html$Html$node('article');
var _elm_lang$html$Html$aside = _elm_lang$html$Html$node('aside');
var _elm_lang$html$Html$h1 = _elm_lang$html$Html$node('h1');
var _elm_lang$html$Html$h2 = _elm_lang$html$Html$node('h2');
var _elm_lang$html$Html$h3 = _elm_lang$html$Html$node('h3');
var _elm_lang$html$Html$h4 = _elm_lang$html$Html$node('h4');
var _elm_lang$html$Html$h5 = _elm_lang$html$Html$node('h5');
var _elm_lang$html$Html$h6 = _elm_lang$html$Html$node('h6');
var _elm_lang$html$Html$header = _elm_lang$html$Html$node('header');
var _elm_lang$html$Html$footer = _elm_lang$html$Html$node('footer');
var _elm_lang$html$Html$address = _elm_lang$html$Html$node('address');
var _elm_lang$html$Html$main_ = _elm_lang$html$Html$node('main');
var _elm_lang$html$Html$p = _elm_lang$html$Html$node('p');
var _elm_lang$html$Html$hr = _elm_lang$html$Html$node('hr');
var _elm_lang$html$Html$pre = _elm_lang$html$Html$node('pre');
var _elm_lang$html$Html$blockquote = _elm_lang$html$Html$node('blockquote');
var _elm_lang$html$Html$ol = _elm_lang$html$Html$node('ol');
var _elm_lang$html$Html$ul = _elm_lang$html$Html$node('ul');
var _elm_lang$html$Html$li = _elm_lang$html$Html$node('li');
var _elm_lang$html$Html$dl = _elm_lang$html$Html$node('dl');
var _elm_lang$html$Html$dt = _elm_lang$html$Html$node('dt');
var _elm_lang$html$Html$dd = _elm_lang$html$Html$node('dd');
var _elm_lang$html$Html$figure = _elm_lang$html$Html$node('figure');
var _elm_lang$html$Html$figcaption = _elm_lang$html$Html$node('figcaption');
var _elm_lang$html$Html$div = _elm_lang$html$Html$node('div');
var _elm_lang$html$Html$a = _elm_lang$html$Html$node('a');
var _elm_lang$html$Html$em = _elm_lang$html$Html$node('em');
var _elm_lang$html$Html$strong = _elm_lang$html$Html$node('strong');
var _elm_lang$html$Html$small = _elm_lang$html$Html$node('small');
var _elm_lang$html$Html$s = _elm_lang$html$Html$node('s');
var _elm_lang$html$Html$cite = _elm_lang$html$Html$node('cite');
var _elm_lang$html$Html$q = _elm_lang$html$Html$node('q');
var _elm_lang$html$Html$dfn = _elm_lang$html$Html$node('dfn');
var _elm_lang$html$Html$abbr = _elm_lang$html$Html$node('abbr');
var _elm_lang$html$Html$time = _elm_lang$html$Html$node('time');
var _elm_lang$html$Html$code = _elm_lang$html$Html$node('code');
var _elm_lang$html$Html$var = _elm_lang$html$Html$node('var');
var _elm_lang$html$Html$samp = _elm_lang$html$Html$node('samp');
var _elm_lang$html$Html$kbd = _elm_lang$html$Html$node('kbd');
var _elm_lang$html$Html$sub = _elm_lang$html$Html$node('sub');
var _elm_lang$html$Html$sup = _elm_lang$html$Html$node('sup');
var _elm_lang$html$Html$i = _elm_lang$html$Html$node('i');
var _elm_lang$html$Html$b = _elm_lang$html$Html$node('b');
var _elm_lang$html$Html$u = _elm_lang$html$Html$node('u');
var _elm_lang$html$Html$mark = _elm_lang$html$Html$node('mark');
var _elm_lang$html$Html$ruby = _elm_lang$html$Html$node('ruby');
var _elm_lang$html$Html$rt = _elm_lang$html$Html$node('rt');
var _elm_lang$html$Html$rp = _elm_lang$html$Html$node('rp');
var _elm_lang$html$Html$bdi = _elm_lang$html$Html$node('bdi');
var _elm_lang$html$Html$bdo = _elm_lang$html$Html$node('bdo');
var _elm_lang$html$Html$span = _elm_lang$html$Html$node('span');
var _elm_lang$html$Html$br = _elm_lang$html$Html$node('br');
var _elm_lang$html$Html$wbr = _elm_lang$html$Html$node('wbr');
var _elm_lang$html$Html$ins = _elm_lang$html$Html$node('ins');
var _elm_lang$html$Html$del = _elm_lang$html$Html$node('del');
var _elm_lang$html$Html$img = _elm_lang$html$Html$node('img');
var _elm_lang$html$Html$iframe = _elm_lang$html$Html$node('iframe');
var _elm_lang$html$Html$embed = _elm_lang$html$Html$node('embed');
var _elm_lang$html$Html$object = _elm_lang$html$Html$node('object');
var _elm_lang$html$Html$param = _elm_lang$html$Html$node('param');
var _elm_lang$html$Html$video = _elm_lang$html$Html$node('video');
var _elm_lang$html$Html$audio = _elm_lang$html$Html$node('audio');
var _elm_lang$html$Html$source = _elm_lang$html$Html$node('source');
var _elm_lang$html$Html$track = _elm_lang$html$Html$node('track');
var _elm_lang$html$Html$canvas = _elm_lang$html$Html$node('canvas');
var _elm_lang$html$Html$math = _elm_lang$html$Html$node('math');
var _elm_lang$html$Html$table = _elm_lang$html$Html$node('table');
var _elm_lang$html$Html$caption = _elm_lang$html$Html$node('caption');
var _elm_lang$html$Html$colgroup = _elm_lang$html$Html$node('colgroup');
var _elm_lang$html$Html$col = _elm_lang$html$Html$node('col');
var _elm_lang$html$Html$tbody = _elm_lang$html$Html$node('tbody');
var _elm_lang$html$Html$thead = _elm_lang$html$Html$node('thead');
var _elm_lang$html$Html$tfoot = _elm_lang$html$Html$node('tfoot');
var _elm_lang$html$Html$tr = _elm_lang$html$Html$node('tr');
var _elm_lang$html$Html$td = _elm_lang$html$Html$node('td');
var _elm_lang$html$Html$th = _elm_lang$html$Html$node('th');
var _elm_lang$html$Html$form = _elm_lang$html$Html$node('form');
var _elm_lang$html$Html$fieldset = _elm_lang$html$Html$node('fieldset');
var _elm_lang$html$Html$legend = _elm_lang$html$Html$node('legend');
var _elm_lang$html$Html$label = _elm_lang$html$Html$node('label');
var _elm_lang$html$Html$input = _elm_lang$html$Html$node('input');
var _elm_lang$html$Html$button = _elm_lang$html$Html$node('button');
var _elm_lang$html$Html$select = _elm_lang$html$Html$node('select');
var _elm_lang$html$Html$datalist = _elm_lang$html$Html$node('datalist');
var _elm_lang$html$Html$optgroup = _elm_lang$html$Html$node('optgroup');
var _elm_lang$html$Html$option = _elm_lang$html$Html$node('option');
var _elm_lang$html$Html$textarea = _elm_lang$html$Html$node('textarea');
var _elm_lang$html$Html$keygen = _elm_lang$html$Html$node('keygen');
var _elm_lang$html$Html$output = _elm_lang$html$Html$node('output');
var _elm_lang$html$Html$progress = _elm_lang$html$Html$node('progress');
var _elm_lang$html$Html$meter = _elm_lang$html$Html$node('meter');
var _elm_lang$html$Html$details = _elm_lang$html$Html$node('details');
var _elm_lang$html$Html$summary = _elm_lang$html$Html$node('summary');
var _elm_lang$html$Html$menuitem = _elm_lang$html$Html$node('menuitem');
var _elm_lang$html$Html$menu = _elm_lang$html$Html$node('menu');

var _elm_lang$html$Html_Attributes$map = _elm_lang$virtual_dom$VirtualDom$mapProperty;
var _elm_lang$html$Html_Attributes$attribute = _elm_lang$virtual_dom$VirtualDom$attribute;
var _elm_lang$html$Html_Attributes$contextmenu = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'contextmenu', value);
};
var _elm_lang$html$Html_Attributes$draggable = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'draggable', value);
};
var _elm_lang$html$Html_Attributes$itemprop = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'itemprop', value);
};
var _elm_lang$html$Html_Attributes$tabindex = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'tabIndex',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$charset = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'charset', value);
};
var _elm_lang$html$Html_Attributes$height = function (value) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'height',
		_elm_lang$core$Basics$toString(value));
};
var _elm_lang$html$Html_Attributes$width = function (value) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'width',
		_elm_lang$core$Basics$toString(value));
};
var _elm_lang$html$Html_Attributes$formaction = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'formAction', value);
};
var _elm_lang$html$Html_Attributes$list = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'list', value);
};
var _elm_lang$html$Html_Attributes$minlength = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'minLength',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$maxlength = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'maxlength',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$size = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'size',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$form = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'form', value);
};
var _elm_lang$html$Html_Attributes$cols = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'cols',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$rows = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'rows',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$challenge = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'challenge', value);
};
var _elm_lang$html$Html_Attributes$media = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'media', value);
};
var _elm_lang$html$Html_Attributes$rel = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'rel', value);
};
var _elm_lang$html$Html_Attributes$datetime = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'datetime', value);
};
var _elm_lang$html$Html_Attributes$pubdate = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'pubdate', value);
};
var _elm_lang$html$Html_Attributes$colspan = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'colspan',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$rowspan = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'rowspan',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$manifest = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'manifest', value);
};
var _elm_lang$html$Html_Attributes$property = _elm_lang$virtual_dom$VirtualDom$property;
var _elm_lang$html$Html_Attributes$stringProperty = F2(
	function (name, string) {
		return A2(
			_elm_lang$html$Html_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$string(string));
	});
var _elm_lang$html$Html_Attributes$class = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'className', name);
};
var _elm_lang$html$Html_Attributes$id = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'id', name);
};
var _elm_lang$html$Html_Attributes$title = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'title', name);
};
var _elm_lang$html$Html_Attributes$accesskey = function ($char) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'accessKey',
		_elm_lang$core$String$fromChar($char));
};
var _elm_lang$html$Html_Attributes$dir = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'dir', value);
};
var _elm_lang$html$Html_Attributes$dropzone = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'dropzone', value);
};
var _elm_lang$html$Html_Attributes$lang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'lang', value);
};
var _elm_lang$html$Html_Attributes$content = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'content', value);
};
var _elm_lang$html$Html_Attributes$httpEquiv = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'httpEquiv', value);
};
var _elm_lang$html$Html_Attributes$language = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'language', value);
};
var _elm_lang$html$Html_Attributes$src = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'src', value);
};
var _elm_lang$html$Html_Attributes$alt = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'alt', value);
};
var _elm_lang$html$Html_Attributes$preload = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'preload', value);
};
var _elm_lang$html$Html_Attributes$poster = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'poster', value);
};
var _elm_lang$html$Html_Attributes$kind = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'kind', value);
};
var _elm_lang$html$Html_Attributes$srclang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'srclang', value);
};
var _elm_lang$html$Html_Attributes$sandbox = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'sandbox', value);
};
var _elm_lang$html$Html_Attributes$srcdoc = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'srcdoc', value);
};
var _elm_lang$html$Html_Attributes$type_ = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'type', value);
};
var _elm_lang$html$Html_Attributes$value = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'value', value);
};
var _elm_lang$html$Html_Attributes$defaultValue = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'defaultValue', value);
};
var _elm_lang$html$Html_Attributes$placeholder = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'placeholder', value);
};
var _elm_lang$html$Html_Attributes$accept = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'accept', value);
};
var _elm_lang$html$Html_Attributes$acceptCharset = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'acceptCharset', value);
};
var _elm_lang$html$Html_Attributes$action = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'action', value);
};
var _elm_lang$html$Html_Attributes$autocomplete = function (bool) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'autocomplete',
		bool ? 'on' : 'off');
};
var _elm_lang$html$Html_Attributes$enctype = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'enctype', value);
};
var _elm_lang$html$Html_Attributes$method = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'method', value);
};
var _elm_lang$html$Html_Attributes$name = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'name', value);
};
var _elm_lang$html$Html_Attributes$pattern = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'pattern', value);
};
var _elm_lang$html$Html_Attributes$for = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'htmlFor', value);
};
var _elm_lang$html$Html_Attributes$max = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'max', value);
};
var _elm_lang$html$Html_Attributes$min = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'min', value);
};
var _elm_lang$html$Html_Attributes$step = function (n) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'step', n);
};
var _elm_lang$html$Html_Attributes$wrap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'wrap', value);
};
var _elm_lang$html$Html_Attributes$usemap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'useMap', value);
};
var _elm_lang$html$Html_Attributes$shape = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'shape', value);
};
var _elm_lang$html$Html_Attributes$coords = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'coords', value);
};
var _elm_lang$html$Html_Attributes$keytype = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'keytype', value);
};
var _elm_lang$html$Html_Attributes$align = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'align', value);
};
var _elm_lang$html$Html_Attributes$cite = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'cite', value);
};
var _elm_lang$html$Html_Attributes$href = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'href', value);
};
var _elm_lang$html$Html_Attributes$target = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'target', value);
};
var _elm_lang$html$Html_Attributes$downloadAs = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'download', value);
};
var _elm_lang$html$Html_Attributes$hreflang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'hreflang', value);
};
var _elm_lang$html$Html_Attributes$ping = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'ping', value);
};
var _elm_lang$html$Html_Attributes$start = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'start',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$headers = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'headers', value);
};
var _elm_lang$html$Html_Attributes$scope = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'scope', value);
};
var _elm_lang$html$Html_Attributes$boolProperty = F2(
	function (name, bool) {
		return A2(
			_elm_lang$html$Html_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$bool(bool));
	});
var _elm_lang$html$Html_Attributes$hidden = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'hidden', bool);
};
var _elm_lang$html$Html_Attributes$contenteditable = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'contentEditable', bool);
};
var _elm_lang$html$Html_Attributes$spellcheck = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'spellcheck', bool);
};
var _elm_lang$html$Html_Attributes$async = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'async', bool);
};
var _elm_lang$html$Html_Attributes$defer = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'defer', bool);
};
var _elm_lang$html$Html_Attributes$scoped = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'scoped', bool);
};
var _elm_lang$html$Html_Attributes$autoplay = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'autoplay', bool);
};
var _elm_lang$html$Html_Attributes$controls = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'controls', bool);
};
var _elm_lang$html$Html_Attributes$loop = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'loop', bool);
};
var _elm_lang$html$Html_Attributes$default = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'default', bool);
};
var _elm_lang$html$Html_Attributes$seamless = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'seamless', bool);
};
var _elm_lang$html$Html_Attributes$checked = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'checked', bool);
};
var _elm_lang$html$Html_Attributes$selected = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'selected', bool);
};
var _elm_lang$html$Html_Attributes$autofocus = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'autofocus', bool);
};
var _elm_lang$html$Html_Attributes$disabled = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'disabled', bool);
};
var _elm_lang$html$Html_Attributes$multiple = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'multiple', bool);
};
var _elm_lang$html$Html_Attributes$novalidate = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'noValidate', bool);
};
var _elm_lang$html$Html_Attributes$readonly = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'readOnly', bool);
};
var _elm_lang$html$Html_Attributes$required = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'required', bool);
};
var _elm_lang$html$Html_Attributes$ismap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'isMap', value);
};
var _elm_lang$html$Html_Attributes$download = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'download', bool);
};
var _elm_lang$html$Html_Attributes$reversed = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'reversed', bool);
};
var _elm_lang$html$Html_Attributes$classList = function (list) {
	return _elm_lang$html$Html_Attributes$class(
		A2(
			_elm_lang$core$String$join,
			' ',
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Tuple$first,
				A2(_elm_lang$core$List$filter, _elm_lang$core$Tuple$second, list))));
};
var _elm_lang$html$Html_Attributes$style = _elm_lang$virtual_dom$VirtualDom$style;

var _elm_lang$html$Html_Events$keyCode = A2(_elm_lang$core$Json_Decode$field, 'keyCode', _elm_lang$core$Json_Decode$int);
var _elm_lang$html$Html_Events$targetChecked = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'target',
		_1: {
			ctor: '::',
			_0: 'checked',
			_1: {ctor: '[]'}
		}
	},
	_elm_lang$core$Json_Decode$bool);
var _elm_lang$html$Html_Events$targetValue = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'target',
		_1: {
			ctor: '::',
			_0: 'value',
			_1: {ctor: '[]'}
		}
	},
	_elm_lang$core$Json_Decode$string);
var _elm_lang$html$Html_Events$defaultOptions = _elm_lang$virtual_dom$VirtualDom$defaultOptions;
var _elm_lang$html$Html_Events$onWithOptions = _elm_lang$virtual_dom$VirtualDom$onWithOptions;
var _elm_lang$html$Html_Events$on = _elm_lang$virtual_dom$VirtualDom$on;
var _elm_lang$html$Html_Events$onFocus = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'focus',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onBlur = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'blur',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onSubmitOptions = _elm_lang$core$Native_Utils.update(
	_elm_lang$html$Html_Events$defaultOptions,
	{preventDefault: true});
var _elm_lang$html$Html_Events$onSubmit = function (msg) {
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'submit',
		_elm_lang$html$Html_Events$onSubmitOptions,
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onCheck = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'change',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$targetChecked));
};
var _elm_lang$html$Html_Events$onInput = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'input',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$targetValue));
};
var _elm_lang$html$Html_Events$onMouseOut = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseout',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseOver = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseover',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseLeave = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseleave',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseEnter = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseenter',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseUp = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseup',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseDown = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mousedown',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onDoubleClick = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'dblclick',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onClick = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'click',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$Options = F2(
	function (a, b) {
		return {stopPropagation: a, preventDefault: b};
	});

var _elm_lang$html$Html_Lazy$lazy3 = _elm_lang$virtual_dom$VirtualDom$lazy3;
var _elm_lang$html$Html_Lazy$lazy2 = _elm_lang$virtual_dom$VirtualDom$lazy2;
var _elm_lang$html$Html_Lazy$lazy = _elm_lang$virtual_dom$VirtualDom$lazy;

var _elm_lang$keyboard$Keyboard$onSelfMsg = F3(
	function (router, _p0, state) {
		var _p1 = _p0;
		var _p2 = A2(_elm_lang$core$Dict$get, _p1.category, state);
		if (_p2.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var send = function (tagger) {
				return A2(
					_elm_lang$core$Platform$sendToApp,
					router,
					tagger(_p1.keyCode));
			};
			return A2(
				_elm_lang$core$Task$andThen,
				function (_p3) {
					return _elm_lang$core$Task$succeed(state);
				},
				_elm_lang$core$Task$sequence(
					A2(_elm_lang$core$List$map, send, _p2._0.taggers)));
		}
	});
var _elm_lang$keyboard$Keyboard_ops = _elm_lang$keyboard$Keyboard_ops || {};
_elm_lang$keyboard$Keyboard_ops['&>'] = F2(
	function (task1, task2) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (_p4) {
				return task2;
			},
			task1);
	});
var _elm_lang$keyboard$Keyboard$init = _elm_lang$core$Task$succeed(_elm_lang$core$Dict$empty);
var _elm_lang$keyboard$Keyboard$categorizeHelpHelp = F2(
	function (value, maybeValues) {
		var _p5 = maybeValues;
		if (_p5.ctor === 'Nothing') {
			return _elm_lang$core$Maybe$Just(
				{
					ctor: '::',
					_0: value,
					_1: {ctor: '[]'}
				});
		} else {
			return _elm_lang$core$Maybe$Just(
				{ctor: '::', _0: value, _1: _p5._0});
		}
	});
var _elm_lang$keyboard$Keyboard$categorizeHelp = F2(
	function (subs, subDict) {
		categorizeHelp:
		while (true) {
			var _p6 = subs;
			if (_p6.ctor === '[]') {
				return subDict;
			} else {
				var _v4 = _p6._1,
					_v5 = A3(
					_elm_lang$core$Dict$update,
					_p6._0._0,
					_elm_lang$keyboard$Keyboard$categorizeHelpHelp(_p6._0._1),
					subDict);
				subs = _v4;
				subDict = _v5;
				continue categorizeHelp;
			}
		}
	});
var _elm_lang$keyboard$Keyboard$categorize = function (subs) {
	return A2(_elm_lang$keyboard$Keyboard$categorizeHelp, subs, _elm_lang$core$Dict$empty);
};
var _elm_lang$keyboard$Keyboard$keyCode = A2(_elm_lang$core$Json_Decode$field, 'keyCode', _elm_lang$core$Json_Decode$int);
var _elm_lang$keyboard$Keyboard$subscription = _elm_lang$core$Native_Platform.leaf('Keyboard');
var _elm_lang$keyboard$Keyboard$Watcher = F2(
	function (a, b) {
		return {taggers: a, pid: b};
	});
var _elm_lang$keyboard$Keyboard$Msg = F2(
	function (a, b) {
		return {category: a, keyCode: b};
	});
var _elm_lang$keyboard$Keyboard$onEffects = F3(
	function (router, newSubs, oldState) {
		var rightStep = F3(
			function (category, taggers, task) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (state) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (pid) {
								return _elm_lang$core$Task$succeed(
									A3(
										_elm_lang$core$Dict$insert,
										category,
										A2(_elm_lang$keyboard$Keyboard$Watcher, taggers, pid),
										state));
							},
							_elm_lang$core$Process$spawn(
								A3(
									_elm_lang$dom$Dom_LowLevel$onDocument,
									category,
									_elm_lang$keyboard$Keyboard$keyCode,
									function (_p7) {
										return A2(
											_elm_lang$core$Platform$sendToSelf,
											router,
											A2(_elm_lang$keyboard$Keyboard$Msg, category, _p7));
									})));
					},
					task);
			});
		var bothStep = F4(
			function (category, _p8, taggers, task) {
				var _p9 = _p8;
				return A2(
					_elm_lang$core$Task$map,
					A2(
						_elm_lang$core$Dict$insert,
						category,
						A2(_elm_lang$keyboard$Keyboard$Watcher, taggers, _p9.pid)),
					task);
			});
		var leftStep = F3(
			function (category, _p10, task) {
				var _p11 = _p10;
				return A2(
					_elm_lang$keyboard$Keyboard_ops['&>'],
					_elm_lang$core$Process$kill(_p11.pid),
					task);
			});
		return A6(
			_elm_lang$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			oldState,
			_elm_lang$keyboard$Keyboard$categorize(newSubs),
			_elm_lang$core$Task$succeed(_elm_lang$core$Dict$empty));
	});
var _elm_lang$keyboard$Keyboard$MySub = F2(
	function (a, b) {
		return {ctor: 'MySub', _0: a, _1: b};
	});
var _elm_lang$keyboard$Keyboard$presses = function (tagger) {
	return _elm_lang$keyboard$Keyboard$subscription(
		A2(_elm_lang$keyboard$Keyboard$MySub, 'keypress', tagger));
};
var _elm_lang$keyboard$Keyboard$downs = function (tagger) {
	return _elm_lang$keyboard$Keyboard$subscription(
		A2(_elm_lang$keyboard$Keyboard$MySub, 'keydown', tagger));
};
var _elm_lang$keyboard$Keyboard$ups = function (tagger) {
	return _elm_lang$keyboard$Keyboard$subscription(
		A2(_elm_lang$keyboard$Keyboard$MySub, 'keyup', tagger));
};
var _elm_lang$keyboard$Keyboard$subMap = F2(
	function (func, _p12) {
		var _p13 = _p12;
		return A2(
			_elm_lang$keyboard$Keyboard$MySub,
			_p13._0,
			function (_p14) {
				return func(
					_p13._1(_p14));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Keyboard'] = {pkg: 'elm-lang/keyboard', init: _elm_lang$keyboard$Keyboard$init, onEffects: _elm_lang$keyboard$Keyboard$onEffects, onSelfMsg: _elm_lang$keyboard$Keyboard$onSelfMsg, tag: 'sub', subMap: _elm_lang$keyboard$Keyboard$subMap};

var _elm_lang$mouse$Mouse_ops = _elm_lang$mouse$Mouse_ops || {};
_elm_lang$mouse$Mouse_ops['&>'] = F2(
	function (t1, t2) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (_p0) {
				return t2;
			},
			t1);
	});
var _elm_lang$mouse$Mouse$onSelfMsg = F3(
	function (router, _p1, state) {
		var _p2 = _p1;
		var _p3 = A2(_elm_lang$core$Dict$get, _p2.category, state);
		if (_p3.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var send = function (tagger) {
				return A2(
					_elm_lang$core$Platform$sendToApp,
					router,
					tagger(_p2.position));
			};
			return A2(
				_elm_lang$mouse$Mouse_ops['&>'],
				_elm_lang$core$Task$sequence(
					A2(_elm_lang$core$List$map, send, _p3._0.taggers)),
				_elm_lang$core$Task$succeed(state));
		}
	});
var _elm_lang$mouse$Mouse$init = _elm_lang$core$Task$succeed(_elm_lang$core$Dict$empty);
var _elm_lang$mouse$Mouse$categorizeHelpHelp = F2(
	function (value, maybeValues) {
		var _p4 = maybeValues;
		if (_p4.ctor === 'Nothing') {
			return _elm_lang$core$Maybe$Just(
				{
					ctor: '::',
					_0: value,
					_1: {ctor: '[]'}
				});
		} else {
			return _elm_lang$core$Maybe$Just(
				{ctor: '::', _0: value, _1: _p4._0});
		}
	});
var _elm_lang$mouse$Mouse$categorizeHelp = F2(
	function (subs, subDict) {
		categorizeHelp:
		while (true) {
			var _p5 = subs;
			if (_p5.ctor === '[]') {
				return subDict;
			} else {
				var _v4 = _p5._1,
					_v5 = A3(
					_elm_lang$core$Dict$update,
					_p5._0._0,
					_elm_lang$mouse$Mouse$categorizeHelpHelp(_p5._0._1),
					subDict);
				subs = _v4;
				subDict = _v5;
				continue categorizeHelp;
			}
		}
	});
var _elm_lang$mouse$Mouse$categorize = function (subs) {
	return A2(_elm_lang$mouse$Mouse$categorizeHelp, subs, _elm_lang$core$Dict$empty);
};
var _elm_lang$mouse$Mouse$subscription = _elm_lang$core$Native_Platform.leaf('Mouse');
var _elm_lang$mouse$Mouse$Position = F2(
	function (a, b) {
		return {x: a, y: b};
	});
var _elm_lang$mouse$Mouse$position = A3(
	_elm_lang$core$Json_Decode$map2,
	_elm_lang$mouse$Mouse$Position,
	A2(_elm_lang$core$Json_Decode$field, 'pageX', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'pageY', _elm_lang$core$Json_Decode$int));
var _elm_lang$mouse$Mouse$Watcher = F2(
	function (a, b) {
		return {taggers: a, pid: b};
	});
var _elm_lang$mouse$Mouse$Msg = F2(
	function (a, b) {
		return {category: a, position: b};
	});
var _elm_lang$mouse$Mouse$onEffects = F3(
	function (router, newSubs, oldState) {
		var rightStep = F3(
			function (category, taggers, task) {
				var tracker = A3(
					_elm_lang$dom$Dom_LowLevel$onDocument,
					category,
					_elm_lang$mouse$Mouse$position,
					function (_p6) {
						return A2(
							_elm_lang$core$Platform$sendToSelf,
							router,
							A2(_elm_lang$mouse$Mouse$Msg, category, _p6));
					});
				return A2(
					_elm_lang$core$Task$andThen,
					function (state) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (pid) {
								return _elm_lang$core$Task$succeed(
									A3(
										_elm_lang$core$Dict$insert,
										category,
										A2(_elm_lang$mouse$Mouse$Watcher, taggers, pid),
										state));
							},
							_elm_lang$core$Process$spawn(tracker));
					},
					task);
			});
		var bothStep = F4(
			function (category, _p7, taggers, task) {
				var _p8 = _p7;
				return A2(
					_elm_lang$core$Task$andThen,
					function (state) {
						return _elm_lang$core$Task$succeed(
							A3(
								_elm_lang$core$Dict$insert,
								category,
								A2(_elm_lang$mouse$Mouse$Watcher, taggers, _p8.pid),
								state));
					},
					task);
			});
		var leftStep = F3(
			function (category, _p9, task) {
				var _p10 = _p9;
				return A2(
					_elm_lang$mouse$Mouse_ops['&>'],
					_elm_lang$core$Process$kill(_p10.pid),
					task);
			});
		return A6(
			_elm_lang$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			oldState,
			_elm_lang$mouse$Mouse$categorize(newSubs),
			_elm_lang$core$Task$succeed(_elm_lang$core$Dict$empty));
	});
var _elm_lang$mouse$Mouse$MySub = F2(
	function (a, b) {
		return {ctor: 'MySub', _0: a, _1: b};
	});
var _elm_lang$mouse$Mouse$clicks = function (tagger) {
	return _elm_lang$mouse$Mouse$subscription(
		A2(_elm_lang$mouse$Mouse$MySub, 'click', tagger));
};
var _elm_lang$mouse$Mouse$moves = function (tagger) {
	return _elm_lang$mouse$Mouse$subscription(
		A2(_elm_lang$mouse$Mouse$MySub, 'mousemove', tagger));
};
var _elm_lang$mouse$Mouse$downs = function (tagger) {
	return _elm_lang$mouse$Mouse$subscription(
		A2(_elm_lang$mouse$Mouse$MySub, 'mousedown', tagger));
};
var _elm_lang$mouse$Mouse$ups = function (tagger) {
	return _elm_lang$mouse$Mouse$subscription(
		A2(_elm_lang$mouse$Mouse$MySub, 'mouseup', tagger));
};
var _elm_lang$mouse$Mouse$subMap = F2(
	function (func, _p11) {
		var _p12 = _p11;
		return A2(
			_elm_lang$mouse$Mouse$MySub,
			_p12._0,
			function (_p13) {
				return func(
					_p12._1(_p13));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Mouse'] = {pkg: 'elm-lang/mouse', init: _elm_lang$mouse$Mouse$init, onEffects: _elm_lang$mouse$Mouse$onEffects, onSelfMsg: _elm_lang$mouse$Mouse$onSelfMsg, tag: 'sub', subMap: _elm_lang$mouse$Mouse$subMap};

var _elm_lang$navigation$Native_Navigation = function() {


// FAKE NAVIGATION

function go(n)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		if (n !== 0)
		{
			history.go(n);
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function pushState(url)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		history.pushState({}, '', url);
		callback(_elm_lang$core$Native_Scheduler.succeed(getLocation()));
	});
}

function replaceState(url)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		history.replaceState({}, '', url);
		callback(_elm_lang$core$Native_Scheduler.succeed(getLocation()));
	});
}


// REAL NAVIGATION

function reloadPage(skipCache)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		document.location.reload(skipCache);
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function setLocation(url)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		try
		{
			window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			document.location.reload(false);
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}


// GET LOCATION

function getLocation()
{
	var location = document.location;

	return {
		href: location.href,
		host: location.host,
		hostname: location.hostname,
		protocol: location.protocol,
		origin: location.origin,
		port_: location.port,
		pathname: location.pathname,
		search: location.search,
		hash: location.hash,
		username: location.username,
		password: location.password
	};
}


// DETECT IE11 PROBLEMS

function isInternetExplorer11()
{
	return window.navigator.userAgent.indexOf('Trident') !== -1;
}


return {
	go: go,
	setLocation: setLocation,
	reloadPage: reloadPage,
	pushState: pushState,
	replaceState: replaceState,
	getLocation: getLocation,
	isInternetExplorer11: isInternetExplorer11
};

}();

var _elm_lang$navigation$Navigation$replaceState = _elm_lang$navigation$Native_Navigation.replaceState;
var _elm_lang$navigation$Navigation$pushState = _elm_lang$navigation$Native_Navigation.pushState;
var _elm_lang$navigation$Navigation$go = _elm_lang$navigation$Native_Navigation.go;
var _elm_lang$navigation$Navigation$reloadPage = _elm_lang$navigation$Native_Navigation.reloadPage;
var _elm_lang$navigation$Navigation$setLocation = _elm_lang$navigation$Native_Navigation.setLocation;
var _elm_lang$navigation$Navigation_ops = _elm_lang$navigation$Navigation_ops || {};
_elm_lang$navigation$Navigation_ops['&>'] = F2(
	function (task1, task2) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (_p0) {
				return task2;
			},
			task1);
	});
var _elm_lang$navigation$Navigation$notify = F3(
	function (router, subs, location) {
		var send = function (_p1) {
			var _p2 = _p1;
			return A2(
				_elm_lang$core$Platform$sendToApp,
				router,
				_p2._0(location));
		};
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			_elm_lang$core$Task$sequence(
				A2(_elm_lang$core$List$map, send, subs)),
			_elm_lang$core$Task$succeed(
				{ctor: '_Tuple0'}));
	});
var _elm_lang$navigation$Navigation$cmdHelp = F3(
	function (router, subs, cmd) {
		var _p3 = cmd;
		switch (_p3.ctor) {
			case 'Jump':
				return _elm_lang$navigation$Navigation$go(_p3._0);
			case 'New':
				return A2(
					_elm_lang$core$Task$andThen,
					A2(_elm_lang$navigation$Navigation$notify, router, subs),
					_elm_lang$navigation$Navigation$pushState(_p3._0));
			case 'Modify':
				return A2(
					_elm_lang$core$Task$andThen,
					A2(_elm_lang$navigation$Navigation$notify, router, subs),
					_elm_lang$navigation$Navigation$replaceState(_p3._0));
			case 'Visit':
				return _elm_lang$navigation$Navigation$setLocation(_p3._0);
			default:
				return _elm_lang$navigation$Navigation$reloadPage(_p3._0);
		}
	});
var _elm_lang$navigation$Navigation$killPopWatcher = function (popWatcher) {
	var _p4 = popWatcher;
	if (_p4.ctor === 'Normal') {
		return _elm_lang$core$Process$kill(_p4._0);
	} else {
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			_elm_lang$core$Process$kill(_p4._0),
			_elm_lang$core$Process$kill(_p4._1));
	}
};
var _elm_lang$navigation$Navigation$onSelfMsg = F3(
	function (router, location, state) {
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			A3(_elm_lang$navigation$Navigation$notify, router, state.subs, location),
			_elm_lang$core$Task$succeed(state));
	});
var _elm_lang$navigation$Navigation$subscription = _elm_lang$core$Native_Platform.leaf('Navigation');
var _elm_lang$navigation$Navigation$command = _elm_lang$core$Native_Platform.leaf('Navigation');
var _elm_lang$navigation$Navigation$Location = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return {href: a, host: b, hostname: c, protocol: d, origin: e, port_: f, pathname: g, search: h, hash: i, username: j, password: k};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _elm_lang$navigation$Navigation$State = F2(
	function (a, b) {
		return {subs: a, popWatcher: b};
	});
var _elm_lang$navigation$Navigation$init = _elm_lang$core$Task$succeed(
	A2(
		_elm_lang$navigation$Navigation$State,
		{ctor: '[]'},
		_elm_lang$core$Maybe$Nothing));
var _elm_lang$navigation$Navigation$Reload = function (a) {
	return {ctor: 'Reload', _0: a};
};
var _elm_lang$navigation$Navigation$reload = _elm_lang$navigation$Navigation$command(
	_elm_lang$navigation$Navigation$Reload(false));
var _elm_lang$navigation$Navigation$reloadAndSkipCache = _elm_lang$navigation$Navigation$command(
	_elm_lang$navigation$Navigation$Reload(true));
var _elm_lang$navigation$Navigation$Visit = function (a) {
	return {ctor: 'Visit', _0: a};
};
var _elm_lang$navigation$Navigation$load = function (url) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Visit(url));
};
var _elm_lang$navigation$Navigation$Modify = function (a) {
	return {ctor: 'Modify', _0: a};
};
var _elm_lang$navigation$Navigation$modifyUrl = function (url) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Modify(url));
};
var _elm_lang$navigation$Navigation$New = function (a) {
	return {ctor: 'New', _0: a};
};
var _elm_lang$navigation$Navigation$newUrl = function (url) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$New(url));
};
var _elm_lang$navigation$Navigation$Jump = function (a) {
	return {ctor: 'Jump', _0: a};
};
var _elm_lang$navigation$Navigation$back = function (n) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Jump(0 - n));
};
var _elm_lang$navigation$Navigation$forward = function (n) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Jump(n));
};
var _elm_lang$navigation$Navigation$cmdMap = F2(
	function (_p5, myCmd) {
		var _p6 = myCmd;
		switch (_p6.ctor) {
			case 'Jump':
				return _elm_lang$navigation$Navigation$Jump(_p6._0);
			case 'New':
				return _elm_lang$navigation$Navigation$New(_p6._0);
			case 'Modify':
				return _elm_lang$navigation$Navigation$Modify(_p6._0);
			case 'Visit':
				return _elm_lang$navigation$Navigation$Visit(_p6._0);
			default:
				return _elm_lang$navigation$Navigation$Reload(_p6._0);
		}
	});
var _elm_lang$navigation$Navigation$Monitor = function (a) {
	return {ctor: 'Monitor', _0: a};
};
var _elm_lang$navigation$Navigation$program = F2(
	function (locationToMessage, stuff) {
		var init = stuff.init(
			_elm_lang$navigation$Native_Navigation.getLocation(
				{ctor: '_Tuple0'}));
		var subs = function (model) {
			return _elm_lang$core$Platform_Sub$batch(
				{
					ctor: '::',
					_0: _elm_lang$navigation$Navigation$subscription(
						_elm_lang$navigation$Navigation$Monitor(locationToMessage)),
					_1: {
						ctor: '::',
						_0: stuff.subscriptions(model),
						_1: {ctor: '[]'}
					}
				});
		};
		return _elm_lang$html$Html$program(
			{init: init, view: stuff.view, update: stuff.update, subscriptions: subs});
	});
var _elm_lang$navigation$Navigation$programWithFlags = F2(
	function (locationToMessage, stuff) {
		var init = function (flags) {
			return A2(
				stuff.init,
				flags,
				_elm_lang$navigation$Native_Navigation.getLocation(
					{ctor: '_Tuple0'}));
		};
		var subs = function (model) {
			return _elm_lang$core$Platform_Sub$batch(
				{
					ctor: '::',
					_0: _elm_lang$navigation$Navigation$subscription(
						_elm_lang$navigation$Navigation$Monitor(locationToMessage)),
					_1: {
						ctor: '::',
						_0: stuff.subscriptions(model),
						_1: {ctor: '[]'}
					}
				});
		};
		return _elm_lang$html$Html$programWithFlags(
			{init: init, view: stuff.view, update: stuff.update, subscriptions: subs});
	});
var _elm_lang$navigation$Navigation$subMap = F2(
	function (func, _p7) {
		var _p8 = _p7;
		return _elm_lang$navigation$Navigation$Monitor(
			function (_p9) {
				return func(
					_p8._0(_p9));
			});
	});
var _elm_lang$navigation$Navigation$InternetExplorer = F2(
	function (a, b) {
		return {ctor: 'InternetExplorer', _0: a, _1: b};
	});
var _elm_lang$navigation$Navigation$Normal = function (a) {
	return {ctor: 'Normal', _0: a};
};
var _elm_lang$navigation$Navigation$spawnPopWatcher = function (router) {
	var reportLocation = function (_p10) {
		return A2(
			_elm_lang$core$Platform$sendToSelf,
			router,
			_elm_lang$navigation$Native_Navigation.getLocation(
				{ctor: '_Tuple0'}));
	};
	return _elm_lang$navigation$Native_Navigation.isInternetExplorer11(
		{ctor: '_Tuple0'}) ? A3(
		_elm_lang$core$Task$map2,
		_elm_lang$navigation$Navigation$InternetExplorer,
		_elm_lang$core$Process$spawn(
			A3(_elm_lang$dom$Dom_LowLevel$onWindow, 'popstate', _elm_lang$core$Json_Decode$value, reportLocation)),
		_elm_lang$core$Process$spawn(
			A3(_elm_lang$dom$Dom_LowLevel$onWindow, 'hashchange', _elm_lang$core$Json_Decode$value, reportLocation))) : A2(
		_elm_lang$core$Task$map,
		_elm_lang$navigation$Navigation$Normal,
		_elm_lang$core$Process$spawn(
			A3(_elm_lang$dom$Dom_LowLevel$onWindow, 'popstate', _elm_lang$core$Json_Decode$value, reportLocation)));
};
var _elm_lang$navigation$Navigation$onEffects = F4(
	function (router, cmds, subs, _p11) {
		var _p12 = _p11;
		var _p15 = _p12.popWatcher;
		var stepState = function () {
			var _p13 = {ctor: '_Tuple2', _0: subs, _1: _p15};
			_v6_2:
			do {
				if (_p13._0.ctor === '[]') {
					if (_p13._1.ctor === 'Just') {
						return A2(
							_elm_lang$navigation$Navigation_ops['&>'],
							_elm_lang$navigation$Navigation$killPopWatcher(_p13._1._0),
							_elm_lang$core$Task$succeed(
								A2(_elm_lang$navigation$Navigation$State, subs, _elm_lang$core$Maybe$Nothing)));
					} else {
						break _v6_2;
					}
				} else {
					if (_p13._1.ctor === 'Nothing') {
						return A2(
							_elm_lang$core$Task$map,
							function (_p14) {
								return A2(
									_elm_lang$navigation$Navigation$State,
									subs,
									_elm_lang$core$Maybe$Just(_p14));
							},
							_elm_lang$navigation$Navigation$spawnPopWatcher(router));
					} else {
						break _v6_2;
					}
				}
			} while(false);
			return _elm_lang$core$Task$succeed(
				A2(_elm_lang$navigation$Navigation$State, subs, _p15));
		}();
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			_elm_lang$core$Task$sequence(
				A2(
					_elm_lang$core$List$map,
					A2(_elm_lang$navigation$Navigation$cmdHelp, router, subs),
					cmds)),
			stepState);
	});
_elm_lang$core$Native_Platform.effectManagers['Navigation'] = {pkg: 'elm-lang/navigation', init: _elm_lang$navigation$Navigation$init, onEffects: _elm_lang$navigation$Navigation$onEffects, onSelfMsg: _elm_lang$navigation$Navigation$onSelfMsg, tag: 'fx', cmdMap: _elm_lang$navigation$Navigation$cmdMap, subMap: _elm_lang$navigation$Navigation$subMap};

var _elm_lang$window$Native_Window = function()
{

var size = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)	{
	callback(_elm_lang$core$Native_Scheduler.succeed({
		width: window.innerWidth,
		height: window.innerHeight
	}));
});

return {
	size: size
};

}();
var _elm_lang$window$Window_ops = _elm_lang$window$Window_ops || {};
_elm_lang$window$Window_ops['&>'] = F2(
	function (task1, task2) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (_p0) {
				return task2;
			},
			task1);
	});
var _elm_lang$window$Window$onSelfMsg = F3(
	function (router, dimensions, state) {
		var _p1 = state;
		if (_p1.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var send = function (_p2) {
				var _p3 = _p2;
				return A2(
					_elm_lang$core$Platform$sendToApp,
					router,
					_p3._0(dimensions));
			};
			return A2(
				_elm_lang$window$Window_ops['&>'],
				_elm_lang$core$Task$sequence(
					A2(_elm_lang$core$List$map, send, _p1._0.subs)),
				_elm_lang$core$Task$succeed(state));
		}
	});
var _elm_lang$window$Window$init = _elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing);
var _elm_lang$window$Window$size = _elm_lang$window$Native_Window.size;
var _elm_lang$window$Window$width = A2(
	_elm_lang$core$Task$map,
	function (_) {
		return _.width;
	},
	_elm_lang$window$Window$size);
var _elm_lang$window$Window$height = A2(
	_elm_lang$core$Task$map,
	function (_) {
		return _.height;
	},
	_elm_lang$window$Window$size);
var _elm_lang$window$Window$onEffects = F3(
	function (router, newSubs, oldState) {
		var _p4 = {ctor: '_Tuple2', _0: oldState, _1: newSubs};
		if (_p4._0.ctor === 'Nothing') {
			if (_p4._1.ctor === '[]') {
				return _elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing);
			} else {
				return A2(
					_elm_lang$core$Task$andThen,
					function (pid) {
						return _elm_lang$core$Task$succeed(
							_elm_lang$core$Maybe$Just(
								{subs: newSubs, pid: pid}));
					},
					_elm_lang$core$Process$spawn(
						A3(
							_elm_lang$dom$Dom_LowLevel$onWindow,
							'resize',
							_elm_lang$core$Json_Decode$succeed(
								{ctor: '_Tuple0'}),
							function (_p5) {
								return A2(
									_elm_lang$core$Task$andThen,
									_elm_lang$core$Platform$sendToSelf(router),
									_elm_lang$window$Window$size);
							})));
			}
		} else {
			if (_p4._1.ctor === '[]') {
				return A2(
					_elm_lang$window$Window_ops['&>'],
					_elm_lang$core$Process$kill(_p4._0._0.pid),
					_elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing));
			} else {
				return _elm_lang$core$Task$succeed(
					_elm_lang$core$Maybe$Just(
						{subs: newSubs, pid: _p4._0._0.pid}));
			}
		}
	});
var _elm_lang$window$Window$subscription = _elm_lang$core$Native_Platform.leaf('Window');
var _elm_lang$window$Window$Size = F2(
	function (a, b) {
		return {width: a, height: b};
	});
var _elm_lang$window$Window$MySub = function (a) {
	return {ctor: 'MySub', _0: a};
};
var _elm_lang$window$Window$resizes = function (tagger) {
	return _elm_lang$window$Window$subscription(
		_elm_lang$window$Window$MySub(tagger));
};
var _elm_lang$window$Window$subMap = F2(
	function (func, _p6) {
		var _p7 = _p6;
		return _elm_lang$window$Window$MySub(
			function (_p8) {
				return func(
					_p7._0(_p8));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Window'] = {pkg: 'elm-lang/window', init: _elm_lang$window$Window$init, onEffects: _elm_lang$window$Window$onEffects, onSelfMsg: _elm_lang$window$Window$onSelfMsg, tag: 'sub', subMap: _elm_lang$window$Window$subMap};

var _krisajenkins$elm_astar$AStar_Generalised$reconstructPath = F2(
	function (cameFrom, goal) {
		var _p0 = A2(_elm_lang$core$Dict$get, goal, cameFrom);
		if (_p0.ctor === 'Nothing') {
			return _elm_lang$core$Array$empty;
		} else {
			return A2(
				_elm_lang$core$Array$push,
				goal,
				A2(_krisajenkins$elm_astar$AStar_Generalised$reconstructPath, cameFrom, _p0._0));
		}
	});
var _krisajenkins$elm_astar$AStar_Generalised$updateCost = F3(
	function (current, neighbour, model) {
		var newCameFrom = A3(_elm_lang$core$Dict$insert, neighbour, current, model.cameFrom);
		var distanceTo = _elm_lang$core$Basics$toFloat(
			_elm_lang$core$Array$length(
				A2(_krisajenkins$elm_astar$AStar_Generalised$reconstructPath, newCameFrom, neighbour)));
		var newCosts = A3(_elm_lang$core$Dict$insert, neighbour, distanceTo, model.costs);
		var newModel = _elm_lang$core$Native_Utils.update(
			model,
			{costs: newCosts, cameFrom: newCameFrom});
		var _p1 = A2(_elm_lang$core$Dict$get, neighbour, model.costs);
		if (_p1.ctor === 'Nothing') {
			return newModel;
		} else {
			return (_elm_lang$core$Native_Utils.cmp(distanceTo, _p1._0) < 0) ? newModel : model;
		}
	});
var _krisajenkins$elm_astar$AStar_Generalised$cheapestOpen = F2(
	function (costFn, model) {
		return A2(
			_elm_lang$core$Maybe$map,
			_elm_lang$core$Tuple$first,
			_elm_lang$core$List$head(
				A2(
					_elm_lang$core$List$sortBy,
					_elm_lang$core$Tuple$second,
					A2(
						_elm_lang$core$List$filterMap,
						function (position) {
							var _p2 = A2(_elm_lang$core$Dict$get, position, model.costs);
							if (_p2.ctor === 'Nothing') {
								return _elm_lang$core$Maybe$Nothing;
							} else {
								return _elm_lang$core$Maybe$Just(
									{
										ctor: '_Tuple2',
										_0: position,
										_1: _p2._0 + costFn(position)
									});
							}
						},
						_elm_lang$core$Set$toList(model.openSet)))));
	});
var _krisajenkins$elm_astar$AStar_Generalised$astar = F4(
	function (costFn, moveFn, goal, model) {
		astar:
		while (true) {
			var _p3 = A2(
				_krisajenkins$elm_astar$AStar_Generalised$cheapestOpen,
				costFn(goal),
				model);
			if (_p3.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p4 = _p3._0;
				if (_elm_lang$core$Native_Utils.eq(_p4, goal)) {
					return _elm_lang$core$Maybe$Just(
						A2(_krisajenkins$elm_astar$AStar_Generalised$reconstructPath, model.cameFrom, goal));
				} else {
					var neighbours = moveFn(_p4);
					var modelPopped = _elm_lang$core$Native_Utils.update(
						model,
						{
							openSet: A2(_elm_lang$core$Set$remove, _p4, model.openSet),
							evaluated: A2(_elm_lang$core$Set$insert, _p4, model.evaluated)
						});
					var newNeighbours = A2(_elm_lang$core$Set$diff, neighbours, modelPopped.evaluated);
					var modelWithNeighbours = _elm_lang$core$Native_Utils.update(
						modelPopped,
						{
							openSet: A2(_elm_lang$core$Set$union, modelPopped.openSet, newNeighbours)
						});
					var modelWithCosts = A3(
						_elm_lang$core$Set$foldl,
						_krisajenkins$elm_astar$AStar_Generalised$updateCost(_p4),
						modelWithNeighbours,
						newNeighbours);
					var _v4 = costFn,
						_v5 = moveFn,
						_v6 = goal,
						_v7 = modelWithCosts;
					costFn = _v4;
					moveFn = _v5;
					goal = _v6;
					model = _v7;
					continue astar;
				}
			}
		}
	});
var _krisajenkins$elm_astar$AStar_Generalised$initialModel = function (start) {
	return {
		evaluated: _elm_lang$core$Set$empty,
		openSet: _elm_lang$core$Set$singleton(start),
		costs: A2(_elm_lang$core$Dict$singleton, start, 0),
		cameFrom: _elm_lang$core$Dict$empty
	};
};
var _krisajenkins$elm_astar$AStar_Generalised$findPath = F4(
	function (costFn, moveFn, start, end) {
		return A2(
			_elm_lang$core$Maybe$map,
			_elm_lang$core$Array$toList,
			A4(
				_krisajenkins$elm_astar$AStar_Generalised$astar,
				costFn,
				moveFn,
				end,
				_krisajenkins$elm_astar$AStar_Generalised$initialModel(start)));
	});
var _krisajenkins$elm_astar$AStar_Generalised$Model = F4(
	function (a, b, c, d) {
		return {evaluated: a, openSet: b, costs: c, cameFrom: d};
	});

var _krisajenkins$elm_astar$AStar$pythagoreanCost = F2(
	function (_p1, _p0) {
		var _p2 = _p1;
		var _p3 = _p0;
		var dy = _elm_lang$core$Basics$toFloat(
			_elm_lang$core$Basics$abs(_p2._1 - _p3._1));
		var dx = _elm_lang$core$Basics$toFloat(
			_elm_lang$core$Basics$abs(_p2._0 - _p3._0));
		return _elm_lang$core$Basics$abs(
			(_elm_lang$core$Basics$sqrt(2) * A2(_elm_lang$core$Basics$min, dx, dy)) + _elm_lang$core$Basics$abs(dy - dx));
	});
var _krisajenkins$elm_astar$AStar$straightLineCost = F2(
	function (_p5, _p4) {
		var _p6 = _p5;
		var _p7 = _p4;
		var dy = _elm_lang$core$Basics$abs(_p6._1 - _p7._1);
		var dx = _elm_lang$core$Basics$abs(_p6._0 - _p7._0);
		return _elm_lang$core$Basics$toFloat(dx + dy);
	});
var _krisajenkins$elm_astar$AStar$findPath = _krisajenkins$elm_astar$AStar_Generalised$findPath;

var _mgold$elm_random_pcg$Random_Pcg$toJson = function (_p0) {
	var _p1 = _p0;
	return _elm_lang$core$Json_Encode$list(
		{
			ctor: '::',
			_0: _elm_lang$core$Json_Encode$int(_p1._0),
			_1: {
				ctor: '::',
				_0: _elm_lang$core$Json_Encode$int(_p1._1),
				_1: {ctor: '[]'}
			}
		});
};
var _mgold$elm_random_pcg$Random_Pcg$mul32 = F2(
	function (a, b) {
		var bl = b & 65535;
		var bh = 65535 & (b >>> 16);
		var al = a & 65535;
		var ah = 65535 & (a >>> 16);
		return 0 | ((al * bl) + ((((ah * bl) + (al * bh)) << 16) >>> 0));
	});
var _mgold$elm_random_pcg$Random_Pcg$listHelp = F4(
	function (list, n, generate, seed) {
		listHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 1) < 0) {
				return {ctor: '_Tuple2', _0: list, _1: seed};
			} else {
				var _p2 = generate(seed);
				var value = _p2._0;
				var newSeed = _p2._1;
				var _v1 = {ctor: '::', _0: value, _1: list},
					_v2 = n - 1,
					_v3 = generate,
					_v4 = newSeed;
				list = _v1;
				n = _v2;
				generate = _v3;
				seed = _v4;
				continue listHelp;
			}
		}
	});
var _mgold$elm_random_pcg$Random_Pcg$minInt = -2147483648;
var _mgold$elm_random_pcg$Random_Pcg$maxInt = 2147483647;
var _mgold$elm_random_pcg$Random_Pcg$bit27 = 1.34217728e8;
var _mgold$elm_random_pcg$Random_Pcg$bit53 = 9.007199254740992e15;
var _mgold$elm_random_pcg$Random_Pcg$peel = function (_p3) {
	var _p4 = _p3;
	var _p5 = _p4._0;
	var word = (_p5 ^ (_p5 >>> ((_p5 >>> 28) + 4))) * 277803737;
	return ((word >>> 22) ^ word) >>> 0;
};
var _mgold$elm_random_pcg$Random_Pcg$step = F2(
	function (_p6, seed) {
		var _p7 = _p6;
		return _p7._0(seed);
	});
var _mgold$elm_random_pcg$Random_Pcg$retry = F3(
	function (generator, predicate, seed) {
		retry:
		while (true) {
			var _p8 = A2(_mgold$elm_random_pcg$Random_Pcg$step, generator, seed);
			var candidate = _p8._0;
			var newSeed = _p8._1;
			if (predicate(candidate)) {
				return {ctor: '_Tuple2', _0: candidate, _1: newSeed};
			} else {
				var _v7 = generator,
					_v8 = predicate,
					_v9 = newSeed;
				generator = _v7;
				predicate = _v8;
				seed = _v9;
				continue retry;
			}
		}
	});
var _mgold$elm_random_pcg$Random_Pcg$Generator = function (a) {
	return {ctor: 'Generator', _0: a};
};
var _mgold$elm_random_pcg$Random_Pcg$list = F2(
	function (n, _p9) {
		var _p10 = _p9;
		return _mgold$elm_random_pcg$Random_Pcg$Generator(
			function (seed) {
				return A4(
					_mgold$elm_random_pcg$Random_Pcg$listHelp,
					{ctor: '[]'},
					n,
					_p10._0,
					seed);
			});
	});
var _mgold$elm_random_pcg$Random_Pcg$constant = function (value) {
	return _mgold$elm_random_pcg$Random_Pcg$Generator(
		function (seed) {
			return {ctor: '_Tuple2', _0: value, _1: seed};
		});
};
var _mgold$elm_random_pcg$Random_Pcg$map = F2(
	function (func, _p11) {
		var _p12 = _p11;
		return _mgold$elm_random_pcg$Random_Pcg$Generator(
			function (seed0) {
				var _p13 = _p12._0(seed0);
				var a = _p13._0;
				var seed1 = _p13._1;
				return {
					ctor: '_Tuple2',
					_0: func(a),
					_1: seed1
				};
			});
	});
var _mgold$elm_random_pcg$Random_Pcg$map2 = F3(
	function (func, _p15, _p14) {
		var _p16 = _p15;
		var _p17 = _p14;
		return _mgold$elm_random_pcg$Random_Pcg$Generator(
			function (seed0) {
				var _p18 = _p16._0(seed0);
				var a = _p18._0;
				var seed1 = _p18._1;
				var _p19 = _p17._0(seed1);
				var b = _p19._0;
				var seed2 = _p19._1;
				return {
					ctor: '_Tuple2',
					_0: A2(func, a, b),
					_1: seed2
				};
			});
	});
var _mgold$elm_random_pcg$Random_Pcg$pair = F2(
	function (genA, genB) {
		return A3(
			_mgold$elm_random_pcg$Random_Pcg$map2,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			genA,
			genB);
	});
var _mgold$elm_random_pcg$Random_Pcg$andMap = _mgold$elm_random_pcg$Random_Pcg$map2(
	F2(
		function (x, y) {
			return x(y);
		}));
var _mgold$elm_random_pcg$Random_Pcg$map3 = F4(
	function (func, _p22, _p21, _p20) {
		var _p23 = _p22;
		var _p24 = _p21;
		var _p25 = _p20;
		return _mgold$elm_random_pcg$Random_Pcg$Generator(
			function (seed0) {
				var _p26 = _p23._0(seed0);
				var a = _p26._0;
				var seed1 = _p26._1;
				var _p27 = _p24._0(seed1);
				var b = _p27._0;
				var seed2 = _p27._1;
				var _p28 = _p25._0(seed2);
				var c = _p28._0;
				var seed3 = _p28._1;
				return {
					ctor: '_Tuple2',
					_0: A3(func, a, b, c),
					_1: seed3
				};
			});
	});
var _mgold$elm_random_pcg$Random_Pcg$map4 = F5(
	function (func, _p32, _p31, _p30, _p29) {
		var _p33 = _p32;
		var _p34 = _p31;
		var _p35 = _p30;
		var _p36 = _p29;
		return _mgold$elm_random_pcg$Random_Pcg$Generator(
			function (seed0) {
				var _p37 = _p33._0(seed0);
				var a = _p37._0;
				var seed1 = _p37._1;
				var _p38 = _p34._0(seed1);
				var b = _p38._0;
				var seed2 = _p38._1;
				var _p39 = _p35._0(seed2);
				var c = _p39._0;
				var seed3 = _p39._1;
				var _p40 = _p36._0(seed3);
				var d = _p40._0;
				var seed4 = _p40._1;
				return {
					ctor: '_Tuple2',
					_0: A4(func, a, b, c, d),
					_1: seed4
				};
			});
	});
var _mgold$elm_random_pcg$Random_Pcg$map5 = F6(
	function (func, _p45, _p44, _p43, _p42, _p41) {
		var _p46 = _p45;
		var _p47 = _p44;
		var _p48 = _p43;
		var _p49 = _p42;
		var _p50 = _p41;
		return _mgold$elm_random_pcg$Random_Pcg$Generator(
			function (seed0) {
				var _p51 = _p46._0(seed0);
				var a = _p51._0;
				var seed1 = _p51._1;
				var _p52 = _p47._0(seed1);
				var b = _p52._0;
				var seed2 = _p52._1;
				var _p53 = _p48._0(seed2);
				var c = _p53._0;
				var seed3 = _p53._1;
				var _p54 = _p49._0(seed3);
				var d = _p54._0;
				var seed4 = _p54._1;
				var _p55 = _p50._0(seed4);
				var e = _p55._0;
				var seed5 = _p55._1;
				return {
					ctor: '_Tuple2',
					_0: A5(func, a, b, c, d, e),
					_1: seed5
				};
			});
	});
var _mgold$elm_random_pcg$Random_Pcg$andThen = F2(
	function (callback, _p56) {
		var _p57 = _p56;
		return _mgold$elm_random_pcg$Random_Pcg$Generator(
			function (seed) {
				var _p58 = _p57._0(seed);
				var result = _p58._0;
				var newSeed = _p58._1;
				var _p59 = callback(result);
				var generateB = _p59._0;
				return generateB(newSeed);
			});
	});
var _mgold$elm_random_pcg$Random_Pcg$maybe = F2(
	function (genBool, genA) {
		return A2(
			_mgold$elm_random_pcg$Random_Pcg$andThen,
			function (b) {
				return b ? A2(_mgold$elm_random_pcg$Random_Pcg$map, _elm_lang$core$Maybe$Just, genA) : _mgold$elm_random_pcg$Random_Pcg$constant(_elm_lang$core$Maybe$Nothing);
			},
			genBool);
	});
var _mgold$elm_random_pcg$Random_Pcg$filter = F2(
	function (predicate, generator) {
		return _mgold$elm_random_pcg$Random_Pcg$Generator(
			A2(_mgold$elm_random_pcg$Random_Pcg$retry, generator, predicate));
	});
var _mgold$elm_random_pcg$Random_Pcg$Seed = F2(
	function (a, b) {
		return {ctor: 'Seed', _0: a, _1: b};
	});
var _mgold$elm_random_pcg$Random_Pcg$next = function (_p60) {
	var _p61 = _p60;
	var _p62 = _p61._1;
	return A2(_mgold$elm_random_pcg$Random_Pcg$Seed, ((_p61._0 * 1664525) + _p62) >>> 0, _p62);
};
var _mgold$elm_random_pcg$Random_Pcg$initialSeed = function (x) {
	var _p63 = _mgold$elm_random_pcg$Random_Pcg$next(
		A2(_mgold$elm_random_pcg$Random_Pcg$Seed, 0, 1013904223));
	var state1 = _p63._0;
	var incr = _p63._1;
	var state2 = (state1 + x) >>> 0;
	return _mgold$elm_random_pcg$Random_Pcg$next(
		A2(_mgold$elm_random_pcg$Random_Pcg$Seed, state2, incr));
};
var _mgold$elm_random_pcg$Random_Pcg$generate = F2(
	function (toMsg, generator) {
		return A2(
			_elm_lang$core$Task$perform,
			toMsg,
			A2(
				_elm_lang$core$Task$map,
				function (_p64) {
					return _elm_lang$core$Tuple$first(
						A2(
							_mgold$elm_random_pcg$Random_Pcg$step,
							generator,
							_mgold$elm_random_pcg$Random_Pcg$initialSeed(
								_elm_lang$core$Basics$round(_p64))));
				},
				_elm_lang$core$Time$now));
	});
var _mgold$elm_random_pcg$Random_Pcg$int = F2(
	function (a, b) {
		return _mgold$elm_random_pcg$Random_Pcg$Generator(
			function (seed0) {
				var _p65 = (_elm_lang$core$Native_Utils.cmp(a, b) < 0) ? {ctor: '_Tuple2', _0: a, _1: b} : {ctor: '_Tuple2', _0: b, _1: a};
				var lo = _p65._0;
				var hi = _p65._1;
				var range = (hi - lo) + 1;
				if (_elm_lang$core$Native_Utils.eq((range - 1) & range, 0)) {
					return {
						ctor: '_Tuple2',
						_0: (((range - 1) & _mgold$elm_random_pcg$Random_Pcg$peel(seed0)) >>> 0) + lo,
						_1: _mgold$elm_random_pcg$Random_Pcg$next(seed0)
					};
				} else {
					var threshhold = A2(_elm_lang$core$Basics$rem, (0 - range) >>> 0, range) >>> 0;
					var accountForBias = function (seed) {
						accountForBias:
						while (true) {
							var seedN = _mgold$elm_random_pcg$Random_Pcg$next(seed);
							var x = _mgold$elm_random_pcg$Random_Pcg$peel(seed);
							if (_elm_lang$core$Native_Utils.cmp(x, threshhold) < 0) {
								var _v28 = seedN;
								seed = _v28;
								continue accountForBias;
							} else {
								return {
									ctor: '_Tuple2',
									_0: A2(_elm_lang$core$Basics$rem, x, range) + lo,
									_1: seedN
								};
							}
						}
					};
					return accountForBias(seed0);
				}
			});
	});
var _mgold$elm_random_pcg$Random_Pcg$bool = A2(
	_mgold$elm_random_pcg$Random_Pcg$map,
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.eq(x, y);
		})(1),
	A2(_mgold$elm_random_pcg$Random_Pcg$int, 0, 1));
var _mgold$elm_random_pcg$Random_Pcg$choice = F2(
	function (x, y) {
		return A2(
			_mgold$elm_random_pcg$Random_Pcg$map,
			function (b) {
				return b ? x : y;
			},
			_mgold$elm_random_pcg$Random_Pcg$bool);
	});
var _mgold$elm_random_pcg$Random_Pcg$oneIn = function (n) {
	return A2(
		_mgold$elm_random_pcg$Random_Pcg$map,
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(1),
		A2(_mgold$elm_random_pcg$Random_Pcg$int, 1, n));
};
var _mgold$elm_random_pcg$Random_Pcg$sample = function () {
	var find = F2(
		function (k, ys) {
			find:
			while (true) {
				var _p66 = ys;
				if (_p66.ctor === '[]') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					if (_elm_lang$core$Native_Utils.eq(k, 0)) {
						return _elm_lang$core$Maybe$Just(_p66._0);
					} else {
						var _v30 = k - 1,
							_v31 = _p66._1;
						k = _v30;
						ys = _v31;
						continue find;
					}
				}
			}
		});
	return function (xs) {
		return A2(
			_mgold$elm_random_pcg$Random_Pcg$map,
			function (i) {
				return A2(find, i, xs);
			},
			A2(
				_mgold$elm_random_pcg$Random_Pcg$int,
				0,
				_elm_lang$core$List$length(xs) - 1));
	};
}();
var _mgold$elm_random_pcg$Random_Pcg$float = F2(
	function (min, max) {
		return _mgold$elm_random_pcg$Random_Pcg$Generator(
			function (seed0) {
				var range = _elm_lang$core$Basics$abs(max - min);
				var n0 = _mgold$elm_random_pcg$Random_Pcg$peel(seed0);
				var hi = _elm_lang$core$Basics$toFloat(67108863 & n0) * 1.0;
				var seed1 = _mgold$elm_random_pcg$Random_Pcg$next(seed0);
				var n1 = _mgold$elm_random_pcg$Random_Pcg$peel(seed1);
				var lo = _elm_lang$core$Basics$toFloat(134217727 & n1) * 1.0;
				var val = ((hi * _mgold$elm_random_pcg$Random_Pcg$bit27) + lo) / _mgold$elm_random_pcg$Random_Pcg$bit53;
				var scaled = (val * range) + min;
				return {
					ctor: '_Tuple2',
					_0: scaled,
					_1: _mgold$elm_random_pcg$Random_Pcg$next(seed1)
				};
			});
	});
var _mgold$elm_random_pcg$Random_Pcg$frequency = function (pairs) {
	var pick = F2(
		function (choices, n) {
			pick:
			while (true) {
				var _p67 = choices;
				if ((_p67.ctor === '::') && (_p67._0.ctor === '_Tuple2')) {
					var _p68 = _p67._0._0;
					if (_elm_lang$core$Native_Utils.cmp(n, _p68) < 1) {
						return _p67._0._1;
					} else {
						var _v33 = _p67._1,
							_v34 = n - _p68;
						choices = _v33;
						n = _v34;
						continue pick;
					}
				} else {
					return _elm_lang$core$Native_Utils.crashCase(
						'Random.Pcg',
						{
							start: {line: 682, column: 13},
							end: {line: 690, column: 77}
						},
						_p67)('Empty list passed to Random.Pcg.frequency!');
				}
			}
		});
	var total = _elm_lang$core$List$sum(
		A2(
			_elm_lang$core$List$map,
			function (_p70) {
				return _elm_lang$core$Basics$abs(
					_elm_lang$core$Tuple$first(_p70));
			},
			pairs));
	return A2(
		_mgold$elm_random_pcg$Random_Pcg$andThen,
		pick(pairs),
		A2(_mgold$elm_random_pcg$Random_Pcg$float, 0, total));
};
var _mgold$elm_random_pcg$Random_Pcg$choices = function (gens) {
	return _mgold$elm_random_pcg$Random_Pcg$frequency(
		A2(
			_elm_lang$core$List$map,
			function (g) {
				return {ctor: '_Tuple2', _0: 1, _1: g};
			},
			gens));
};
var _mgold$elm_random_pcg$Random_Pcg$independentSeed = _mgold$elm_random_pcg$Random_Pcg$Generator(
	function (seed0) {
		var gen = A2(_mgold$elm_random_pcg$Random_Pcg$int, 0, -1);
		var _p71 = A2(
			_mgold$elm_random_pcg$Random_Pcg$step,
			A4(
				_mgold$elm_random_pcg$Random_Pcg$map3,
				F3(
					function (v0, v1, v2) {
						return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
					}),
				gen,
				gen,
				gen),
			seed0);
		var state = _p71._0._0;
		var b = _p71._0._1;
		var c = _p71._0._2;
		var seed1 = _p71._1;
		var incr = 1 | (b ^ c);
		return {
			ctor: '_Tuple2',
			_0: seed1,
			_1: _mgold$elm_random_pcg$Random_Pcg$next(
				A2(_mgold$elm_random_pcg$Random_Pcg$Seed, state, incr))
		};
	});
var _mgold$elm_random_pcg$Random_Pcg$fastForward = F2(
	function (delta0, _p72) {
		var _p73 = _p72;
		var _p76 = _p73._1;
		var helper = F6(
			function (accMult, accPlus, curMult, curPlus, delta, repeat) {
				helper:
				while (true) {
					var newDelta = delta >>> 1;
					var curMult_ = A2(_mgold$elm_random_pcg$Random_Pcg$mul32, curMult, curMult);
					var curPlus_ = A2(_mgold$elm_random_pcg$Random_Pcg$mul32, curMult + 1, curPlus);
					var _p74 = _elm_lang$core$Native_Utils.eq(delta & 1, 1) ? {
						ctor: '_Tuple2',
						_0: A2(_mgold$elm_random_pcg$Random_Pcg$mul32, accMult, curMult),
						_1: (A2(_mgold$elm_random_pcg$Random_Pcg$mul32, accPlus, curMult) + curPlus) >>> 0
					} : {ctor: '_Tuple2', _0: accMult, _1: accPlus};
					var accMult_ = _p74._0;
					var accPlus_ = _p74._1;
					if (_elm_lang$core$Native_Utils.eq(newDelta, 0)) {
						if ((_elm_lang$core$Native_Utils.cmp(delta0, 0) < 0) && repeat) {
							var _v36 = accMult_,
								_v37 = accPlus_,
								_v38 = curMult_,
								_v39 = curPlus_,
								_v40 = -1,
								_v41 = false;
							accMult = _v36;
							accPlus = _v37;
							curMult = _v38;
							curPlus = _v39;
							delta = _v40;
							repeat = _v41;
							continue helper;
						} else {
							return {ctor: '_Tuple2', _0: accMult_, _1: accPlus_};
						}
					} else {
						var _v42 = accMult_,
							_v43 = accPlus_,
							_v44 = curMult_,
							_v45 = curPlus_,
							_v46 = newDelta,
							_v47 = repeat;
						accMult = _v42;
						accPlus = _v43;
						curMult = _v44;
						curPlus = _v45;
						delta = _v46;
						repeat = _v47;
						continue helper;
					}
				}
			});
		var _p75 = A6(helper, 1, 0, 1664525, _p76, delta0, true);
		var accMultFinal = _p75._0;
		var accPlusFinal = _p75._1;
		return A2(
			_mgold$elm_random_pcg$Random_Pcg$Seed,
			(A2(_mgold$elm_random_pcg$Random_Pcg$mul32, accMultFinal, _p73._0) + accPlusFinal) >>> 0,
			_p76);
	});
var _mgold$elm_random_pcg$Random_Pcg$fromJson = _elm_lang$core$Json_Decode$oneOf(
	{
		ctor: '::',
		_0: A3(
			_elm_lang$core$Json_Decode$map2,
			_mgold$elm_random_pcg$Random_Pcg$Seed,
			A2(_elm_lang$core$Json_Decode$index, 0, _elm_lang$core$Json_Decode$int),
			A2(_elm_lang$core$Json_Decode$index, 1, _elm_lang$core$Json_Decode$int)),
		_1: {
			ctor: '::',
			_0: A2(_elm_lang$core$Json_Decode$map, _mgold$elm_random_pcg$Random_Pcg$initialSeed, _elm_lang$core$Json_Decode$int),
			_1: {ctor: '[]'}
		}
	});

var _mordrax$cotwelm$Utils_Direction$SW = {ctor: 'SW'};
var _mordrax$cotwelm$Utils_Direction$SE = {ctor: 'SE'};
var _mordrax$cotwelm$Utils_Direction$NW = {ctor: 'NW'};
var _mordrax$cotwelm$Utils_Direction$NE = {ctor: 'NE'};
var _mordrax$cotwelm$Utils_Direction$W = {ctor: 'W'};
var _mordrax$cotwelm$Utils_Direction$S = {ctor: 'S'};
var _mordrax$cotwelm$Utils_Direction$E = {ctor: 'E'};
var _mordrax$cotwelm$Utils_Direction$N = {ctor: 'N'};
var _mordrax$cotwelm$Utils_Direction$cardinalDirections = {
	ctor: '::',
	_0: _mordrax$cotwelm$Utils_Direction$N,
	_1: {
		ctor: '::',
		_0: _mordrax$cotwelm$Utils_Direction$E,
		_1: {
			ctor: '::',
			_0: _mordrax$cotwelm$Utils_Direction$S,
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$Utils_Direction$W,
				_1: {ctor: '[]'}
			}
		}
	}
};
var _mordrax$cotwelm$Utils_Direction$isCardinal = function (dir) {
	return A2(_elm_lang$core$List$member, dir, _mordrax$cotwelm$Utils_Direction$cardinalDirections);
};
var _mordrax$cotwelm$Utils_Direction$directions = {
	ctor: '::',
	_0: _mordrax$cotwelm$Utils_Direction$N,
	_1: {
		ctor: '::',
		_0: _mordrax$cotwelm$Utils_Direction$E,
		_1: {
			ctor: '::',
			_0: _mordrax$cotwelm$Utils_Direction$S,
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$Utils_Direction$W,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Utils_Direction$NE,
					_1: {
						ctor: '::',
						_0: _mordrax$cotwelm$Utils_Direction$NW,
						_1: {
							ctor: '::',
							_0: _mordrax$cotwelm$Utils_Direction$SE,
							_1: {
								ctor: '::',
								_0: _mordrax$cotwelm$Utils_Direction$SW,
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	}
};
var _mordrax$cotwelm$Utils_Direction$adjacent = function (a) {
	var _p0 = a;
	switch (_p0.ctor) {
		case 'N':
			return {
				ctor: '::',
				_0: _mordrax$cotwelm$Utils_Direction$NW,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Utils_Direction$NE,
					_1: {ctor: '[]'}
				}
			};
		case 'E':
			return {
				ctor: '::',
				_0: _mordrax$cotwelm$Utils_Direction$NE,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Utils_Direction$SE,
					_1: {ctor: '[]'}
				}
			};
		case 'S':
			return {
				ctor: '::',
				_0: _mordrax$cotwelm$Utils_Direction$SW,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Utils_Direction$SE,
					_1: {ctor: '[]'}
				}
			};
		case 'W':
			return {
				ctor: '::',
				_0: _mordrax$cotwelm$Utils_Direction$NW,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Utils_Direction$SW,
					_1: {ctor: '[]'}
				}
			};
		case 'NE':
			return {
				ctor: '::',
				_0: _mordrax$cotwelm$Utils_Direction$N,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Utils_Direction$E,
					_1: {ctor: '[]'}
				}
			};
		case 'NW':
			return {
				ctor: '::',
				_0: _mordrax$cotwelm$Utils_Direction$N,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Utils_Direction$W,
					_1: {ctor: '[]'}
				}
			};
		case 'SE':
			return {
				ctor: '::',
				_0: _mordrax$cotwelm$Utils_Direction$S,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Utils_Direction$E,
					_1: {ctor: '[]'}
				}
			};
		default:
			return {
				ctor: '::',
				_0: _mordrax$cotwelm$Utils_Direction$S,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Utils_Direction$W,
					_1: {ctor: '[]'}
				}
			};
	}
};
var _mordrax$cotwelm$Utils_Direction$isAdjacent = F2(
	function (a, b) {
		return A2(
			_elm_lang$core$List$member,
			b,
			_mordrax$cotwelm$Utils_Direction$adjacent(a));
	});
var _mordrax$cotwelm$Utils_Direction$perpendicular = function (a) {
	var _p1 = a;
	switch (_p1.ctor) {
		case 'N':
			return {
				ctor: '::',
				_0: _mordrax$cotwelm$Utils_Direction$W,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Utils_Direction$E,
					_1: {ctor: '[]'}
				}
			};
		case 'E':
			return {
				ctor: '::',
				_0: _mordrax$cotwelm$Utils_Direction$N,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Utils_Direction$S,
					_1: {ctor: '[]'}
				}
			};
		case 'S':
			return {
				ctor: '::',
				_0: _mordrax$cotwelm$Utils_Direction$W,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Utils_Direction$E,
					_1: {ctor: '[]'}
				}
			};
		case 'W':
			return {
				ctor: '::',
				_0: _mordrax$cotwelm$Utils_Direction$N,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Utils_Direction$S,
					_1: {ctor: '[]'}
				}
			};
		case 'NE':
			return {
				ctor: '::',
				_0: _mordrax$cotwelm$Utils_Direction$NW,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Utils_Direction$SE,
					_1: {ctor: '[]'}
				}
			};
		case 'NW':
			return {
				ctor: '::',
				_0: _mordrax$cotwelm$Utils_Direction$NE,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Utils_Direction$SW,
					_1: {ctor: '[]'}
				}
			};
		case 'SE':
			return {
				ctor: '::',
				_0: _mordrax$cotwelm$Utils_Direction$SW,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Utils_Direction$NE,
					_1: {ctor: '[]'}
				}
			};
		default:
			return {
				ctor: '::',
				_0: _mordrax$cotwelm$Utils_Direction$SE,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Utils_Direction$NW,
					_1: {ctor: '[]'}
				}
			};
	}
};
var _mordrax$cotwelm$Utils_Direction$isPerpendicular = F2(
	function (a, b) {
		return A2(
			_elm_lang$core$List$member,
			a,
			_mordrax$cotwelm$Utils_Direction$perpendicular(b));
	});

var _mordrax$cotwelm$Utils_Vector$range = F2(
	function (x, y) {
		return (_elm_lang$core$Native_Utils.cmp(x, y) < 0) ? A2(_elm_lang$core$List$range, x, y) : _elm_lang$core$List$reverse(
			A2(_elm_lang$core$List$range, y, x));
	});
var _mordrax$cotwelm$Utils_Vector$path = F2(
	function (_p1, _p0) {
		var _p2 = _p1;
		var _p7 = _p2._1;
		var _p6 = _p2._0;
		var _p3 = _p0;
		var _p5 = _p3._1;
		var _p4 = _p3._0;
		var length = A2(
			_elm_lang$core$Basics$max,
			_elm_lang$core$Basics$abs(_p6 - _p4),
			_elm_lang$core$Basics$abs(_p7 - _p5)) + 1;
		var rangeX = _elm_lang$core$Native_Utils.eq(_p6, _p4) ? A2(_elm_lang$core$List$repeat, length, _p6) : A2(_mordrax$cotwelm$Utils_Vector$range, _p6, _p4);
		var rangeY = _elm_lang$core$Native_Utils.eq(_p7, _p5) ? A2(_elm_lang$core$List$repeat, length, _p7) : A2(_mordrax$cotwelm$Utils_Vector$range, _p7, _p5);
		return A3(
			_elm_lang$core$List$map2,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			rangeX,
			rangeY);
	});
var _mordrax$cotwelm$Utils_Vector$boxIntersectYAxis = F2(
	function (yAxis, _p8) {
		var _p9 = _p8;
		return (_elm_lang$core$Native_Utils.cmp(yAxis, _p9._0._1) > -1) && (_elm_lang$core$Native_Utils.cmp(yAxis, _p9._1._1) < 1);
	});
var _mordrax$cotwelm$Utils_Vector$boxIntersectXAxis = F2(
	function (xAxis, _p10) {
		var _p11 = _p10;
		return (_elm_lang$core$Native_Utils.cmp(xAxis, _p11._0._0) > -1) && (_elm_lang$core$Native_Utils.cmp(xAxis, _p11._1._0) < 1);
	});
var _mordrax$cotwelm$Utils_Vector$boxIntersectVector = F2(
	function (_p13, _p12) {
		var _p14 = _p13;
		var _p17 = _p14._1;
		var _p16 = _p14._0;
		var _p15 = _p12;
		var isWithinY = (_elm_lang$core$Native_Utils.cmp(_p17, _p15._0._1) > -1) && (_elm_lang$core$Native_Utils.cmp(_p17, _p15._1._1) < 1);
		var isWithinX = (_elm_lang$core$Native_Utils.cmp(_p16, _p15._0._0) > -1) && (_elm_lang$core$Native_Utils.cmp(_p16, _p15._1._0) < 1);
		return isWithinX && isWithinY;
	});
var _mordrax$cotwelm$Utils_Vector$fromDirection = function (dir) {
	var _p18 = dir;
	switch (_p18.ctor) {
		case 'N':
			return {ctor: '_Tuple2', _0: 0, _1: 1};
		case 'S':
			return {ctor: '_Tuple2', _0: 0, _1: -1};
		case 'E':
			return {ctor: '_Tuple2', _0: 1, _1: 0};
		case 'W':
			return {ctor: '_Tuple2', _0: -1, _1: 0};
		case 'NE':
			return {ctor: '_Tuple2', _0: 1, _1: 1};
		case 'NW':
			return {ctor: '_Tuple2', _0: -1, _1: 1};
		case 'SE':
			return {ctor: '_Tuple2', _0: 1, _1: -1};
		default:
			return {ctor: '_Tuple2', _0: -1, _1: -1};
	}
};
var _mordrax$cotwelm$Utils_Vector$toComparable = function (_p19) {
	var _p20 = _p19;
	return {
		ctor: '_Tuple2',
		_0: _p20._0,
		_1: _mordrax$cotwelm$Utils_Vector$fromDirection(_p20._1)
	};
};
var _mordrax$cotwelm$Utils_Vector$mul = F2(
	function (_p22, _p21) {
		var _p23 = _p22;
		var _p24 = _p21;
		return {ctor: '_Tuple2', _0: _p23._0 * _p24._0, _1: _p23._1 * _p24._1};
	});
var _mordrax$cotwelm$Utils_Vector$toDirected = F2(
	function (d, v) {
		return {ctor: '_Tuple2', _0: v, _1: d};
	});
var _mordrax$cotwelm$Utils_Vector$directions = _elm_lang$core$Dict$fromList(
	{
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: {ctor: '_Tuple2', _0: 0, _1: 1},
			_1: _mordrax$cotwelm$Utils_Direction$N
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: {ctor: '_Tuple2', _0: 0, _1: -1},
				_1: _mordrax$cotwelm$Utils_Direction$S
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: {ctor: '_Tuple2', _0: 1, _1: 0},
					_1: _mordrax$cotwelm$Utils_Direction$E
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: {ctor: '_Tuple2', _0: -1, _1: 0},
						_1: _mordrax$cotwelm$Utils_Direction$W
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: {ctor: '_Tuple2', _0: 1, _1: 1},
							_1: _mordrax$cotwelm$Utils_Direction$NE
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: {ctor: '_Tuple2', _0: -1, _1: 1},
								_1: _mordrax$cotwelm$Utils_Direction$NW
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: {ctor: '_Tuple2', _0: 1, _1: -1},
									_1: _mordrax$cotwelm$Utils_Direction$SE
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: {ctor: '_Tuple2', _0: -1, _1: -1},
										_1: _mordrax$cotwelm$Utils_Direction$SW
									},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		}
	});
var _mordrax$cotwelm$Utils_Vector$rotate = F2(
	function (_p25, dir) {
		var _p26 = _p25;
		var angle = function () {
			var _p27 = dir;
			if (_p27.ctor === 'Left') {
				return 45;
			} else {
				return -45;
			}
		}();
		var _p28 = {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Basics$toFloat(_p26._0),
			_1: _elm_lang$core$Basics$toFloat(_p26._1)
		};
		var x = _p28._0;
		var y = _p28._1;
		var x_ = (x * _elm_lang$core$Basics$cos(angle)) - (y * _elm_lang$core$Basics$sin(angle));
		var y_ = (x * _elm_lang$core$Basics$sin(angle)) + (y * _elm_lang$core$Basics$cos(angle));
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Basics$round(x_),
			_1: _elm_lang$core$Basics$round(y_)
		};
	});
var _mordrax$cotwelm$Utils_Vector$rotateUnlessCardinal = F2(
	function (currentDirection, rotation) {
		var cardinalVectors = A2(_elm_lang$core$List$map, _mordrax$cotwelm$Utils_Vector$fromDirection, _mordrax$cotwelm$Utils_Direction$cardinalDirections);
		return A2(_elm_lang$core$List$member, currentDirection, cardinalVectors) ? currentDirection : A2(_mordrax$cotwelm$Utils_Vector$rotate, currentDirection, rotation);
	});
var _mordrax$cotwelm$Utils_Vector$map = F2(
	function (f, _p29) {
		var _p30 = _p29;
		return {
			ctor: '_Tuple2',
			_0: f(_p30._0),
			_1: f(_p30._1)
		};
	});
var _mordrax$cotwelm$Utils_Vector$adjacent = F2(
	function (_p32, _p31) {
		var _p33 = _p32;
		var _p34 = _p31;
		return (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$Basics$abs(_p33._0 - _p34._0),
			1) < 1) && (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$Basics$abs(_p33._1 - _p34._1),
			1) < 1);
	});
var _mordrax$cotwelm$Utils_Vector$scale = F2(
	function (magnitude, _p35) {
		var _p36 = _p35;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Basics$round(
				_elm_lang$core$Basics$toFloat(_p36._0) * magnitude),
			_1: _elm_lang$core$Basics$round(
				_elm_lang$core$Basics$toFloat(_p36._1) * magnitude)
		};
	});
var _mordrax$cotwelm$Utils_Vector$scaleInt = function (magnitude) {
	return _mordrax$cotwelm$Utils_Vector$scale(
		_elm_lang$core$Basics$toFloat(magnitude));
};
var _mordrax$cotwelm$Utils_Vector$sub = F2(
	function (_p38, _p37) {
		var _p39 = _p38;
		var _p40 = _p37;
		return {ctor: '_Tuple2', _0: _p39._0 - _p40._0, _1: _p39._1 - _p40._1};
	});
var _mordrax$cotwelm$Utils_Vector$distance = F2(
	function (_p42, _p41) {
		var _p43 = _p42;
		var _p44 = _p41;
		var _p45 = A2(
			_mordrax$cotwelm$Utils_Vector$sub,
			{ctor: '_Tuple2', _0: _p43._0, _1: _p43._1},
			{ctor: '_Tuple2', _0: _p44._0, _1: _p44._1});
		var dx = _p45._0;
		var dy = _p45._1;
		return _elm_lang$core$Basics$sqrt(
			_elm_lang$core$Basics$toFloat(
				Math.pow(dx, 2) + Math.pow(dy, 2)));
	});
var _mordrax$cotwelm$Utils_Vector$add = F2(
	function (_p47, _p46) {
		var _p48 = _p47;
		var _p49 = _p46;
		return {ctor: '_Tuple2', _0: _p48._0 + _p49._0, _1: _p48._1 + _p49._1};
	});
var _mordrax$cotwelm$Utils_Vector$advance = function (_p50) {
	var _p51 = _p50;
	return A2(
		_mordrax$cotwelm$Utils_Vector$add,
		_p51._0,
		_mordrax$cotwelm$Utils_Vector$fromDirection(_p51._1));
};
var _mordrax$cotwelm$Utils_Vector$neighbours = function (position) {
	return A2(
		_elm_lang$core$List$map,
		_mordrax$cotwelm$Utils_Vector$advance,
		A2(
			_elm_lang$core$List$map,
			function (direction) {
				return {ctor: '_Tuple2', _0: position, _1: direction};
			},
			_mordrax$cotwelm$Utils_Direction$directions));
};
var _mordrax$cotwelm$Utils_Vector$cardinalNeighbours = function (_p52) {
	var _p53 = _p52;
	return A2(
		_elm_lang$core$List$map,
		_mordrax$cotwelm$Utils_Vector$add(
			{ctor: '_Tuple2', _0: _p53._0, _1: _p53._1}),
		A2(_elm_lang$core$List$map, _mordrax$cotwelm$Utils_Vector$fromDirection, _mordrax$cotwelm$Utils_Direction$cardinalDirections));
};
var _mordrax$cotwelm$Utils_Vector$unit = function (_p54) {
	var _p55 = _p54;
	var _p57 = _p55._1;
	var _p56 = _p55._0;
	return {
		ctor: '_Tuple2',
		_0: (_p56 / _elm_lang$core$Basics$abs(_p56)) | 0,
		_1: (_p57 / _elm_lang$core$Basics$abs(_p57)) | 0
	};
};
var _mordrax$cotwelm$Utils_Vector$toDirection = function (vector) {
	var _p58 = A2(
		_elm_lang$core$Dict$get,
		_mordrax$cotwelm$Utils_Vector$unit(vector),
		_mordrax$cotwelm$Utils_Vector$directions);
	if (_p58.ctor === 'Just') {
		return _p58._0;
	} else {
		var _p59 = A2(
			_elm_lang$core$Debug$log,
			'ERROR: Could not get a direction from the unit vector: ',
			_mordrax$cotwelm$Utils_Vector$unit(vector));
		return _mordrax$cotwelm$Utils_Direction$W;
	}
};
var _mordrax$cotwelm$Utils_Vector$rotateCompass = F2(
	function (compass, rotation) {
		return _mordrax$cotwelm$Utils_Vector$toDirection(
			A3(
				_elm_lang$core$Basics$flip,
				_mordrax$cotwelm$Utils_Vector$rotate,
				rotation,
				_mordrax$cotwelm$Utils_Vector$fromDirection(compass)));
	});
var _mordrax$cotwelm$Utils_Vector$facing = F2(
	function (start, end) {
		return _mordrax$cotwelm$Utils_Vector$toDirection(
			_mordrax$cotwelm$Utils_Vector$unit(
				A2(_mordrax$cotwelm$Utils_Vector$sub, end, start)));
	});
var _mordrax$cotwelm$Utils_Vector$oppositeDirection = function (dir) {
	return _mordrax$cotwelm$Utils_Vector$toDirection(
		A2(
			_mordrax$cotwelm$Utils_Vector$scaleInt,
			-1,
			_mordrax$cotwelm$Utils_Vector$fromDirection(dir)));
};
var _mordrax$cotwelm$Utils_Vector$fromComparable = function (_p60) {
	var _p61 = _p60;
	return {
		ctor: '_Tuple2',
		_0: _p61._0,
		_1: _mordrax$cotwelm$Utils_Vector$toDirection(_p61._1)
	};
};
var _mordrax$cotwelm$Utils_Vector$zero = {ctor: '_Tuple2', _0: 0, _1: 0};
var _mordrax$cotwelm$Utils_Vector$Right = {ctor: 'Right'};
var _mordrax$cotwelm$Utils_Vector$Left = {ctor: 'Left'};

var _mordrax$cotwelm$ASCIIMaps$dungeonLevelOneMap = {
	ctor: '_Tuple2',
	_0: {
		ctor: '::',
		_0: '^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^',
		_1: {
			ctor: '::',
			_0: '^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^',
			_1: {
				ctor: '::',
				_0: '^^^^^^^^^^^^^^^^^^^dooo^^ood^^^^^^^^^^^^^',
				_1: {
					ctor: '::',
					_0: '^^^^^^^^^^^^^^^^^doooooddooo^^^^^^^^^^^^^',
					_1: {
						ctor: '::',
						_0: '^^^^^^^^^^^^^^^^doddoooooooo^^^^^^^^^^^^^',
						_1: {
							ctor: '::',
							_0: '^^^^^^^^^^^^^^^dod^^oooo^ooo^^^^^^^^^^^^^',
							_1: {
								ctor: '::',
								_0: '^^^^^^^^^^^^^^^od^^^oooo^ooo^^^^^^^^^^^^^',
								_1: {
									ctor: '::',
									_0: '^^^^^^^^^^^^^^^o^^^^dooo^ooo^^^^^^^^^^^^^',
									_1: {
										ctor: '::',
										_0: '^^^^^^^^^^^^^^^o^^^^^dod^dod^^^^^^^^^^^^^',
										_1: {
											ctor: '::',
											_0: '^^^^^^^^^^^^^^^od^^^^^^^^^^^^^^^^^^^^^^^^',
											_1: {
												ctor: '::',
												_0: '^^^^^^^^^^^^^^^dod^^^^^^^^^^^^^^^^^^^^^^^',
												_1: {
													ctor: '::',
													_0: '^^^^^^^^^^^^^^^^dod^^^^^^^^^^^^^^^^^^^^^^',
													_1: {
														ctor: '::',
														_0: '^^^^^^^^^^^^^^^^^do^^^^^^^^^^^^^^^^^^^^^^',
														_1: {
															ctor: '::',
															_0: '^^^^^^^^^^^^^^^^^^o^^^^^^^^^^^^^^^^^^^^^^',
															_1: {
																ctor: '::',
																_0: '^^^^^^^^^^^^^^^^^^od^^^^^^^^^^^^^^^^^^^^^',
																_1: {
																	ctor: '::',
																	_0: '^^^^^^^^^^^^^^^^^^dod^^^^^^^^^^^^^^^^^^^^',
																	_1: {
																		ctor: '::',
																		_0: '^^^^^^^^^^^^^^^^^^^dod^^^^^^^^^^^^^^^^^^^',
																		_1: {
																			ctor: '::',
																			_0: '^^^^^^^^^^^^^^^^^^^^dod^^^^^^^^^^^^^^^^^^',
																			_1: {
																				ctor: '::',
																				_0: '^^^^^^^^^^^^^^^^^^^^^do^^^^^^^^^^^^^^^^^^',
																				_1: {
																					ctor: '::',
																					_0: '^^^^^^^^^^^^dood^^^^^^o^^^^^^^^^^^^^^^^^^',
																					_1: {
																						ctor: '::',
																						_0: '^^^^^^^^^^^^ooood^^^^^o^^^^^^^^^^doood^^^',
																						_1: {
																							ctor: '::',
																							_0: '^^^^^^^^^^^^oooooo^^^^o^^^^^^^^^^ooooo^^^',
																							_1: {
																								ctor: '::',
																								_0: '^^^^^^^^^^^^dooooo^^^^o^^^^^^^^^^ooooo^^^',
																								_1: {
																									ctor: '::',
																									_0: '^^^^^^^^^^^^^o^^^^^^^^o^^^^^^^^^dooooo^^^',
																									_1: {
																										ctor: '::',
																										_0: '^^^^^^^^^^^^^o^^^^^^^^o^^^^^dooooooooo^^^',
																										_1: {
																											ctor: '::',
																											_0: '^^^^^^^^^^^^^o^^^^^^^^o^^^^dod^^^doooo^^^',
																											_1: {
																												ctor: '::',
																												_0: '^^^^^^^^^^^^^od^^^^^^^od^^dod^^^^^^^oo^^^',
																												_1: {
																													ctor: '::',
																													_0: '^^^^^^^^^^^^^dod^^^^^^doddod^^^^^^^ood^^^',
																													_1: {
																														ctor: '::',
																														_0: '^^^^^^^^^^^^^^dod^^^^^^dood^^^^^^^^^^^^^^',
																														_1: {
																															ctor: '::',
																															_0: '^^^^^^^^^^^^^^^do^^^^^^^o^^^^^^^^^^^^^^^^',
																															_1: {
																																ctor: '::',
																																_0: '^^^^^^^^^^^^^^^^od^^^^^^o^^^^^^^^^^^^^^^^',
																																_1: {
																																	ctor: '::',
																																	_0: '^^^^^^^^^^^^^^^^dod^^^^^o^^^^^^^^^^^^^^^^',
																																	_1: {
																																		ctor: '::',
																																		_0: '^^^^^^^^^^^^^^^^^dod^^^do^^^^^^^^^^^^^^^^',
																																		_1: {
																																			ctor: '::',
																																			_0: '^^^^^^^^^^^^^^^^^^dod^^od^^^^^^^^^^^^^^^^',
																																			_1: {
																																				ctor: '::',
																																				_0: '^^^^^^^^^^^^^^^^^^^doddo^^^^^^^^^^^^^^^^^',
																																				_1: {
																																					ctor: '::',
																																					_0: '^^^^^^^^^^^^^^^^^^^^dood^^^^^^^^^^^^^^^^^',
																																					_1: {
																																						ctor: '::',
																																						_0: '^^^^^^^^^^^^^^^^^^^^^do^^^^^^^^^^^^^^^^^^',
																																						_1: {
																																							ctor: '::',
																																							_0: '^^^^^^^^^^^^^^^^^^^^^^o^^^^^^^^^^^^^^^^^^',
																																							_1: {
																																								ctor: '::',
																																								_0: '^^^^^^^^^^^^^^^^^^^^^^o^^^^^^^^^^^^^^^^^^',
																																								_1: {
																																									ctor: '::',
																																									_0: '^^^^^^^^^^^^^^^^^^^^^^o^^^^^^^^^^^^^^^^^^',
																																									_1: {
																																										ctor: '::',
																																										_0: '^^^^^^^^^^^^^^^^^^^^^^.^^^^^^^^^^^^^^^^^^',
																																										_1: {ctor: '[]'}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	},
	_1: {ctor: '[]'}
};
var _mordrax$cotwelm$ASCIIMaps$farmMap = {
	ctor: '_Tuple2',
	_0: {
		ctor: '::',
		_0: '^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^',
		_1: {
			ctor: '::',
			_0: '^^^^^^^^^^^^^^^^^^^^^^^^#^^^^^^^^^^^^^^^^^^^^^^^^',
			_1: {
				ctor: '::',
				_0: '^^^^^^^^^^^^^^^^^^^^^^^^.^^^^^^^^^^^^^^^^^^^^^^^^',
				_1: {
					ctor: '::',
					_0: '^^^^^^^^^^^^^^^^^^^^^^^^.,,,^^^^^^^^^^^^^^^^^^^^^',
					_1: {
						ctor: '::',
						_0: '^^^^^^^^^^^^^^^^^^^^^^,,.,,,,,^^^^^^^^^^^^^^^^^^^',
						_1: {
							ctor: '::',
							_0: '^^^^^^^^^^^^^^^^^,,,,,,,.,,,,,,^^^^^^^^^^^^^^^^^^',
							_1: {
								ctor: '::',
								_0: '^^^^^^^^^^^^^^^^,,,,,,,,.,,,,,,,,,^^^^^^^^^^^^^^^',
								_1: {
									ctor: '::',
									_0: ',,,,,,,,,,,,,,,,,,,,,,,,.,,,,,,,,,,,,,,,,,,,,,,,,',
									_1: {
										ctor: '::',
										_0: ',,,,,,,,,,,,,,,,,,,,,,,,.,,,,,,,,,,,,,,,,,,,,,,,,',
										_1: {
											ctor: '::',
											_0: ',,,,,,,,,,,,,,,,,,,,,,,,.,,,,,,,,,,,,,,,,,,,,,,,,',
											_1: {
												ctor: '::',
												_0: ',,,,,,,,,,,,,,,,,,,,,,,,.,,,,,,,,,,,,,,,,,,,,,,,,',
												_1: {
													ctor: '::',
													_0: ',,,,,,,,,,,,,,,,,,,,,,,,.,,,,,,,,,,,,,,,,,,,,,,,,',
													_1: {
														ctor: '::',
														_0: ',,,,,,,,,,,,,,,,,,,,,,,,.,,,,,,,,,,,,,,,,,,,,,,,,',
														_1: {
															ctor: '::',
															_0: ',,,,,,,,,,,,,,,,,,,,,,,,.,,,,,,,,,,,,,,,,,,,,,,,,',
															_1: {
																ctor: '::',
																_0: ',,,,,,,,,,,,,,,,,,,,,,,,.,,,,,,,,,,,,,,,,,,,,,,,,',
																_1: {
																	ctor: '::',
																	_0: '.................................................',
																	_1: {
																		ctor: '::',
																		_0: '.................................................',
																		_1: {
																			ctor: '::',
																			_0: ',,,,,,,,,,,,,,,,,,,,,,,..;,,,,,,,,,,,,,,,,,,,,,,,',
																			_1: {
																				ctor: '::',
																				_0: ',,,,,,,,,,,,,,,,,,,,,,;.;,,,,,,,,,,,,,,,,,,,,,,,,',
																				_1: {
																					ctor: '::',
																					_0: ',,,,,,,,,,,,,,,,,,,,,;.;,,,,,,,,,,,,,,,,,,,,,,,,=',
																					_1: {
																						ctor: '::',
																						_0: ',,,,,,,,,,,,,,,,,,,,;.;,,,,,,,,,,,,,,,,,,,,,,,,,=',
																						_1: {
																							ctor: '::',
																							_0: ',,,,,,,,,,,,,,,,,,,;.;,,,,,,,,,,,,,,,,,,,,,,,,,,=',
																							_1: {
																								ctor: '::',
																								_0: ',,,,,,,,,,,,,,,,,,;.;,,,,,,,,,,,,,,,,,,,,,,,,,,,=',
																								_1: {
																									ctor: '::',
																									_0: ',,,,,,,,,,,,,,,,,;.;,,,,,,,,,,,,,,,,,,,,,,,###,,=',
																									_1: {
																										ctor: '::',
																										_0: ',,,,,,,,,,,,,,,,;..........................###,,=',
																										_1: {
																											ctor: '::',
																											_0: ',,,,,,,,,,,,,,,;.;,,,,,,,,,,,,,,,,,,,,,,,,,###,,=',
																											_1: {
																												ctor: '::',
																												_0: ',,,,,,,,,,,,,,;.;,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,=',
																												_1: {
																													ctor: '::',
																													_0: ',,,,,,,,,,,,,;.;,,,,,,,,,,,,,,,,,,,,,,,,,,=======',
																													_1: {
																														ctor: '::',
																														_0: ',,,,,,,,,,,,;.;,,,,,,,,,,,,,,,,,,,,,,,,,,,=======',
																														_1: {
																															ctor: '::',
																															_0: '========,,,;.;,,,,,,,,,,,,,,,,,,,,,,,,,,,,=======',
																															_1: {
																																ctor: '::',
																																_0: '========,,,.;,,,,,,,,,,,,,,,,,,,,,,,,,,,,,=======',
																																_1: {
																																	ctor: '::',
																																	_0: '========,,,.,,,,,=======,,,,,,,,,,,,,,,,,,=======',
																																	_1: {
																																		ctor: '::',
																																		_0: '========,,###,,,,=======,,,,,,,,,,,,,,,,,,,,,,,,,',
																																		_1: {ctor: '[]'}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	},
	_1: {ctor: '[]'}
};
var _mordrax$cotwelm$ASCIIMaps$villageMap = {
	ctor: '_Tuple2',
	_0: {
		ctor: '::',
		_0: '========,,###,,,========',
		_1: {
			ctor: '::',
			_0: '========,,,.,,,,========',
			_1: {
				ctor: '::',
				_0: '========,,,.,,,,========',
				_1: {
					ctor: '::',
					_0: '========,,,.,,,,========',
					_1: {
						ctor: '::',
						_0: '========,,,.,,,,========',
						_1: {
							ctor: '::',
							_0: '===,,,,,;...,,,!###=====',
							_1: {
								ctor: '::',
								_0: '===###!;.;,.,,;.###=====',
								_1: {
									ctor: '::',
									_0: '===###..;,,.,;.;###=====',
									_1: {
										ctor: '::',
										_0: '===###,,,,,...;,,,,,,===',
										_1: {
											ctor: '::',
											_0: '===,,,,,,,,.,,,,,,,,,===',
											_1: {
												ctor: '::',
												_0: '====,,,,,,,.,,,,,,,,,===',
												_1: {
													ctor: '::',
													_0: '====,,,,,,,.,,,,,,,,,===',
													_1: {
														ctor: '::',
														_0: '====,,,,,,,.,!###,,,,===',
														_1: {
															ctor: '::',
															_0: '====,,,##.....###,,,,===',
															_1: {
																ctor: '::',
																_0: '====,,,##!,.,,###,,,,===',
																_1: {
																	ctor: '::',
																	_0: '====,,,,,,,.,,,,,,,,,===',
																	_1: {
																		ctor: '::',
																		_0: '====,,,,,,,.,,,,,,,,,===',
																		_1: {
																			ctor: '::',
																			_0: '====,,###!...!###,======',
																			_1: {
																				ctor: '::',
																				_0: '====,,###..e..###,======',
																				_1: {
																					ctor: '::',
																					_0: '====,,###,...,###,======',
																					_1: {
																						ctor: '::',
																						_0: '====,,,,,,,.,,,,,,======',
																						_1: {
																							ctor: '::',
																							_0: '====,,,,,,,.!,,,,,======',
																							_1: {
																								ctor: '::',
																								_0: '======,,,#####,=========',
																								_1: {
																									ctor: '::',
																									_0: '======,,,#####,=========',
																									_1: {
																										ctor: '::',
																										_0: '======,,,#####,=========',
																										_1: {
																											ctor: '::',
																											_0: '======,,,#####,=========',
																											_1: {
																												ctor: '::',
																												_0: '======,,,#####,=========',
																												_1: {
																													ctor: '::',
																													_0: '========================',
																													_1: {ctor: '[]'}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	},
	_1: {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: {ctor: '_Tuple2', _0: 12, _1: 21},
			_1: 'Temple of Odin: Wise Old Odin, healer of ailments.'
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: {ctor: '_Tuple2', _0: 9, _1: 17},
				_1: 'Weaponsmith: If anyone\'s seen Barg, he still owes me 5 silvers for the daggers!'
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: {ctor: '_Tuple2', _0: 13, _1: 17},
					_1: 'General store: Get ye supplies here, best prices in town!'
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: {ctor: '_Tuple2', _0: 9, _1: 14},
						_1: 'Kael\'s scholarly scrolls and identification services.'
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: {ctor: '_Tuple2', _0: 13, _1: 12},
							_1: 'Barg\'s house, private property.'
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: {ctor: '_Tuple2', _0: 6, _1: 6},
								_1: 'Junk yard: We buy things you don\'t want.'
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: {ctor: '_Tuple2', _0: 15, _1: 5},
									_1: 'Another house'
								},
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	}
};

var _rtfeldman$elm_css_util$Css_Helpers$toCssIdentifier = function (identifier) {
	return A4(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$All,
		_elm_lang$core$Regex$regex('[^a-zA-Z0-9_-]'),
		function (_p0) {
			return '';
		},
		A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex('\\s+'),
			function (_p1) {
				return '-';
			},
			_elm_lang$core$String$trim(
				_elm_lang$core$Basics$toString(identifier))));
};
var _rtfeldman$elm_css_util$Css_Helpers$identifierToString = F2(
	function (name, identifier) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			_rtfeldman$elm_css_util$Css_Helpers$toCssIdentifier(name),
			_rtfeldman$elm_css_util$Css_Helpers$toCssIdentifier(identifier));
	});

var _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations = function (declarations) {
	dropEmptyDeclarations:
	while (true) {
		var _p0 = declarations;
		if (_p0.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			switch (_p0._0.ctor) {
				case 'StyleBlockDeclaration':
					var _p1 = _p0._1;
					if (_elm_lang$core$List$isEmpty(_p0._0._0._2)) {
						var _v1 = _p1;
						declarations = _v1;
						continue dropEmptyDeclarations;
					} else {
						return {
							ctor: '::',
							_0: _p0._0,
							_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p1)
						};
					}
				case 'MediaRule':
					var _p4 = _p0._1;
					if (A2(
						_elm_lang$core$List$all,
						function (_p2) {
							var _p3 = _p2;
							return _elm_lang$core$List$isEmpty(_p3._2);
						},
						_p0._0._1)) {
						var _v3 = _p4;
						declarations = _v3;
						continue dropEmptyDeclarations;
					} else {
						return {
							ctor: '::',
							_0: _p0._0,
							_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p4)
						};
					}
				case 'SupportsRule':
					var _p5 = _p0._1;
					if (_elm_lang$core$List$isEmpty(_p0._0._1)) {
						var _v4 = _p5;
						declarations = _v4;
						continue dropEmptyDeclarations;
					} else {
						return {
							ctor: '::',
							_0: _p0._0,
							_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p5)
						};
					}
				case 'DocumentRule':
					return {
						ctor: '::',
						_0: _p0._0,
						_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p0._1)
					};
				case 'PageRule':
					var _p6 = _p0._1;
					if (_elm_lang$core$List$isEmpty(_p0._0._1)) {
						var _v5 = _p6;
						declarations = _v5;
						continue dropEmptyDeclarations;
					} else {
						return {
							ctor: '::',
							_0: _p0._0,
							_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p6)
						};
					}
				case 'FontFace':
					var _p7 = _p0._1;
					if (_elm_lang$core$List$isEmpty(_p0._0._0)) {
						var _v6 = _p7;
						declarations = _v6;
						continue dropEmptyDeclarations;
					} else {
						return {
							ctor: '::',
							_0: _p0._0,
							_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p7)
						};
					}
				case 'Keyframes':
					var _p8 = _p0._1;
					if (_elm_lang$core$List$isEmpty(_p0._0._1)) {
						var _v7 = _p8;
						declarations = _v7;
						continue dropEmptyDeclarations;
					} else {
						return {
							ctor: '::',
							_0: _p0._0,
							_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p8)
						};
					}
				case 'Viewport':
					var _p9 = _p0._1;
					if (_elm_lang$core$List$isEmpty(_p0._0._0)) {
						var _v8 = _p9;
						declarations = _v8;
						continue dropEmptyDeclarations;
					} else {
						return {
							ctor: '::',
							_0: _p0._0,
							_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p9)
						};
					}
				case 'CounterStyle':
					var _p10 = _p0._1;
					if (_elm_lang$core$List$isEmpty(_p0._0._0)) {
						var _v9 = _p10;
						declarations = _v9;
						continue dropEmptyDeclarations;
					} else {
						return {
							ctor: '::',
							_0: _p0._0,
							_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p10)
						};
					}
				default:
					var _p13 = _p0._1;
					if (A2(
						_elm_lang$core$List$all,
						function (_p11) {
							var _p12 = _p11;
							return _elm_lang$core$List$isEmpty(_p12._1);
						},
						_p0._0._0)) {
						var _v11 = _p13;
						declarations = _v11;
						continue dropEmptyDeclarations;
					} else {
						return {
							ctor: '::',
							_0: _p0._0,
							_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p13)
						};
					}
			}
		}
	}
};
var _rtfeldman$elm_css$Css_Structure$dropEmpty = function (_p14) {
	var _p15 = _p14;
	return {
		charset: _p15.charset,
		imports: _p15.imports,
		namespaces: _p15.namespaces,
		declarations: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p15.declarations)
	};
};
var _rtfeldman$elm_css$Css_Structure$concatMapLast = F2(
	function (update, list) {
		var _p16 = list;
		if (_p16.ctor === '[]') {
			return list;
		} else {
			if (_p16._1.ctor === '[]') {
				return update(_p16._0);
			} else {
				return {
					ctor: '::',
					_0: _p16._0,
					_1: A2(_rtfeldman$elm_css$Css_Structure$concatMapLast, update, _p16._1)
				};
			}
		}
	});
var _rtfeldman$elm_css$Css_Structure$mapLast = F2(
	function (update, list) {
		var _p17 = list;
		if (_p17.ctor === '[]') {
			return list;
		} else {
			if (_p17._1.ctor === '[]') {
				return {
					ctor: '::',
					_0: update(_p17._0),
					_1: {ctor: '[]'}
				};
			} else {
				return {
					ctor: '::',
					_0: _p17._0,
					_1: A2(_rtfeldman$elm_css$Css_Structure$mapLast, update, _p17._1)
				};
			}
		}
	});
var _rtfeldman$elm_css$Css_Structure$Property = F3(
	function (a, b, c) {
		return {important: a, key: b, value: c};
	});
var _rtfeldman$elm_css$Css_Structure$Stylesheet = F4(
	function (a, b, c, d) {
		return {charset: a, imports: b, namespaces: c, declarations: d};
	});
var _rtfeldman$elm_css$Css_Structure$FontFeatureValues = function (a) {
	return {ctor: 'FontFeatureValues', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$CounterStyle = function (a) {
	return {ctor: 'CounterStyle', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$Viewport = function (a) {
	return {ctor: 'Viewport', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$Keyframes = F2(
	function (a, b) {
		return {ctor: 'Keyframes', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Structure$FontFace = function (a) {
	return {ctor: 'FontFace', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$PageRule = F2(
	function (a, b) {
		return {ctor: 'PageRule', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Structure$DocumentRule = F5(
	function (a, b, c, d, e) {
		return {ctor: 'DocumentRule', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _rtfeldman$elm_css$Css_Structure$SupportsRule = F2(
	function (a, b) {
		return {ctor: 'SupportsRule', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Structure$MediaRule = F2(
	function (a, b) {
		return {ctor: 'MediaRule', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Structure$StyleBlockDeclaration = function (a) {
	return {ctor: 'StyleBlockDeclaration', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$concatMapLastStyleBlock = F2(
	function (update, declarations) {
		var _p18 = declarations;
		_v15_12:
		do {
			if (_p18.ctor === '[]') {
				return declarations;
			} else {
				if (_p18._1.ctor === '[]') {
					switch (_p18._0.ctor) {
						case 'StyleBlockDeclaration':
							return A2(
								_elm_lang$core$List$map,
								_rtfeldman$elm_css$Css_Structure$StyleBlockDeclaration,
								update(_p18._0._0));
						case 'MediaRule':
							if (_p18._0._1.ctor === '::') {
								if (_p18._0._1._1.ctor === '[]') {
									return {
										ctor: '::',
										_0: A2(
											_rtfeldman$elm_css$Css_Structure$MediaRule,
											_p18._0._0,
											update(_p18._0._1._0)),
										_1: {ctor: '[]'}
									};
								} else {
									var _p19 = A2(
										_rtfeldman$elm_css$Css_Structure$concatMapLastStyleBlock,
										update,
										{
											ctor: '::',
											_0: A2(_rtfeldman$elm_css$Css_Structure$MediaRule, _p18._0._0, _p18._0._1._1),
											_1: {ctor: '[]'}
										});
									if (((_p19.ctor === '::') && (_p19._0.ctor === 'MediaRule')) && (_p19._1.ctor === '[]')) {
										return {
											ctor: '::',
											_0: A2(
												_rtfeldman$elm_css$Css_Structure$MediaRule,
												_p19._0._0,
												{ctor: '::', _0: _p18._0._1._0, _1: _p19._0._1}),
											_1: {ctor: '[]'}
										};
									} else {
										return _p19;
									}
								}
							} else {
								break _v15_12;
							}
						case 'SupportsRule':
							return {
								ctor: '::',
								_0: A2(
									_rtfeldman$elm_css$Css_Structure$SupportsRule,
									_p18._0._0,
									A2(_rtfeldman$elm_css$Css_Structure$concatMapLastStyleBlock, update, _p18._0._1)),
								_1: {ctor: '[]'}
							};
						case 'DocumentRule':
							return A2(
								_elm_lang$core$List$map,
								A4(_rtfeldman$elm_css$Css_Structure$DocumentRule, _p18._0._0, _p18._0._1, _p18._0._2, _p18._0._3),
								update(_p18._0._4));
						case 'PageRule':
							return declarations;
						case 'FontFace':
							return declarations;
						case 'Keyframes':
							return declarations;
						case 'Viewport':
							return declarations;
						case 'CounterStyle':
							return declarations;
						default:
							return declarations;
					}
				} else {
					break _v15_12;
				}
			}
		} while(false);
		return {
			ctor: '::',
			_0: _p18._0,
			_1: A2(_rtfeldman$elm_css$Css_Structure$concatMapLastStyleBlock, update, _p18._1)
		};
	});
var _rtfeldman$elm_css$Css_Structure$StyleBlock = F3(
	function (a, b, c) {
		return {ctor: 'StyleBlock', _0: a, _1: b, _2: c};
	});
var _rtfeldman$elm_css$Css_Structure$withPropertyAppended = F2(
	function (property, _p20) {
		var _p21 = _p20;
		return A3(
			_rtfeldman$elm_css$Css_Structure$StyleBlock,
			_p21._0,
			_p21._1,
			A2(
				_elm_lang$core$Basics_ops['++'],
				_p21._2,
				{
					ctor: '::',
					_0: property,
					_1: {ctor: '[]'}
				}));
	});
var _rtfeldman$elm_css$Css_Structure$appendProperty = F2(
	function (property, declarations) {
		var _p22 = declarations;
		if (_p22.ctor === '[]') {
			return declarations;
		} else {
			if (_p22._1.ctor === '[]') {
				switch (_p22._0.ctor) {
					case 'StyleBlockDeclaration':
						return {
							ctor: '::',
							_0: _rtfeldman$elm_css$Css_Structure$StyleBlockDeclaration(
								A2(_rtfeldman$elm_css$Css_Structure$withPropertyAppended, property, _p22._0._0)),
							_1: {ctor: '[]'}
						};
					case 'MediaRule':
						return {
							ctor: '::',
							_0: A2(
								_rtfeldman$elm_css$Css_Structure$MediaRule,
								_p22._0._0,
								A2(
									_rtfeldman$elm_css$Css_Structure$mapLast,
									_rtfeldman$elm_css$Css_Structure$withPropertyAppended(property),
									_p22._0._1)),
							_1: {ctor: '[]'}
						};
					default:
						return declarations;
				}
			} else {
				return {
					ctor: '::',
					_0: _p22._0,
					_1: A2(_rtfeldman$elm_css$Css_Structure$appendProperty, property, _p22._1)
				};
			}
		}
	});
var _rtfeldman$elm_css$Css_Structure$appendToLastSelector = F2(
	function (f, styleBlock) {
		var _p23 = styleBlock;
		if (_p23._1.ctor === '[]') {
			var _p24 = _p23._0;
			return {
				ctor: '::',
				_0: A3(
					_rtfeldman$elm_css$Css_Structure$StyleBlock,
					_p24,
					{ctor: '[]'},
					_p23._2),
				_1: {
					ctor: '::',
					_0: A3(
						_rtfeldman$elm_css$Css_Structure$StyleBlock,
						f(_p24),
						{ctor: '[]'},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			};
		} else {
			var _p26 = _p23._1;
			var _p25 = _p23._0;
			var newFirst = f(_p25);
			var newRest = A2(_elm_lang$core$List$map, f, _p26);
			return {
				ctor: '::',
				_0: A3(_rtfeldman$elm_css$Css_Structure$StyleBlock, _p25, _p26, _p23._2),
				_1: {
					ctor: '::',
					_0: A3(
						_rtfeldman$elm_css$Css_Structure$StyleBlock,
						newFirst,
						newRest,
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			};
		}
	});
var _rtfeldman$elm_css$Css_Structure$MediaQuery = function (a) {
	return {ctor: 'MediaQuery', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$Selector = F3(
	function (a, b, c) {
		return {ctor: 'Selector', _0: a, _1: b, _2: c};
	});
var _rtfeldman$elm_css$Css_Structure$applyPseudoElement = F2(
	function (pseudo, _p27) {
		var _p28 = _p27;
		return A3(
			_rtfeldman$elm_css$Css_Structure$Selector,
			_p28._0,
			_p28._1,
			_elm_lang$core$Maybe$Just(pseudo));
	});
var _rtfeldman$elm_css$Css_Structure$appendPseudoElementToLastSelector = F2(
	function (pseudo, styleBlock) {
		return A2(
			_rtfeldman$elm_css$Css_Structure$appendToLastSelector,
			_rtfeldman$elm_css$Css_Structure$applyPseudoElement(pseudo),
			styleBlock);
	});
var _rtfeldman$elm_css$Css_Structure$CustomSelector = F2(
	function (a, b) {
		return {ctor: 'CustomSelector', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Structure$UniversalSelectorSequence = function (a) {
	return {ctor: 'UniversalSelectorSequence', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$TypeSelectorSequence = F2(
	function (a, b) {
		return {ctor: 'TypeSelectorSequence', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Structure$appendRepeatable = F2(
	function (selector, sequence) {
		var _p29 = sequence;
		switch (_p29.ctor) {
			case 'TypeSelectorSequence':
				return A2(
					_rtfeldman$elm_css$Css_Structure$TypeSelectorSequence,
					_p29._0,
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p29._1,
						{
							ctor: '::',
							_0: selector,
							_1: {ctor: '[]'}
						}));
			case 'UniversalSelectorSequence':
				return _rtfeldman$elm_css$Css_Structure$UniversalSelectorSequence(
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p29._0,
						{
							ctor: '::',
							_0: selector,
							_1: {ctor: '[]'}
						}));
			default:
				return A2(
					_rtfeldman$elm_css$Css_Structure$CustomSelector,
					_p29._0,
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p29._1,
						{
							ctor: '::',
							_0: selector,
							_1: {ctor: '[]'}
						}));
		}
	});
var _rtfeldman$elm_css$Css_Structure$appendRepeatableWithCombinator = F2(
	function (selector, list) {
		var _p30 = list;
		if (_p30.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if ((_p30._0.ctor === '_Tuple2') && (_p30._1.ctor === '[]')) {
				return {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: _p30._0._0,
						_1: A2(_rtfeldman$elm_css$Css_Structure$appendRepeatable, selector, _p30._0._1)
					},
					_1: {ctor: '[]'}
				};
			} else {
				return {
					ctor: '::',
					_0: _p30._0,
					_1: A2(_rtfeldman$elm_css$Css_Structure$appendRepeatableWithCombinator, selector, _p30._1)
				};
			}
		}
	});
var _rtfeldman$elm_css$Css_Structure$appendRepeatableSelector = F2(
	function (repeatableSimpleSelector, selector) {
		var _p31 = selector;
		if (_p31._1.ctor === '[]') {
			return A3(
				_rtfeldman$elm_css$Css_Structure$Selector,
				A2(_rtfeldman$elm_css$Css_Structure$appendRepeatable, repeatableSimpleSelector, _p31._0),
				{ctor: '[]'},
				_p31._2);
		} else {
			return A3(
				_rtfeldman$elm_css$Css_Structure$Selector,
				_p31._0,
				A2(_rtfeldman$elm_css$Css_Structure$appendRepeatableWithCombinator, repeatableSimpleSelector, _p31._1),
				_p31._2);
		}
	});
var _rtfeldman$elm_css$Css_Structure$extendLastSelector = F2(
	function (selector, declarations) {
		var _p32 = declarations;
		_v24_15:
		do {
			if (_p32.ctor === '[]') {
				return declarations;
			} else {
				if (_p32._1.ctor === '[]') {
					switch (_p32._0.ctor) {
						case 'StyleBlockDeclaration':
							if (_p32._0._0._1.ctor === '[]') {
								return {
									ctor: '::',
									_0: _rtfeldman$elm_css$Css_Structure$StyleBlockDeclaration(
										A3(
											_rtfeldman$elm_css$Css_Structure$StyleBlock,
											A2(_rtfeldman$elm_css$Css_Structure$appendRepeatableSelector, selector, _p32._0._0._0),
											{ctor: '[]'},
											_p32._0._0._2)),
									_1: {ctor: '[]'}
								};
							} else {
								var newRest = A2(
									_rtfeldman$elm_css$Css_Structure$mapLast,
									_rtfeldman$elm_css$Css_Structure$appendRepeatableSelector(selector),
									_p32._0._0._1);
								return {
									ctor: '::',
									_0: _rtfeldman$elm_css$Css_Structure$StyleBlockDeclaration(
										A3(_rtfeldman$elm_css$Css_Structure$StyleBlock, _p32._0._0._0, newRest, _p32._0._0._2)),
									_1: {ctor: '[]'}
								};
							}
						case 'MediaRule':
							if (_p32._0._1.ctor === '::') {
								if (_p32._0._1._1.ctor === '[]') {
									if (_p32._0._1._0._1.ctor === '[]') {
										var newStyleBlock = A3(
											_rtfeldman$elm_css$Css_Structure$StyleBlock,
											A2(_rtfeldman$elm_css$Css_Structure$appendRepeatableSelector, selector, _p32._0._1._0._0),
											{ctor: '[]'},
											_p32._0._1._0._2);
										return {
											ctor: '::',
											_0: A2(
												_rtfeldman$elm_css$Css_Structure$MediaRule,
												_p32._0._0,
												{
													ctor: '::',
													_0: newStyleBlock,
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										};
									} else {
										var newRest = A2(
											_rtfeldman$elm_css$Css_Structure$mapLast,
											_rtfeldman$elm_css$Css_Structure$appendRepeatableSelector(selector),
											_p32._0._1._0._1);
										var newStyleBlock = A3(_rtfeldman$elm_css$Css_Structure$StyleBlock, _p32._0._1._0._0, newRest, _p32._0._1._0._2);
										return {
											ctor: '::',
											_0: A2(
												_rtfeldman$elm_css$Css_Structure$MediaRule,
												_p32._0._0,
												{
													ctor: '::',
													_0: newStyleBlock,
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										};
									}
								} else {
									var _p33 = A2(
										_rtfeldman$elm_css$Css_Structure$extendLastSelector,
										selector,
										{
											ctor: '::',
											_0: A2(_rtfeldman$elm_css$Css_Structure$MediaRule, _p32._0._0, _p32._0._1._1),
											_1: {ctor: '[]'}
										});
									if (((_p33.ctor === '::') && (_p33._0.ctor === 'MediaRule')) && (_p33._1.ctor === '[]')) {
										return {
											ctor: '::',
											_0: A2(
												_rtfeldman$elm_css$Css_Structure$MediaRule,
												_p33._0._0,
												{ctor: '::', _0: _p32._0._1._0, _1: _p33._0._1}),
											_1: {ctor: '[]'}
										};
									} else {
										return _p33;
									}
								}
							} else {
								break _v24_15;
							}
						case 'SupportsRule':
							return {
								ctor: '::',
								_0: A2(
									_rtfeldman$elm_css$Css_Structure$SupportsRule,
									_p32._0._0,
									A2(_rtfeldman$elm_css$Css_Structure$extendLastSelector, selector, _p32._0._1)),
								_1: {ctor: '[]'}
							};
						case 'DocumentRule':
							if (_p32._0._4._1.ctor === '[]') {
								var newStyleBlock = A3(
									_rtfeldman$elm_css$Css_Structure$StyleBlock,
									A2(_rtfeldman$elm_css$Css_Structure$appendRepeatableSelector, selector, _p32._0._4._0),
									{ctor: '[]'},
									_p32._0._4._2);
								return {
									ctor: '::',
									_0: A5(_rtfeldman$elm_css$Css_Structure$DocumentRule, _p32._0._0, _p32._0._1, _p32._0._2, _p32._0._3, newStyleBlock),
									_1: {ctor: '[]'}
								};
							} else {
								var newRest = A2(
									_rtfeldman$elm_css$Css_Structure$mapLast,
									_rtfeldman$elm_css$Css_Structure$appendRepeatableSelector(selector),
									_p32._0._4._1);
								var newStyleBlock = A3(_rtfeldman$elm_css$Css_Structure$StyleBlock, _p32._0._4._0, newRest, _p32._0._4._2);
								return {
									ctor: '::',
									_0: A5(_rtfeldman$elm_css$Css_Structure$DocumentRule, _p32._0._0, _p32._0._1, _p32._0._2, _p32._0._3, newStyleBlock),
									_1: {ctor: '[]'}
								};
							}
						case 'PageRule':
							return declarations;
						case 'FontFace':
							return declarations;
						case 'Keyframes':
							return declarations;
						case 'Viewport':
							return declarations;
						case 'CounterStyle':
							return declarations;
						default:
							return declarations;
					}
				} else {
					break _v24_15;
				}
			}
		} while(false);
		return {
			ctor: '::',
			_0: _p32._0,
			_1: A2(_rtfeldman$elm_css$Css_Structure$extendLastSelector, selector, _p32._1)
		};
	});
var _rtfeldman$elm_css$Css_Structure$appendRepeatableToLastSelector = F2(
	function (selector, styleBlock) {
		return A2(
			_rtfeldman$elm_css$Css_Structure$appendToLastSelector,
			_rtfeldman$elm_css$Css_Structure$appendRepeatableSelector(selector),
			styleBlock);
	});
var _rtfeldman$elm_css$Css_Structure$PseudoClassSelector = function (a) {
	return {ctor: 'PseudoClassSelector', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$IdSelector = function (a) {
	return {ctor: 'IdSelector', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$ClassSelector = function (a) {
	return {ctor: 'ClassSelector', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$TypeSelector = function (a) {
	return {ctor: 'TypeSelector', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$PseudoElement = function (a) {
	return {ctor: 'PseudoElement', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$Descendant = {ctor: 'Descendant'};
var _rtfeldman$elm_css$Css_Structure$Child = {ctor: 'Child'};
var _rtfeldman$elm_css$Css_Structure$GeneralSibling = {ctor: 'GeneralSibling'};
var _rtfeldman$elm_css$Css_Structure$AdjacentSibling = {ctor: 'AdjacentSibling'};

var _rtfeldman$elm_css$Css_Preprocess$propertyToPair = function (property) {
	var value = property.important ? A2(_elm_lang$core$Basics_ops['++'], property.value, ' !important') : property.value;
	return {ctor: '_Tuple2', _0: property.key, _1: value};
};
var _rtfeldman$elm_css$Css_Preprocess$toPropertyPairs = function (mixins) {
	toPropertyPairs:
	while (true) {
		var _p0 = mixins;
		if (_p0.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			switch (_p0._0.ctor) {
				case 'AppendProperty':
					return {
						ctor: '::',
						_0: _rtfeldman$elm_css$Css_Preprocess$propertyToPair(_p0._0._0),
						_1: _rtfeldman$elm_css$Css_Preprocess$toPropertyPairs(_p0._1)
					};
				case 'ApplyMixins':
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_rtfeldman$elm_css$Css_Preprocess$toPropertyPairs(_p0._0._0),
						_rtfeldman$elm_css$Css_Preprocess$toPropertyPairs(_p0._1));
				default:
					var _v1 = _p0._1;
					mixins = _v1;
					continue toPropertyPairs;
			}
		}
	}
};
var _rtfeldman$elm_css$Css_Preprocess$unwrapSnippet = function (_p1) {
	var _p2 = _p1;
	return _p2._0;
};
var _rtfeldman$elm_css$Css_Preprocess$toMediaRule = F2(
	function (mediaQueries, declaration) {
		var _p3 = declaration;
		switch (_p3.ctor) {
			case 'StyleBlockDeclaration':
				return A2(
					_rtfeldman$elm_css$Css_Structure$MediaRule,
					mediaQueries,
					{
						ctor: '::',
						_0: _p3._0,
						_1: {ctor: '[]'}
					});
			case 'MediaRule':
				return A2(
					_rtfeldman$elm_css$Css_Structure$MediaRule,
					A2(_elm_lang$core$Basics_ops['++'], mediaQueries, _p3._0),
					_p3._1);
			case 'SupportsRule':
				return A2(
					_rtfeldman$elm_css$Css_Structure$SupportsRule,
					_p3._0,
					A2(
						_elm_lang$core$List$map,
						_rtfeldman$elm_css$Css_Preprocess$toMediaRule(mediaQueries),
						_p3._1));
			case 'DocumentRule':
				return A5(_rtfeldman$elm_css$Css_Structure$DocumentRule, _p3._0, _p3._1, _p3._2, _p3._3, _p3._4);
			case 'PageRule':
				return declaration;
			case 'FontFace':
				return declaration;
			case 'Keyframes':
				return declaration;
			case 'Viewport':
				return declaration;
			case 'CounterStyle':
				return declaration;
			default:
				return declaration;
		}
	});
var _rtfeldman$elm_css$Css_Preprocess$stylesheet = function (snippets) {
	return {
		charset: _elm_lang$core$Maybe$Nothing,
		imports: {ctor: '[]'},
		namespaces: {ctor: '[]'},
		snippets: snippets
	};
};
var _rtfeldman$elm_css$Css_Preprocess$Property = F4(
	function (a, b, c, d) {
		return {key: a, value: b, important: c, warnings: d};
	});
var _rtfeldman$elm_css$Css_Preprocess$Stylesheet = F4(
	function (a, b, c, d) {
		return {charset: a, imports: b, namespaces: c, snippets: d};
	});
var _rtfeldman$elm_css$Css_Preprocess$ApplyMixins = function (a) {
	return {ctor: 'ApplyMixins', _0: a};
};
var _rtfeldman$elm_css$Css_Preprocess$WithMedia = F2(
	function (a, b) {
		return {ctor: 'WithMedia', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Preprocess$WithPseudoElement = F2(
	function (a, b) {
		return {ctor: 'WithPseudoElement', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Preprocess$NestSnippet = F2(
	function (a, b) {
		return {ctor: 'NestSnippet', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Preprocess$ExtendSelector = F2(
	function (a, b) {
		return {ctor: 'ExtendSelector', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Preprocess$AppendProperty = function (a) {
	return {ctor: 'AppendProperty', _0: a};
};
var _rtfeldman$elm_css$Css_Preprocess$mapLastProperty = F2(
	function (update, mixin) {
		var _p4 = mixin;
		switch (_p4.ctor) {
			case 'AppendProperty':
				return _rtfeldman$elm_css$Css_Preprocess$AppendProperty(
					update(_p4._0));
			case 'ExtendSelector':
				return A2(
					_rtfeldman$elm_css$Css_Preprocess$ExtendSelector,
					_p4._0,
					A2(_rtfeldman$elm_css$Css_Preprocess$mapAllLastProperty, update, _p4._1));
			case 'NestSnippet':
				return mixin;
			case 'WithPseudoElement':
				return mixin;
			case 'WithMedia':
				return mixin;
			default:
				return _rtfeldman$elm_css$Css_Preprocess$ApplyMixins(
					A2(
						_rtfeldman$elm_css$Css_Structure$mapLast,
						_rtfeldman$elm_css$Css_Preprocess$mapLastProperty(update),
						_p4._0));
		}
	});
var _rtfeldman$elm_css$Css_Preprocess$mapAllLastProperty = F2(
	function (update, mixins) {
		var _p5 = mixins;
		if (_p5.ctor === '[]') {
			return mixins;
		} else {
			if (_p5._1.ctor === '[]') {
				return {
					ctor: '::',
					_0: A2(_rtfeldman$elm_css$Css_Preprocess$mapLastProperty, update, _p5._0),
					_1: {ctor: '[]'}
				};
			} else {
				return {
					ctor: '::',
					_0: _p5._0,
					_1: A2(_rtfeldman$elm_css$Css_Preprocess$mapAllLastProperty, update, _p5._1)
				};
			}
		}
	});
var _rtfeldman$elm_css$Css_Preprocess$Snippet = function (a) {
	return {ctor: 'Snippet', _0: a};
};
var _rtfeldman$elm_css$Css_Preprocess$FontFeatureValues = function (a) {
	return {ctor: 'FontFeatureValues', _0: a};
};
var _rtfeldman$elm_css$Css_Preprocess$CounterStyle = function (a) {
	return {ctor: 'CounterStyle', _0: a};
};
var _rtfeldman$elm_css$Css_Preprocess$Viewport = function (a) {
	return {ctor: 'Viewport', _0: a};
};
var _rtfeldman$elm_css$Css_Preprocess$Keyframes = F2(
	function (a, b) {
		return {ctor: 'Keyframes', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Preprocess$FontFace = function (a) {
	return {ctor: 'FontFace', _0: a};
};
var _rtfeldman$elm_css$Css_Preprocess$PageRule = F2(
	function (a, b) {
		return {ctor: 'PageRule', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Preprocess$DocumentRule = F5(
	function (a, b, c, d, e) {
		return {ctor: 'DocumentRule', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _rtfeldman$elm_css$Css_Preprocess$SupportsRule = F2(
	function (a, b) {
		return {ctor: 'SupportsRule', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Preprocess$MediaRule = F2(
	function (a, b) {
		return {ctor: 'MediaRule', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Preprocess$StyleBlockDeclaration = function (a) {
	return {ctor: 'StyleBlockDeclaration', _0: a};
};
var _rtfeldman$elm_css$Css_Preprocess$StyleBlock = F3(
	function (a, b, c) {
		return {ctor: 'StyleBlock', _0: a, _1: b, _2: c};
	});

var _rtfeldman$elm_css$Css_Structure_Output$indent = function (str) {
	return A2(_elm_lang$core$Basics_ops['++'], '    ', str);
};
var _rtfeldman$elm_css$Css_Structure_Output$prettyPrintProperty = function (_p0) {
	var _p1 = _p0;
	var suffix = _p1.important ? ' !important;' : ';';
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_p1.key,
		A2(
			_elm_lang$core$Basics_ops['++'],
			': ',
			A2(_elm_lang$core$Basics_ops['++'], _p1.value, suffix)));
};
var _rtfeldman$elm_css$Css_Structure_Output$prettyPrintProperties = function (properties) {
	return A2(
		_elm_lang$core$String$join,
		'\n',
		A2(
			_elm_lang$core$List$map,
			function (_p2) {
				return _rtfeldman$elm_css$Css_Structure_Output$indent(
					_rtfeldman$elm_css$Css_Structure_Output$prettyPrintProperty(_p2));
			},
			properties));
};
var _rtfeldman$elm_css$Css_Structure_Output$combinatorToString = function (combinator) {
	var _p3 = combinator;
	switch (_p3.ctor) {
		case 'AdjacentSibling':
			return '+';
		case 'GeneralSibling':
			return '~';
		case 'Child':
			return '>';
		default:
			return '';
	}
};
var _rtfeldman$elm_css$Css_Structure_Output$pseudoElementToString = function (_p4) {
	var _p5 = _p4;
	return A2(_elm_lang$core$Basics_ops['++'], '::', _p5._0);
};
var _rtfeldman$elm_css$Css_Structure_Output$repeatableSimpleSelectorToString = function (repeatableSimpleSelector) {
	var _p6 = repeatableSimpleSelector;
	switch (_p6.ctor) {
		case 'ClassSelector':
			return A2(_elm_lang$core$Basics_ops['++'], '.', _p6._0);
		case 'IdSelector':
			return A2(_elm_lang$core$Basics_ops['++'], '#', _p6._0);
		default:
			return A2(_elm_lang$core$Basics_ops['++'], ':', _p6._0);
	}
};
var _rtfeldman$elm_css$Css_Structure_Output$simpleSelectorSequenceToString = function (simpleSelectorSequence) {
	var _p7 = simpleSelectorSequence;
	switch (_p7.ctor) {
		case 'TypeSelectorSequence':
			return A2(
				_elm_lang$core$String$join,
				'',
				{
					ctor: '::',
					_0: _p7._0._0,
					_1: A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Structure_Output$repeatableSimpleSelectorToString, _p7._1)
				});
		case 'UniversalSelectorSequence':
			var _p8 = _p7._0;
			return _elm_lang$core$List$isEmpty(_p8) ? '*' : A2(
				_elm_lang$core$String$join,
				'',
				A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Structure_Output$repeatableSimpleSelectorToString, _p8));
		default:
			return A2(
				_elm_lang$core$String$join,
				'',
				{
					ctor: '::',
					_0: _p7._0,
					_1: A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Structure_Output$repeatableSimpleSelectorToString, _p7._1)
				});
	}
};
var _rtfeldman$elm_css$Css_Structure_Output$selectorChainToString = function (_p9) {
	var _p10 = _p9;
	return A2(
		_elm_lang$core$String$join,
		' ',
		{
			ctor: '::',
			_0: _rtfeldman$elm_css$Css_Structure_Output$combinatorToString(_p10._0),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css_Structure_Output$simpleSelectorSequenceToString(_p10._1),
				_1: {ctor: '[]'}
			}
		});
};
var _rtfeldman$elm_css$Css_Structure_Output$selectorToString = function (_p11) {
	var _p12 = _p11;
	var pseudoElementsString = A2(
		_elm_lang$core$String$join,
		'',
		{
			ctor: '::',
			_0: A2(
				_elm_lang$core$Maybe$withDefault,
				'',
				A2(_elm_lang$core$Maybe$map, _rtfeldman$elm_css$Css_Structure_Output$pseudoElementToString, _p12._2)),
			_1: {ctor: '[]'}
		});
	var segments = A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: _rtfeldman$elm_css$Css_Structure_Output$simpleSelectorSequenceToString(_p12._0),
			_1: {ctor: '[]'}
		},
		A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Structure_Output$selectorChainToString, _p12._1));
	return A3(
		_elm_lang$core$Basics$flip,
		F2(
			function (x, y) {
				return A2(_elm_lang$core$Basics_ops['++'], x, y);
			}),
		pseudoElementsString,
		A2(
			_elm_lang$core$String$join,
			' ',
			A2(
				_elm_lang$core$List$filter,
				function (_p13) {
					return !_elm_lang$core$String$isEmpty(_p13);
				},
				segments)));
};
var _rtfeldman$elm_css$Css_Structure_Output$prettyPrintStyleBlock = function (_p14) {
	var _p15 = _p14;
	var selectorStr = A2(
		_elm_lang$core$String$join,
		', ',
		A2(
			_elm_lang$core$List$map,
			_rtfeldman$elm_css$Css_Structure_Output$selectorToString,
			{ctor: '::', _0: _p15._0, _1: _p15._1}));
	return A2(
		_elm_lang$core$Basics_ops['++'],
		selectorStr,
		A2(
			_elm_lang$core$Basics_ops['++'],
			' {\n',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_rtfeldman$elm_css$Css_Structure_Output$prettyPrintProperties(_p15._2),
				'\n}')));
};
var _rtfeldman$elm_css$Css_Structure_Output$prettyPrintDeclaration = function (declaration) {
	var _p16 = declaration;
	switch (_p16.ctor) {
		case 'StyleBlockDeclaration':
			return _rtfeldman$elm_css$Css_Structure_Output$prettyPrintStyleBlock(_p16._0);
		case 'MediaRule':
			var query = A2(
				_elm_lang$core$String$join,
				' ',
				A2(
					_elm_lang$core$List$map,
					function (_p17) {
						var _p18 = _p17;
						return _p18._0;
					},
					_p16._0));
			var blocks = A2(
				_elm_lang$core$String$join,
				'\n\n',
				A2(
					_elm_lang$core$List$map,
					function (_p19) {
						return _rtfeldman$elm_css$Css_Structure_Output$indent(
							_rtfeldman$elm_css$Css_Structure_Output$prettyPrintStyleBlock(_p19));
					},
					_p16._1));
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'@media ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					query,
					A2(
						_elm_lang$core$Basics_ops['++'],
						' {\n',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_rtfeldman$elm_css$Css_Structure_Output$indent(blocks),
							'\n}'))));
		default:
			return _elm_lang$core$Native_Utils.crashCase(
				'Css.Structure.Output',
				{
					start: {line: 56, column: 5},
					end: {line: 73, column: 49}
				},
				_p16)('not yet implemented :x');
	}
};
var _rtfeldman$elm_css$Css_Structure_Output$namespaceToString = function (_p21) {
	var _p22 = _p21;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'@namespace ',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_p22._0,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'\"',
				A2(_elm_lang$core$Basics_ops['++'], _p22._1, '\"'))));
};
var _rtfeldman$elm_css$Css_Structure_Output$importToString = function (_p23) {
	var _p24 = _p23;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'@import \"',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_p24._0,
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(_p24._1),
				'\"')));
};
var _rtfeldman$elm_css$Css_Structure_Output$charsetToString = function (charset) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		A2(
			_elm_lang$core$Maybe$map,
			function (str) {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'@charset \"',
					A2(_elm_lang$core$Basics_ops['++'], str, '\"'));
			},
			charset));
};
var _rtfeldman$elm_css$Css_Structure_Output$prettyPrint = function (_p25) {
	var _p26 = _p25;
	return A2(
		_elm_lang$core$String$join,
		'\n\n',
		A2(
			_elm_lang$core$List$filter,
			function (_p27) {
				return !_elm_lang$core$String$isEmpty(_p27);
			},
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Css_Structure_Output$charsetToString(_p26.charset),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$core$String$join,
						'\n',
						A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Structure_Output$importToString, _p26.imports)),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$core$String$join,
							'\n',
							A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Structure_Output$namespaceToString, _p26.namespaces)),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$core$String$join,
								'\n\n',
								A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Structure_Output$prettyPrintDeclaration, _p26.declarations)),
							_1: {ctor: '[]'}
						}
					}
				}
			}));
};

var _rtfeldman$elm_css$Css_Preprocess_Resolve$oneOf = function (maybes) {
	oneOf:
	while (true) {
		var _p0 = maybes;
		if (_p0.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var _p2 = _p0._0;
			var _p1 = _p2;
			if (_p1.ctor === 'Nothing') {
				var _v2 = _p0._1;
				maybes = _v2;
				continue oneOf;
			} else {
				return _p2;
			}
		}
	}
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$collectSelectors = function (declarations) {
	collectSelectors:
	while (true) {
		var _p3 = declarations;
		if (_p3.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p3._0.ctor === 'StyleBlockDeclaration') {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					{ctor: '::', _0: _p3._0._0._0, _1: _p3._0._0._1},
					_rtfeldman$elm_css$Css_Preprocess_Resolve$collectSelectors(_p3._1));
			} else {
				var _v4 = _p3._1;
				declarations = _v4;
				continue collectSelectors;
			}
		}
	}
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$extractWarning = function (_p4) {
	var _p5 = _p4;
	return {
		ctor: '_Tuple2',
		_0: _p5.warnings,
		_1: {key: _p5.key, value: _p5.value, important: _p5.important}
	};
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$extractWarnings = function (properties) {
	return {
		ctor: '_Tuple2',
		_0: A2(
			_elm_lang$core$List$concatMap,
			function (_) {
				return _.warnings;
			},
			properties),
		_1: A2(
			_elm_lang$core$List$map,
			function (prop) {
				return _elm_lang$core$Tuple$second(
					_rtfeldman$elm_css$Css_Preprocess_Resolve$extractWarning(prop));
			},
			properties)
	};
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$toDocumentRule = F5(
	function (str1, str2, str3, str4, declaration) {
		var _p6 = declaration;
		if (_p6.ctor === 'StyleBlockDeclaration') {
			return A5(_rtfeldman$elm_css$Css_Structure$DocumentRule, str1, str2, str3, str4, _p6._0);
		} else {
			return declaration;
		}
	});
var _rtfeldman$elm_css$Css_Preprocess_Resolve$lastDeclaration = function (declarations) {
	lastDeclaration:
	while (true) {
		var _p7 = declarations;
		if (_p7.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			if (_p7._1.ctor === '[]') {
				return _elm_lang$core$Maybe$Just(
					{
						ctor: '::',
						_0: _p7._0,
						_1: {ctor: '[]'}
					});
			} else {
				var _v8 = _p7._1;
				declarations = _v8;
				continue lastDeclaration;
			}
		}
	}
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$concatDeclarationsAndWarnings = function (declarationsAndWarnings) {
	var _p8 = declarationsAndWarnings;
	if (_p8.ctor === '[]') {
		return {
			declarations: {ctor: '[]'},
			warnings: {ctor: '[]'}
		};
	} else {
		var result = _rtfeldman$elm_css$Css_Preprocess_Resolve$concatDeclarationsAndWarnings(_p8._1);
		return {
			declarations: A2(_elm_lang$core$Basics_ops['++'], _p8._0.declarations, result.declarations),
			warnings: A2(_elm_lang$core$Basics_ops['++'], _p8._0.warnings, result.warnings)
		};
	}
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveFontFeatureValues = function (tuples) {
	var expandTuples = function (tuplesToExpand) {
		var _p9 = tuplesToExpand;
		if (_p9.ctor === '[]') {
			return {
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: {ctor: '[]'}
			};
		} else {
			var _p10 = expandTuples(_p9._1);
			var nextWarnings = _p10._0;
			var nextTuples = _p10._1;
			var _p11 = _rtfeldman$elm_css$Css_Preprocess_Resolve$extractWarnings(_p9._0._1);
			var warnings = _p11._0;
			var properties = _p11._1;
			return {
				ctor: '_Tuple2',
				_0: A2(_elm_lang$core$Basics_ops['++'], warnings, nextWarnings),
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: _p9._0._0, _1: properties},
					_1: nextTuples
				}
			};
		}
	};
	var _p12 = expandTuples(tuples);
	var warnings = _p12._0;
	var newTuples = _p12._1;
	return {
		declarations: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css_Structure$FontFeatureValues(newTuples),
			_1: {ctor: '[]'}
		},
		warnings: warnings
	};
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveCounterStyle = function (counterStyleProperties) {
	var _p13 = _rtfeldman$elm_css$Css_Preprocess_Resolve$extractWarnings(counterStyleProperties);
	var warnings = _p13._0;
	var properties = _p13._1;
	return {
		declarations: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css_Structure$Viewport(properties),
			_1: {ctor: '[]'}
		},
		warnings: warnings
	};
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveViewport = function (viewportProperties) {
	var _p14 = _rtfeldman$elm_css$Css_Preprocess_Resolve$extractWarnings(viewportProperties);
	var warnings = _p14._0;
	var properties = _p14._1;
	return {
		declarations: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css_Structure$Viewport(properties),
			_1: {ctor: '[]'}
		},
		warnings: warnings
	};
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveKeyframes = F2(
	function (str, properties) {
		return {
			declarations: {
				ctor: '::',
				_0: A2(_rtfeldman$elm_css$Css_Structure$Keyframes, str, properties),
				_1: {ctor: '[]'}
			},
			warnings: {ctor: '[]'}
		};
	});
var _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveFontFace = function (fontFaceProperties) {
	var _p15 = _rtfeldman$elm_css$Css_Preprocess_Resolve$extractWarnings(fontFaceProperties);
	var warnings = _p15._0;
	var properties = _p15._1;
	return {
		declarations: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css_Structure$FontFace(properties),
			_1: {ctor: '[]'}
		},
		warnings: warnings
	};
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$resolvePageRule = F2(
	function (str, pageRuleProperties) {
		var _p16 = _rtfeldman$elm_css$Css_Preprocess_Resolve$extractWarnings(pageRuleProperties);
		var warnings = _p16._0;
		var properties = _p16._1;
		return {
			declarations: {
				ctor: '::',
				_0: A2(_rtfeldman$elm_css$Css_Structure$PageRule, str, properties),
				_1: {ctor: '[]'}
			},
			warnings: warnings
		};
	});
var _rtfeldman$elm_css$Css_Preprocess_Resolve$toMediaRule = F2(
	function (mediaQueries, declaration) {
		var _p17 = declaration;
		switch (_p17.ctor) {
			case 'StyleBlockDeclaration':
				return A2(
					_rtfeldman$elm_css$Css_Structure$MediaRule,
					mediaQueries,
					{
						ctor: '::',
						_0: _p17._0,
						_1: {ctor: '[]'}
					});
			case 'MediaRule':
				return A2(
					_rtfeldman$elm_css$Css_Structure$MediaRule,
					A2(_elm_lang$core$Basics_ops['++'], mediaQueries, _p17._0),
					_p17._1);
			case 'SupportsRule':
				return A2(
					_rtfeldman$elm_css$Css_Structure$SupportsRule,
					_p17._0,
					A2(
						_elm_lang$core$List$map,
						_rtfeldman$elm_css$Css_Preprocess_Resolve$toMediaRule(mediaQueries),
						_p17._1));
			case 'DocumentRule':
				return A5(_rtfeldman$elm_css$Css_Structure$DocumentRule, _p17._0, _p17._1, _p17._2, _p17._3, _p17._4);
			case 'PageRule':
				return declaration;
			case 'FontFace':
				return declaration;
			case 'Keyframes':
				return declaration;
			case 'Viewport':
				return declaration;
			case 'CounterStyle':
				return declaration;
			default:
				return declaration;
		}
	});
var _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveMediaRule = F2(
	function (mediaQueries, styleBlocks) {
		var handleStyleBlock = function (styleBlock) {
			var _p18 = _rtfeldman$elm_css$Css_Preprocess_Resolve$expandStyleBlock(styleBlock);
			var declarations = _p18.declarations;
			var warnings = _p18.warnings;
			return {
				declarations: A2(
					_elm_lang$core$List$map,
					_rtfeldman$elm_css$Css_Preprocess_Resolve$toMediaRule(mediaQueries),
					declarations),
				warnings: warnings
			};
		};
		var results = A2(_elm_lang$core$List$map, handleStyleBlock, styleBlocks);
		return {
			warnings: A2(
				_elm_lang$core$List$concatMap,
				function (_) {
					return _.warnings;
				},
				results),
			declarations: A2(
				_elm_lang$core$List$concatMap,
				function (_) {
					return _.declarations;
				},
				results)
		};
	});
var _rtfeldman$elm_css$Css_Preprocess_Resolve$expandStyleBlock = function (_p19) {
	var _p20 = _p19;
	return A2(
		_rtfeldman$elm_css$Css_Preprocess_Resolve$applyMixins,
		_p20._2,
		{
			ctor: '::',
			_0: _rtfeldman$elm_css$Css_Structure$StyleBlockDeclaration(
				A3(
					_rtfeldman$elm_css$Css_Structure$StyleBlock,
					_p20._0,
					_p20._1,
					{ctor: '[]'})),
			_1: {ctor: '[]'}
		});
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$applyMixins = F2(
	function (mixins, declarations) {
		applyMixins:
		while (true) {
			var _p21 = mixins;
			if (_p21.ctor === '[]') {
				return {
					declarations: declarations,
					warnings: {ctor: '[]'}
				};
			} else {
				switch (_p21._0.ctor) {
					case 'AppendProperty':
						var _p22 = _rtfeldman$elm_css$Css_Preprocess_Resolve$extractWarning(_p21._0._0);
						var warnings = _p22._0;
						var property = _p22._1;
						var result = A2(
							_rtfeldman$elm_css$Css_Preprocess_Resolve$applyMixins,
							_p21._1,
							A2(_rtfeldman$elm_css$Css_Structure$appendProperty, property, declarations));
						return {
							declarations: result.declarations,
							warnings: A2(_elm_lang$core$Basics_ops['++'], warnings, result.warnings)
						};
					case 'ExtendSelector':
						return A4(
							_rtfeldman$elm_css$Css_Preprocess_Resolve$applyNestedMixinsToLast,
							_p21._0._1,
							_p21._1,
							_rtfeldman$elm_css$Css_Structure$appendRepeatableToLastSelector(_p21._0._0),
							declarations);
					case 'NestSnippet':
						var chain = F2(
							function (_p24, _p23) {
								var _p25 = _p24;
								var _p26 = _p23;
								return A3(
									_rtfeldman$elm_css$Css_Structure$Selector,
									_p25._0,
									A2(
										_elm_lang$core$Basics_ops['++'],
										_p25._1,
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: _p21._0._0, _1: _p26._0},
											_1: _p26._1
										}),
									_rtfeldman$elm_css$Css_Preprocess_Resolve$oneOf(
										{
											ctor: '::',
											_0: _p26._2,
											_1: {
												ctor: '::',
												_0: _p25._2,
												_1: {ctor: '[]'}
											}
										}));
							});
						var expandDeclaration = function (declaration) {
							var _p27 = declaration;
							switch (_p27.ctor) {
								case 'StyleBlockDeclaration':
									var newSelectors = A2(
										_elm_lang$core$List$concatMap,
										function (originalSelector) {
											return A2(
												_elm_lang$core$List$map,
												chain(originalSelector),
												{ctor: '::', _0: _p27._0._0, _1: _p27._0._1});
										},
										_rtfeldman$elm_css$Css_Preprocess_Resolve$collectSelectors(declarations));
									var newDeclarations = function () {
										var _p28 = newSelectors;
										if (_p28.ctor === '[]') {
											return {ctor: '[]'};
										} else {
											return {
												ctor: '::',
												_0: _rtfeldman$elm_css$Css_Structure$StyleBlockDeclaration(
													A3(
														_rtfeldman$elm_css$Css_Structure$StyleBlock,
														_p28._0,
														_p28._1,
														{ctor: '[]'})),
												_1: {ctor: '[]'}
											};
										}
									}();
									return _rtfeldman$elm_css$Css_Preprocess_Resolve$concatDeclarationsAndWarnings(
										{
											ctor: '::',
											_0: A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$applyMixins, _p27._0._2, newDeclarations),
											_1: {ctor: '[]'}
										});
								case 'MediaRule':
									return A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolveMediaRule, _p27._0, _p27._1);
								case 'SupportsRule':
									return A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolveSupportsRule, _p27._0, _p27._1);
								case 'DocumentRule':
									return A5(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolveDocumentRule, _p27._0, _p27._1, _p27._2, _p27._3, _p27._4);
								case 'PageRule':
									return A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolvePageRule, _p27._0, _p27._1);
								case 'FontFace':
									return _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveFontFace(_p27._0);
								case 'Keyframes':
									return A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolveKeyframes, _p27._0, _p27._1);
								case 'Viewport':
									return _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveViewport(_p27._0);
								case 'CounterStyle':
									return _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveCounterStyle(_p27._0);
								default:
									return _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveFontFeatureValues(_p27._0);
							}
						};
						return _rtfeldman$elm_css$Css_Preprocess_Resolve$concatDeclarationsAndWarnings(
							A2(
								F2(
									function (x, y) {
										return A2(_elm_lang$core$Basics_ops['++'], x, y);
									}),
								{
									ctor: '::',
									_0: A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$applyMixins, _p21._1, declarations),
									_1: {ctor: '[]'}
								},
								A2(
									_elm_lang$core$List$map,
									expandDeclaration,
									A2(_elm_lang$core$List$concatMap, _rtfeldman$elm_css$Css_Preprocess$unwrapSnippet, _p21._0._1))));
					case 'WithPseudoElement':
						return A4(
							_rtfeldman$elm_css$Css_Preprocess_Resolve$applyNestedMixinsToLast,
							_p21._0._1,
							_p21._1,
							_rtfeldman$elm_css$Css_Structure$appendPseudoElementToLastSelector(_p21._0._0),
							declarations);
					case 'WithMedia':
						var newDeclarations = function () {
							var _p29 = _rtfeldman$elm_css$Css_Preprocess_Resolve$collectSelectors(declarations);
							if (_p29.ctor === '[]') {
								return {ctor: '[]'};
							} else {
								return {
									ctor: '::',
									_0: A2(
										_rtfeldman$elm_css$Css_Structure$MediaRule,
										_p21._0._0,
										{
											ctor: '::',
											_0: A3(
												_rtfeldman$elm_css$Css_Structure$StyleBlock,
												_p29._0,
												_p29._1,
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								};
							}
						}();
						return _rtfeldman$elm_css$Css_Preprocess_Resolve$concatDeclarationsAndWarnings(
							{
								ctor: '::',
								_0: A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$applyMixins, _p21._1, declarations),
								_1: {
									ctor: '::',
									_0: A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$applyMixins, _p21._0._1, newDeclarations),
									_1: {ctor: '[]'}
								}
							});
					default:
						var _v19 = A2(_elm_lang$core$Basics_ops['++'], _p21._0._0, _p21._1),
							_v20 = declarations;
						mixins = _v19;
						declarations = _v20;
						continue applyMixins;
				}
			}
		}
	});
var _rtfeldman$elm_css$Css_Preprocess_Resolve$applyNestedMixinsToLast = F4(
	function (nestedMixins, rest, f, declarations) {
		var withoutParent = function (decls) {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				{ctor: '[]'},
				_elm_lang$core$List$tail(decls));
		};
		var nextResult = A2(
			_rtfeldman$elm_css$Css_Preprocess_Resolve$applyMixins,
			rest,
			A2(
				_elm_lang$core$Maybe$withDefault,
				{ctor: '[]'},
				_rtfeldman$elm_css$Css_Preprocess_Resolve$lastDeclaration(declarations)));
		var newDeclarations = function () {
			var _p30 = {
				ctor: '_Tuple2',
				_0: _elm_lang$core$List$head(nextResult.declarations),
				_1: _elm_lang$core$List$head(
					_elm_lang$core$List$reverse(declarations))
			};
			if (((_p30.ctor === '_Tuple2') && (_p30._0.ctor === 'Just')) && (_p30._1.ctor === 'Just')) {
				var _p32 = _p30._1._0;
				var _p31 = _p30._0._0;
				return A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$List$take,
						_elm_lang$core$List$length(declarations) - 1,
						declarations),
					{
						ctor: '::',
						_0: (!_elm_lang$core$Native_Utils.eq(_p32, _p31)) ? _p31 : _p32,
						_1: {ctor: '[]'}
					});
			} else {
				return declarations;
			}
		}();
		var handleInitial = function (declarationsAndWarnings) {
			var result = A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$applyMixins, nestedMixins, declarationsAndWarnings.declarations);
			return {
				warnings: A2(_elm_lang$core$Basics_ops['++'], declarationsAndWarnings.warnings, result.warnings),
				declarations: result.declarations
			};
		};
		var insertMixinsToNestedDecl = function (lastDecl) {
			return _rtfeldman$elm_css$Css_Preprocess_Resolve$concatDeclarationsAndWarnings(
				A2(
					_rtfeldman$elm_css$Css_Structure$mapLast,
					handleInitial,
					A2(
						_elm_lang$core$List$map,
						function (declaration) {
							return {
								declarations: {
									ctor: '::',
									_0: declaration,
									_1: {ctor: '[]'}
								},
								warnings: {ctor: '[]'}
							};
						},
						A2(_rtfeldman$elm_css$Css_Structure$concatMapLastStyleBlock, f, lastDecl))));
		};
		var initialResult = A2(
			_elm_lang$core$Maybe$withDefault,
			{
				warnings: {ctor: '[]'},
				declarations: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$Maybe$map,
				insertMixinsToNestedDecl,
				_rtfeldman$elm_css$Css_Preprocess_Resolve$lastDeclaration(declarations)));
		return {
			warnings: A2(_elm_lang$core$Basics_ops['++'], initialResult.warnings, nextResult.warnings),
			declarations: A2(
				_elm_lang$core$Basics_ops['++'],
				newDeclarations,
				A2(
					_elm_lang$core$Basics_ops['++'],
					withoutParent(initialResult.declarations),
					withoutParent(nextResult.declarations)))
		};
	});
var _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveDocumentRule = F5(
	function (str1, str2, str3, str4, styleBlock) {
		var _p33 = _rtfeldman$elm_css$Css_Preprocess_Resolve$expandStyleBlock(styleBlock);
		var declarations = _p33.declarations;
		var warnings = _p33.warnings;
		return {
			declarations: A2(
				_elm_lang$core$List$map,
				A4(_rtfeldman$elm_css$Css_Preprocess_Resolve$toDocumentRule, str1, str2, str3, str4),
				declarations),
			warnings: warnings
		};
	});
var _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveSupportsRule = F2(
	function (str, snippets) {
		var _p34 = _rtfeldman$elm_css$Css_Preprocess_Resolve$extract(
			A2(_elm_lang$core$List$concatMap, _rtfeldman$elm_css$Css_Preprocess$unwrapSnippet, snippets));
		var declarations = _p34.declarations;
		var warnings = _p34.warnings;
		return {
			declarations: {
				ctor: '::',
				_0: A2(_rtfeldman$elm_css$Css_Structure$SupportsRule, str, declarations),
				_1: {ctor: '[]'}
			},
			warnings: warnings
		};
	});
var _rtfeldman$elm_css$Css_Preprocess_Resolve$extract = function (snippetDeclarations) {
	var _p35 = snippetDeclarations;
	if (_p35.ctor === '[]') {
		return {
			declarations: {ctor: '[]'},
			warnings: {ctor: '[]'}
		};
	} else {
		var _p36 = _rtfeldman$elm_css$Css_Preprocess_Resolve$toDeclarations(_p35._0);
		var declarations = _p36.declarations;
		var warnings = _p36.warnings;
		var nextResult = _rtfeldman$elm_css$Css_Preprocess_Resolve$extract(_p35._1);
		return {
			declarations: A2(_elm_lang$core$Basics_ops['++'], declarations, nextResult.declarations),
			warnings: A2(_elm_lang$core$Basics_ops['++'], warnings, nextResult.warnings)
		};
	}
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$toDeclarations = function (snippetDeclaration) {
	var _p37 = snippetDeclaration;
	switch (_p37.ctor) {
		case 'StyleBlockDeclaration':
			return _rtfeldman$elm_css$Css_Preprocess_Resolve$expandStyleBlock(_p37._0);
		case 'MediaRule':
			return A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolveMediaRule, _p37._0, _p37._1);
		case 'SupportsRule':
			return A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolveSupportsRule, _p37._0, _p37._1);
		case 'DocumentRule':
			return A5(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolveDocumentRule, _p37._0, _p37._1, _p37._2, _p37._3, _p37._4);
		case 'PageRule':
			return A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolvePageRule, _p37._0, _p37._1);
		case 'FontFace':
			return _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveFontFace(_p37._0);
		case 'Keyframes':
			return A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolveKeyframes, _p37._0, _p37._1);
		case 'Viewport':
			return _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveViewport(_p37._0);
		case 'CounterStyle':
			return _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveCounterStyle(_p37._0);
		default:
			return _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveFontFeatureValues(_p37._0);
	}
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$toStructure = function (_p38) {
	var _p39 = _p38;
	var _p40 = _rtfeldman$elm_css$Css_Preprocess_Resolve$extract(
		A2(_elm_lang$core$List$concatMap, _rtfeldman$elm_css$Css_Preprocess$unwrapSnippet, _p39.snippets));
	var warnings = _p40.warnings;
	var declarations = _p40.declarations;
	return {
		ctor: '_Tuple2',
		_0: {charset: _p39.charset, imports: _p39.imports, namespaces: _p39.namespaces, declarations: declarations},
		_1: warnings
	};
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$compile1 = function (sheet) {
	var _p41 = _rtfeldman$elm_css$Css_Preprocess_Resolve$toStructure(sheet);
	var structureStylesheet = _p41._0;
	var warnings = _p41._1;
	return {
		warnings: warnings,
		css: _rtfeldman$elm_css$Css_Structure_Output$prettyPrint(
			_rtfeldman$elm_css$Css_Structure$dropEmpty(structureStylesheet))
	};
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$compile = function (styles) {
	var results = A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Preprocess_Resolve$compile1, styles);
	return {
		warnings: A2(
			_elm_lang$core$List$concatMap,
			function (_) {
				return _.warnings;
			},
			results),
		css: A2(
			_elm_lang$core$String$join,
			'\n\n',
			A2(
				_elm_lang$core$List$map,
				function (_) {
					return _.css;
				},
				results))
	};
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$DeclarationsAndWarnings = F2(
	function (a, b) {
		return {declarations: a, warnings: b};
	});

var _rtfeldman$hex$Hex$toString = function (num) {
	return _elm_lang$core$String$fromList(
		(_elm_lang$core$Native_Utils.cmp(num, 0) < 0) ? {
			ctor: '::',
			_0: _elm_lang$core$Native_Utils.chr('-'),
			_1: A2(
				_rtfeldman$hex$Hex$unsafePositiveToDigits,
				{ctor: '[]'},
				_elm_lang$core$Basics$negate(num))
		} : A2(
			_rtfeldman$hex$Hex$unsafePositiveToDigits,
			{ctor: '[]'},
			num));
};
var _rtfeldman$hex$Hex$unsafePositiveToDigits = F2(
	function (digits, num) {
		unsafePositiveToDigits:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(num, 16) < 0) {
				return {
					ctor: '::',
					_0: _rtfeldman$hex$Hex$unsafeToDigit(num),
					_1: digits
				};
			} else {
				var _v0 = {
					ctor: '::',
					_0: _rtfeldman$hex$Hex$unsafeToDigit(
						A2(_elm_lang$core$Basics_ops['%'], num, 16)),
					_1: digits
				},
					_v1 = (num / 16) | 0;
				digits = _v0;
				num = _v1;
				continue unsafePositiveToDigits;
			}
		}
	});
var _rtfeldman$hex$Hex$unsafeToDigit = function (num) {
	var _p0 = num;
	switch (_p0) {
		case 0:
			return _elm_lang$core$Native_Utils.chr('0');
		case 1:
			return _elm_lang$core$Native_Utils.chr('1');
		case 2:
			return _elm_lang$core$Native_Utils.chr('2');
		case 3:
			return _elm_lang$core$Native_Utils.chr('3');
		case 4:
			return _elm_lang$core$Native_Utils.chr('4');
		case 5:
			return _elm_lang$core$Native_Utils.chr('5');
		case 6:
			return _elm_lang$core$Native_Utils.chr('6');
		case 7:
			return _elm_lang$core$Native_Utils.chr('7');
		case 8:
			return _elm_lang$core$Native_Utils.chr('8');
		case 9:
			return _elm_lang$core$Native_Utils.chr('9');
		case 10:
			return _elm_lang$core$Native_Utils.chr('a');
		case 11:
			return _elm_lang$core$Native_Utils.chr('b');
		case 12:
			return _elm_lang$core$Native_Utils.chr('c');
		case 13:
			return _elm_lang$core$Native_Utils.chr('d');
		case 14:
			return _elm_lang$core$Native_Utils.chr('e');
		case 15:
			return _elm_lang$core$Native_Utils.chr('f');
		default:
			return _elm_lang$core$Native_Utils.crashCase(
				'Hex',
				{
					start: {line: 138, column: 5},
					end: {line: 188, column: 84}
				},
				_p0)(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Tried to convert ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_rtfeldman$hex$Hex$toString(num),
						' to hexadecimal.')));
	}
};
var _rtfeldman$hex$Hex$fromStringHelp = F3(
	function (position, chars, accumulated) {
		var _p2 = chars;
		if (_p2.ctor === '[]') {
			return _elm_lang$core$Result$Ok(accumulated);
		} else {
			var recurse = function (additional) {
				return A3(
					_rtfeldman$hex$Hex$fromStringHelp,
					position - 1,
					_p2._1,
					accumulated + (additional * Math.pow(16, position)));
			};
			var _p3 = _p2._0;
			switch (_p3.valueOf()) {
				case '0':
					return recurse(0);
				case '1':
					return recurse(1);
				case '2':
					return recurse(2);
				case '3':
					return recurse(3);
				case '4':
					return recurse(4);
				case '5':
					return recurse(5);
				case '6':
					return recurse(6);
				case '7':
					return recurse(7);
				case '8':
					return recurse(8);
				case '9':
					return recurse(9);
				case 'a':
					return recurse(10);
				case 'b':
					return recurse(11);
				case 'c':
					return recurse(12);
				case 'd':
					return recurse(13);
				case 'e':
					return recurse(14);
				case 'f':
					return recurse(15);
				default:
					return _elm_lang$core$Result$Err(
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p3),
							' is not a valid hexadecimal character.'));
			}
		}
	});
var _rtfeldman$hex$Hex$fromString = function (str) {
	if (_elm_lang$core$String$isEmpty(str)) {
		return _elm_lang$core$Result$Err('Empty strings are not valid hexadecimal strings.');
	} else {
		var formatError = function (err) {
			return A2(
				_elm_lang$core$String$join,
				' ',
				{
					ctor: '::',
					_0: _elm_lang$core$Basics$toString(str),
					_1: {
						ctor: '::',
						_0: 'is not a valid hexadecimal string because',
						_1: {
							ctor: '::',
							_0: err,
							_1: {ctor: '[]'}
						}
					}
				});
		};
		var result = function () {
			if (A2(_elm_lang$core$String$startsWith, '-', str)) {
				var list = A2(
					_elm_lang$core$Maybe$withDefault,
					{ctor: '[]'},
					_elm_lang$core$List$tail(
						_elm_lang$core$String$toList(str)));
				return A2(
					_elm_lang$core$Result$map,
					_elm_lang$core$Basics$negate,
					A3(
						_rtfeldman$hex$Hex$fromStringHelp,
						_elm_lang$core$List$length(list) - 1,
						list,
						0));
			} else {
				return A3(
					_rtfeldman$hex$Hex$fromStringHelp,
					_elm_lang$core$String$length(str) - 1,
					_elm_lang$core$String$toList(str),
					0);
			}
		}();
		return A2(_elm_lang$core$Result$mapError, formatError, result);
	}
};

var _rtfeldman$elm_css$Css$asPairs = _rtfeldman$elm_css$Css_Preprocess$toPropertyPairs;
var _rtfeldman$elm_css$Css$collectSelectors = function (declarations) {
	collectSelectors:
	while (true) {
		var _p0 = declarations;
		if (_p0.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p0._0.ctor === 'StyleBlockDeclaration') {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					{ctor: '::', _0: _p0._0._0._0, _1: _p0._0._0._1},
					_rtfeldman$elm_css$Css$collectSelectors(_p0._1));
			} else {
				var _v1 = _p0._1;
				declarations = _v1;
				continue collectSelectors;
			}
		}
	}
};
var _rtfeldman$elm_css$Css$compile = _rtfeldman$elm_css$Css_Preprocess_Resolve$compile;
var _rtfeldman$elm_css$Css$stringsToValue = function (list) {
	return _elm_lang$core$List$isEmpty(list) ? {value: 'none'} : {
		value: A2(
			_elm_lang$core$String$join,
			', ',
			A2(
				_elm_lang$core$List$map,
				function (s) {
					return s;
				},
				list))
	};
};
var _rtfeldman$elm_css$Css$valuesOrNone = function (list) {
	return _elm_lang$core$List$isEmpty(list) ? {value: 'none'} : {
		value: A2(
			_elm_lang$core$String$join,
			' ',
			A2(
				_elm_lang$core$List$map,
				function (_) {
					return _.value;
				},
				list))
	};
};
var _rtfeldman$elm_css$Css$stringToInt = function (str) {
	return A2(
		_elm_lang$core$Result$withDefault,
		0,
		_elm_lang$core$String$toInt(str));
};
var _rtfeldman$elm_css$Css$numberToString = function (num) {
	return _elm_lang$core$Basics$toString(num + 0);
};
var _rtfeldman$elm_css$Css$numericalPercentageToString = function (value) {
	return A3(
		_elm_lang$core$Basics$flip,
		F2(
			function (x, y) {
				return A2(_elm_lang$core$Basics_ops['++'], x, y);
			}),
		'%',
		_rtfeldman$elm_css$Css$numberToString(
			A2(
				F2(
					function (x, y) {
						return x * y;
					}),
				100,
				value)));
};
var _rtfeldman$elm_css$Css$each = F2(
	function (snippetCreators, mixins) {
		var selectorsToSnippet = function (selectors) {
			var _p1 = selectors;
			if (_p1.ctor === '[]') {
				return _rtfeldman$elm_css$Css_Preprocess$Snippet(
					{ctor: '[]'});
			} else {
				return _rtfeldman$elm_css$Css_Preprocess$Snippet(
					{
						ctor: '::',
						_0: _rtfeldman$elm_css$Css_Preprocess$StyleBlockDeclaration(
							A3(_rtfeldman$elm_css$Css_Preprocess$StyleBlock, _p1._0, _p1._1, mixins)),
						_1: {ctor: '[]'}
					});
			}
		};
		return selectorsToSnippet(
			_rtfeldman$elm_css$Css$collectSelectors(
				A2(
					_elm_lang$core$List$concatMap,
					_rtfeldman$elm_css$Css_Preprocess$unwrapSnippet,
					A2(
						_elm_lang$core$List$map,
						F2(
							function (x, y) {
								return y(x);
							})(
							{ctor: '[]'}),
						snippetCreators))));
	});
var _rtfeldman$elm_css$Css$generalSiblings = _rtfeldman$elm_css$Css_Preprocess$NestSnippet(_rtfeldman$elm_css$Css_Structure$GeneralSibling);
var _rtfeldman$elm_css$Css$adjacentSiblings = _rtfeldman$elm_css$Css_Preprocess$NestSnippet(_rtfeldman$elm_css$Css_Structure$AdjacentSibling);
var _rtfeldman$elm_css$Css$descendants = _rtfeldman$elm_css$Css_Preprocess$NestSnippet(_rtfeldman$elm_css$Css_Structure$Descendant);
var _rtfeldman$elm_css$Css$withClass = function ($class) {
	return _rtfeldman$elm_css$Css_Preprocess$ExtendSelector(
		_rtfeldman$elm_css$Css_Structure$ClassSelector(
			A2(_rtfeldman$elm_css_util$Css_Helpers$identifierToString, '', $class)));
};
var _rtfeldman$elm_css$Css$children = _rtfeldman$elm_css$Css_Preprocess$NestSnippet(_rtfeldman$elm_css$Css_Structure$Child);
var _rtfeldman$elm_css$Css$pseudoElement = function (element) {
	return _rtfeldman$elm_css$Css_Preprocess$WithPseudoElement(
		_rtfeldman$elm_css$Css_Structure$PseudoElement(element));
};
var _rtfeldman$elm_css$Css$after = _rtfeldman$elm_css$Css$pseudoElement('after');
var _rtfeldman$elm_css$Css$before = _rtfeldman$elm_css$Css$pseudoElement('before');
var _rtfeldman$elm_css$Css$firstLetter = _rtfeldman$elm_css$Css$pseudoElement('first-letter');
var _rtfeldman$elm_css$Css$firstLine = _rtfeldman$elm_css$Css$pseudoElement('first-line');
var _rtfeldman$elm_css$Css$selection = _rtfeldman$elm_css$Css$pseudoElement('selection');
var _rtfeldman$elm_css$Css$pseudoClass = function ($class) {
	return _rtfeldman$elm_css$Css_Preprocess$ExtendSelector(
		_rtfeldman$elm_css$Css_Structure$PseudoClassSelector($class));
};
var _rtfeldman$elm_css$Css$active = _rtfeldman$elm_css$Css$pseudoClass('active');
var _rtfeldman$elm_css$Css$any = function (str) {
	return _rtfeldman$elm_css$Css$pseudoClass(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'any(',
			A2(_elm_lang$core$Basics_ops['++'], str, ')')));
};
var _rtfeldman$elm_css$Css$checked = _rtfeldman$elm_css$Css$pseudoClass('checked');
var _rtfeldman$elm_css$Css$disabled = _rtfeldman$elm_css$Css$pseudoClass('disabled');
var _rtfeldman$elm_css$Css$empty = _rtfeldman$elm_css$Css$pseudoClass('empty');
var _rtfeldman$elm_css$Css$enabled = _rtfeldman$elm_css$Css$pseudoClass('enabled');
var _rtfeldman$elm_css$Css$first = _rtfeldman$elm_css$Css$pseudoClass('first');
var _rtfeldman$elm_css$Css$firstChild = _rtfeldman$elm_css$Css$pseudoClass('first-child');
var _rtfeldman$elm_css$Css$firstOfType = _rtfeldman$elm_css$Css$pseudoClass('first-of-type');
var _rtfeldman$elm_css$Css$fullscreen = _rtfeldman$elm_css$Css$pseudoClass('fullscreen');
var _rtfeldman$elm_css$Css$focus = _rtfeldman$elm_css$Css$pseudoClass('focus');
var _rtfeldman$elm_css$Css$hover = _rtfeldman$elm_css$Css$pseudoClass('hover');
var _rtfeldman$elm_css$Css$visited = _rtfeldman$elm_css$Css$pseudoClass('visited');
var _rtfeldman$elm_css$Css$indeterminate = _rtfeldman$elm_css$Css$pseudoClass('indeterminate');
var _rtfeldman$elm_css$Css$invalid = _rtfeldman$elm_css$Css$pseudoClass('invalid');
var _rtfeldman$elm_css$Css$lang = function (str) {
	return _rtfeldman$elm_css$Css$pseudoClass(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'lang(',
			A2(_elm_lang$core$Basics_ops['++'], str, ')')));
};
var _rtfeldman$elm_css$Css$lastChild = _rtfeldman$elm_css$Css$pseudoClass('last-child');
var _rtfeldman$elm_css$Css$lastOfType = _rtfeldman$elm_css$Css$pseudoClass('last-of-type');
var _rtfeldman$elm_css$Css$link = _rtfeldman$elm_css$Css$pseudoClass('link');
var _rtfeldman$elm_css$Css$nthChild = function (str) {
	return _rtfeldman$elm_css$Css$pseudoClass(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'nth-child(',
			A2(_elm_lang$core$Basics_ops['++'], str, ')')));
};
var _rtfeldman$elm_css$Css$nthLastChild = function (str) {
	return _rtfeldman$elm_css$Css$pseudoClass(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'nth-last-child(',
			A2(_elm_lang$core$Basics_ops['++'], str, ')')));
};
var _rtfeldman$elm_css$Css$nthLastOfType = function (str) {
	return _rtfeldman$elm_css$Css$pseudoClass(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'nth-last-of-type(',
			A2(_elm_lang$core$Basics_ops['++'], str, ')')));
};
var _rtfeldman$elm_css$Css$nthOfType = function (str) {
	return _rtfeldman$elm_css$Css$pseudoClass(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'nth-of-type(',
			A2(_elm_lang$core$Basics_ops['++'], str, ')')));
};
var _rtfeldman$elm_css$Css$onlyChild = _rtfeldman$elm_css$Css$pseudoClass('only-child');
var _rtfeldman$elm_css$Css$onlyOfType = _rtfeldman$elm_css$Css$pseudoClass('only-of-type');
var _rtfeldman$elm_css$Css$optional = _rtfeldman$elm_css$Css$pseudoClass('optional');
var _rtfeldman$elm_css$Css$outOfRange = _rtfeldman$elm_css$Css$pseudoClass('out-of-range');
var _rtfeldman$elm_css$Css$readWrite = _rtfeldman$elm_css$Css$pseudoClass('read-write');
var _rtfeldman$elm_css$Css$required = _rtfeldman$elm_css$Css$pseudoClass('required');
var _rtfeldman$elm_css$Css$root = _rtfeldman$elm_css$Css$pseudoClass('root');
var _rtfeldman$elm_css$Css$scope = _rtfeldman$elm_css$Css$pseudoClass('scope');
var _rtfeldman$elm_css$Css$target = _rtfeldman$elm_css$Css$pseudoClass('target');
var _rtfeldman$elm_css$Css$valid = _rtfeldman$elm_css$Css$pseudoClass('valid');
var _rtfeldman$elm_css$Css$directionalityToString = function (directionality) {
	var _p2 = directionality;
	if (_p2.ctor === 'Ltr') {
		return 'ltr';
	} else {
		return 'rtl';
	}
};
var _rtfeldman$elm_css$Css$dir = function (directionality) {
	return _rtfeldman$elm_css$Css$pseudoClass(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'dir(',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_rtfeldman$elm_css$Css$directionalityToString(directionality),
				')')));
};
var _rtfeldman$elm_css$Css$propertyWithWarnings = F3(
	function (warnings, key, value) {
		return _rtfeldman$elm_css$Css_Preprocess$AppendProperty(
			{key: key, value: value, important: false, warnings: warnings});
	});
var _rtfeldman$elm_css$Css$property = _rtfeldman$elm_css$Css$propertyWithWarnings(
	{ctor: '[]'});
var _rtfeldman$elm_css$Css$makeSnippet = F2(
	function (mixins, sequence) {
		var selector = A3(
			_rtfeldman$elm_css$Css_Structure$Selector,
			sequence,
			{ctor: '[]'},
			_elm_lang$core$Maybe$Nothing);
		return _rtfeldman$elm_css$Css_Preprocess$Snippet(
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Css_Preprocess$StyleBlockDeclaration(
					A3(
						_rtfeldman$elm_css$Css_Preprocess$StyleBlock,
						selector,
						{ctor: '[]'},
						mixins)),
				_1: {ctor: '[]'}
			});
	});
var _rtfeldman$elm_css$Css$class = F2(
	function ($class, mixins) {
		return A2(
			_rtfeldman$elm_css$Css$makeSnippet,
			mixins,
			_rtfeldman$elm_css$Css_Structure$UniversalSelectorSequence(
				{
					ctor: '::',
					_0: _rtfeldman$elm_css$Css_Structure$ClassSelector(
						A2(_rtfeldman$elm_css_util$Css_Helpers$identifierToString, '', $class)),
					_1: {ctor: '[]'}
				}));
	});
var _rtfeldman$elm_css$Css$selector = F2(
	function (selectorStr, mixins) {
		return A2(
			_rtfeldman$elm_css$Css$makeSnippet,
			mixins,
			A2(
				_rtfeldman$elm_css$Css_Structure$CustomSelector,
				selectorStr,
				{ctor: '[]'}));
	});
var _rtfeldman$elm_css$Css$everything = function (mixins) {
	return A2(
		_rtfeldman$elm_css$Css$makeSnippet,
		mixins,
		_rtfeldman$elm_css$Css_Structure$UniversalSelectorSequence(
			{ctor: '[]'}));
};
var _rtfeldman$elm_css$Css$id = F2(
	function (identifier, mixins) {
		return A2(
			_rtfeldman$elm_css$Css$makeSnippet,
			mixins,
			_rtfeldman$elm_css$Css_Structure$UniversalSelectorSequence(
				{
					ctor: '::',
					_0: _rtfeldman$elm_css$Css_Structure$IdSelector(
						A2(_rtfeldman$elm_css_util$Css_Helpers$identifierToString, '', identifier)),
					_1: {ctor: '[]'}
				}));
	});
var _rtfeldman$elm_css$Css$mixin = _rtfeldman$elm_css$Css_Preprocess$ApplyMixins;
var _rtfeldman$elm_css$Css$stylesheet = _rtfeldman$elm_css$Css_Preprocess$stylesheet;
var _rtfeldman$elm_css$Css$animationNames = function (identifiers) {
	var value = A2(
		_elm_lang$core$String$join,
		', ',
		A2(
			_elm_lang$core$List$map,
			_rtfeldman$elm_css_util$Css_Helpers$identifierToString(''),
			identifiers));
	return A2(_rtfeldman$elm_css$Css$property, 'animation-name', value);
};
var _rtfeldman$elm_css$Css$animationName = function (identifier) {
	return _rtfeldman$elm_css$Css$animationNames(
		{
			ctor: '::',
			_0: identifier,
			_1: {ctor: '[]'}
		});
};
var _rtfeldman$elm_css$Css$fontWeight = function (_p3) {
	var _p4 = _p3;
	var _p5 = _p4.value;
	var validWeight = function (weight) {
		return (!_elm_lang$core$Native_Utils.eq(
			_p5,
			_elm_lang$core$Basics$toString(weight))) ? true : A2(
			_elm_lang$core$List$member,
			weight,
			A2(
				_elm_lang$core$List$map,
				F2(
					function (x, y) {
						return x * y;
					})(100),
				A2(_elm_lang$core$List$range, 1, 9)));
	};
	var warnings = validWeight(
		_rtfeldman$elm_css$Css$stringToInt(_p5)) ? {ctor: '[]'} : {
		ctor: '::',
		_0: A2(
			_elm_lang$core$Basics_ops['++'],
			'fontWeight ',
			A2(_elm_lang$core$Basics_ops['++'], _p5, ' is invalid. Valid weights are: 100, 200, 300, 400, 500, 600, 700, 800, 900. Please see https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Values')),
		_1: {ctor: '[]'}
	};
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, warnings, 'font-weight', _p5);
};
var _rtfeldman$elm_css$Css$fontFeatureSettingsList = function (featureTagValues) {
	var warnings = _elm_lang$core$List$concat(
		A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.warnings;
			},
			featureTagValues));
	var value = A2(
		_elm_lang$core$String$join,
		', ',
		A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.value;
			},
			featureTagValues));
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, warnings, 'font-feature-settings', value);
};
var _rtfeldman$elm_css$Css$fontFeatureSettings = function (_p6) {
	var _p7 = _p6;
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, _p7.warnings, 'font-feature-settings', _p7.value);
};
var _rtfeldman$elm_css$Css$qt = function (str) {
	return _elm_lang$core$Basics$toString(str);
};
var _rtfeldman$elm_css$Css$fontFace = function (value) {
	return A2(_elm_lang$core$Basics_ops['++'], 'font-face ', value);
};
var _rtfeldman$elm_css$Css$src = function (value) {
	return _elm_lang$core$Basics$toString(value.value);
};
var _rtfeldman$elm_css$Css$withMedia = _rtfeldman$elm_css$Css_Preprocess$WithMedia;
var _rtfeldman$elm_css$Css$media = F2(
	function (mediaQueries, snippets) {
		var nestedMediaRules = function (declarations) {
			nestedMediaRules:
			while (true) {
				var _p8 = declarations;
				if (_p8.ctor === '[]') {
					return {ctor: '[]'};
				} else {
					switch (_p8._0.ctor) {
						case 'StyleBlockDeclaration':
							var _v7 = _p8._1;
							declarations = _v7;
							continue nestedMediaRules;
						case 'MediaRule':
							return {
								ctor: '::',
								_0: A2(
									_rtfeldman$elm_css$Css_Preprocess$MediaRule,
									A2(_elm_lang$core$Basics_ops['++'], mediaQueries, _p8._0._0),
									_p8._0._1),
								_1: nestedMediaRules(_p8._1)
							};
						default:
							return {
								ctor: '::',
								_0: _p8._0,
								_1: nestedMediaRules(_p8._1)
							};
					}
				}
			}
		};
		var extractStyleBlocks = function (declarations) {
			extractStyleBlocks:
			while (true) {
				var _p9 = declarations;
				if (_p9.ctor === '[]') {
					return {ctor: '[]'};
				} else {
					if (_p9._0.ctor === 'StyleBlockDeclaration') {
						return {
							ctor: '::',
							_0: _p9._0._0,
							_1: extractStyleBlocks(_p9._1)
						};
					} else {
						var _v9 = _p9._1;
						declarations = _v9;
						continue extractStyleBlocks;
					}
				}
			}
		};
		var snippetDeclarations = A2(_elm_lang$core$List$concatMap, _rtfeldman$elm_css$Css_Preprocess$unwrapSnippet, snippets);
		var mediaRuleFromStyleBlocks = A2(
			_rtfeldman$elm_css$Css_Preprocess$MediaRule,
			mediaQueries,
			extractStyleBlocks(snippetDeclarations));
		return _rtfeldman$elm_css$Css_Preprocess$Snippet(
			{
				ctor: '::',
				_0: mediaRuleFromStyleBlocks,
				_1: nestedMediaRules(snippetDeclarations)
			});
	});
var _rtfeldman$elm_css$Css$mediaQuery = F2(
	function (queryString, snippets) {
		return A2(
			_rtfeldman$elm_css$Css$media,
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Css_Structure$MediaQuery(queryString),
				_1: {ctor: '[]'}
			},
			snippets);
	});
var _rtfeldman$elm_css$Css$color = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'color', c.value);
};
var _rtfeldman$elm_css$Css$backgroundColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'background-color', c.value);
};
var _rtfeldman$elm_css$Css$outlineColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'outline-color', c.value);
};
var _rtfeldman$elm_css$Css$borderColor4 = F4(
	function (c1, c2, c3, c4) {
		var value = A2(
			_elm_lang$core$String$join,
			' ',
			{
				ctor: '::',
				_0: c1.value,
				_1: {
					ctor: '::',
					_0: c2.value,
					_1: {
						ctor: '::',
						_0: c3.value,
						_1: {
							ctor: '::',
							_0: c4.value,
							_1: {ctor: '[]'}
						}
					}
				}
			});
		var warnings = A2(
			_elm_lang$core$Basics_ops['++'],
			c1.warnings,
			A2(
				_elm_lang$core$Basics_ops['++'],
				c2.warnings,
				A2(_elm_lang$core$Basics_ops['++'], c3.warnings, c4.warnings)));
		return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, warnings, 'border-color', value);
	});
var _rtfeldman$elm_css$Css$borderColor3 = F3(
	function (c1, c2, c3) {
		var value = A2(
			_elm_lang$core$String$join,
			' ',
			{
				ctor: '::',
				_0: c1.value,
				_1: {
					ctor: '::',
					_0: c2.value,
					_1: {
						ctor: '::',
						_0: c3.value,
						_1: {ctor: '[]'}
					}
				}
			});
		var warnings = A2(
			_elm_lang$core$Basics_ops['++'],
			c1.warnings,
			A2(_elm_lang$core$Basics_ops['++'], c2.warnings, c3.warnings));
		return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, warnings, 'border-color', value);
	});
var _rtfeldman$elm_css$Css$borderColor2 = F2(
	function (c1, c2) {
		var value = A2(
			_elm_lang$core$String$join,
			' ',
			{
				ctor: '::',
				_0: c1.value,
				_1: {
					ctor: '::',
					_0: c2.value,
					_1: {ctor: '[]'}
				}
			});
		var warnings = A2(_elm_lang$core$Basics_ops['++'], c1.warnings, c2.warnings);
		return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, warnings, 'border-color', value);
	});
var _rtfeldman$elm_css$Css$borderColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'border-color', c.value);
};
var _rtfeldman$elm_css$Css$borderBlockEndColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'border-block-end-color', c.value);
};
var _rtfeldman$elm_css$Css$borderTopColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'border-top-color', c.value);
};
var _rtfeldman$elm_css$Css$borderRightColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'border-right-color', c.value);
};
var _rtfeldman$elm_css$Css$borderLeftColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'border-left-color', c.value);
};
var _rtfeldman$elm_css$Css$borderInlineEndColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'border-inline-end-color', c.value);
};
var _rtfeldman$elm_css$Css$borderInlineStartColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'border-inline-start-color', c.value);
};
var _rtfeldman$elm_css$Css$borderBottomColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'border-bottom-color', c.value);
};
var _rtfeldman$elm_css$Css$borderBlockStartColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'border-block-start-color', c.value);
};
var _rtfeldman$elm_css$Css$featureOff = 0;
var _rtfeldman$elm_css$Css$featureOn = 1;
var _rtfeldman$elm_css$Css$displayFlex = A2(_rtfeldman$elm_css$Css$property, 'display', 'flex');
var _rtfeldman$elm_css$Css$textEmphasisColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'text-emphasis-color', c.value);
};
var _rtfeldman$elm_css$Css$textDecorationColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'text-decoration-color', c.value);
};
var _rtfeldman$elm_css$Css$prop6 = F7(
	function (key, argA, argB, argC, argD, argE, argF) {
		return A2(
			_rtfeldman$elm_css$Css$property,
			key,
			A2(
				_elm_lang$core$String$join,
				' ',
				{
					ctor: '::',
					_0: argA.value,
					_1: {
						ctor: '::',
						_0: argB.value,
						_1: {
							ctor: '::',
							_0: argC.value,
							_1: {
								ctor: '::',
								_0: argD.value,
								_1: {
									ctor: '::',
									_0: argE.value,
									_1: {
										ctor: '::',
										_0: argF.value,
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}));
	});
var _rtfeldman$elm_css$Css$boxShadow6 = _rtfeldman$elm_css$Css$prop6('box-shadow');
var _rtfeldman$elm_css$Css$prop5 = F6(
	function (key, argA, argB, argC, argD, argE) {
		return A2(
			_rtfeldman$elm_css$Css$property,
			key,
			A2(
				_elm_lang$core$String$join,
				' ',
				{
					ctor: '::',
					_0: argA.value,
					_1: {
						ctor: '::',
						_0: argB.value,
						_1: {
							ctor: '::',
							_0: argC.value,
							_1: {
								ctor: '::',
								_0: argD.value,
								_1: {
									ctor: '::',
									_0: argE.value,
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}));
	});
var _rtfeldman$elm_css$Css$boxShadow5 = _rtfeldman$elm_css$Css$prop5('box-shadow');
var _rtfeldman$elm_css$Css$prop4 = F5(
	function (key, argA, argB, argC, argD) {
		return A2(
			_rtfeldman$elm_css$Css$property,
			key,
			A2(
				_elm_lang$core$String$join,
				' ',
				{
					ctor: '::',
					_0: argA.value,
					_1: {
						ctor: '::',
						_0: argB.value,
						_1: {
							ctor: '::',
							_0: argC.value,
							_1: {
								ctor: '::',
								_0: argD.value,
								_1: {ctor: '[]'}
							}
						}
					}
				}));
	});
var _rtfeldman$elm_css$Css$textShadow4 = _rtfeldman$elm_css$Css$prop4('text-shadow');
var _rtfeldman$elm_css$Css$boxShadow4 = _rtfeldman$elm_css$Css$prop4('box-shadow');
var _rtfeldman$elm_css$Css$padding4 = _rtfeldman$elm_css$Css$prop4('padding');
var _rtfeldman$elm_css$Css$margin4 = _rtfeldman$elm_css$Css$prop4('margin');
var _rtfeldman$elm_css$Css$borderImageOutset4 = _rtfeldman$elm_css$Css$prop4('border-image-outset');
var _rtfeldman$elm_css$Css$borderImageWidth4 = _rtfeldman$elm_css$Css$prop4('border-image-width');
var _rtfeldman$elm_css$Css$borderRadius4 = _rtfeldman$elm_css$Css$prop4('border-radius');
var _rtfeldman$elm_css$Css$prop3 = F4(
	function (key, argA, argB, argC) {
		return A2(
			_rtfeldman$elm_css$Css$property,
			key,
			A2(
				_elm_lang$core$String$join,
				' ',
				{
					ctor: '::',
					_0: argA.value,
					_1: {
						ctor: '::',
						_0: argB.value,
						_1: {
							ctor: '::',
							_0: argC.value,
							_1: {ctor: '[]'}
						}
					}
				}));
	});
var _rtfeldman$elm_css$Css$textShadow3 = _rtfeldman$elm_css$Css$prop3('text-shadow');
var _rtfeldman$elm_css$Css$boxShadow3 = _rtfeldman$elm_css$Css$prop3('box-shadow');
var _rtfeldman$elm_css$Css$textIndent3 = _rtfeldman$elm_css$Css$prop3('text-indent');
var _rtfeldman$elm_css$Css$padding3 = _rtfeldman$elm_css$Css$prop3('padding');
var _rtfeldman$elm_css$Css$margin3 = _rtfeldman$elm_css$Css$prop3('margin');
var _rtfeldman$elm_css$Css$border3 = _rtfeldman$elm_css$Css$prop3('border');
var _rtfeldman$elm_css$Css$borderTop3 = _rtfeldman$elm_css$Css$prop3('border-top');
var _rtfeldman$elm_css$Css$borderBottom3 = _rtfeldman$elm_css$Css$prop3('border-bottom');
var _rtfeldman$elm_css$Css$borderLeft3 = _rtfeldman$elm_css$Css$prop3('border-left');
var _rtfeldman$elm_css$Css$borderRight3 = _rtfeldman$elm_css$Css$prop3('border-right');
var _rtfeldman$elm_css$Css$borderBlockStart3 = _rtfeldman$elm_css$Css$prop3('border-block-start');
var _rtfeldman$elm_css$Css$borderBlockEnd3 = _rtfeldman$elm_css$Css$prop3('border-block-end');
var _rtfeldman$elm_css$Css$borderInlineStart3 = _rtfeldman$elm_css$Css$prop3('border-block-start');
var _rtfeldman$elm_css$Css$borderInlineEnd3 = _rtfeldman$elm_css$Css$prop3('border-block-end');
var _rtfeldman$elm_css$Css$borderImageOutset3 = _rtfeldman$elm_css$Css$prop3('border-image-outset');
var _rtfeldman$elm_css$Css$borderImageWidth3 = _rtfeldman$elm_css$Css$prop3('border-image-width');
var _rtfeldman$elm_css$Css$borderRadius3 = _rtfeldman$elm_css$Css$prop3('border-radius');
var _rtfeldman$elm_css$Css$outline3 = _rtfeldman$elm_css$Css$prop3('outline');
var _rtfeldman$elm_css$Css$fontVariant3 = _rtfeldman$elm_css$Css$prop3('font-variant');
var _rtfeldman$elm_css$Css$fontVariantNumeric3 = _rtfeldman$elm_css$Css$prop3('font-variant-numeric');
var _rtfeldman$elm_css$Css$textDecoration3 = _rtfeldman$elm_css$Css$prop3('text-decoration');
var _rtfeldman$elm_css$Css$textDecorations3 = function (_p10) {
	return A2(
		_rtfeldman$elm_css$Css$prop3,
		'text-decoration',
		_rtfeldman$elm_css$Css$valuesOrNone(_p10));
};
var _rtfeldman$elm_css$Css$prop2 = F3(
	function (key, argA, argB) {
		return A2(
			_rtfeldman$elm_css$Css$property,
			key,
			A2(
				_elm_lang$core$String$join,
				' ',
				{
					ctor: '::',
					_0: argA.value,
					_1: {
						ctor: '::',
						_0: argB.value,
						_1: {ctor: '[]'}
					}
				}));
	});
var _rtfeldman$elm_css$Css$textShadow2 = _rtfeldman$elm_css$Css$prop2('text-shadow');
var _rtfeldman$elm_css$Css$boxShadow2 = _rtfeldman$elm_css$Css$prop2('box-shadow');
var _rtfeldman$elm_css$Css$textIndent2 = _rtfeldman$elm_css$Css$prop2('text-indent');
var _rtfeldman$elm_css$Css$padding2 = _rtfeldman$elm_css$Css$prop2('padding');
var _rtfeldman$elm_css$Css$margin2 = _rtfeldman$elm_css$Css$prop2('margin');
var _rtfeldman$elm_css$Css$border2 = _rtfeldman$elm_css$Css$prop2('border');
var _rtfeldman$elm_css$Css$borderTop2 = _rtfeldman$elm_css$Css$prop2('border-top');
var _rtfeldman$elm_css$Css$borderBottom2 = _rtfeldman$elm_css$Css$prop2('border-bottom');
var _rtfeldman$elm_css$Css$borderLeft2 = _rtfeldman$elm_css$Css$prop2('border-left');
var _rtfeldman$elm_css$Css$borderRight2 = _rtfeldman$elm_css$Css$prop2('border-right');
var _rtfeldman$elm_css$Css$borderBlockStart2 = _rtfeldman$elm_css$Css$prop2('border-block-start');
var _rtfeldman$elm_css$Css$borderBlockEnd2 = _rtfeldman$elm_css$Css$prop2('border-block-end');
var _rtfeldman$elm_css$Css$borderInlineStart2 = _rtfeldman$elm_css$Css$prop2('border-block-start');
var _rtfeldman$elm_css$Css$borderInlineEnd2 = _rtfeldman$elm_css$Css$prop2('border-block-end');
var _rtfeldman$elm_css$Css$borderImageOutset2 = _rtfeldman$elm_css$Css$prop2('border-image-outset');
var _rtfeldman$elm_css$Css$borderImageWidth2 = _rtfeldman$elm_css$Css$prop2('border-image-width');
var _rtfeldman$elm_css$Css$borderTopWidth2 = _rtfeldman$elm_css$Css$prop2('border-top-width');
var _rtfeldman$elm_css$Css$borderBottomLeftRadius2 = _rtfeldman$elm_css$Css$prop2('border-bottom-left-radius');
var _rtfeldman$elm_css$Css$borderBottomRightRadius2 = _rtfeldman$elm_css$Css$prop2('border-bottom-right-radius');
var _rtfeldman$elm_css$Css$borderTopLeftRadius2 = _rtfeldman$elm_css$Css$prop2('border-top-left-radius');
var _rtfeldman$elm_css$Css$borderTopRightRadius2 = _rtfeldman$elm_css$Css$prop2('border-top-right-radius');
var _rtfeldman$elm_css$Css$borderRadius2 = _rtfeldman$elm_css$Css$prop2('border-radius');
var _rtfeldman$elm_css$Css$borderSpacing2 = _rtfeldman$elm_css$Css$prop2('border-spacing');
var _rtfeldman$elm_css$Css$backgroundRepeat2 = _rtfeldman$elm_css$Css$prop2('background-repeat');
var _rtfeldman$elm_css$Css$backgroundPosition2 = _rtfeldman$elm_css$Css$prop2('background-position');
var _rtfeldman$elm_css$Css$backgroundSize2 = _rtfeldman$elm_css$Css$prop2('background-size');
var _rtfeldman$elm_css$Css$fontVariant2 = _rtfeldman$elm_css$Css$prop2('font-variant');
var _rtfeldman$elm_css$Css$fontVariantNumeric2 = _rtfeldman$elm_css$Css$prop2('font-variant-numeric');
var _rtfeldman$elm_css$Css$textDecoration2 = _rtfeldman$elm_css$Css$prop2('text-decoration');
var _rtfeldman$elm_css$Css$textDecorations2 = function (_p11) {
	return A2(
		_rtfeldman$elm_css$Css$prop2,
		'text-decoration',
		_rtfeldman$elm_css$Css$valuesOrNone(_p11));
};
var _rtfeldman$elm_css$Css$prop1 = F2(
	function (key, arg) {
		return A2(_rtfeldman$elm_css$Css$property, key, arg.value);
	});
var _rtfeldman$elm_css$Css$textRendering = _rtfeldman$elm_css$Css$prop1('text-rendering');
var _rtfeldman$elm_css$Css$textOrientation = _rtfeldman$elm_css$Css$prop1('text-orientation');
var _rtfeldman$elm_css$Css$textOverflow = _rtfeldman$elm_css$Css$prop1('text-overflow');
var _rtfeldman$elm_css$Css$textShadow = _rtfeldman$elm_css$Css$prop1('text-shadow');
var _rtfeldman$elm_css$Css$boxShadow = _rtfeldman$elm_css$Css$prop1('box-shadow');
var _rtfeldman$elm_css$Css$textIndent = _rtfeldman$elm_css$Css$prop1('text-indent');
var _rtfeldman$elm_css$Css$textTransform = _rtfeldman$elm_css$Css$prop1('text-transform');
var _rtfeldman$elm_css$Css$display = _rtfeldman$elm_css$Css$prop1('display');
var _rtfeldman$elm_css$Css$opacity = _rtfeldman$elm_css$Css$prop1('opacity');
var _rtfeldman$elm_css$Css$width = _rtfeldman$elm_css$Css$prop1('width');
var _rtfeldman$elm_css$Css$maxWidth = _rtfeldman$elm_css$Css$prop1('max-width');
var _rtfeldman$elm_css$Css$minWidth = _rtfeldman$elm_css$Css$prop1('min-width');
var _rtfeldman$elm_css$Css$height = _rtfeldman$elm_css$Css$prop1('height');
var _rtfeldman$elm_css$Css$minHeight = _rtfeldman$elm_css$Css$prop1('min-height');
var _rtfeldman$elm_css$Css$maxHeight = _rtfeldman$elm_css$Css$prop1('max-height');
var _rtfeldman$elm_css$Css$padding = _rtfeldman$elm_css$Css$prop1('padding');
var _rtfeldman$elm_css$Css$paddingBlockStart = _rtfeldman$elm_css$Css$prop1('padding-block-start');
var _rtfeldman$elm_css$Css$paddingBlockEnd = _rtfeldman$elm_css$Css$prop1('padding-block-end');
var _rtfeldman$elm_css$Css$paddingInlineStart = _rtfeldman$elm_css$Css$prop1('padding-inline-start');
var _rtfeldman$elm_css$Css$paddingInlineEnd = _rtfeldman$elm_css$Css$prop1('padding-inline-end');
var _rtfeldman$elm_css$Css$paddingTop = _rtfeldman$elm_css$Css$prop1('padding-top');
var _rtfeldman$elm_css$Css$paddingBottom = _rtfeldman$elm_css$Css$prop1('padding-bottom');
var _rtfeldman$elm_css$Css$paddingRight = _rtfeldman$elm_css$Css$prop1('padding-right');
var _rtfeldman$elm_css$Css$paddingLeft = _rtfeldman$elm_css$Css$prop1('padding-left');
var _rtfeldman$elm_css$Css$margin = _rtfeldman$elm_css$Css$prop1('margin');
var _rtfeldman$elm_css$Css$marginTop = _rtfeldman$elm_css$Css$prop1('margin-top');
var _rtfeldman$elm_css$Css$marginBottom = _rtfeldman$elm_css$Css$prop1('margin-bottom');
var _rtfeldman$elm_css$Css$marginRight = _rtfeldman$elm_css$Css$prop1('margin-right');
var _rtfeldman$elm_css$Css$marginLeft = _rtfeldman$elm_css$Css$prop1('margin-left');
var _rtfeldman$elm_css$Css$marginBlockStart = _rtfeldman$elm_css$Css$prop1('margin-block-start');
var _rtfeldman$elm_css$Css$marginBlockEnd = _rtfeldman$elm_css$Css$prop1('margin-block-end');
var _rtfeldman$elm_css$Css$marginInlineStart = _rtfeldman$elm_css$Css$prop1('margin-inline-start');
var _rtfeldman$elm_css$Css$marginInlineEnd = _rtfeldman$elm_css$Css$prop1('margin-inline-end');
var _rtfeldman$elm_css$Css$top = _rtfeldman$elm_css$Css$prop1('top');
var _rtfeldman$elm_css$Css$bottom = _rtfeldman$elm_css$Css$prop1('bottom');
var _rtfeldman$elm_css$Css$left = _rtfeldman$elm_css$Css$prop1('left');
var _rtfeldman$elm_css$Css$right = _rtfeldman$elm_css$Css$prop1('right');
var _rtfeldman$elm_css$Css$border = _rtfeldman$elm_css$Css$prop1('border');
var _rtfeldman$elm_css$Css$borderTop = _rtfeldman$elm_css$Css$prop1('border-top');
var _rtfeldman$elm_css$Css$borderBottom = _rtfeldman$elm_css$Css$prop1('border-bottom');
var _rtfeldman$elm_css$Css$borderLeft = _rtfeldman$elm_css$Css$prop1('border-left');
var _rtfeldman$elm_css$Css$borderRight = _rtfeldman$elm_css$Css$prop1('border-right');
var _rtfeldman$elm_css$Css$borderBlockStart = _rtfeldman$elm_css$Css$prop1('border-block-start');
var _rtfeldman$elm_css$Css$borderBlockEnd = _rtfeldman$elm_css$Css$prop1('border-block-end');
var _rtfeldman$elm_css$Css$borderInlineStart = _rtfeldman$elm_css$Css$prop1('border-block-start');
var _rtfeldman$elm_css$Css$borderInlineEnd = _rtfeldman$elm_css$Css$prop1('border-block-end');
var _rtfeldman$elm_css$Css$borderImageOutset = _rtfeldman$elm_css$Css$prop1('border-image-outset');
var _rtfeldman$elm_css$Css$borderImageWidth = _rtfeldman$elm_css$Css$prop1('border-image-width');
var _rtfeldman$elm_css$Css$borderBlockEndStyle = _rtfeldman$elm_css$Css$prop1('border-block-end-style');
var _rtfeldman$elm_css$Css$borderBlockStartStyle = _rtfeldman$elm_css$Css$prop1('border-block-start-style');
var _rtfeldman$elm_css$Css$borderInlineEndStyle = _rtfeldman$elm_css$Css$prop1('border-inline-end-style');
var _rtfeldman$elm_css$Css$borderBottomStyle = _rtfeldman$elm_css$Css$prop1('border-bottom-style');
var _rtfeldman$elm_css$Css$borderInlineStartStyle = _rtfeldman$elm_css$Css$prop1('border-inline-start-style');
var _rtfeldman$elm_css$Css$borderLeftStyle = _rtfeldman$elm_css$Css$prop1('border-left-style');
var _rtfeldman$elm_css$Css$borderRightStyle = _rtfeldman$elm_css$Css$prop1('border-right-style');
var _rtfeldman$elm_css$Css$borderTopStyle = _rtfeldman$elm_css$Css$prop1('border-top-style');
var _rtfeldman$elm_css$Css$borderStyle = _rtfeldman$elm_css$Css$prop1('border-style');
var _rtfeldman$elm_css$Css$borderCollapse = _rtfeldman$elm_css$Css$prop1('border-collapse');
var _rtfeldman$elm_css$Css$borderBottomWidth = _rtfeldman$elm_css$Css$prop1('border-bottom-width');
var _rtfeldman$elm_css$Css$borderInlineEndWidth = _rtfeldman$elm_css$Css$prop1('border-inline-end-width');
var _rtfeldman$elm_css$Css$borderLeftWidth = _rtfeldman$elm_css$Css$prop1('border-left-width');
var _rtfeldman$elm_css$Css$borderRightWidth = _rtfeldman$elm_css$Css$prop1('border-right-width');
var _rtfeldman$elm_css$Css$borderTopWidth = _rtfeldman$elm_css$Css$prop1('border-top-width');
var _rtfeldman$elm_css$Css$borderBottomLeftRadius = _rtfeldman$elm_css$Css$prop1('border-bottom-left-radius');
var _rtfeldman$elm_css$Css$borderBottomRightRadius = _rtfeldman$elm_css$Css$prop1('border-bottom-right-radius');
var _rtfeldman$elm_css$Css$borderTopLeftRadius = _rtfeldman$elm_css$Css$prop1('border-top-left-radius');
var _rtfeldman$elm_css$Css$borderTopRightRadius = _rtfeldman$elm_css$Css$prop1('border-top-right-radius');
var _rtfeldman$elm_css$Css$borderRadius = _rtfeldman$elm_css$Css$prop1('border-radius');
var _rtfeldman$elm_css$Css$borderSpacing = _rtfeldman$elm_css$Css$prop1('border-spacing');
var _rtfeldman$elm_css$Css$outline = _rtfeldman$elm_css$Css$prop1('outline');
var _rtfeldman$elm_css$Css$outlineWidth = _rtfeldman$elm_css$Css$prop1('outline-width');
var _rtfeldman$elm_css$Css$outlineStyle = _rtfeldman$elm_css$Css$prop1('outline-style');
var _rtfeldman$elm_css$Css$outlineOffset = _rtfeldman$elm_css$Css$prop1('outline-offset');
var _rtfeldman$elm_css$Css$resize = _rtfeldman$elm_css$Css$prop1('resize');
var _rtfeldman$elm_css$Css$fill = _rtfeldman$elm_css$Css$prop1('fill');
var _rtfeldman$elm_css$Css$overflow = _rtfeldman$elm_css$Css$prop1('overflow');
var _rtfeldman$elm_css$Css$overflowX = _rtfeldman$elm_css$Css$prop1('overflow-x');
var _rtfeldman$elm_css$Css$overflowY = _rtfeldman$elm_css$Css$prop1('overflow-y');
var _rtfeldman$elm_css$Css$overflowWrap = _rtfeldman$elm_css$Css$prop1('overflow-wrap');
var _rtfeldman$elm_css$Css$whiteSpace = _rtfeldman$elm_css$Css$prop1('white-space');
var _rtfeldman$elm_css$Css$backgroundRepeat = _rtfeldman$elm_css$Css$prop1('background-repeat');
var _rtfeldman$elm_css$Css$backgroundAttachment = _rtfeldman$elm_css$Css$prop1('background-attachment');
var _rtfeldman$elm_css$Css$backgroundClip = _rtfeldman$elm_css$Css$prop1('background-clip');
var _rtfeldman$elm_css$Css$backgroundOrigin = _rtfeldman$elm_css$Css$prop1('background-origin');
var _rtfeldman$elm_css$Css$backgroundImage = _rtfeldman$elm_css$Css$prop1('background-image');
var _rtfeldman$elm_css$Css$backgroundSize = _rtfeldman$elm_css$Css$prop1('background-size');
var _rtfeldman$elm_css$Css$lineHeight = _rtfeldman$elm_css$Css$prop1('line-height');
var _rtfeldman$elm_css$Css$letterSpacing = _rtfeldman$elm_css$Css$prop1('letter-spacing');
var _rtfeldman$elm_css$Css$fontFamily = _rtfeldman$elm_css$Css$prop1('font-family');
var _rtfeldman$elm_css$Css$fontFamilies = function (_p12) {
	return A2(
		_rtfeldman$elm_css$Css$prop1,
		'font-family',
		_rtfeldman$elm_css$Css$stringsToValue(_p12));
};
var _rtfeldman$elm_css$Css$fontSize = _rtfeldman$elm_css$Css$prop1('font-size');
var _rtfeldman$elm_css$Css$fontStyle = _rtfeldman$elm_css$Css$prop1('font-style');
var _rtfeldman$elm_css$Css$fontVariant = _rtfeldman$elm_css$Css$prop1('font-variant');
var _rtfeldman$elm_css$Css$fontVariantLigatures = _rtfeldman$elm_css$Css$prop1('font-variant-ligatures');
var _rtfeldman$elm_css$Css$fontVariantCaps = _rtfeldman$elm_css$Css$prop1('font-variant-caps');
var _rtfeldman$elm_css$Css$fontVariantNumeric = _rtfeldman$elm_css$Css$prop1('font-variant-numeric');
var _rtfeldman$elm_css$Css$fontVariantNumerics = function (_p13) {
	return A2(
		_rtfeldman$elm_css$Css$prop1,
		'font-variant-numeric',
		_rtfeldman$elm_css$Css$valuesOrNone(_p13));
};
var _rtfeldman$elm_css$Css$cursor = _rtfeldman$elm_css$Css$prop1('cursor');
var _rtfeldman$elm_css$Css$textDecoration = _rtfeldman$elm_css$Css$prop1('text-decoration');
var _rtfeldman$elm_css$Css$textDecorations = function (_p14) {
	return A2(
		_rtfeldman$elm_css$Css$prop1,
		'text-decoration',
		_rtfeldman$elm_css$Css$valuesOrNone(_p14));
};
var _rtfeldman$elm_css$Css$textDecorationLine = _rtfeldman$elm_css$Css$prop1('text-decoration-line');
var _rtfeldman$elm_css$Css$textDecorationLines = function (_p15) {
	return A2(
		_rtfeldman$elm_css$Css$prop1,
		'text-decoration-line',
		_rtfeldman$elm_css$Css$valuesOrNone(_p15));
};
var _rtfeldman$elm_css$Css$textDecorationStyle = _rtfeldman$elm_css$Css$prop1('text-decoration-style');
var _rtfeldman$elm_css$Css$zIndex = _rtfeldman$elm_css$Css$prop1('z-index');
var _rtfeldman$elm_css$Css$position = _rtfeldman$elm_css$Css$prop1('position');
var _rtfeldman$elm_css$Css$textBottom = _rtfeldman$elm_css$Css$prop1('text-bottom');
var _rtfeldman$elm_css$Css$textTop = _rtfeldman$elm_css$Css$prop1('text-top');
var _rtfeldman$elm_css$Css$super = _rtfeldman$elm_css$Css$prop1('super');
var _rtfeldman$elm_css$Css$sub = _rtfeldman$elm_css$Css$prop1('sub');
var _rtfeldman$elm_css$Css$baseline = _rtfeldman$elm_css$Css$prop1('baseline');
var _rtfeldman$elm_css$Css$middle = _rtfeldman$elm_css$Css$prop1('middle');
var _rtfeldman$elm_css$Css$stretch = _rtfeldman$elm_css$Css$prop1('stretch');
var _rtfeldman$elm_css$Css$spaceBetween = _rtfeldman$elm_css$Css$prop1('space-between');
var _rtfeldman$elm_css$Css$spaceAround = _rtfeldman$elm_css$Css$prop1('space-around');
var _rtfeldman$elm_css$Css$flexEnd = _rtfeldman$elm_css$Css$prop1('flex-end');
var _rtfeldman$elm_css$Css$flexStart = _rtfeldman$elm_css$Css$prop1('flex-start');
var _rtfeldman$elm_css$Css$order = _rtfeldman$elm_css$Css$prop1('order');
var _rtfeldman$elm_css$Css$flexFlow2 = _rtfeldman$elm_css$Css$prop2('flex-flow');
var _rtfeldman$elm_css$Css$flexFlow1 = _rtfeldman$elm_css$Css$prop1('flex-flow');
var _rtfeldman$elm_css$Css$flexDirection = _rtfeldman$elm_css$Css$prop1('flex-direction');
var _rtfeldman$elm_css$Css$flexWrap = _rtfeldman$elm_css$Css$prop1('flex-wrap');
var _rtfeldman$elm_css$Css$flexShrink = _rtfeldman$elm_css$Css$prop1('flex-shrink');
var _rtfeldman$elm_css$Css$flexGrow = _rtfeldman$elm_css$Css$prop1('flex-grow');
var _rtfeldman$elm_css$Css$flexBasis = _rtfeldman$elm_css$Css$prop1('flex-basis');
var _rtfeldman$elm_css$Css$flex3 = _rtfeldman$elm_css$Css$prop3('flex');
var _rtfeldman$elm_css$Css$flex2 = _rtfeldman$elm_css$Css$prop2('flex');
var _rtfeldman$elm_css$Css$flex = _rtfeldman$elm_css$Css$prop1('flex');
var _rtfeldman$elm_css$Css$listStyle3 = _rtfeldman$elm_css$Css$prop3('list-style');
var _rtfeldman$elm_css$Css$listStyle2 = _rtfeldman$elm_css$Css$prop2('list-style');
var _rtfeldman$elm_css$Css$listStyle = _rtfeldman$elm_css$Css$prop1('list-style');
var _rtfeldman$elm_css$Css$listStyleType = _rtfeldman$elm_css$Css$prop1('list-style-type');
var _rtfeldman$elm_css$Css$listStylePosition = _rtfeldman$elm_css$Css$prop1('list-style-position');
var _rtfeldman$elm_css$Css$transformStyle = _rtfeldman$elm_css$Css$prop1('transform-style');
var _rtfeldman$elm_css$Css$boxSizing = _rtfeldman$elm_css$Css$prop1('box-sizing');
var _rtfeldman$elm_css$Css$transformBox = _rtfeldman$elm_css$Css$prop1('transform-box');
var _rtfeldman$elm_css$Css$transforms = function (_p16) {
	return A2(
		_rtfeldman$elm_css$Css$prop1,
		'transform',
		_rtfeldman$elm_css$Css$valuesOrNone(_p16));
};
var _rtfeldman$elm_css$Css$transform = function (only) {
	return _rtfeldman$elm_css$Css$transforms(
		{
			ctor: '::',
			_0: only,
			_1: {ctor: '[]'}
		});
};
var _rtfeldman$elm_css$Css$true = _rtfeldman$elm_css$Css$prop1('true');
var _rtfeldman$elm_css$Css$matchParent = _rtfeldman$elm_css$Css$prop1('match-parent');
var _rtfeldman$elm_css$Css$end = _rtfeldman$elm_css$Css$prop1('end');
var _rtfeldman$elm_css$Css$start = _rtfeldman$elm_css$Css$prop1('start');
var _rtfeldman$elm_css$Css$justifyAll = _rtfeldman$elm_css$Css$prop1('justify-all');
var _rtfeldman$elm_css$Css$textJustify = _rtfeldman$elm_css$Css$prop1('text-justify');
var _rtfeldman$elm_css$Css$center = _rtfeldman$elm_css$Css$prop1('center');
var _rtfeldman$elm_css$Css$withPrecedingHash = function (str) {
	return A2(_elm_lang$core$String$startsWith, '#', str) ? str : A2(
		_elm_lang$core$String$cons,
		_elm_lang$core$Native_Utils.chr('#'),
		str);
};
var _rtfeldman$elm_css$Css$luminosity = _rtfeldman$elm_css$Css$prop1('luminosity');
var _rtfeldman$elm_css$Css$saturation = _rtfeldman$elm_css$Css$prop1('saturation');
var _rtfeldman$elm_css$Css$hue = _rtfeldman$elm_css$Css$prop1('hue');
var _rtfeldman$elm_css$Css$exclusion = _rtfeldman$elm_css$Css$prop1('exclusion');
var _rtfeldman$elm_css$Css$difference = _rtfeldman$elm_css$Css$prop1('difference');
var _rtfeldman$elm_css$Css$softLight = _rtfeldman$elm_css$Css$prop1('soft-light');
var _rtfeldman$elm_css$Css$hardLight = _rtfeldman$elm_css$Css$prop1('hard-light');
var _rtfeldman$elm_css$Css$colorBurn = _rtfeldman$elm_css$Css$prop1('color-burn');
var _rtfeldman$elm_css$Css$colorDodge = _rtfeldman$elm_css$Css$prop1('color-dodge');
var _rtfeldman$elm_css$Css$lighten = _rtfeldman$elm_css$Css$prop1('lighten');
var _rtfeldman$elm_css$Css$darken = _rtfeldman$elm_css$Css$prop1('darken');
var _rtfeldman$elm_css$Css$overlay = _rtfeldman$elm_css$Css$prop1('overlay');
var _rtfeldman$elm_css$Css$screenBlendMode = _rtfeldman$elm_css$Css$prop1('screen');
var _rtfeldman$elm_css$Css$multiply = _rtfeldman$elm_css$Css$prop1('multiply');
var _rtfeldman$elm_css$Css$important = _rtfeldman$elm_css$Css_Preprocess$mapLastProperty(
	function (property) {
		return _elm_lang$core$Native_Utils.update(
			property,
			{important: true});
	});
var _rtfeldman$elm_css$Css$all = _rtfeldman$elm_css$Css$prop1('all');
var _rtfeldman$elm_css$Css$combineLengths = F3(
	function (operation, first, second) {
		var numericValue = A2(operation, first.numericValue, second.numericValue);
		var value = A2(
			_elm_lang$core$String$join,
			'',
			A2(
				_elm_lang$core$List$filter,
				function (_p17) {
					return !_elm_lang$core$String$isEmpty(_p17);
				},
				{
					ctor: '::',
					_0: _elm_lang$core$Basics$toString(numericValue),
					_1: {
						ctor: '::',
						_0: first.unitLabel,
						_1: {ctor: '[]'}
					}
				}));
		return _elm_lang$core$Native_Utils.update(
			first,
			{value: value, numericValue: numericValue});
	});
var _rtfeldman$elm_css$Css_ops = _rtfeldman$elm_css$Css_ops || {};
_rtfeldman$elm_css$Css_ops['|*|'] = _rtfeldman$elm_css$Css$combineLengths(
	F2(
		function (x, y) {
			return x * y;
		}));
var _rtfeldman$elm_css$Css_ops = _rtfeldman$elm_css$Css_ops || {};
_rtfeldman$elm_css$Css_ops['|/|'] = _rtfeldman$elm_css$Css$combineLengths(
	F2(
		function (x, y) {
			return x / y;
		}));
var _rtfeldman$elm_css$Css_ops = _rtfeldman$elm_css$Css_ops || {};
_rtfeldman$elm_css$Css_ops['|-|'] = _rtfeldman$elm_css$Css$combineLengths(
	F2(
		function (x, y) {
			return x - y;
		}));
var _rtfeldman$elm_css$Css_ops = _rtfeldman$elm_css$Css_ops || {};
_rtfeldman$elm_css$Css_ops['|+|'] = _rtfeldman$elm_css$Css$combineLengths(
	F2(
		function (x, y) {
			return x + y;
		}));
var _rtfeldman$elm_css$Css$getOverloadedProperty = F3(
	function (functionName, desiredKey, mixin) {
		getOverloadedProperty:
		while (true) {
			var _p18 = mixin;
			switch (_p18.ctor) {
				case 'AppendProperty':
					return A2(_rtfeldman$elm_css$Css$property, desiredKey, _p18._0.key);
				case 'ExtendSelector':
					return A3(
						_rtfeldman$elm_css$Css$propertyWithWarnings,
						{
							ctor: '::',
							_0: A2(
								_elm_lang$core$Basics_ops['++'],
								'Cannot apply ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									functionName,
									A2(
										_elm_lang$core$Basics_ops['++'],
										' with inapplicable mixin for selector ',
										_elm_lang$core$Basics$toString(_p18._0)))),
							_1: {ctor: '[]'}
						},
						desiredKey,
						'');
				case 'NestSnippet':
					return A3(
						_rtfeldman$elm_css$Css$propertyWithWarnings,
						{
							ctor: '::',
							_0: A2(
								_elm_lang$core$Basics_ops['++'],
								'Cannot apply ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									functionName,
									A2(
										_elm_lang$core$Basics_ops['++'],
										' with inapplicable mixin for combinator ',
										_elm_lang$core$Basics$toString(_p18._0)))),
							_1: {ctor: '[]'}
						},
						desiredKey,
						'');
				case 'WithPseudoElement':
					return A3(
						_rtfeldman$elm_css$Css$propertyWithWarnings,
						{
							ctor: '::',
							_0: A2(
								_elm_lang$core$Basics_ops['++'],
								'Cannot apply ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									functionName,
									A2(
										_elm_lang$core$Basics_ops['++'],
										' with inapplicable mixin for pseudo-element setter ',
										_elm_lang$core$Basics$toString(_p18._0)))),
							_1: {ctor: '[]'}
						},
						desiredKey,
						'');
				case 'WithMedia':
					return A3(
						_rtfeldman$elm_css$Css$propertyWithWarnings,
						{
							ctor: '::',
							_0: A2(
								_elm_lang$core$Basics_ops['++'],
								'Cannot apply ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									functionName,
									A2(
										_elm_lang$core$Basics_ops['++'],
										' with inapplicable mixin for media query ',
										_elm_lang$core$Basics$toString(_p18._0)))),
							_1: {ctor: '[]'}
						},
						desiredKey,
						'');
				default:
					if (_p18._0.ctor === '[]') {
						return A3(
							_rtfeldman$elm_css$Css$propertyWithWarnings,
							{
								ctor: '::',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									'Cannot apply ',
									A2(_elm_lang$core$Basics_ops['++'], functionName, ' with empty mixin. ')),
								_1: {ctor: '[]'}
							},
							desiredKey,
							'');
					} else {
						if (_p18._0._1.ctor === '[]') {
							var _v11 = functionName,
								_v12 = desiredKey,
								_v13 = _p18._0._0;
							functionName = _v11;
							desiredKey = _v12;
							mixin = _v13;
							continue getOverloadedProperty;
						} else {
							var _v14 = functionName,
								_v15 = desiredKey,
								_v16 = _rtfeldman$elm_css$Css_Preprocess$ApplyMixins(_p18._0._1);
							functionName = _v14;
							desiredKey = _v15;
							mixin = _v16;
							continue getOverloadedProperty;
						}
					}
			}
		}
	});
var _rtfeldman$elm_css$Css$cssFunction = F2(
	function (funcName, args) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			funcName,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_elm_lang$core$String$join, ', ', args),
					')')));
	});
var _rtfeldman$elm_css$Css$tv = _rtfeldman$elm_css$Css_Structure$MediaQuery('tv');
var _rtfeldman$elm_css$Css$projection = _rtfeldman$elm_css$Css_Structure$MediaQuery('projection');
var _rtfeldman$elm_css$Css$print = _rtfeldman$elm_css$Css_Structure$MediaQuery('print');
var _rtfeldman$elm_css$Css$screen = _rtfeldman$elm_css$Css_Structure$MediaQuery('screen');
var _rtfeldman$elm_css$Css$ExplicitLength = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return {value: a, numericValue: b, units: c, unitLabel: d, length: e, lengthOrAuto: f, lengthOrNumber: g, lengthOrNone: h, lengthOrMinMaxDimension: i, lengthOrNoneOrMinMaxDimension: j, textIndent: k, flexBasis: l, lengthOrNumberOrAutoOrNoneOrContent: m, fontSize: n, lengthOrAutoOrCoverOrContain: o};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _rtfeldman$elm_css$Css$NonMixable = {};
var _rtfeldman$elm_css$Css$BasicProperty = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return function (r) {
																		return function (s) {
																			return function (t) {
																				return function (u) {
																					return function (v) {
																						return function (w) {
																							return function (x) {
																								return function (y) {
																									return function (z) {
																										return function (_1) {
																											return function (_2) {
																												return function (_3) {
																													return function (_4) {
																														return function (_5) {
																															return function (_6) {
																																return function (_7) {
																																	return function (_8) {
																																		return function (_9) {
																																			return function (_10) {
																																				return function (_11) {
																																					return function (_12) {
																																						return function (_13) {
																																							return function (_14) {
																																								return function (_15) {
																																									return function (_16) {
																																										return function (_17) {
																																											return function (_18) {
																																												return function (_19) {
																																													return function (_20) {
																																														return function (_21) {
																																															return function (_22) {
																																																return {value: a, all: b, alignItems: c, borderStyle: d, boxSizing: e, color: f, cursor: g, display: h, flexBasis: i, flexWrap: j, flexDirection: k, flexDirectionOrWrap: l, justifyContent: m, none: n, number: o, outline: p, overflow: q, textDecorationLine: r, textRendering: s, textIndent: t, textDecorationStyle: u, length: v, lengthOrAuto: w, lengthOrNone: x, lengthOrNumber: y, lengthOrMinMaxDimension: z, lengthOrNoneOrMinMaxDimension: _1, lengthOrNumberOrAutoOrNoneOrContent: _2, listStyleType: _3, listStylePosition: _4, listStyleTypeOrPositionOrImage: _5, fontFamily: _6, fontSize: _7, fontStyle: _8, fontWeight: _9, fontVariant: _10, units: _11, numericValue: _12, unitLabel: _13, warnings: _14, backgroundRepeat: _15, backgroundRepeatShorthand: _16, backgroundAttachment: _17, backgroundBlendMode: _18, backgroundOrigin: _19, backgroundImage: _20, lengthOrAutoOrCoverOrContain: _21, intOrAuto: _22};
																																															};
																																														};
																																													};
																																												};
																																											};
																																										};
																																									};
																																								};
																																							};
																																						};
																																					};
																																				};
																																			};
																																		};
																																	};
																																};
																															};
																														};
																													};
																												};
																											};
																										};
																									};
																								};
																							};
																						};
																					};
																				};
																			};
																		};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _rtfeldman$elm_css$Css$Compatible = {ctor: 'Compatible'};
var _rtfeldman$elm_css$Css$transparent = {
	value: 'transparent',
	color: _rtfeldman$elm_css$Css$Compatible,
	warnings: {ctor: '[]'}
};
var _rtfeldman$elm_css$Css$colorValueForOverloadedProperty = _rtfeldman$elm_css$Css$transparent;
var _rtfeldman$elm_css$Css$backgroundBlendMode = function (fn) {
	return A3(
		_rtfeldman$elm_css$Css$getOverloadedProperty,
		'backgroundBlendMode',
		'background-blend-mode',
		fn(_rtfeldman$elm_css$Css$colorValueForOverloadedProperty));
};
var _rtfeldman$elm_css$Css$currentColor = {
	value: 'currentColor',
	color: _rtfeldman$elm_css$Css$Compatible,
	warnings: {ctor: '[]'}
};
var _rtfeldman$elm_css$Css$visible = {value: 'visible', overflow: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$scroll = {value: 'scroll', overflow: _rtfeldman$elm_css$Css$Compatible, backgroundAttachment: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$breakWord = {value: 'break-word', overflowWrap: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$both = {value: 'both', resize: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$horizontal = {value: 'horizontal', resize: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$vertical = {value: 'vertical', resize: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$paddingBox = {value: 'padding-box', backgroundClip: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$url = function (urlValue) {
	return {
		value: A2(
			_elm_lang$core$Basics_ops['++'],
			'url(',
			A2(_elm_lang$core$Basics_ops['++'], urlValue, ')')),
		backgroundImage: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$cover = {value: 'cover', lengthOrAutoOrCoverOrContain: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$contain = {value: 'contain', lengthOrAutoOrCoverOrContain: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$hidden = {value: 'hidden', overflow: _rtfeldman$elm_css$Css$Compatible, borderStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$rgb = F3(
	function (red, green, blue) {
		var warnings = ((_elm_lang$core$Native_Utils.cmp(red, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(red, 255) > 0) || ((_elm_lang$core$Native_Utils.cmp(green, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(green, 255) > 0) || ((_elm_lang$core$Native_Utils.cmp(blue, 0) < 0) || (_elm_lang$core$Native_Utils.cmp(blue, 255) > 0)))))) ? {
			ctor: '::',
			_0: A2(
				_elm_lang$core$Basics_ops['++'],
				'RGB color values must be between 0 and 255. rgb(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(red),
					A2(
						_elm_lang$core$Basics_ops['++'],
						', ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(green),
							A2(
								_elm_lang$core$Basics_ops['++'],
								', ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(blue),
									') is not valid.')))))),
			_1: {ctor: '[]'}
		} : {ctor: '[]'};
		return {
			value: A2(
				_rtfeldman$elm_css$Css$cssFunction,
				'rgb',
				A2(
					_elm_lang$core$List$map,
					_rtfeldman$elm_css$Css$numberToString,
					{
						ctor: '::',
						_0: red,
						_1: {
							ctor: '::',
							_0: green,
							_1: {
								ctor: '::',
								_0: blue,
								_1: {ctor: '[]'}
							}
						}
					})),
			color: _rtfeldman$elm_css$Css$Compatible,
			warnings: warnings,
			red: red,
			green: green,
			blue: blue,
			alpha: 1
		};
	});
var _rtfeldman$elm_css$Css$rgba = F4(
	function (red, green, blue, alpha) {
		var warnings = ((_elm_lang$core$Native_Utils.cmp(red, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(red, 255) > 0) || ((_elm_lang$core$Native_Utils.cmp(green, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(green, 255) > 0) || ((_elm_lang$core$Native_Utils.cmp(blue, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(blue, 255) > 0) || ((_elm_lang$core$Native_Utils.cmp(alpha, 0) < 0) || (_elm_lang$core$Native_Utils.cmp(alpha, 1) > 0)))))))) ? {
			ctor: '::',
			_0: A2(
				_elm_lang$core$Basics_ops['++'],
				'RGB color values must be between 0 and 255, and the alpha in RGBA must be between 0 and 1. rgba(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(red),
					A2(
						_elm_lang$core$Basics_ops['++'],
						', ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(green),
							A2(
								_elm_lang$core$Basics_ops['++'],
								', ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(blue),
									A2(
										_elm_lang$core$Basics_ops['++'],
										', ',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_elm_lang$core$Basics$toString(alpha),
											') is not valid.')))))))),
			_1: {ctor: '[]'}
		} : {ctor: '[]'};
		return {
			value: A2(
				_rtfeldman$elm_css$Css$cssFunction,
				'rgba',
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$List$map,
						_rtfeldman$elm_css$Css$numberToString,
						{
							ctor: '::',
							_0: red,
							_1: {
								ctor: '::',
								_0: green,
								_1: {
									ctor: '::',
									_0: blue,
									_1: {ctor: '[]'}
								}
							}
						}),
					{
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$numberToString(alpha),
						_1: {ctor: '[]'}
					})),
			color: _rtfeldman$elm_css$Css$Compatible,
			warnings: warnings,
			red: red,
			green: green,
			blue: blue,
			alpha: alpha
		};
	});
var _rtfeldman$elm_css$Css$erroneousHex = function (str) {
	return {
		value: _rtfeldman$elm_css$Css$withPrecedingHash(str),
		color: _rtfeldman$elm_css$Css$Compatible,
		red: 0,
		green: 0,
		blue: 0,
		alpha: 1,
		warnings: _elm_lang$core$List$singleton(
			A2(
				_elm_lang$core$String$join,
				' ',
				{
					ctor: '::',
					_0: 'Hex color strings must contain exactly 3, 4, 6, or 8 hexadecimal digits, optionally preceded by \"#\".',
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Basics$toString(str),
						_1: {
							ctor: '::',
							_0: 'is an invalid hex color string.',
							_1: {
								ctor: '::',
								_0: 'Please see: https://drafts.csswg.org/css-color/#hex-notation',
								_1: {ctor: '[]'}
							}
						}
					}
				}))
	};
};
var _rtfeldman$elm_css$Css$validHex = F5(
	function (str, _p22, _p21, _p20, _p19) {
		var _p23 = _p22;
		var _p24 = _p21;
		var _p25 = _p20;
		var _p26 = _p19;
		var toResult = function (_p27) {
			return _rtfeldman$hex$Hex$fromString(
				_elm_lang$core$String$toLower(
					_elm_lang$core$String$fromList(_p27)));
		};
		var results = {
			ctor: '_Tuple4',
			_0: toResult(
				{
					ctor: '::',
					_0: _p23._0,
					_1: {
						ctor: '::',
						_0: _p23._1,
						_1: {ctor: '[]'}
					}
				}),
			_1: toResult(
				{
					ctor: '::',
					_0: _p24._0,
					_1: {
						ctor: '::',
						_0: _p24._1,
						_1: {ctor: '[]'}
					}
				}),
			_2: toResult(
				{
					ctor: '::',
					_0: _p25._0,
					_1: {
						ctor: '::',
						_0: _p25._1,
						_1: {ctor: '[]'}
					}
				}),
			_3: toResult(
				{
					ctor: '::',
					_0: _p26._0,
					_1: {
						ctor: '::',
						_0: _p26._1,
						_1: {ctor: '[]'}
					}
				})
		};
		var _p28 = results;
		if (((((_p28.ctor === '_Tuple4') && (_p28._0.ctor === 'Ok')) && (_p28._1.ctor === 'Ok')) && (_p28._2.ctor === 'Ok')) && (_p28._3.ctor === 'Ok')) {
			return {
				value: _rtfeldman$elm_css$Css$withPrecedingHash(str),
				color: _rtfeldman$elm_css$Css$Compatible,
				red: _p28._0._0,
				green: _p28._1._0,
				blue: _p28._2._0,
				alpha: _elm_lang$core$Basics$toFloat(_p28._3._0) / 255,
				warnings: {ctor: '[]'}
			};
		} else {
			return _rtfeldman$elm_css$Css$erroneousHex(str);
		}
	});
var _rtfeldman$elm_css$Css$hex = function (str) {
	var withoutHash = A2(_elm_lang$core$String$startsWith, '#', str) ? A2(_elm_lang$core$String$dropLeft, 1, str) : str;
	var _p29 = _elm_lang$core$String$toList(withoutHash);
	_v22_4:
	do {
		if (((_p29.ctor === '::') && (_p29._1.ctor === '::')) && (_p29._1._1.ctor === '::')) {
			if (_p29._1._1._1.ctor === '[]') {
				var _p32 = _p29._0;
				var _p31 = _p29._1._0;
				var _p30 = _p29._1._1._0;
				return A5(
					_rtfeldman$elm_css$Css$validHex,
					str,
					{ctor: '_Tuple2', _0: _p32, _1: _p32},
					{ctor: '_Tuple2', _0: _p31, _1: _p31},
					{ctor: '_Tuple2', _0: _p30, _1: _p30},
					{
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.chr('f'),
						_1: _elm_lang$core$Native_Utils.chr('f')
					});
			} else {
				if (_p29._1._1._1._1.ctor === '[]') {
					var _p36 = _p29._0;
					var _p35 = _p29._1._0;
					var _p34 = _p29._1._1._0;
					var _p33 = _p29._1._1._1._0;
					return A5(
						_rtfeldman$elm_css$Css$validHex,
						str,
						{ctor: '_Tuple2', _0: _p36, _1: _p36},
						{ctor: '_Tuple2', _0: _p35, _1: _p35},
						{ctor: '_Tuple2', _0: _p34, _1: _p34},
						{ctor: '_Tuple2', _0: _p33, _1: _p33});
				} else {
					if (_p29._1._1._1._1._1.ctor === '::') {
						if (_p29._1._1._1._1._1._1.ctor === '[]') {
							return A5(
								_rtfeldman$elm_css$Css$validHex,
								str,
								{ctor: '_Tuple2', _0: _p29._0, _1: _p29._1._0},
								{ctor: '_Tuple2', _0: _p29._1._1._0, _1: _p29._1._1._1._0},
								{ctor: '_Tuple2', _0: _p29._1._1._1._1._0, _1: _p29._1._1._1._1._1._0},
								{
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.chr('f'),
									_1: _elm_lang$core$Native_Utils.chr('f')
								});
						} else {
							if ((_p29._1._1._1._1._1._1._1.ctor === '::') && (_p29._1._1._1._1._1._1._1._1.ctor === '[]')) {
								return A5(
									_rtfeldman$elm_css$Css$validHex,
									str,
									{ctor: '_Tuple2', _0: _p29._0, _1: _p29._1._0},
									{ctor: '_Tuple2', _0: _p29._1._1._0, _1: _p29._1._1._1._0},
									{ctor: '_Tuple2', _0: _p29._1._1._1._1._0, _1: _p29._1._1._1._1._1._0},
									{ctor: '_Tuple2', _0: _p29._1._1._1._1._1._1._0, _1: _p29._1._1._1._1._1._1._1._0});
							} else {
								break _v22_4;
							}
						}
					} else {
						break _v22_4;
					}
				}
			}
		} else {
			break _v22_4;
		}
	} while(false);
	return _rtfeldman$elm_css$Css$erroneousHex(str);
};
var _rtfeldman$elm_css$Css$hslaToRgba = F6(
	function (value, warnings, hue, saturation, lightness, hslAlpha) {
		var _p37 = _elm_lang$core$Color$toRgb(
			A4(_elm_lang$core$Color$hsla, hue, saturation, lightness, hslAlpha));
		var red = _p37.red;
		var green = _p37.green;
		var blue = _p37.blue;
		var alpha = _p37.alpha;
		return {value: value, color: _rtfeldman$elm_css$Css$Compatible, red: red, green: green, blue: blue, alpha: alpha, warnings: warnings};
	});
var _rtfeldman$elm_css$Css$hsl = F3(
	function (hue, saturation, lightness) {
		var valuesList = {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$numberToString(hue),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$numericalPercentageToString(saturation),
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$numericalPercentageToString(lightness),
					_1: {ctor: '[]'}
				}
			}
		};
		var value = A2(_rtfeldman$elm_css$Css$cssFunction, 'hsl', valuesList);
		var warnings = ((_elm_lang$core$Native_Utils.cmp(hue, 360) > 0) || ((_elm_lang$core$Native_Utils.cmp(hue, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(saturation, 1) > 0) || ((_elm_lang$core$Native_Utils.cmp(saturation, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(lightness, 1) > 0) || (_elm_lang$core$Native_Utils.cmp(lightness, 0) < 0)))))) ? {
			ctor: '::',
			_0: A2(
				_elm_lang$core$Basics_ops['++'],
				'HSL color values must have an H value between 0 and 360 (as in degrees) and S and L values between 0 and 1. ',
				A2(_elm_lang$core$Basics_ops['++'], value, ' is not valid.')),
			_1: {ctor: '[]'}
		} : {ctor: '[]'};
		return A6(_rtfeldman$elm_css$Css$hslaToRgba, value, warnings, hue, saturation, lightness, 1);
	});
var _rtfeldman$elm_css$Css$hsla = F4(
	function (hue, saturation, lightness, alpha) {
		var valuesList = {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$numberToString(hue),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$numericalPercentageToString(saturation),
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$numericalPercentageToString(lightness),
					_1: {
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$numberToString(alpha),
						_1: {ctor: '[]'}
					}
				}
			}
		};
		var value = A2(_rtfeldman$elm_css$Css$cssFunction, 'hsla', valuesList);
		var warnings = ((_elm_lang$core$Native_Utils.cmp(hue, 360) > 0) || ((_elm_lang$core$Native_Utils.cmp(hue, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(saturation, 1) > 0) || ((_elm_lang$core$Native_Utils.cmp(saturation, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(lightness, 1) > 0) || ((_elm_lang$core$Native_Utils.cmp(lightness, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(alpha, 1) > 0) || (_elm_lang$core$Native_Utils.cmp(alpha, 0) < 0)))))))) ? {
			ctor: '::',
			_0: A2(
				_elm_lang$core$Basics_ops['++'],
				'HSLA color values must have an H value between 0 and 360 (as in degrees) and S, L, and A values between 0 and 1. ',
				A2(_elm_lang$core$Basics_ops['++'], value, ' is not valid.')),
			_1: {ctor: '[]'}
		} : {ctor: '[]'};
		return A6(_rtfeldman$elm_css$Css$hslaToRgba, value, warnings, hue, saturation, lightness, alpha);
	});
var _rtfeldman$elm_css$Css$optimizeSpeed = {value: 'optimizeSpeed', textRendering: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$optimizeLegibility = {value: 'optimizeLegibility', textRendering: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$geometricPrecision = {value: 'geometricPrecision', textRendering: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$hanging = {value: 'hanging', textIndent: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$eachLine = {value: 'each-line', textIndent: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$mixed = {value: 'mixed', textOrientation: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$upright = {value: 'upright', textOrientation: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$sideways = {value: 'sideways', textOrientation: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$capitalize = {value: 'capitalize', textTransform: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$uppercase = {value: 'uppercase', textTransform: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$lowercase = {value: 'lowercase', textTransform: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$fullWidth = {value: 'full-width', textTransform: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$ellipsis = {value: 'ellipsis', textOverflow: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$clip = {value: 'clip', textOverflow: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$wavy = {value: 'wavy', textDecorationStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$dotted = {value: 'dotted', borderStyle: _rtfeldman$elm_css$Css$Compatible, textDecorationStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$dashed = {value: 'dashed', borderStyle: _rtfeldman$elm_css$Css$Compatible, textDecorationStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$solid = {value: 'solid', borderStyle: _rtfeldman$elm_css$Css$Compatible, textDecorationStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$double = {value: 'double', borderStyle: _rtfeldman$elm_css$Css$Compatible, textDecorationStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$groove = {value: 'groove', borderStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$ridge = {value: 'ridge', borderStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$inset = {value: 'inset', borderStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$outset = {value: 'outset', borderStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$separate = {value: 'separate', borderCollapse: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$collapse = {value: 'collapse', borderCollapse: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$lengthConverter = F3(
	function (units, unitLabel, numericValue) {
		return {
			value: A2(
				_elm_lang$core$Basics_ops['++'],
				_rtfeldman$elm_css$Css$numberToString(numericValue),
				unitLabel),
			numericValue: numericValue,
			units: units,
			unitLabel: unitLabel,
			length: _rtfeldman$elm_css$Css$Compatible,
			lengthOrAuto: _rtfeldman$elm_css$Css$Compatible,
			lengthOrNumber: _rtfeldman$elm_css$Css$Compatible,
			lengthOrNone: _rtfeldman$elm_css$Css$Compatible,
			lengthOrMinMaxDimension: _rtfeldman$elm_css$Css$Compatible,
			lengthOrNoneOrMinMaxDimension: _rtfeldman$elm_css$Css$Compatible,
			textIndent: _rtfeldman$elm_css$Css$Compatible,
			flexBasis: _rtfeldman$elm_css$Css$Compatible,
			lengthOrNumberOrAutoOrNoneOrContent: _rtfeldman$elm_css$Css$Compatible,
			fontSize: _rtfeldman$elm_css$Css$Compatible,
			lengthOrAutoOrCoverOrContain: _rtfeldman$elm_css$Css$Compatible
		};
	});
var _rtfeldman$elm_css$Css$angleConverter = F2(
	function (suffix, num) {
		return {
			value: A2(
				_elm_lang$core$Basics_ops['++'],
				_rtfeldman$elm_css$Css$numberToString(num),
				suffix),
			angle: _rtfeldman$elm_css$Css$Compatible
		};
	});
var _rtfeldman$elm_css$Css$deg = _rtfeldman$elm_css$Css$angleConverter('deg');
var _rtfeldman$elm_css$Css$grad = _rtfeldman$elm_css$Css$angleConverter('grad');
var _rtfeldman$elm_css$Css$rad = _rtfeldman$elm_css$Css$angleConverter('rad');
var _rtfeldman$elm_css$Css$turn = _rtfeldman$elm_css$Css$angleConverter('turn');
var _rtfeldman$elm_css$Css$matrix = F6(
	function (a, b, c, d, tx, ty) {
		return {
			value: A2(
				_rtfeldman$elm_css$Css$cssFunction,
				'matrix',
				A2(
					_elm_lang$core$List$map,
					_rtfeldman$elm_css$Css$numberToString,
					{
						ctor: '::',
						_0: a,
						_1: {
							ctor: '::',
							_0: b,
							_1: {
								ctor: '::',
								_0: c,
								_1: {
									ctor: '::',
									_0: d,
									_1: {
										ctor: '::',
										_0: tx,
										_1: {
											ctor: '::',
											_0: ty,
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					})),
			transform: _rtfeldman$elm_css$Css$Compatible
		};
	});
var _rtfeldman$elm_css$Css$matrix3d = function (a1) {
	return function (a2) {
		return function (a3) {
			return function (a4) {
				return function (b1) {
					return function (b2) {
						return function (b3) {
							return function (b4) {
								return function (c1) {
									return function (c2) {
										return function (c3) {
											return function (c4) {
												return function (d1) {
													return function (d2) {
														return function (d3) {
															return function (d4) {
																return {
																	value: A2(
																		_rtfeldman$elm_css$Css$cssFunction,
																		'matrix3d',
																		A2(
																			_elm_lang$core$List$map,
																			_rtfeldman$elm_css$Css$numberToString,
																			{
																				ctor: '::',
																				_0: a1,
																				_1: {
																					ctor: '::',
																					_0: a2,
																					_1: {
																						ctor: '::',
																						_0: a3,
																						_1: {
																							ctor: '::',
																							_0: a4,
																							_1: {
																								ctor: '::',
																								_0: b1,
																								_1: {
																									ctor: '::',
																									_0: b2,
																									_1: {
																										ctor: '::',
																										_0: b3,
																										_1: {
																											ctor: '::',
																											_0: b4,
																											_1: {
																												ctor: '::',
																												_0: c1,
																												_1: {
																													ctor: '::',
																													_0: c2,
																													_1: {
																														ctor: '::',
																														_0: c3,
																														_1: {
																															ctor: '::',
																															_0: c4,
																															_1: {
																																ctor: '::',
																																_0: d1,
																																_1: {
																																	ctor: '::',
																																	_0: d2,
																																	_1: {
																																		ctor: '::',
																																		_0: d3,
																																		_1: {
																																			ctor: '::',
																																			_0: d4,
																																			_1: {ctor: '[]'}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			})),
																	transform: _rtfeldman$elm_css$Css$Compatible
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _rtfeldman$elm_css$Css$perspective = function (l) {
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'perspective',
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$numberToString(l),
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$rotate = function (_p38) {
	var _p39 = _p38;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'rotate',
			{
				ctor: '::',
				_0: _p39.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$rotateX = function (_p40) {
	var _p41 = _p40;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'rotateX',
			{
				ctor: '::',
				_0: _p41.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$rotateY = function (_p42) {
	var _p43 = _p42;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'rotateY',
			{
				ctor: '::',
				_0: _p43.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$rotateZ = function (_p44) {
	var _p45 = _p44;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'rotateZ',
			{
				ctor: '::',
				_0: _p45.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$rotate3d = F4(
	function (x, y, z, _p46) {
		var _p47 = _p46;
		var coordsAsStrings = A2(
			_elm_lang$core$List$map,
			_rtfeldman$elm_css$Css$numberToString,
			{
				ctor: '::',
				_0: x,
				_1: {
					ctor: '::',
					_0: y,
					_1: {
						ctor: '::',
						_0: z,
						_1: {ctor: '[]'}
					}
				}
			});
		return {
			value: A2(
				_rtfeldman$elm_css$Css$cssFunction,
				'rotate3d',
				A2(
					_elm_lang$core$Basics_ops['++'],
					coordsAsStrings,
					{
						ctor: '::',
						_0: _p47.value,
						_1: {ctor: '[]'}
					})),
			transform: _rtfeldman$elm_css$Css$Compatible
		};
	});
var _rtfeldman$elm_css$Css$scale = function (x) {
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'scale',
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$numberToString(x),
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$scale2 = F2(
	function (x, y) {
		return {
			value: A2(
				_rtfeldman$elm_css$Css$cssFunction,
				'scale',
				A2(
					_elm_lang$core$List$map,
					_rtfeldman$elm_css$Css$numberToString,
					{
						ctor: '::',
						_0: x,
						_1: {
							ctor: '::',
							_0: y,
							_1: {ctor: '[]'}
						}
					})),
			transform: _rtfeldman$elm_css$Css$Compatible
		};
	});
var _rtfeldman$elm_css$Css$scaleX = function (x) {
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'scaleX',
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$numberToString(x),
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$scaleY = function (y) {
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'scaleY',
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$numberToString(y),
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$scale3d = F3(
	function (x, y, z) {
		return {
			value: A2(
				_rtfeldman$elm_css$Css$cssFunction,
				'scale3d',
				A2(
					_elm_lang$core$List$map,
					_rtfeldman$elm_css$Css$numberToString,
					{
						ctor: '::',
						_0: x,
						_1: {
							ctor: '::',
							_0: y,
							_1: {
								ctor: '::',
								_0: z,
								_1: {ctor: '[]'}
							}
						}
					})),
			transform: _rtfeldman$elm_css$Css$Compatible
		};
	});
var _rtfeldman$elm_css$Css$skew = function (_p48) {
	var _p49 = _p48;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'skew',
			{
				ctor: '::',
				_0: _p49.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$skew2 = F2(
	function (ax, ay) {
		return {
			value: A2(
				_rtfeldman$elm_css$Css$cssFunction,
				'skew',
				{
					ctor: '::',
					_0: ax.value,
					_1: {
						ctor: '::',
						_0: ay.value,
						_1: {ctor: '[]'}
					}
				}),
			transform: _rtfeldman$elm_css$Css$Compatible
		};
	});
var _rtfeldman$elm_css$Css$skewX = function (_p50) {
	var _p51 = _p50;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'skewX',
			{
				ctor: '::',
				_0: _p51.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$skewY = function (_p52) {
	var _p53 = _p52;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'skewY',
			{
				ctor: '::',
				_0: _p53.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$translate = function (_p54) {
	var _p55 = _p54;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'translate',
			{
				ctor: '::',
				_0: _p55.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$translate2 = F2(
	function (tx, ty) {
		return {
			value: A2(
				_rtfeldman$elm_css$Css$cssFunction,
				'translate',
				{
					ctor: '::',
					_0: tx.value,
					_1: {
						ctor: '::',
						_0: ty.value,
						_1: {ctor: '[]'}
					}
				}),
			transform: _rtfeldman$elm_css$Css$Compatible
		};
	});
var _rtfeldman$elm_css$Css$translateX = function (_p56) {
	var _p57 = _p56;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'translateX',
			{
				ctor: '::',
				_0: _p57.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$translateY = function (_p58) {
	var _p59 = _p58;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'translateY',
			{
				ctor: '::',
				_0: _p59.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$translateZ = function (_p60) {
	var _p61 = _p60;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'translateZ',
			{
				ctor: '::',
				_0: _p61.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css$Compatible
	};
};
var _rtfeldman$elm_css$Css$translate3d = F3(
	function (tx, ty, tz) {
		return {
			value: A2(
				_rtfeldman$elm_css$Css$cssFunction,
				'translate3d',
				{
					ctor: '::',
					_0: tx.value,
					_1: {
						ctor: '::',
						_0: ty.value,
						_1: {
							ctor: '::',
							_0: tz.value,
							_1: {ctor: '[]'}
						}
					}
				}),
			transform: _rtfeldman$elm_css$Css$Compatible
		};
	});
var _rtfeldman$elm_css$Css$fillBox = {value: 'fill-box', transformBox: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$contentBox = {value: 'content-box', boxSizing: _rtfeldman$elm_css$Css$Compatible, backgroundClip: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$borderBox = {value: 'border-box', boxSizing: _rtfeldman$elm_css$Css$Compatible, backgroundClip: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$viewBox = {value: 'view-box', transformBox: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$preserve3d = {value: 'preserve-3d', transformStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$flat = {value: 'flat', transformStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$inside = {value: 'inside', listStylePosition: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$outside = {value: 'outside', listStylePosition: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$disc = {value: 'disc', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$circle = {value: 'circle', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$square = {value: 'square', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$decimal = {value: 'decimal', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$decimalLeadingZero = {value: 'decimal-leading-zero', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$lowerRoman = {value: 'lower-roman', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$upperRoman = {value: 'upper-roman', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$lowerGreek = {value: 'lower-greek', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$upperGreek = {value: 'upper-greek', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$lowerAlpha = {value: 'lower-alpha', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$upperAlpha = {value: 'upper-alpha', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$lowerLatin = {value: 'lower-latin', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$upperLatin = {value: 'upper-latin', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$arabicIndic = {value: 'arabic-indic', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$armenian = {value: 'armenian', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$bengali = {value: 'bengali', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$cjkEarthlyBranch = {value: 'cjk-earthly-branch', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$cjkHeavenlyStem = {value: 'cjk-heavenly-stem', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$devanagari = {value: 'devanagari', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$georgian = {value: 'georgian', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$gujarati = {value: 'gujarati', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$gurmukhi = {value: 'gurmukhi', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$kannada = {value: 'kannada', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$khmer = {value: 'khmer', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$lao = {value: 'lao', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$malayalam = {value: 'malayalam', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$myanmar = {value: 'myanmar', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$oriya = {value: 'oriya', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$telugu = {value: 'telugu', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$thai = {value: 'thai', listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$content = {value: 'content', flexBasis: _rtfeldman$elm_css$Css$Compatible, lengthOrNumberOrAutoOrNoneOrContent: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$wrap = {value: 'wrap', flexWrap: _rtfeldman$elm_css$Css$Compatible, flexDirectionOrWrap: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$wrapReverse = _elm_lang$core$Native_Utils.update(
	_rtfeldman$elm_css$Css$wrap,
	{value: 'wrap-reverse'});
var _rtfeldman$elm_css$Css$row = {value: 'row', flexDirection: _rtfeldman$elm_css$Css$Compatible, flexDirectionOrWrap: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$rowReverse = _elm_lang$core$Native_Utils.update(
	_rtfeldman$elm_css$Css$row,
	{value: 'row-reverse'});
var _rtfeldman$elm_css$Css$column = _elm_lang$core$Native_Utils.update(
	_rtfeldman$elm_css$Css$row,
	{value: 'column'});
var _rtfeldman$elm_css$Css$columnReverse = _elm_lang$core$Native_Utils.update(
	_rtfeldman$elm_css$Css$row,
	{value: 'column-reverse'});
var _rtfeldman$elm_css$Css$underline = {value: 'underline', textDecorationLine: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$overline = {value: 'overline', textDecorationLine: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$lineThrough = {value: 'line-through', textDecorationLine: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$repeatX = {value: 'repeat-x', backgroundRepeatShorthand: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$repeatY = {value: 'repeat-y', backgroundRepeatShorthand: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$repeat = {value: 'repeat', backgroundRepeat: _rtfeldman$elm_css$Css$Compatible, backgroundRepeatShorthand: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$space = {value: 'space', backgroundRepeat: _rtfeldman$elm_css$Css$Compatible, backgroundRepeatShorthand: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$round = {value: 'round', backgroundRepeat: _rtfeldman$elm_css$Css$Compatible, backgroundRepeatShorthand: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$noRepeat = {value: 'no-repeat', backgroundRepeat: _rtfeldman$elm_css$Css$Compatible, backgroundRepeatShorthand: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$local = {value: 'local', backgroundAttachment: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$block = {value: 'block', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$inlineBlock = {value: 'inline-block', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$inline = {value: 'inline', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$table = {value: 'table', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$inlineTable = {value: 'inline-table', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$tableRow = {value: 'table-row', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$tableCell = {value: 'table-cell', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$tableColumn = {value: 'table-column', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$tableCaption = {value: 'table-caption', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$tableRowGroup = {value: 'table-row-group', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$tableColumnGroup = {value: 'table-column-group', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$tableHeaderGroup = {value: 'table-header-group', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$tableFooterGroup = {value: 'table-footer-group', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$listItem = {value: 'list-item', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$inlineListItem = {value: 'inline-list-item', display: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$none = {value: 'none', cursor: _rtfeldman$elm_css$Css$Compatible, none: _rtfeldman$elm_css$Css$Compatible, lengthOrNone: _rtfeldman$elm_css$Css$Compatible, lengthOrNoneOrMinMaxDimension: _rtfeldman$elm_css$Css$Compatible, lengthOrNumberOrAutoOrNoneOrContent: _rtfeldman$elm_css$Css$Compatible, textDecorationLine: _rtfeldman$elm_css$Css$Compatible, listStyleType: _rtfeldman$elm_css$Css$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible, display: _rtfeldman$elm_css$Css$Compatible, outline: _rtfeldman$elm_css$Css$Compatible, resize: _rtfeldman$elm_css$Css$Compatible, transform: _rtfeldman$elm_css$Css$Compatible, borderStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$auto = {value: 'auto', cursor: _rtfeldman$elm_css$Css$Compatible, flexBasis: _rtfeldman$elm_css$Css$Compatible, overflow: _rtfeldman$elm_css$Css$Compatible, textRendering: _rtfeldman$elm_css$Css$Compatible, lengthOrAuto: _rtfeldman$elm_css$Css$Compatible, lengthOrNumberOrAutoOrNoneOrContent: _rtfeldman$elm_css$Css$Compatible, alignItemsOrAuto: _rtfeldman$elm_css$Css$Compatible, lengthOrAutoOrCoverOrContain: _rtfeldman$elm_css$Css$Compatible, justifyContentOrAuto: _rtfeldman$elm_css$Css$Compatible, intOrAuto: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$noWrap = {value: 'nowrap', whiteSpace: _rtfeldman$elm_css$Css$Compatible, flexWrap: _rtfeldman$elm_css$Css$Compatible, flexDirectionOrWrap: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$fillAvailable = {value: 'fill-available', minMaxDimension: _rtfeldman$elm_css$Css$Compatible, lengthOrMinMaxDimension: _rtfeldman$elm_css$Css$Compatible, lengthOrNoneOrMinMaxDimension: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$maxContent = _elm_lang$core$Native_Utils.update(
	_rtfeldman$elm_css$Css$fillAvailable,
	{value: 'max-content'});
var _rtfeldman$elm_css$Css$minContent = _elm_lang$core$Native_Utils.update(
	_rtfeldman$elm_css$Css$fillAvailable,
	{value: 'min-content'});
var _rtfeldman$elm_css$Css$fitContent = _elm_lang$core$Native_Utils.update(
	_rtfeldman$elm_css$Css$fillAvailable,
	{value: 'fit-content'});
var _rtfeldman$elm_css$Css$static = {value: 'static', position: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$fixed = {value: 'fixed', position: _rtfeldman$elm_css$Css$Compatible, backgroundAttachment: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$sticky = {value: 'sticky', position: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$relative = {value: 'relative', position: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$absolute = {value: 'absolute', position: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$serif = {value: 'serif', fontFamily: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$sansSerif = {value: 'sans-serif', fontFamily: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$monospace = {value: 'monospace', fontFamily: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$cursive = {value: 'cursive', fontFamily: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$fantasy = {value: 'fantasy', fontFamily: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$xxSmall = {value: 'xx-small', fontSize: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$xSmall = {value: 'x-small', fontSize: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$small = {value: 'small', fontSize: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$medium = {value: 'medium', fontSize: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$large = {value: 'large', fontSize: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$xLarge = {value: 'x-large', fontSize: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$xxLarge = {value: 'xx-large', fontSize: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$smaller = {value: 'smaller', fontSize: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$larger = {value: 'larger', fontSize: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$normal = {
	value: 'normal',
	warnings: {ctor: '[]'},
	fontStyle: _rtfeldman$elm_css$Css$Compatible,
	fontWeight: _rtfeldman$elm_css$Css$Compatible,
	featureTagValue: _rtfeldman$elm_css$Css$Compatible,
	overflowWrap: _rtfeldman$elm_css$Css$Compatible
};
var _rtfeldman$elm_css$Css$italic = {value: 'italic', fontStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$oblique = {value: 'oblique', fontStyle: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$bold = {value: 'bold', fontWeight: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$lighter = {value: 'lighter', fontWeight: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$bolder = {value: 'bolder', fontWeight: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$smallCaps = {value: 'small-caps', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantCaps: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$allSmallCaps = {value: 'all-small-caps', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantCaps: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$petiteCaps = {value: 'petite-caps', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantCaps: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$allPetiteCaps = {value: 'all-petite-caps', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantCaps: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$unicase = {value: 'unicase', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantCaps: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$titlingCaps = {value: 'titling-caps', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantCaps: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$commonLigatures = {value: 'common-ligatures', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantLigatures: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$noCommonLigatures = {value: 'no-common-ligatures', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantLigatures: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$discretionaryLigatures = {value: 'discretionary-ligatures', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantLigatures: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$noDiscretionaryLigatures = {value: 'no-discretionary-ligatures', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantLigatures: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$historicalLigatures = {value: 'historical-ligatures', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantLigatures: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$noHistoricalLigatures = {value: 'no-historical-ligatures', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantLigatures: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$contextual = {value: 'context', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantLigatures: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$noContextual = {value: 'no-contextual', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantLigatures: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$liningNums = {value: 'lining-nums', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantNumeric: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$oldstyleNums = {value: 'oldstyle-nums', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantNumeric: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$proportionalNums = {value: 'proportional-nums', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantNumeric: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$tabularNums = {value: 'tabular-nums', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantNumeric: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$diagonalFractions = {value: 'diagonal-fractions', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantNumeric: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$stackedFractions = {value: 'stacked-fractions', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantNumeric: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$ordinal = {value: 'ordinal', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantNumeric: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$slashedZero = {value: 'slashed-zero', fontVariant: _rtfeldman$elm_css$Css$Compatible, fontVariantNumeric: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$featureTag2 = F2(
	function (tag, value) {
		var potentialWarnings = {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: !_elm_lang$core$Native_Utils.eq(
					_elm_lang$core$String$length(tag),
					4),
				_1: A2(
					_elm_lang$core$Basics_ops['++'],
					'Feature tags must be exactly 4 characters long. ',
					A2(_elm_lang$core$Basics_ops['++'], tag, ' is invalid.'))
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.cmp(value, 0) < 0,
					_1: A2(
						_elm_lang$core$Basics_ops['++'],
						'Feature values cannot be negative. ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(value),
							' is invalid.'))
				},
				_1: {ctor: '[]'}
			}
		};
		var warnings = A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Tuple$second,
			A2(_elm_lang$core$List$filter, _elm_lang$core$Tuple$first, potentialWarnings));
		return {
			value: A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(tag),
				A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					_elm_lang$core$Basics$toString(value))),
			featureTagValue: _rtfeldman$elm_css$Css$Compatible,
			warnings: warnings
		};
	});
var _rtfeldman$elm_css$Css$featureTag = function (tag) {
	return A2(_rtfeldman$elm_css$Css$featureTag2, tag, 1);
};
var _rtfeldman$elm_css$Css$default = {value: 'default', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$crosshair = {value: 'crosshair', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$contextMenu = {value: 'context-menu', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$help = {value: 'help', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$pointer = {value: 'pointer', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$progress = {value: 'progress', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$wait = {value: 'wait', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$cell = {value: 'cell', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$text = {value: 'text', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$verticalText = {value: 'vertical-text', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$cursorAlias = {value: 'alias', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$copy = {value: 'copy', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$move = {value: 'move', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$noDrop = {value: 'no-drop', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$notAllowed = {value: 'not-allowed', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$eResize = {value: 'e-resize', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$nResize = {value: 'n-resize', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$neResize = {value: 'ne-resize', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$nwResize = {value: 'nw-resize', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$sResize = {value: 's-resize', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$seResize = {value: 'se-resize', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$swResize = {value: 'sw-resize', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$wResize = {value: 'w-resize', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$ewResize = {value: 'ew-resize', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$nsResize = {value: 'ns-resize', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$neswResize = {value: 'nesw-resize', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$nwseResize = {value: 'nwse-resize', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$colResize = {value: 'col-resize', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$rowResize = {value: 'row-resize', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$allScroll = {value: 'all-scroll', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$zoomIn = {value: 'zoom-in', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$zoomOut = {value: 'zoom-out', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$grab = {value: 'grab', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$grabbing = {value: 'grabbing', cursor: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$PseudoClass = F2(
	function (a, b) {
		return {ctor: 'PseudoClass', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css$PseudoElement = F2(
	function (a, b) {
		return {ctor: 'PseudoElement', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css$PercentageUnits = {ctor: 'PercentageUnits'};
var _rtfeldman$elm_css$Css$pct = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$PercentageUnits, '%');
var _rtfeldman$elm_css$Css$EmUnits = {ctor: 'EmUnits'};
var _rtfeldman$elm_css$Css$em = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$EmUnits, 'em');
var _rtfeldman$elm_css$Css$ExUnits = {ctor: 'ExUnits'};
var _rtfeldman$elm_css$Css$ex = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$ExUnits, 'ex');
var _rtfeldman$elm_css$Css$ChUnits = {ctor: 'ChUnits'};
var _rtfeldman$elm_css$Css$ch = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$ChUnits, 'ch');
var _rtfeldman$elm_css$Css$RemUnits = {ctor: 'RemUnits'};
var _rtfeldman$elm_css$Css$rem = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$RemUnits, 'rem');
var _rtfeldman$elm_css$Css$VhUnits = {ctor: 'VhUnits'};
var _rtfeldman$elm_css$Css$vh = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$VhUnits, 'vh');
var _rtfeldman$elm_css$Css$VwUnits = {ctor: 'VwUnits'};
var _rtfeldman$elm_css$Css$vw = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$VwUnits, 'vw');
var _rtfeldman$elm_css$Css$VMinUnits = {ctor: 'VMinUnits'};
var _rtfeldman$elm_css$Css$vmin = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$VMinUnits, 'vmin');
var _rtfeldman$elm_css$Css$VMaxUnits = {ctor: 'VMaxUnits'};
var _rtfeldman$elm_css$Css$vmax = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$VMaxUnits, 'vmax');
var _rtfeldman$elm_css$Css$PxUnits = {ctor: 'PxUnits'};
var _rtfeldman$elm_css$Css$px = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$PxUnits, 'px');
var _rtfeldman$elm_css$Css$MMUnits = {ctor: 'MMUnits'};
var _rtfeldman$elm_css$Css$mm = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$MMUnits, 'mm');
var _rtfeldman$elm_css$Css$CMUnits = {ctor: 'CMUnits'};
var _rtfeldman$elm_css$Css$cm = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$CMUnits, 'cm');
var _rtfeldman$elm_css$Css$InchUnits = {ctor: 'InchUnits'};
var _rtfeldman$elm_css$Css$inches = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$InchUnits, 'in');
var _rtfeldman$elm_css$Css$PtUnits = {ctor: 'PtUnits'};
var _rtfeldman$elm_css$Css$pt = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$PtUnits, 'pt');
var _rtfeldman$elm_css$Css$PcUnits = {ctor: 'PcUnits'};
var _rtfeldman$elm_css$Css$pc = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$PcUnits, 'pc');
var _rtfeldman$elm_css$Css$UnitlessInteger = {ctor: 'UnitlessInteger'};
var _rtfeldman$elm_css$Css$zero = {value: '0', length: _rtfeldman$elm_css$Css$Compatible, lengthOrNumber: _rtfeldman$elm_css$Css$Compatible, lengthOrNone: _rtfeldman$elm_css$Css$Compatible, lengthOrAuto: _rtfeldman$elm_css$Css$Compatible, lengthOrMinMaxDimension: _rtfeldman$elm_css$Css$Compatible, lengthOrNoneOrMinMaxDimension: _rtfeldman$elm_css$Css$Compatible, number: _rtfeldman$elm_css$Css$Compatible, outline: _rtfeldman$elm_css$Css$Compatible, units: _rtfeldman$elm_css$Css$UnitlessInteger, unitLabel: '', numericValue: 0, lengthOrAutoOrCoverOrContain: _rtfeldman$elm_css$Css$Compatible};
var _rtfeldman$elm_css$Css$int = function (val) {
	return {
		value: _rtfeldman$elm_css$Css$numberToString(val),
		lengthOrNumber: _rtfeldman$elm_css$Css$Compatible,
		number: _rtfeldman$elm_css$Css$Compatible,
		fontWeight: _rtfeldman$elm_css$Css$Compatible,
		lengthOrNumberOrAutoOrNoneOrContent: _rtfeldman$elm_css$Css$Compatible,
		intOrAuto: _rtfeldman$elm_css$Css$Compatible,
		numericValue: _elm_lang$core$Basics$toFloat(val),
		unitLabel: '',
		units: _rtfeldman$elm_css$Css$UnitlessInteger
	};
};
var _rtfeldman$elm_css$Css$UnitlessFloat = {ctor: 'UnitlessFloat'};
var _rtfeldman$elm_css$Css$num = function (val) {
	return {
		value: _rtfeldman$elm_css$Css$numberToString(val),
		lengthOrNumber: _rtfeldman$elm_css$Css$Compatible,
		number: _rtfeldman$elm_css$Css$Compatible,
		lengthOrNumberOrAutoOrNoneOrContent: _rtfeldman$elm_css$Css$Compatible,
		numericValue: val,
		unitLabel: '',
		units: _rtfeldman$elm_css$Css$UnitlessFloat
	};
};
var _rtfeldman$elm_css$Css$IncompatibleUnits = {ctor: 'IncompatibleUnits'};
var _rtfeldman$elm_css$Css$initial = {
	value: 'initial',
	overflow: _rtfeldman$elm_css$Css$Compatible,
	none: _rtfeldman$elm_css$Css$Compatible,
	number: _rtfeldman$elm_css$Css$Compatible,
	textDecorationLine: _rtfeldman$elm_css$Css$Compatible,
	textRendering: _rtfeldman$elm_css$Css$Compatible,
	textIndent: _rtfeldman$elm_css$Css$Compatible,
	textDecorationStyle: _rtfeldman$elm_css$Css$Compatible,
	borderStyle: _rtfeldman$elm_css$Css$Compatible,
	boxSizing: _rtfeldman$elm_css$Css$Compatible,
	color: _rtfeldman$elm_css$Css$Compatible,
	cursor: _rtfeldman$elm_css$Css$Compatible,
	display: _rtfeldman$elm_css$Css$Compatible,
	all: _rtfeldman$elm_css$Css$Compatible,
	alignItems: _rtfeldman$elm_css$Css$Compatible,
	justifyContent: _rtfeldman$elm_css$Css$Compatible,
	length: _rtfeldman$elm_css$Css$Compatible,
	lengthOrAuto: _rtfeldman$elm_css$Css$Compatible,
	lengthOrNone: _rtfeldman$elm_css$Css$Compatible,
	lengthOrNumber: _rtfeldman$elm_css$Css$Compatible,
	lengthOrMinMaxDimension: _rtfeldman$elm_css$Css$Compatible,
	lengthOrNoneOrMinMaxDimension: _rtfeldman$elm_css$Css$Compatible,
	listStyleType: _rtfeldman$elm_css$Css$Compatible,
	listStylePosition: _rtfeldman$elm_css$Css$Compatible,
	listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css$Compatible,
	flexBasis: _rtfeldman$elm_css$Css$Compatible,
	flexWrap: _rtfeldman$elm_css$Css$Compatible,
	flexDirection: _rtfeldman$elm_css$Css$Compatible,
	flexDirectionOrWrap: _rtfeldman$elm_css$Css$Compatible,
	lengthOrNumberOrAutoOrNoneOrContent: _rtfeldman$elm_css$Css$Compatible,
	fontFamily: _rtfeldman$elm_css$Css$Compatible,
	fontSize: _rtfeldman$elm_css$Css$Compatible,
	fontStyle: _rtfeldman$elm_css$Css$Compatible,
	fontWeight: _rtfeldman$elm_css$Css$Compatible,
	fontVariant: _rtfeldman$elm_css$Css$Compatible,
	outline: _rtfeldman$elm_css$Css$Compatible,
	units: _rtfeldman$elm_css$Css$IncompatibleUnits,
	numericValue: 0,
	unitLabel: '',
	warnings: {ctor: '[]'},
	backgroundRepeat: _rtfeldman$elm_css$Css$Compatible,
	backgroundRepeatShorthand: _rtfeldman$elm_css$Css$Compatible,
	backgroundAttachment: _rtfeldman$elm_css$Css$Compatible,
	backgroundBlendMode: _rtfeldman$elm_css$Css$Compatible,
	backgroundOrigin: _rtfeldman$elm_css$Css$Compatible,
	backgroundImage: _rtfeldman$elm_css$Css$Compatible,
	lengthOrAutoOrCoverOrContain: _rtfeldman$elm_css$Css$Compatible,
	intOrAuto: _rtfeldman$elm_css$Css$Compatible
};
var _rtfeldman$elm_css$Css$unset = _elm_lang$core$Native_Utils.update(
	_rtfeldman$elm_css$Css$initial,
	{value: 'unset'});
var _rtfeldman$elm_css$Css$inherit = _elm_lang$core$Native_Utils.update(
	_rtfeldman$elm_css$Css$initial,
	{value: 'inherit'});
var _rtfeldman$elm_css$Css$lengthForOverloadedProperty = A3(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$IncompatibleUnits, '', 0);
var _rtfeldman$elm_css$Css$alignItems = function (fn) {
	return A3(
		_rtfeldman$elm_css$Css$getOverloadedProperty,
		'alignItems',
		'align-items',
		fn(_rtfeldman$elm_css$Css$lengthForOverloadedProperty));
};
var _rtfeldman$elm_css$Css$alignSelf = function (fn) {
	return A3(
		_rtfeldman$elm_css$Css$getOverloadedProperty,
		'alignSelf',
		'align-self',
		fn(_rtfeldman$elm_css$Css$lengthForOverloadedProperty));
};
var _rtfeldman$elm_css$Css$justifyContent = function (fn) {
	return A3(
		_rtfeldman$elm_css$Css$getOverloadedProperty,
		'justifyContent',
		'justify-content',
		fn(_rtfeldman$elm_css$Css$lengthForOverloadedProperty));
};
var _rtfeldman$elm_css$Css$float = function (fn) {
	return A3(
		_rtfeldman$elm_css$Css$getOverloadedProperty,
		'float',
		'float',
		fn(_rtfeldman$elm_css$Css$lengthForOverloadedProperty));
};
var _rtfeldman$elm_css$Css$textAlignLast = function (fn) {
	return A3(
		_rtfeldman$elm_css$Css$getOverloadedProperty,
		'textAlignLast',
		'text-align-last',
		fn(_rtfeldman$elm_css$Css$lengthForOverloadedProperty));
};
var _rtfeldman$elm_css$Css$textAlign = function (fn) {
	return A3(
		_rtfeldman$elm_css$Css$getOverloadedProperty,
		'textAlign',
		'text-align',
		fn(_rtfeldman$elm_css$Css$lengthForOverloadedProperty));
};
var _rtfeldman$elm_css$Css$verticalAlign = function (fn) {
	return A3(
		_rtfeldman$elm_css$Css$getOverloadedProperty,
		'verticalAlign',
		'vertical-align',
		fn(_rtfeldman$elm_css$Css$lengthForOverloadedProperty));
};
var _rtfeldman$elm_css$Css$backgroundPosition = function (fn) {
	return A3(
		_rtfeldman$elm_css$Css$getOverloadedProperty,
		'backgroundPosition',
		'background-position',
		fn(_rtfeldman$elm_css$Css$lengthForOverloadedProperty));
};
var _rtfeldman$elm_css$Css$Rtl = {ctor: 'Rtl'};
var _rtfeldman$elm_css$Css$Ltr = {ctor: 'Ltr'};
var _rtfeldman$elm_css$Css$IntentionallyUnsupportedPleaseSeeDocs = {ctor: 'IntentionallyUnsupportedPleaseSeeDocs'};
var _rtfeldman$elm_css$Css$thin = _rtfeldman$elm_css$Css$IntentionallyUnsupportedPleaseSeeDocs;
var _rtfeldman$elm_css$Css$thick = _rtfeldman$elm_css$Css$IntentionallyUnsupportedPleaseSeeDocs;
var _rtfeldman$elm_css$Css$blink = _rtfeldman$elm_css$Css$IntentionallyUnsupportedPleaseSeeDocs;

var _mordrax$cotwelm$Colors$black = _rtfeldman$elm_css$Css$hex('000000');
var _mordrax$cotwelm$Colors$darkslategray = _rtfeldman$elm_css$Css$hex('2F4F4F');
var _mordrax$cotwelm$Colors$slategray = _rtfeldman$elm_css$Css$hex('708090');
var _mordrax$cotwelm$Colors$lightslategray = _rtfeldman$elm_css$Css$hex('778899');
var _mordrax$cotwelm$Colors$dimgray = _rtfeldman$elm_css$Css$hex('696969');
var _mordrax$cotwelm$Colors$gray = _rtfeldman$elm_css$Css$hex('808080');
var _mordrax$cotwelm$Colors$darkgray = _rtfeldman$elm_css$Css$hex('A9A9A9');
var _mordrax$cotwelm$Colors$silver = _rtfeldman$elm_css$Css$hex('C0C0C0');
var _mordrax$cotwelm$Colors$lightgray = _rtfeldman$elm_css$Css$hex('D3D3D3');
var _mordrax$cotwelm$Colors$gainsboro = _rtfeldman$elm_css$Css$hex('DCDCDC');
var _mordrax$cotwelm$Colors$mistyrose = _rtfeldman$elm_css$Css$hex('FFE4E1');
var _mordrax$cotwelm$Colors$lavenderblush = _rtfeldman$elm_css$Css$hex('FFF0F5');
var _mordrax$cotwelm$Colors$linen = _rtfeldman$elm_css$Css$hex('FAF0E6');
var _mordrax$cotwelm$Colors$antiquewhite = _rtfeldman$elm_css$Css$hex('FAEBD7');
var _mordrax$cotwelm$Colors$ivory = _rtfeldman$elm_css$Css$hex('FFFFF0');
var _mordrax$cotwelm$Colors$floralwhite = _rtfeldman$elm_css$Css$hex('FFFAF0');
var _mordrax$cotwelm$Colors$oldlace = _rtfeldman$elm_css$Css$hex('FDF5E6');
var _mordrax$cotwelm$Colors$beige = _rtfeldman$elm_css$Css$hex('F5F5DC');
var _mordrax$cotwelm$Colors$seashell = _rtfeldman$elm_css$Css$hex('FFF5EE');
var _mordrax$cotwelm$Colors$whitesmoke = _rtfeldman$elm_css$Css$hex('F5F5F5');
var _mordrax$cotwelm$Colors$ghostwhite = _rtfeldman$elm_css$Css$hex('F8F8FF');
var _mordrax$cotwelm$Colors$aliceblue = _rtfeldman$elm_css$Css$hex('F0F8FF');
var _mordrax$cotwelm$Colors$azure = _rtfeldman$elm_css$Css$hex('F0FFFF');
var _mordrax$cotwelm$Colors$mintcream = _rtfeldman$elm_css$Css$hex('F5FFFA');
var _mordrax$cotwelm$Colors$honeydew = _rtfeldman$elm_css$Css$hex('F0FFF0');
var _mordrax$cotwelm$Colors$snow = _rtfeldman$elm_css$Css$hex('FFFAFA');
var _mordrax$cotwelm$Colors$white = _rtfeldman$elm_css$Css$hex('FFFFFF');
var _mordrax$cotwelm$Colors$maroon = _rtfeldman$elm_css$Css$hex('800000');
var _mordrax$cotwelm$Colors$brown = _rtfeldman$elm_css$Css$hex('A52A2A');
var _mordrax$cotwelm$Colors$sienna = _rtfeldman$elm_css$Css$hex('A0522D');
var _mordrax$cotwelm$Colors$saddlebrown = _rtfeldman$elm_css$Css$hex('8B4513');
var _mordrax$cotwelm$Colors$chocolate = _rtfeldman$elm_css$Css$hex('D2691E');
var _mordrax$cotwelm$Colors$peru = _rtfeldman$elm_css$Css$hex('CD853F');
var _mordrax$cotwelm$Colors$darkgoldenrod = _rtfeldman$elm_css$Css$hex('B8860B');
var _mordrax$cotwelm$Colors$goldenrod = _rtfeldman$elm_css$Css$hex('DAA520');
var _mordrax$cotwelm$Colors$sandybrown = _rtfeldman$elm_css$Css$hex('F4A460');
var _mordrax$cotwelm$Colors$rosybrown = _rtfeldman$elm_css$Css$hex('BC8F8F');
var _mordrax$cotwelm$Colors$tan = _rtfeldman$elm_css$Css$hex('D2B48C');
var _mordrax$cotwelm$Colors$burlywood = _rtfeldman$elm_css$Css$hex('DEB887');
var _mordrax$cotwelm$Colors$wheat = _rtfeldman$elm_css$Css$hex('F5DEB3');
var _mordrax$cotwelm$Colors$navajowhite = _rtfeldman$elm_css$Css$hex('FFDEAD');
var _mordrax$cotwelm$Colors$bisque = _rtfeldman$elm_css$Css$hex('FFE4C4');
var _mordrax$cotwelm$Colors$blanchedalmond = _rtfeldman$elm_css$Css$hex('FFEBCD');
var _mordrax$cotwelm$Colors$cornsilk = _rtfeldman$elm_css$Css$hex('FFF8DC');
var _mordrax$cotwelm$Colors$midnightblue = _rtfeldman$elm_css$Css$hex('191970');
var _mordrax$cotwelm$Colors$navy = _rtfeldman$elm_css$Css$hex('000080');
var _mordrax$cotwelm$Colors$darkblue = _rtfeldman$elm_css$Css$hex('00008B');
var _mordrax$cotwelm$Colors$mediumblue = _rtfeldman$elm_css$Css$hex('0000CD');
var _mordrax$cotwelm$Colors$blue = _rtfeldman$elm_css$Css$hex('0000FF');
var _mordrax$cotwelm$Colors$royalblue = _rtfeldman$elm_css$Css$hex('4169E1');
var _mordrax$cotwelm$Colors$mediumslateblue = _rtfeldman$elm_css$Css$hex('7B68EE');
var _mordrax$cotwelm$Colors$cornflowerblue = _rtfeldman$elm_css$Css$hex('6495ED');
var _mordrax$cotwelm$Colors$dodgerblue = _rtfeldman$elm_css$Css$hex('1E90FF');
var _mordrax$cotwelm$Colors$deepskyblue = _rtfeldman$elm_css$Css$hex('00BFFF');
var _mordrax$cotwelm$Colors$lightskyblue = _rtfeldman$elm_css$Css$hex('87CEFA');
var _mordrax$cotwelm$Colors$skyblue = _rtfeldman$elm_css$Css$hex('87CEEB');
var _mordrax$cotwelm$Colors$lightblue = _rtfeldman$elm_css$Css$hex('ADD8E6');
var _mordrax$cotwelm$Colors$powderblue = _rtfeldman$elm_css$Css$hex('B0E0E6');
var _mordrax$cotwelm$Colors$lightsteelblue = _rtfeldman$elm_css$Css$hex('B0C4DE');
var _mordrax$cotwelm$Colors$steelblue = _rtfeldman$elm_css$Css$hex('4682B4');
var _mordrax$cotwelm$Colors$cadetblue = _rtfeldman$elm_css$Css$hex('5F9EA0');
var _mordrax$cotwelm$Colors$darkturquoise = _rtfeldman$elm_css$Css$hex('00CED1');
var _mordrax$cotwelm$Colors$mediumturquoise = _rtfeldman$elm_css$Css$hex('48D1CC');
var _mordrax$cotwelm$Colors$turquoise = _rtfeldman$elm_css$Css$hex('40E0D0');
var _mordrax$cotwelm$Colors$aquamarine = _rtfeldman$elm_css$Css$hex('7FFFD4');
var _mordrax$cotwelm$Colors$paleturquoise = _rtfeldman$elm_css$Css$hex('AFEEEE');
var _mordrax$cotwelm$Colors$lightcyan = _rtfeldman$elm_css$Css$hex('E0FFFF');
var _mordrax$cotwelm$Colors$cyan = _rtfeldman$elm_css$Css$hex('00FFFF');
var _mordrax$cotwelm$Colors$aqua = _rtfeldman$elm_css$Css$hex('00FFFF');
var _mordrax$cotwelm$Colors$teal = _rtfeldman$elm_css$Css$hex('008080');
var _mordrax$cotwelm$Colors$darkcyan = _rtfeldman$elm_css$Css$hex('008B8B');
var _mordrax$cotwelm$Colors$lightseagreen = _rtfeldman$elm_css$Css$hex('20B2AA');
var _mordrax$cotwelm$Colors$darkseagreen = _rtfeldman$elm_css$Css$hex('8FBC8B');
var _mordrax$cotwelm$Colors$mediumaquamarine = _rtfeldman$elm_css$Css$hex('66CDAA');
var _mordrax$cotwelm$Colors$darkolivegreen = _rtfeldman$elm_css$Css$hex('556B2F');
var _mordrax$cotwelm$Colors$olive = _rtfeldman$elm_css$Css$hex('808000');
var _mordrax$cotwelm$Colors$olivedrab = _rtfeldman$elm_css$Css$hex('6B8E23');
var _mordrax$cotwelm$Colors$yellowgreen = _rtfeldman$elm_css$Css$hex('9ACD32');
var _mordrax$cotwelm$Colors$darkgreen = _rtfeldman$elm_css$Css$hex('006400');
var _mordrax$cotwelm$Colors$green = _rtfeldman$elm_css$Css$hex('008000');
var _mordrax$cotwelm$Colors$forestgreen = _rtfeldman$elm_css$Css$hex('228B22');
var _mordrax$cotwelm$Colors$seagreen = _rtfeldman$elm_css$Css$hex('2E8B57');
var _mordrax$cotwelm$Colors$mediumseagreen = _rtfeldman$elm_css$Css$hex('3CB371');
var _mordrax$cotwelm$Colors$springgreen = _rtfeldman$elm_css$Css$hex('00FF7F');
var _mordrax$cotwelm$Colors$mediumspringgreen = _rtfeldman$elm_css$Css$hex('00FA9A');
var _mordrax$cotwelm$Colors$lightgreen = _rtfeldman$elm_css$Css$hex('90EE90');
var _mordrax$cotwelm$Colors$palegreen = _rtfeldman$elm_css$Css$hex('98FB98');
var _mordrax$cotwelm$Colors$limegreen = _rtfeldman$elm_css$Css$hex('32CD32');
var _mordrax$cotwelm$Colors$lime = _rtfeldman$elm_css$Css$hex('00FF00');
var _mordrax$cotwelm$Colors$lawngreen = _rtfeldman$elm_css$Css$hex('7CFC00');
var _mordrax$cotwelm$Colors$chartreuse = _rtfeldman$elm_css$Css$hex('7FFF00');
var _mordrax$cotwelm$Colors$greenyellow = _rtfeldman$elm_css$Css$hex('ADFF2F');
var _mordrax$cotwelm$Colors$darkslateblue = _rtfeldman$elm_css$Css$hex('483D8B');
var _mordrax$cotwelm$Colors$slateblue = _rtfeldman$elm_css$Css$hex('6A5ACD');
var _mordrax$cotwelm$Colors$indigo = _rtfeldman$elm_css$Css$hex('4B0082');
var _mordrax$cotwelm$Colors$purple = _rtfeldman$elm_css$Css$hex('800080');
var _mordrax$cotwelm$Colors$darkmagenta = _rtfeldman$elm_css$Css$hex('8B008B');
var _mordrax$cotwelm$Colors$darkorchid = _rtfeldman$elm_css$Css$hex('9932CC');
var _mordrax$cotwelm$Colors$darkviolet = _rtfeldman$elm_css$Css$hex('9400D3');
var _mordrax$cotwelm$Colors$blueviolet = _rtfeldman$elm_css$Css$hex('8A2BE2');
var _mordrax$cotwelm$Colors$rebeccapurple = _rtfeldman$elm_css$Css$hex('663399');
var _mordrax$cotwelm$Colors$mediumpurple = _rtfeldman$elm_css$Css$hex('9370DB');
var _mordrax$cotwelm$Colors$mediumorchid = _rtfeldman$elm_css$Css$hex('BA55D3');
var _mordrax$cotwelm$Colors$magenta = _rtfeldman$elm_css$Css$hex('FF00FF');
var _mordrax$cotwelm$Colors$fuchsia = _rtfeldman$elm_css$Css$hex('FF00FF');
var _mordrax$cotwelm$Colors$orchid = _rtfeldman$elm_css$Css$hex('DA70D6');
var _mordrax$cotwelm$Colors$violet = _rtfeldman$elm_css$Css$hex('EE82EE');
var _mordrax$cotwelm$Colors$plum = _rtfeldman$elm_css$Css$hex('DDA0DD');
var _mordrax$cotwelm$Colors$thistle = _rtfeldman$elm_css$Css$hex('D8BFD8');
var _mordrax$cotwelm$Colors$lavender = _rtfeldman$elm_css$Css$hex('E6E6FA');
var _mordrax$cotwelm$Colors$darkkhaki = _rtfeldman$elm_css$Css$hex('BDB76B');
var _mordrax$cotwelm$Colors$khaki = _rtfeldman$elm_css$Css$hex('F0E68C');
var _mordrax$cotwelm$Colors$palegoldenrod = _rtfeldman$elm_css$Css$hex('EEE8AA');
var _mordrax$cotwelm$Colors$peachpuff = _rtfeldman$elm_css$Css$hex('FFDAB9');
var _mordrax$cotwelm$Colors$moccasin = _rtfeldman$elm_css$Css$hex('FFE4B5');
var _mordrax$cotwelm$Colors$papayawhip = _rtfeldman$elm_css$Css$hex('FFEFD5');
var _mordrax$cotwelm$Colors$rgb = _rtfeldman$elm_css$Css$hex('FAFAD2');
var _mordrax$cotwelm$Colors$lemonchiffon = _rtfeldman$elm_css$Css$hex('FFFACD');
var _mordrax$cotwelm$Colors$lightyellow = _rtfeldman$elm_css$Css$hex('FFFFE0');
var _mordrax$cotwelm$Colors$yellow = _rtfeldman$elm_css$Css$hex('FFFF00');
var _mordrax$cotwelm$Colors$gold = _rtfeldman$elm_css$Css$hex('FFD700');
var _mordrax$cotwelm$Colors$orange = _rtfeldman$elm_css$Css$hex('FFA500');
var _mordrax$cotwelm$Colors$darkorange = _rtfeldman$elm_css$Css$hex('FF8C00');
var _mordrax$cotwelm$Colors$orangered = _rtfeldman$elm_css$Css$hex('FF4500');
var _mordrax$cotwelm$Colors$tomato = _rtfeldman$elm_css$Css$hex('FF6347');
var _mordrax$cotwelm$Colors$coral = _rtfeldman$elm_css$Css$hex('FF7F50');
var _mordrax$cotwelm$Colors$palevioletred = _rtfeldman$elm_css$Css$hex('DB7093');
var _mordrax$cotwelm$Colors$mediumvioletred = _rtfeldman$elm_css$Css$hex('C71585');
var _mordrax$cotwelm$Colors$deeppink = _rtfeldman$elm_css$Css$hex('FF1493');
var _mordrax$cotwelm$Colors$hotpink = _rtfeldman$elm_css$Css$hex('FF69B4');
var _mordrax$cotwelm$Colors$lightpink = _rtfeldman$elm_css$Css$hex('FFB6C1');
var _mordrax$cotwelm$Colors$pink = _rtfeldman$elm_css$Css$hex('FFC0CB');
var _mordrax$cotwelm$Colors$darkred = _rtfeldman$elm_css$Css$hex('8B0000');
var _mordrax$cotwelm$Colors$firebrick = _rtfeldman$elm_css$Css$hex('B22222');
var _mordrax$cotwelm$Colors$red = _rtfeldman$elm_css$Css$hex('FF0000');
var _mordrax$cotwelm$Colors$crimson = _rtfeldman$elm_css$Css$hex('DC143C');
var _mordrax$cotwelm$Colors$lightsalmon = _rtfeldman$elm_css$Css$hex('FFA07A');
var _mordrax$cotwelm$Colors$darksalmon = _rtfeldman$elm_css$Css$hex('E9967A');
var _mordrax$cotwelm$Colors$salmon = _rtfeldman$elm_css$Css$hex('FA8072');
var _mordrax$cotwelm$Colors$lightcoral = _rtfeldman$elm_css$Css$hex('F08080');
var _mordrax$cotwelm$Colors$indianred = _rtfeldman$elm_css$Css$hex('CD5C5C');

var _mordrax$cotwelm$View_UI$viewWithTooltip = F2(
	function (tooltip, body) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('tooltip'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$span,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('tooltiptext'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(tooltip),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: body,
					_1: {ctor: '[]'}
				}
			});
	});
var _mordrax$cotwelm$View_UI$viewMenu = function (buttons) {
	var viewMenuItem = function (_p0) {
		var _p1 = _p0;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('file-menu__item'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(_p1._1),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(_p1._0),
				_1: {ctor: '[]'}
			});
	};
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('file-menu'),
			_1: {ctor: '[]'}
		},
		A2(_elm_lang$core$List$map, viewMenuItem, buttons));
};
var _mordrax$cotwelm$View_UI$radioBtn = F3(
	function (name, checked, msg) {
		return A2(
			_elm_lang$html$Html$input,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$type_('radio'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$name(name),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$checked(checked),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(msg),
							_1: {ctor: '[]'}
						}
					}
				}
			},
			{ctor: '[]'});
	});
var _mordrax$cotwelm$View_UI$btn = F2(
	function (txt, msg) {
		return A2(
			_elm_lang$html$Html$button,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(msg),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(txt),
				_1: {ctor: '[]'}
			});
	});
var _mordrax$cotwelm$View_UI$inputWithIncDec = F2(
	function (val, msg) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('ui left action right action input'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('ui icon button'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$i,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('minus icon'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$input,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$type_('number'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$value(
									_elm_lang$core$Basics$toString(val)),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('ui icon button'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$i,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('plus icon'),
										_1: {ctor: '[]'}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _mordrax$cotwelm$View_UI$labeledNumberWithStep = F5(
	function (convert, label, number, inc, msg) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('ui labeled input'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('ui label'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(label),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$input,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$type_('number'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$step(
									_elm_lang$core$Basics$toString(inc)),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onInput(
										function (input) {
											return msg(
												A2(convert, input, 0));
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$value(
											_elm_lang$core$Basics$toString(number)),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			});
	});
var _mordrax$cotwelm$View_UI$labeledFloat = F3(
	function (label, number, msg) {
		var toFloatWithDefault = F2(
			function (str, $default) {
				return A2(
					_elm_lang$core$Result$withDefault,
					$default,
					_elm_lang$core$String$toFloat(str));
			});
		return A5(_mordrax$cotwelm$View_UI$labeledNumberWithStep, toFloatWithDefault, label, number, 0.1, msg);
	});
var _mordrax$cotwelm$View_UI$labeledNumber_ = F4(
	function (convert, label, number, msg) {
		return A5(_mordrax$cotwelm$View_UI$labeledNumberWithStep, convert, label, number, 1.0, msg);
	});
var _mordrax$cotwelm$View_UI$labeledNumber = F3(
	function (label, number, msg) {
		var toIntWithDefault = F2(
			function (str, $default) {
				return A2(
					_elm_lang$core$Result$withDefault,
					$default,
					_elm_lang$core$String$toInt(str));
			});
		return A4(_mordrax$cotwelm$View_UI$labeledNumber_, toIntWithDefault, label, number, msg);
	});
var _mordrax$cotwelm$View_UI$labeled2TupleNumber = F4(
	function (label, _p2, minMsg, maxMsg) {
		var _p3 = _p2;
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$h4,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(label),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A3(_mordrax$cotwelm$View_UI$labeledNumber, 'Min', _p3._0, minMsg),
							_1: {
								ctor: '::',
								_0: A3(_mordrax$cotwelm$View_UI$labeledNumber, 'Max', _p3._1, maxMsg),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _mordrax$cotwelm$View_UI$nbsp = ' ';
var _mordrax$cotwelm$View_UI$addStyle = F2(
	function (currentStyles, style) {
		return _elm_lang$html$Html_Attributes$style(
			_rtfeldman$elm_css$Css$asPairs(
				{ctor: '::', _0: style, _1: currentStyles}));
	});
var _mordrax$cotwelm$View_UI$styles = function (_p4) {
	return _elm_lang$html$Html_Attributes$style(
		_rtfeldman$elm_css$Css$asPairs(_p4));
};
var _mordrax$cotwelm$View_UI$labeledBox = F2(
	function (label, children) {
		var boxLabel = A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _mordrax$cotwelm$View_UI$styles(
					{
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$position(_rtfeldman$elm_css$Css$absolute),
						_1: {
							ctor: '::',
							_0: _rtfeldman$elm_css$Css$zIndex(
								_rtfeldman$elm_css$Css$int(1)),
							_1: {
								ctor: '::',
								_0: _rtfeldman$elm_css$Css$top(
									_rtfeldman$elm_css$Css$px(-10)),
								_1: {
									ctor: '::',
									_0: _rtfeldman$elm_css$Css$backgroundColor(
										A3(_rtfeldman$elm_css$Css$rgb, 255, 255, 255)),
									_1: {
										ctor: '::',
										_0: A2(
											_rtfeldman$elm_css$Css$padding2,
											_rtfeldman$elm_css$Css$zero,
											_rtfeldman$elm_css$Css$px(3)),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(label),
				_1: {ctor: '[]'}
			});
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _mordrax$cotwelm$View_UI$styles(
					{
						ctor: '::',
						_0: A3(
							_rtfeldman$elm_css$Css$border3,
							_rtfeldman$elm_css$Css$px(1),
							_rtfeldman$elm_css$Css$solid,
							_mordrax$cotwelm$Colors$gray),
						_1: {
							ctor: '::',
							_0: _rtfeldman$elm_css$Css$position(_rtfeldman$elm_css$Css$relative),
							_1: {
								ctor: '::',
								_0: _rtfeldman$elm_css$Css$displayFlex,
								_1: {
									ctor: '::',
									_0: _rtfeldman$elm_css$Css$justifyContent(_rtfeldman$elm_css$Css$spaceBetween),
									_1: {
										ctor: '::',
										_0: A2(
											_rtfeldman$elm_css$Css$padding2,
											_rtfeldman$elm_css$Css$px(15),
											_rtfeldman$elm_css$Css$px(10)),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			},
			{ctor: '::', _0: boxLabel, _1: children});
	});
var _mordrax$cotwelm$View_UI$viewBar = F3(
	function (barColor, valueOf100, children) {
		var inverseOfValue = 98 - _elm_lang$core$Basics$toFloat(valueOf100);
		var viewBlueBar = A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _mordrax$cotwelm$View_UI$styles(
					{
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$position(_rtfeldman$elm_css$Css$absolute),
						_1: {
							ctor: '::',
							_0: _rtfeldman$elm_css$Css$zIndex(
								_rtfeldman$elm_css$Css$int(0)),
							_1: {
								ctor: '::',
								_0: _rtfeldman$elm_css$Css$width(
									_rtfeldman$elm_css$Css$px(23)),
								_1: {
									ctor: '::',
									_0: _rtfeldman$elm_css$Css$height(
										_rtfeldman$elm_css$Css$px(
											_elm_lang$core$Basics$toFloat(valueOf100))),
									_1: {
										ctor: '::',
										_0: _rtfeldman$elm_css$Css$top(
											_rtfeldman$elm_css$Css$px(inverseOfValue)),
										_1: {
											ctor: '::',
											_0: _rtfeldman$elm_css$Css$backgroundColor(barColor),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			},
			{ctor: '[]'});
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _mordrax$cotwelm$View_UI$styles(
					{
						ctor: '::',
						_0: A3(
							_rtfeldman$elm_css$Css$border3,
							_rtfeldman$elm_css$Css$px(1),
							_rtfeldman$elm_css$Css$solid,
							A3(_rtfeldman$elm_css$Css$rgb, 0, 0, 0)),
						_1: {
							ctor: '::',
							_0: _rtfeldman$elm_css$Css$width(
								_rtfeldman$elm_css$Css$px(25)),
							_1: {
								ctor: '::',
								_0: _rtfeldman$elm_css$Css$height(
									_rtfeldman$elm_css$Css$px(100)),
								_1: {
									ctor: '::',
									_0: _rtfeldman$elm_css$Css$position(_rtfeldman$elm_css$Css$relative),
									_1: {
										ctor: '::',
										_0: _rtfeldman$elm_css$Css$zIndex(
											_rtfeldman$elm_css$Css$int(1)),
										_1: {
											ctor: '::',
											_0: _rtfeldman$elm_css$Css$overflow(_rtfeldman$elm_css$Css$hidden),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			},
			{ctor: '::', _0: viewBlueBar, _1: children});
	});
var _mordrax$cotwelm$View_UI$viewBarScale = function (yOffset) {
	return A2(
		_elm_lang$html$Html$i,
		{
			ctor: '::',
			_0: _mordrax$cotwelm$View_UI$styles(
				{
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$width(
						_rtfeldman$elm_css$Css$pct(100)),
					_1: {
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$position(_rtfeldman$elm_css$Css$absolute),
						_1: {
							ctor: '::',
							_0: _rtfeldman$elm_css$Css$top(
								_rtfeldman$elm_css$Css$px(yOffset)),
							_1: {
								ctor: '::',
								_0: A3(
									_rtfeldman$elm_css$Css$borderTop3,
									_rtfeldman$elm_css$Css$px(1),
									_rtfeldman$elm_css$Css$solid,
									A3(_rtfeldman$elm_css$Css$rgb, 0, 0, 0)),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		{ctor: '[]'});
};
var _mordrax$cotwelm$View_UI$scaledBar = function (valueOf100) {
	return A3(
		_mordrax$cotwelm$View_UI$viewBar,
		_mordrax$cotwelm$Colors$blue,
		valueOf100,
		{
			ctor: '::',
			_0: _mordrax$cotwelm$View_UI$viewBarScale(25),
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$View_UI$viewBarScale(50),
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$View_UI$viewBarScale(75),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _mordrax$cotwelm$View_UI$greenScaledBar = function (valueOf100) {
	return A3(
		_mordrax$cotwelm$View_UI$viewBar,
		_mordrax$cotwelm$Colors$chartreuse,
		valueOf100,
		{
			ctor: '::',
			_0: _mordrax$cotwelm$View_UI$viewBarScale(25),
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$View_UI$viewBarScale(50),
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$View_UI$viewBarScale(75),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _mordrax$cotwelm$View_UI$Event = function (a) {
	return {target: a};
};
var _mordrax$cotwelm$View_UI$Target = function (a) {
	return {value: a};
};
var _mordrax$cotwelm$View_UI$changeEventDecoder = function () {
	var targetDecoder = A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'value',
		_elm_lang$core$Json_Decode$string,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_mordrax$cotwelm$View_UI$Target));
	var eventDecoder = A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'target',
		targetDecoder,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_mordrax$cotwelm$View_UI$Event));
	return A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'target',
		targetDecoder,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_mordrax$cotwelm$View_UI$Event));
}();
var _mordrax$cotwelm$View_UI$list = F4(
	function (display, selectAction, _p5, items) {
		var _p6 = _p5;
		var eventToString = function (_p7) {
			return _p6._1(
				function (_) {
					return _.value;
				}(
					function (_) {
						return _.target;
					}(_p7)));
		};
		var msgDecoder = A2(
			_elm_lang$core$Json_Decode$map,
			selectAction,
			A2(_elm_lang$core$Json_Decode$map, eventToString, _mordrax$cotwelm$View_UI$changeEventDecoder));
		var renderItem = function (_p8) {
			var _p9 = _p8;
			var _p10 = _p9._0;
			return A2(
				_elm_lang$html$Html$option,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$selected(_p9._1),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$value(
							_p6._0(_p10)),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: display(_p10),
					_1: {ctor: '[]'}
				});
		};
		return A2(
			_elm_lang$html$Html$select,
			{
				ctor: '::',
				_0: A2(_elm_lang$html$Html_Events$on, 'change', msgDecoder),
				_1: {ctor: '[]'}
			},
			A2(_elm_lang$core$List$map, renderItem, items));
	});

var _mordrax$cotwelm$Attributes$descriptions = function (attribute) {
	var _p0 = attribute;
	switch (_p0.ctor) {
		case 'Available':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 0, _1: 'You are at your maximum potential! Go get\'em tiger!'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 10, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 20, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 30, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 40, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 50, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 60, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 70, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 80, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 90, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 100, _1: 'Training is for wimps, you like pain, you like it alot!'},
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'Strength':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 0, _1: 'Unable to push open a unlocked door whos hinges has recently been serviced with WD40.'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 10, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 20, _1: 'Stunted by a career in software engineering, the mind is strong but muscle atrophy is high.'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 30, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 40, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 50, _1: 'Of average strength!!!'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 60, _1: 'Likes to gym during lunch..'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 70, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 80, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 90, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 100, _1: 'Hammers are for wimps!! You hit with your FISTS!'},
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'Intelligence':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 0, _1: 'Dumb'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 10, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 20, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 30, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 40, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 50, _1: 'Smart enough to be at the peak of the standard distribution curve.'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 60, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 70, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 80, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 90, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 100, _1: 'Smart'},
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'Constitution':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 0, _1: 'You\'re having a BAD day, everyday! It\'s like you\'ve got two kids that keep waking you up at night, EVERY night!'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 10, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 20, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 30, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 40, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 50, _1: 'Able to outrun a hungry hippo!'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 60, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 70, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 80, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 90, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 100, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		default:
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 0, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 10, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 20, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 30, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 40, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 50, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 60, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 70, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 80, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 90, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 100, _1: 'TODO: Write something funny and informative about this level of attribute. PRs welcome!'},
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
	}
};
var _mordrax$cotwelm$Attributes$isLessThanAttribute = F2(
	function (val, _p1) {
		var _p2 = _p1;
		return _elm_lang$core$Native_Utils.cmp(val, _p2._0) < 0;
	});
var _mordrax$cotwelm$Attributes$getDescription = F2(
	function (attribute, value) {
		var attributeDescriptions = _mordrax$cotwelm$Attributes$descriptions(attribute);
		return A2(
			_elm_lang$core$Maybe$withDefault,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'No description matches the value ',
				_elm_lang$core$Basics$toString(value)),
			A2(
				_elm_lang$core$Maybe$map,
				_elm_lang$core$Tuple$second,
				_elm_lang$core$List$head(
					A2(
						_elm_lang$core$List$filter,
						_mordrax$cotwelm$Attributes$isLessThanAttribute(value),
						attributeDescriptions))));
	});
var _mordrax$cotwelm$Attributes$getDataPercent = function (val) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'data-percent',
		_elm_lang$core$Basics$toString(val));
};
var _mordrax$cotwelm$Attributes$getAttributeValue = F2(
	function (attr, model) {
		var _p3 = attr;
		switch (_p3.ctor) {
			case 'Available':
				return model.ava;
			case 'Strength':
				return model.str;
			case 'Intelligence':
				return model.$int;
			case 'Constitution':
				return model.con;
			default:
				return model.dex;
		}
	});
var _mordrax$cotwelm$Attributes$tickStyle = function (val) {
	return _elm_lang$html$Html_Attributes$style(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'width',
				_1: A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(val),
					'%')
			},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'min-width', _1: '0'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'border-right', _1: '1px solid gray'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'height', _1: '1.75em'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'top', _1: '0'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'left', _1: '0'},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		});
};
var _mordrax$cotwelm$Attributes$set = F2(
	function (_p4, model) {
		var _p5 = _p4;
		var _p7 = _p5._1;
		var _p6 = _p5._0;
		switch (_p6.ctor) {
			case 'Available':
				return _elm_lang$core$Native_Utils.update(
					model,
					{ava: _p7});
			case 'Strength':
				return _elm_lang$core$Native_Utils.update(
					model,
					{str: _p7});
			case 'Intelligence':
				return _elm_lang$core$Native_Utils.update(
					model,
					{$int: _p7});
			case 'Constitution':
				return _elm_lang$core$Native_Utils.update(
					model,
					{con: _p7});
			default:
				return _elm_lang$core$Native_Utils.update(
					model,
					{dex: _p7});
		}
	});
var _mordrax$cotwelm$Attributes$scale = F5(
	function (str, dex, con, $int, attributes) {
		var scaleFn = F2(
			function (factor, attr) {
				return _elm_lang$core$Basics$floor(
					factor * _elm_lang$core$Basics$toFloat(attr));
			});
		return _elm_lang$core$Native_Utils.update(
			attributes,
			{
				str: A2(scaleFn, str, attributes.str),
				$int: A2(scaleFn, $int, attributes.$int),
				con: A2(scaleFn, con, attributes.con),
				dex: A2(scaleFn, dex, attributes.dex)
			});
	});
var _mordrax$cotwelm$Attributes$addAttribute = F3(
	function (attr, val, attributes) {
		var _p8 = attr;
		switch (_p8.ctor) {
			case 'Strength':
				return _elm_lang$core$Native_Utils.update(
					attributes,
					{str: attributes.str + val});
			case 'Intelligence':
				return _elm_lang$core$Native_Utils.update(
					attributes,
					{$int: attributes.$int + val});
			case 'Constitution':
				return _elm_lang$core$Native_Utils.update(
					attributes,
					{con: attributes.con + val});
			case 'Dexterity':
				return _elm_lang$core$Native_Utils.update(
					attributes,
					{dex: attributes.dex + val});
			default:
				return _elm_lang$core$Native_Utils.update(
					attributes,
					{ava: attributes.ava + val});
		}
	});
var _mordrax$cotwelm$Attributes$initCustom = F4(
	function (str, dex, con, $int) {
		return {ava: 0, str: str, dex: dex, con: con, $int: $int};
	});
var _mordrax$cotwelm$Attributes$ids = _elm_lang$core$Basics$toString;
var _mordrax$cotwelm$Attributes$styles = function (_p9) {
	return _elm_lang$html$Html_Attributes$style(
		_rtfeldman$elm_css$Css$asPairs(_p9));
};
var _mordrax$cotwelm$Attributes$Attributes = F5(
	function (a, b, c, d, e) {
		return {ava: a, str: b, dex: c, con: d, $int: e};
	});
var _mordrax$cotwelm$Attributes$ScrollTarget = function (a) {
	return {scrollTop: a};
};
var _mordrax$cotwelm$Attributes$eventTargetDecoder = A2(
	_elm_lang$core$Json_Decode$map,
	_mordrax$cotwelm$Attributes$ScrollTarget,
	A2(_elm_lang$core$Json_Decode$field, 'scrollTop', _elm_lang$core$Json_Decode$int));
var _mordrax$cotwelm$Attributes$NoOp = {ctor: 'NoOp'};
var _mordrax$cotwelm$Attributes$Scroll = F2(
	function (a, b) {
		return {ctor: 'Scroll', _0: a, _1: b};
	});
var _mordrax$cotwelm$Attributes$viewScroll = F2(
	function (attr, valueOf100) {
		var inputToInt = function (strVal) {
			var _p10 = _elm_lang$core$String$toInt(strVal);
			if (_p10.ctor === 'Err') {
				return A2(
					_elm_lang$core$Debug$log,
					A2(_elm_lang$core$Basics_ops['++'], 'Attributes.viewScroll: Cannot convert the string to int ', _p10._0),
					0);
			} else {
				return _p10._0;
			}
		};
		var inverseValue = 100 - _elm_lang$core$Basics$toFloat(valueOf100);
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _mordrax$cotwelm$Attributes$styles(
					{
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$position(_rtfeldman$elm_css$Css$relative),
						_1: {
							ctor: '::',
							_0: _rtfeldman$elm_css$Css$height(
								_rtfeldman$elm_css$Css$px(100)),
							_1: {
								ctor: '::',
								_0: _rtfeldman$elm_css$Css$width(
									_rtfeldman$elm_css$Css$px(20)),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: _mordrax$cotwelm$Attributes$styles(
							{
								ctor: '::',
								_0: _rtfeldman$elm_css$Css$position(_rtfeldman$elm_css$Css$absolute),
								_1: {
									ctor: '::',
									_0: _rtfeldman$elm_css$Css$height(
										_rtfeldman$elm_css$Css$px(20)),
									_1: {
										ctor: '::',
										_0: _rtfeldman$elm_css$Css$width(
											_rtfeldman$elm_css$Css$px(85)),
										_1: {
											ctor: '::',
											_0: _rtfeldman$elm_css$Css$transform(
												_rtfeldman$elm_css$Css$rotate(
													_rtfeldman$elm_css$Css$deg(270))),
											_1: {
												ctor: '::',
												_0: _rtfeldman$elm_css$Css$top(
													_rtfeldman$elm_css$Css$px(36)),
												_1: {
													ctor: '::',
													_0: _rtfeldman$elm_css$Css$left(
														_rtfeldman$elm_css$Css$px(-25)),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onInput(
								function (_p11) {
									return A2(
										_mordrax$cotwelm$Attributes$Scroll,
										attr,
										inputToInt(_p11));
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$id(
									_elm_lang$core$Basics$toString(attr)),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$type_('range'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$value(
											_elm_lang$core$Basics$toString(valueOf100)),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			});
	});
var _mordrax$cotwelm$Attributes$viewAttribute = F3(
	function (attr, model, buttons) {
		var viewAttributeLabel = A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					_elm_lang$core$Basics$toString(attr)),
				_1: {ctor: '[]'}
			});
		var value = A2(_mordrax$cotwelm$Attributes$getAttributeValue, attr, model);
		var description = A2(_mordrax$cotwelm$Attributes$getDescription, attr, value);
		var viewBarAndScroll = A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _mordrax$cotwelm$Attributes$styles(
					{
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$displayFlex,
						_1: {
							ctor: '::',
							_0: _rtfeldman$elm_css$Css$justifyContent(_rtfeldman$elm_css$Css$center),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _mordrax$cotwelm$View_UI$scaledBar(value),
				_1: {
					ctor: '::',
					_0: A2(_mordrax$cotwelm$Attributes$viewScroll, attr, value),
					_1: {ctor: '[]'}
				}
			});
		var _p12 = attr;
		if (_p12.ctor === 'Available') {
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A3(
						_mordrax$cotwelm$View_UI$viewBar,
						_mordrax$cotwelm$Colors$blue,
						value,
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				});
		} else {
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: viewBarAndScroll,
					_1: {
						ctor: '::',
						_0: viewAttributeLabel,
						_1: {ctor: '[]'}
					}
				});
		}
	});
var _mordrax$cotwelm$Attributes$inputDecoder = function (attr) {
	return A2(
		_elm_lang$core$Json_Decode$map,
		_mordrax$cotwelm$Attributes$Scroll(attr),
		A2(_elm_lang$core$Json_Decode$field, 'value', _elm_lang$core$Json_Decode$int));
};
var _mordrax$cotwelm$Attributes$Update = F2(
	function (a, b) {
		return {ctor: 'Update', _0: a, _1: b};
	});
var _mordrax$cotwelm$Attributes$viewButtons = function (attribute) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('ui buttons'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('ui icon button'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(
							A2(_mordrax$cotwelm$Attributes$Update, attribute, -5)),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$i,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('ui icon minus'),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('ui icon button'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								A2(_mordrax$cotwelm$Attributes$Update, attribute, 5)),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$i,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('ui icon plus'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _mordrax$cotwelm$Attributes$Dexterity = {ctor: 'Dexterity'};
var _mordrax$cotwelm$Attributes$Constitution = {ctor: 'Constitution'};
var _mordrax$cotwelm$Attributes$Intelligence = {ctor: 'Intelligence'};
var _mordrax$cotwelm$Attributes$Strength = {ctor: 'Strength'};
var _mordrax$cotwelm$Attributes$init = function () {
	var ignoreResult = function (_p13) {
		return _mordrax$cotwelm$Attributes$NoOp;
	};
	var attributes = {ava: 100, str: 50, dex: 50, con: 50, $int: 50};
	var cmds = A2(
		_elm_lang$core$Task$attempt,
		ignoreResult,
		_elm_lang$core$Task$sequence(
			{
				ctor: '::',
				_0: A2(
					_elm_lang$dom$Dom_Scroll$toY,
					_mordrax$cotwelm$Attributes$ids(_mordrax$cotwelm$Attributes$Strength),
					_elm_lang$core$Basics$toFloat(attributes.str * 10)),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$dom$Dom_Scroll$toY,
						_mordrax$cotwelm$Attributes$ids(_mordrax$cotwelm$Attributes$Dexterity),
						_elm_lang$core$Basics$toFloat(attributes.dex * 10)),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$dom$Dom_Scroll$toY,
							_mordrax$cotwelm$Attributes$ids(_mordrax$cotwelm$Attributes$Intelligence),
							_elm_lang$core$Basics$toFloat(attributes.$int * 10)),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$dom$Dom_Scroll$toY,
								_mordrax$cotwelm$Attributes$ids(_mordrax$cotwelm$Attributes$Constitution),
								_elm_lang$core$Basics$toFloat(attributes.con * 10)),
							_1: {ctor: '[]'}
						}
					}
				}
			}));
	return {ctor: '_Tuple2', _0: attributes, _1: cmds};
}();
var _mordrax$cotwelm$Attributes$Available = {ctor: 'Available'};
var _mordrax$cotwelm$Attributes$updateAsMuchAsAvailable = F3(
	function (attr, val, attributes) {
		var actualPointsAdded = A2(_elm_lang$core$Basics$min, val, attributes.ava);
		return A3(
			_mordrax$cotwelm$Attributes$addAttribute,
			_mordrax$cotwelm$Attributes$Available,
			0 - actualPointsAdded,
			A3(_mordrax$cotwelm$Attributes$addAttribute, attr, actualPointsAdded, attributes));
	});
var _mordrax$cotwelm$Attributes$update = F2(
	function (msg, attributes) {
		var _p14 = msg;
		switch (_p14.ctor) {
			case 'Update':
				return A3(_mordrax$cotwelm$Attributes$updateAsMuchAsAvailable, _p14._0, _p14._1, attributes);
			case 'Scroll':
				var _p15 = _p14._0;
				var valueDelta = _p14._1 - A2(_mordrax$cotwelm$Attributes$getAttributeValue, _p15, attributes);
				return A3(_mordrax$cotwelm$Attributes$updateAsMuchAsAvailable, _p15, valueDelta, attributes);
			default:
				return attributes;
		}
	});
var _mordrax$cotwelm$Attributes$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _mordrax$cotwelm$Attributes$styles(
				{
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$displayFlex,
					_1: {
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$justifyContent(_rtfeldman$elm_css$Css$spaceBetween),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A3(_mordrax$cotwelm$Attributes$viewAttribute, _mordrax$cotwelm$Attributes$Available, model, false),
			_1: {
				ctor: '::',
				_0: A3(_mordrax$cotwelm$Attributes$viewAttribute, _mordrax$cotwelm$Attributes$Strength, model, true),
				_1: {
					ctor: '::',
					_0: A3(_mordrax$cotwelm$Attributes$viewAttribute, _mordrax$cotwelm$Attributes$Intelligence, model, true),
					_1: {
						ctor: '::',
						_0: A3(_mordrax$cotwelm$Attributes$viewAttribute, _mordrax$cotwelm$Attributes$Dexterity, model, true),
						_1: {
							ctor: '::',
							_0: A3(_mordrax$cotwelm$Attributes$viewAttribute, _mordrax$cotwelm$Attributes$Constitution, model, true),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};

var _mordrax$cotwelm$Dice$range = F2(
	function (small, large) {
		return A2(
			_mgold$elm_random_pcg$Random_Pcg$int,
			A2(_elm_lang$core$Basics$min, small, large),
			A2(_elm_lang$core$Basics$max, small, large));
	});
var _mordrax$cotwelm$Dice$d = function (face) {
	return A2(_mordrax$cotwelm$Dice$range, 1, face);
};
var _mordrax$cotwelm$Dice$roll_ = F3(
	function (nDice, sides, currentDieRoll) {
		roll_:
		while (true) {
			var acc = function (face) {
				return A3(
					_mgold$elm_random_pcg$Random_Pcg$map2,
					F2(
						function (x, y) {
							return x + y;
						}),
					currentDieRoll,
					_mordrax$cotwelm$Dice$d(face));
			};
			var _p0 = nDice;
			if (_p0 === 0) {
				return currentDieRoll;
			} else {
				var _v1 = nDice - 1,
					_v2 = sides,
					_v3 = acc(sides);
				nDice = _v1;
				sides = _v2;
				currentDieRoll = _v3;
				continue roll_;
			}
		}
	});
var _mordrax$cotwelm$Dice$d2d = F2(
	function (f1, f2) {
		return A3(
			_mgold$elm_random_pcg$Random_Pcg$map2,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			_mordrax$cotwelm$Dice$d(f1),
			_mordrax$cotwelm$Dice$d(f2));
	});
var _mordrax$cotwelm$Dice$roll = function (_p1) {
	var _p2 = _p1;
	var _p3 = _p2.sides;
	return A2(
		_mgold$elm_random_pcg$Random_Pcg$map,
		function (x) {
			return x + _p2.bonus;
		},
		A3(
			_mordrax$cotwelm$Dice$roll_,
			_p2.nDice - 1,
			_p3,
			_mordrax$cotwelm$Dice$d(_p3)));
};
var _mordrax$cotwelm$Dice$pp = function (_p4) {
	var _p5 = _p4;
	var _p8 = _p5.sides;
	var _p7 = _p5.nDice;
	var _p6 = _p5.bonus;
	return (_elm_lang$core$Native_Utils.cmp(_p6, 0) > 0) ? A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(_p7),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'D',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(_p8),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'+',
					_elm_lang$core$Basics$toString(_p6))))) : A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(_p7),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'D',
			_elm_lang$core$Basics$toString(_p8)));
};
var _mordrax$cotwelm$Dice$Dice = F3(
	function (a, b, c) {
		return {nDice: a, sides: b, bonus: c};
	});
var _mordrax$cotwelm$Dice$die = F3(
	function (nDice, sides, bonus) {
		return A3(
			_mordrax$cotwelm$Dice$Dice,
			A2(_elm_lang$core$Basics$min, 1, nDice),
			sides,
			bonus);
	});

var _mordrax$cotwelm$Utils_Mass$withinCapacity = F2(
	function (_p1, _p0) {
		var _p2 = _p1;
		var _p3 = _p0;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.cmp(_p2.bulk, _p3.maxBulk) < 1,
			_1: _elm_lang$core$Native_Utils.cmp(_p2.weight, _p3.maxWeight) < 1
		};
	});
var _mordrax$cotwelm$Utils_Mass$subtract = F2(
	function (a, b) {
		return {bulk: a.bulk - b.bulk, weight: a.weight - b.weight};
	});
var _mordrax$cotwelm$Utils_Mass$add = F2(
	function (a, b) {
		return {bulk: a.bulk + b.bulk, weight: a.weight + b.weight};
	});
var _mordrax$cotwelm$Utils_Mass$Mass = F2(
	function (a, b) {
		return {weight: a, bulk: b};
	});
var _mordrax$cotwelm$Utils_Mass$Capacity = F2(
	function (a, b) {
		return {maxBulk: a, maxWeight: b};
	});

var _mordrax$cotwelm$Utils_Misc$combine = function (generators) {
	var _p0 = generators;
	if (_p0.ctor === '[]') {
		return _mgold$elm_random_pcg$Random_Pcg$constant(
			{ctor: '[]'});
	} else {
		return A3(
			_mgold$elm_random_pcg$Random_Pcg$map2,
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			_p0._0,
			_mordrax$cotwelm$Utils_Misc$combine(_p0._1));
	}
};
var _mordrax$cotwelm$Utils_Misc$sample2 = function () {
	var find = F2(
		function (k, ys) {
			find:
			while (true) {
				var _p1 = ys;
				if (_p1.ctor === '[]') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					if (_elm_lang$core$Native_Utils.eq(k, 0)) {
						return _elm_lang$core$Maybe$Just(_p1._0);
					} else {
						var _v2 = k - 1,
							_v3 = _p1._1;
						k = _v2;
						ys = _v3;
						continue find;
					}
				}
			}
		});
	return function (xs) {
		return A2(
			_mgold$elm_random_pcg$Random_Pcg$map,
			function (i) {
				return A2(find, i, xs);
			},
			A2(
				_mgold$elm_random_pcg$Random_Pcg$int,
				0,
				_elm_lang$core$List$length(xs) - 1));
	};
}();
var _mordrax$cotwelm$Utils_Misc$choose = function (arr) {
	if (_elm_lang$core$Array$isEmpty(arr)) {
		return _mgold$elm_random_pcg$Random_Pcg$constant(
			{ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: arr});
	} else {
		var front = function (i) {
			return A3(_elm_lang$core$Array$slice, 0, i, arr);
		};
		var lastIndex = _elm_lang$core$Array$length(arr) - 1;
		var back = function (i) {
			return _elm_lang$core$Native_Utils.eq(i, lastIndex) ? _elm_lang$core$Array$empty : A3(_elm_lang$core$Array$slice, i + 1, lastIndex + 1, arr);
		};
		var gen = A2(_mgold$elm_random_pcg$Random_Pcg$int, 0, lastIndex);
		return A2(
			_mgold$elm_random_pcg$Random_Pcg$map,
			function (index) {
				return {
					ctor: '_Tuple2',
					_0: A2(_elm_lang$core$Array$get, index, arr),
					_1: A2(
						_elm_lang$core$Array$append,
						front(index),
						back(index))
				};
			},
			gen);
	}
};
var _mordrax$cotwelm$Utils_Misc$shuffle_ = function (arr) {
	if (_elm_lang$core$Array$isEmpty(arr)) {
		return _mgold$elm_random_pcg$Random_Pcg$constant(arr);
	} else {
		var helper = function (_p2) {
			var _p3 = _p2;
			var _p8 = _p3._0;
			return A2(
				_mgold$elm_random_pcg$Random_Pcg$andThen,
				function (_p4) {
					var _p5 = _p4;
					var _p7 = _p5._1;
					var _p6 = _p5._0;
					if (_p6.ctor === 'Nothing') {
						return _mgold$elm_random_pcg$Random_Pcg$constant(
							{ctor: '_Tuple2', _0: _p8, _1: _p7});
					} else {
						return helper(
							{
								ctor: '_Tuple2',
								_0: {ctor: '::', _0: _p6._0, _1: _p8},
								_1: _p7
							});
					}
				},
				_mordrax$cotwelm$Utils_Misc$choose(_p3._1));
		};
		return A2(
			_mgold$elm_random_pcg$Random_Pcg$map,
			function (_p9) {
				return _elm_lang$core$Array$fromList(
					_elm_lang$core$Tuple$first(_p9));
			},
			helper(
				{
					ctor: '_Tuple2',
					_0: {ctor: '[]'},
					_1: arr
				}));
	}
};
var _mordrax$cotwelm$Utils_Misc$without = F2(
	function (x, xs) {
		return A2(
			_elm_lang$core$List$filter,
			F2(
				function (x, y) {
					return !_elm_lang$core$Native_Utils.eq(x, y);
				})(x),
			xs);
	});
var _mordrax$cotwelm$Utils_Misc$headWithDefault = F2(
	function ($default, xs) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			$default,
			_elm_lang$core$List$head(xs));
	});
var _mordrax$cotwelm$Utils_Misc$shuffle = function (list) {
	return A2(
		_mgold$elm_random_pcg$Random_Pcg$map,
		_elm_lang$core$Array$toList,
		_mordrax$cotwelm$Utils_Misc$shuffle_(
			_elm_lang$core$Array$fromList(list)));
};
var _mordrax$cotwelm$Utils_Misc$toCSS = function (str) {
	return _elm_lang$core$String$toLower(
		A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex('[^a-zA-Z]+'),
			function (_p10) {
				return '-';
			},
			str));
};
var _mordrax$cotwelm$Utils_Misc$removeFirst_ = F4(
	function (target, equals, list, searched) {
		removeFirst_:
		while (true) {
			var _p11 = list;
			if (_p11.ctor === '[]') {
				return searched;
			} else {
				var _p13 = _p11._1;
				var _p12 = _p11._0;
				if (A2(equals, _p12, target)) {
					return A2(_elm_lang$core$Basics_ops['++'], searched, _p13);
				} else {
					var _v8 = target,
						_v9 = equals,
						_v10 = _p13,
						_v11 = {ctor: '::', _0: _p12, _1: searched};
					target = _v8;
					equals = _v9;
					list = _v10;
					searched = _v11;
					continue removeFirst_;
				}
			}
		}
	});
var _mordrax$cotwelm$Utils_Misc$removeFirst = F3(
	function (target, equals, list) {
		return A4(
			_mordrax$cotwelm$Utils_Misc$removeFirst_,
			target,
			equals,
			list,
			{ctor: '[]'});
	});
var _mordrax$cotwelm$Utils_Misc$foldResult = F3(
	function (f, acc, list) {
		foldResult:
		while (true) {
			var _p14 = list;
			if (_p14.ctor === '[]') {
				return acc;
			} else {
				var nextAcc = A2(
					_elm_lang$core$Result$andThen,
					f(_p14._0),
					acc);
				var _v13 = f,
					_v14 = nextAcc,
					_v15 = _p14._1;
				f = _v13;
				acc = _v14;
				list = _v15;
				continue foldResult;
			}
		}
	});
var _mordrax$cotwelm$Utils_Misc$px = function (a) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(a),
		'px');
};
var _mordrax$cotwelm$Utils_Misc$vectorToHtmlStyle = function (_p15) {
	var _p16 = _p15;
	return {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'top',
			_1: _mordrax$cotwelm$Utils_Misc$px(_p16._1 * 32)
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'left',
				_1: _mordrax$cotwelm$Utils_Misc$px(_p16._0 * 32)
			},
			_1: {ctor: '[]'}
		}
	};
};
var _mordrax$cotwelm$Utils_Misc$toScaledTilePosition = F2(
	function (_p17, scale) {
		var _p18 = _p17;
		var size = _elm_lang$core$Basics$round(scale * 32);
		return _elm_lang$html$Html_Attributes$style(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'top',
					_1: _mordrax$cotwelm$Utils_Misc$px(_p18._1 * size)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'left',
						_1: _mordrax$cotwelm$Utils_Misc$px(_p18._0 * size)
					},
					_1: {ctor: '[]'}
				}
			});
	});

var _mordrax$cotwelm$Container$list = function (_p0) {
	var _p1 = _p0;
	return _p1._0.items;
};
var _mordrax$cotwelm$Container$mass = function (_p2) {
	var _p3 = _p2;
	var _p6 = _p3._0;
	var sumMass = F2(
		function (a, accMass) {
			return function (_p4) {
				var _p5 = _p4;
				return {weight: _p5.weight + accMass.weight, bulk: _p5.bulk + accMass.bulk};
			}(
				_p6.getMass(a));
		});
	return A3(
		_elm_lang$core$List$foldl,
		sumMass,
		A2(_mordrax$cotwelm$Utils_Mass$Mass, 0, 0),
		_p6.items);
};
var _mordrax$cotwelm$Container$capacity = function (_p7) {
	var _p8 = _p7;
	return _p8._0.capacity;
};
var _mordrax$cotwelm$Container$Model = F4(
	function (a, b, c, d) {
		return {capacity: a, items: b, getMass: c, equals: d};
	});
var _mordrax$cotwelm$Container$ContainerModel = function (a) {
	return {ctor: 'ContainerModel', _0: a};
};
var _mordrax$cotwelm$Container$init = F3(
	function (capacity, getMass, equals) {
		return _mordrax$cotwelm$Container$ContainerModel(
			A4(
				_mordrax$cotwelm$Container$Model,
				capacity,
				{ctor: '[]'},
				getMass,
				equals));
	});
var _mordrax$cotwelm$Container$set = F2(
	function (items, _p9) {
		var _p10 = _p9;
		return _mordrax$cotwelm$Container$ContainerModel(
			_elm_lang$core$Native_Utils.update(
				_p10._0,
				{items: items}));
	});
var _mordrax$cotwelm$Container$add = F2(
	function (item, _p11) {
		var _p12 = _p11;
		var _p15 = _p12._0;
		var newMass = A2(
			_mordrax$cotwelm$Utils_Mass$add,
			_p15.getMass(item),
			_mordrax$cotwelm$Container$mass(
				_mordrax$cotwelm$Container$ContainerModel(_p15)));
		var _p13 = A2(_mordrax$cotwelm$Utils_Mass$withinCapacity, newMass, _p15.capacity);
		var withinBulkLimit = _p13._0;
		var withinWeightLimit = _p13._1;
		var _p14 = {ctor: '_Tuple2', _0: withinBulkLimit, _1: withinWeightLimit};
		if (_p14._0 === false) {
			return _elm_lang$core$Result$Err('Its too bulky to fit!');
		} else {
			if (_p14._1 === false) {
				return _elm_lang$core$Result$Err('Its too heavy for the container!');
			} else {
				return _elm_lang$core$Result$Ok(
					_mordrax$cotwelm$Container$ContainerModel(
						_elm_lang$core$Native_Utils.update(
							_p15,
							{
								items: {ctor: '::', _0: item, _1: _p15.items}
							})));
			}
		}
	});
var _mordrax$cotwelm$Container$remove = F2(
	function (item, _p16) {
		var _p17 = _p16;
		var _p18 = _p17._0;
		return _mordrax$cotwelm$Container$ContainerModel(
			_elm_lang$core$Native_Utils.update(
				_p18,
				{
					items: A3(_mordrax$cotwelm$Utils_Misc$removeFirst, item, _p18.equals, _p18.items)
				}));
	});

var _mordrax$cotwelm$Item_Data$acToInt = function (_p0) {
	var _p1 = _p0;
	return _p1._0;
};
var _mordrax$cotwelm$Item_Data$BaseItem = F6(
	function (a, b, c, d, e, f) {
		return {name: a, itemValue: b, css: c, mass: d, status: e, isIdentified: f};
	});
var _mordrax$cotwelm$Item_Data$WeaponDetails = F2(
	function (a, b) {
		return {weaponType: a, damage: b};
	});
var _mordrax$cotwelm$Item_Data$ArmourDetails = F2(
	function (a, b) {
		return {armourType: a, ac: b};
	});
var _mordrax$cotwelm$Item_Data$GauntletsDetails = F2(
	function (a, b) {
		return {gauntletsType: a, ac: b};
	});
var _mordrax$cotwelm$Item_Data$HelmetDetails = F2(
	function (a, b) {
		return {helmetType: a, ac: b};
	});
var _mordrax$cotwelm$Item_Data$BracersDetails = F2(
	function (a, b) {
		return {bracersType: a, ac: b};
	});
var _mordrax$cotwelm$Item_Data$ShieldDetails = F2(
	function (a, b) {
		return {shieldType: a, ac: b};
	});
var _mordrax$cotwelm$Item_Data$BootsDetails = function (a) {
	return {bootsType: a};
};
var _mordrax$cotwelm$Item_Data$NeckwearDetails = function (a) {
	return {neckwearType: a};
};
var _mordrax$cotwelm$Item_Data$OvergarmentDetails = function (a) {
	return {overgarmentType: a};
};
var _mordrax$cotwelm$Item_Data$RingDetails = function (a) {
	return {ringType: a};
};
var _mordrax$cotwelm$Item_Data$BeltDetails = F2(
	function (a, b) {
		return {beltType: a, beltContainer: b};
	});
var _mordrax$cotwelm$Item_Data$PackDetails = F2(
	function (a, b) {
		return {packType: a, container: b};
	});
var _mordrax$cotwelm$Item_Data$PurseDetails = function (a) {
	return {coins: a};
};
var _mordrax$cotwelm$Item_Data$Coins = F4(
	function (a, b, c, d) {
		return {copper: a, silver: b, gold: c, platinum: d};
	});
var _mordrax$cotwelm$Item_Data$Enchanted = {ctor: 'Enchanted'};
var _mordrax$cotwelm$Item_Data$Cursed = {ctor: 'Cursed'};
var _mordrax$cotwelm$Item_Data$Normal = {ctor: 'Normal'};
var _mordrax$cotwelm$Item_Data$AC = function (a) {
	return {ctor: 'AC', _0: a};
};
var _mordrax$cotwelm$Item_Data$addAC = F2(
	function (_p3, _p2) {
		var _p4 = _p3;
		var _p5 = _p2;
		return _mordrax$cotwelm$Item_Data$AC(_p4._0 + _p5._0);
	});
var _mordrax$cotwelm$Item_Data$Unidentified = {ctor: 'Unidentified'};
var _mordrax$cotwelm$Item_Data$Identified = {ctor: 'Identified'};
var _mordrax$cotwelm$Item_Data$Item = F2(
	function (a, b) {
		return {ctor: 'Item', _0: a, _1: b};
	});
var _mordrax$cotwelm$Item_Data$PlatinumDetail = function (a) {
	return {ctor: 'PlatinumDetail', _0: a};
};
var _mordrax$cotwelm$Item_Data$GoldDetail = function (a) {
	return {ctor: 'GoldDetail', _0: a};
};
var _mordrax$cotwelm$Item_Data$SilverDetail = function (a) {
	return {ctor: 'SilverDetail', _0: a};
};
var _mordrax$cotwelm$Item_Data$CopperDetail = function (a) {
	return {ctor: 'CopperDetail', _0: a};
};
var _mordrax$cotwelm$Item_Data$BootsDetail = function (a) {
	return {ctor: 'BootsDetail', _0: a};
};
var _mordrax$cotwelm$Item_Data$RingDetail = function (a) {
	return {ctor: 'RingDetail', _0: a};
};
var _mordrax$cotwelm$Item_Data$OvergarmentDetail = function (a) {
	return {ctor: 'OvergarmentDetail', _0: a};
};
var _mordrax$cotwelm$Item_Data$NeckwearDetail = function (a) {
	return {ctor: 'NeckwearDetail', _0: a};
};
var _mordrax$cotwelm$Item_Data$PurseDetail = function (a) {
	return {ctor: 'PurseDetail', _0: a};
};
var _mordrax$cotwelm$Item_Data$PackDetail = function (a) {
	return {ctor: 'PackDetail', _0: a};
};
var _mordrax$cotwelm$Item_Data$BeltDetail = function (a) {
	return {ctor: 'BeltDetail', _0: a};
};
var _mordrax$cotwelm$Item_Data$GauntletsDetail = function (a) {
	return {ctor: 'GauntletsDetail', _0: a};
};
var _mordrax$cotwelm$Item_Data$BracersDetail = function (a) {
	return {ctor: 'BracersDetail', _0: a};
};
var _mordrax$cotwelm$Item_Data$HelmetDetail = function (a) {
	return {ctor: 'HelmetDetail', _0: a};
};
var _mordrax$cotwelm$Item_Data$ShieldDetail = function (a) {
	return {ctor: 'ShieldDetail', _0: a};
};
var _mordrax$cotwelm$Item_Data$ArmourDetail = function (a) {
	return {ctor: 'ArmourDetail', _0: a};
};
var _mordrax$cotwelm$Item_Data$WeaponDetail = function (a) {
	return {ctor: 'WeaponDetail', _0: a};
};
var _mordrax$cotwelm$Item_Data$ItemTypePlatinum = function (a) {
	return {ctor: 'ItemTypePlatinum', _0: a};
};
var _mordrax$cotwelm$Item_Data$ItemTypeGold = function (a) {
	return {ctor: 'ItemTypeGold', _0: a};
};
var _mordrax$cotwelm$Item_Data$ItemTypeSilver = function (a) {
	return {ctor: 'ItemTypeSilver', _0: a};
};
var _mordrax$cotwelm$Item_Data$ItemTypeCopper = function (a) {
	return {ctor: 'ItemTypeCopper', _0: a};
};
var _mordrax$cotwelm$Item_Data$ItemTypeBoots = function (a) {
	return {ctor: 'ItemTypeBoots', _0: a};
};
var _mordrax$cotwelm$Item_Data$ItemTypeRing = function (a) {
	return {ctor: 'ItemTypeRing', _0: a};
};
var _mordrax$cotwelm$Item_Data$ItemTypeOvergarment = function (a) {
	return {ctor: 'ItemTypeOvergarment', _0: a};
};
var _mordrax$cotwelm$Item_Data$ItemTypeNeckwear = function (a) {
	return {ctor: 'ItemTypeNeckwear', _0: a};
};
var _mordrax$cotwelm$Item_Data$ItemTypePurse = {ctor: 'ItemTypePurse'};
var _mordrax$cotwelm$Item_Data$ItemTypePack = function (a) {
	return {ctor: 'ItemTypePack', _0: a};
};
var _mordrax$cotwelm$Item_Data$ItemTypeBelt = function (a) {
	return {ctor: 'ItemTypeBelt', _0: a};
};
var _mordrax$cotwelm$Item_Data$ItemTypeGauntlets = function (a) {
	return {ctor: 'ItemTypeGauntlets', _0: a};
};
var _mordrax$cotwelm$Item_Data$ItemTypeBracers = function (a) {
	return {ctor: 'ItemTypeBracers', _0: a};
};
var _mordrax$cotwelm$Item_Data$ItemTypeHelmet = function (a) {
	return {ctor: 'ItemTypeHelmet', _0: a};
};
var _mordrax$cotwelm$Item_Data$ItemTypeShield = function (a) {
	return {ctor: 'ItemTypeShield', _0: a};
};
var _mordrax$cotwelm$Item_Data$ItemTypeArmour = function (a) {
	return {ctor: 'ItemTypeArmour', _0: a};
};
var _mordrax$cotwelm$Item_Data$ItemTypeWeapon = function (a) {
	return {ctor: 'ItemTypeWeapon', _0: a};
};
var _mordrax$cotwelm$Item_Data$ItemValue = function (a) {
	return {ctor: 'ItemValue', _0: a};
};
var _mordrax$cotwelm$Item_Data$FourSlot = F4(
	function (a, b, c, d) {
		return {ctor: 'FourSlot', _0: a, _1: b, _2: c, _3: d};
	});
var _mordrax$cotwelm$Item_Data$ThreeSlot = F3(
	function (a, b, c) {
		return {ctor: 'ThreeSlot', _0: a, _1: b, _2: c};
	});
var _mordrax$cotwelm$Item_Data$TwoSlot = F2(
	function (a, b) {
		return {ctor: 'TwoSlot', _0: a, _1: b};
	});
var _mordrax$cotwelm$Item_Data$GiantMaul = {ctor: 'GiantMaul'};
var _mordrax$cotwelm$Item_Data$Boulder = {ctor: 'Boulder'};
var _mordrax$cotwelm$Item_Data$GiantAxe = {ctor: 'GiantAxe'};
var _mordrax$cotwelm$Item_Data$StoneClub = {ctor: 'StoneClub'};
var _mordrax$cotwelm$Item_Data$LargeClub = {ctor: 'LargeClub'};
var _mordrax$cotwelm$Item_Data$Pike = {ctor: 'Pike'};
var _mordrax$cotwelm$Item_Data$LargeClaws = {ctor: 'LargeClaws'};
var _mordrax$cotwelm$Item_Data$Bow = {ctor: 'Bow'};
var _mordrax$cotwelm$Item_Data$Pincers = {ctor: 'Pincers'};
var _mordrax$cotwelm$Item_Data$Fangs = {ctor: 'Fangs'};
var _mordrax$cotwelm$Item_Data$Crossbow = {ctor: 'Crossbow'};
var _mordrax$cotwelm$Item_Data$SmallBite = {ctor: 'SmallBite'};
var _mordrax$cotwelm$Item_Data$SmallClaws = {ctor: 'SmallClaws'};
var _mordrax$cotwelm$Item_Data$TwoHandedSword = {ctor: 'TwoHandedSword'};
var _mordrax$cotwelm$Item_Data$BastardSword = {ctor: 'BastardSword'};
var _mordrax$cotwelm$Item_Data$MorningStar = {ctor: 'MorningStar'};
var _mordrax$cotwelm$Item_Data$BroadSword = {ctor: 'BroadSword'};
var _mordrax$cotwelm$Item_Data$BattleAxe = {ctor: 'BattleAxe'};
var _mordrax$cotwelm$Item_Data$LongSword = {ctor: 'LongSword'};
var _mordrax$cotwelm$Item_Data$WarHammer = {ctor: 'WarHammer'};
var _mordrax$cotwelm$Item_Data$Axe = {ctor: 'Axe'};
var _mordrax$cotwelm$Item_Data$Flail = {ctor: 'Flail'};
var _mordrax$cotwelm$Item_Data$Mace = {ctor: 'Mace'};
var _mordrax$cotwelm$Item_Data$ShortSword = {ctor: 'ShortSword'};
var _mordrax$cotwelm$Item_Data$Spear = {ctor: 'Spear'};
var _mordrax$cotwelm$Item_Data$Quarterstaff = {ctor: 'Quarterstaff'};
var _mordrax$cotwelm$Item_Data$HandAxe = {ctor: 'HandAxe'};
var _mordrax$cotwelm$Item_Data$Hammer = {ctor: 'Hammer'};
var _mordrax$cotwelm$Item_Data$Dagger = {ctor: 'Dagger'};
var _mordrax$cotwelm$Item_Data$Club = {ctor: 'Club'};
var _mordrax$cotwelm$Item_Data$allWeapons = A2(
	_elm_lang$core$List$map,
	_mordrax$cotwelm$Item_Data$ItemTypeWeapon,
	{
		ctor: '::',
		_0: _mordrax$cotwelm$Item_Data$Club,
		_1: {
			ctor: '::',
			_0: _mordrax$cotwelm$Item_Data$Dagger,
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$Item_Data$Hammer,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Item_Data$HandAxe,
					_1: {
						ctor: '::',
						_0: _mordrax$cotwelm$Item_Data$Quarterstaff,
						_1: {
							ctor: '::',
							_0: _mordrax$cotwelm$Item_Data$Spear,
							_1: {
								ctor: '::',
								_0: _mordrax$cotwelm$Item_Data$ShortSword,
								_1: {
									ctor: '::',
									_0: _mordrax$cotwelm$Item_Data$Mace,
									_1: {
										ctor: '::',
										_0: _mordrax$cotwelm$Item_Data$Flail,
										_1: {
											ctor: '::',
											_0: _mordrax$cotwelm$Item_Data$Axe,
											_1: {
												ctor: '::',
												_0: _mordrax$cotwelm$Item_Data$WarHammer,
												_1: {
													ctor: '::',
													_0: _mordrax$cotwelm$Item_Data$LongSword,
													_1: {
														ctor: '::',
														_0: _mordrax$cotwelm$Item_Data$BattleAxe,
														_1: {
															ctor: '::',
															_0: _mordrax$cotwelm$Item_Data$BroadSword,
															_1: {
																ctor: '::',
																_0: _mordrax$cotwelm$Item_Data$MorningStar,
																_1: {
																	ctor: '::',
																	_0: _mordrax$cotwelm$Item_Data$BastardSword,
																	_1: {
																		ctor: '::',
																		_0: _mordrax$cotwelm$Item_Data$TwoHandedSword,
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _mordrax$cotwelm$Item_Data$BrokenSword = {ctor: 'BrokenSword'};
var _mordrax$cotwelm$Item_Data$EnchantedHelmOfStorms = {ctor: 'EnchantedHelmOfStorms'};
var _mordrax$cotwelm$Item_Data$HelmetOfDetectMonsters = {ctor: 'HelmetOfDetectMonsters'};
var _mordrax$cotwelm$Item_Data$MeteoricSteelHelmet = {ctor: 'MeteoricSteelHelmet'};
var _mordrax$cotwelm$Item_Data$SteelHelmet = {ctor: 'SteelHelmet'};
var _mordrax$cotwelm$Item_Data$IronHelmet = {ctor: 'IronHelmet'};
var _mordrax$cotwelm$Item_Data$LeatherHelmet = {ctor: 'LeatherHelmet'};
var _mordrax$cotwelm$Item_Data$allHelmets = A2(
	_elm_lang$core$List$map,
	_mordrax$cotwelm$Item_Data$ItemTypeHelmet,
	{
		ctor: '::',
		_0: _mordrax$cotwelm$Item_Data$LeatherHelmet,
		_1: {
			ctor: '::',
			_0: _mordrax$cotwelm$Item_Data$IronHelmet,
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$Item_Data$SteelHelmet,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Item_Data$MeteoricSteelHelmet,
					_1: {
						ctor: '::',
						_0: _mordrax$cotwelm$Item_Data$HelmetOfDetectMonsters,
						_1: {ctor: '[]'}
					}
				}
			}
		}
	});
var _mordrax$cotwelm$Item_Data$BrokenHelmet = {ctor: 'BrokenHelmet'};
var _mordrax$cotwelm$Item_Data$ToughHide = {ctor: 'ToughHide'};
var _mordrax$cotwelm$Item_Data$Shell = {ctor: 'Shell'};
var _mordrax$cotwelm$Item_Data$Bones = {ctor: 'Bones'};
var _mordrax$cotwelm$Item_Data$SoftHide = {ctor: 'SoftHide'};
var _mordrax$cotwelm$Item_Data$ElvenChainMail = {ctor: 'ElvenChainMail'};
var _mordrax$cotwelm$Item_Data$MeteoricSteelPlate = {ctor: 'MeteoricSteelPlate'};
var _mordrax$cotwelm$Item_Data$PlateArmour = {ctor: 'PlateArmour'};
var _mordrax$cotwelm$Item_Data$PlateMail = {ctor: 'PlateMail'};
var _mordrax$cotwelm$Item_Data$SplintMail = {ctor: 'SplintMail'};
var _mordrax$cotwelm$Item_Data$ChainMail = {ctor: 'ChainMail'};
var _mordrax$cotwelm$Item_Data$ScaleMail = {ctor: 'ScaleMail'};
var _mordrax$cotwelm$Item_Data$RingMail = {ctor: 'RingMail'};
var _mordrax$cotwelm$Item_Data$StuddedLeatherArmour = {ctor: 'StuddedLeatherArmour'};
var _mordrax$cotwelm$Item_Data$LeatherArmour = {ctor: 'LeatherArmour'};
var _mordrax$cotwelm$Item_Data$allArmours = A2(
	_elm_lang$core$List$map,
	_mordrax$cotwelm$Item_Data$ItemTypeArmour,
	{
		ctor: '::',
		_0: _mordrax$cotwelm$Item_Data$LeatherArmour,
		_1: {
			ctor: '::',
			_0: _mordrax$cotwelm$Item_Data$StuddedLeatherArmour,
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$Item_Data$RingMail,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Item_Data$ScaleMail,
					_1: {
						ctor: '::',
						_0: _mordrax$cotwelm$Item_Data$ChainMail,
						_1: {
							ctor: '::',
							_0: _mordrax$cotwelm$Item_Data$SplintMail,
							_1: {
								ctor: '::',
								_0: _mordrax$cotwelm$Item_Data$PlateMail,
								_1: {
									ctor: '::',
									_0: _mordrax$cotwelm$Item_Data$PlateArmour,
									_1: {
										ctor: '::',
										_0: _mordrax$cotwelm$Item_Data$MeteoricSteelPlate,
										_1: {
											ctor: '::',
											_0: _mordrax$cotwelm$Item_Data$ElvenChainMail,
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _mordrax$cotwelm$Item_Data$RustyArmour = {ctor: 'RustyArmour'};
var _mordrax$cotwelm$Item_Data$LargeMeteoricSteelShield = {ctor: 'LargeMeteoricSteelShield'};
var _mordrax$cotwelm$Item_Data$MediumMeteoricSteelShield = {ctor: 'MediumMeteoricSteelShield'};
var _mordrax$cotwelm$Item_Data$SmallMeteoricSteelShield = {ctor: 'SmallMeteoricSteelShield'};
var _mordrax$cotwelm$Item_Data$LargeSteelShield = {ctor: 'LargeSteelShield'};
var _mordrax$cotwelm$Item_Data$MediumSteelShield = {ctor: 'MediumSteelShield'};
var _mordrax$cotwelm$Item_Data$SmallSteelShield = {ctor: 'SmallSteelShield'};
var _mordrax$cotwelm$Item_Data$LargeIronShield = {ctor: 'LargeIronShield'};
var _mordrax$cotwelm$Item_Data$MediumIronShield = {ctor: 'MediumIronShield'};
var _mordrax$cotwelm$Item_Data$SmallIronShield = {ctor: 'SmallIronShield'};
var _mordrax$cotwelm$Item_Data$LargeWoodenShield = {ctor: 'LargeWoodenShield'};
var _mordrax$cotwelm$Item_Data$MediumWoodenShield = {ctor: 'MediumWoodenShield'};
var _mordrax$cotwelm$Item_Data$SmallWoodenShield = {ctor: 'SmallWoodenShield'};
var _mordrax$cotwelm$Item_Data$allShields = A2(
	_elm_lang$core$List$map,
	_mordrax$cotwelm$Item_Data$ItemTypeShield,
	{
		ctor: '::',
		_0: _mordrax$cotwelm$Item_Data$SmallWoodenShield,
		_1: {
			ctor: '::',
			_0: _mordrax$cotwelm$Item_Data$MediumWoodenShield,
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$Item_Data$LargeWoodenShield,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Item_Data$SmallIronShield,
					_1: {
						ctor: '::',
						_0: _mordrax$cotwelm$Item_Data$MediumIronShield,
						_1: {
							ctor: '::',
							_0: _mordrax$cotwelm$Item_Data$LargeIronShield,
							_1: {
								ctor: '::',
								_0: _mordrax$cotwelm$Item_Data$SmallSteelShield,
								_1: {
									ctor: '::',
									_0: _mordrax$cotwelm$Item_Data$MediumSteelShield,
									_1: {
										ctor: '::',
										_0: _mordrax$cotwelm$Item_Data$LargeSteelShield,
										_1: {
											ctor: '::',
											_0: _mordrax$cotwelm$Item_Data$SmallMeteoricSteelShield,
											_1: {
												ctor: '::',
												_0: _mordrax$cotwelm$Item_Data$MediumMeteoricSteelShield,
												_1: {
													ctor: '::',
													_0: _mordrax$cotwelm$Item_Data$LargeMeteoricSteelShield,
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _mordrax$cotwelm$Item_Data$BrokenShield = {ctor: 'BrokenShield'};
var _mordrax$cotwelm$Item_Data$BracersOfDefenseVS = {ctor: 'BracersOfDefenseVS'};
var _mordrax$cotwelm$Item_Data$BracersOfDefenseS = {ctor: 'BracersOfDefenseS'};
var _mordrax$cotwelm$Item_Data$BracersOfDefenseNormal = {ctor: 'BracersOfDefenseNormal'};
var _mordrax$cotwelm$Item_Data$NormalBracers = {ctor: 'NormalBracers'};
var _mordrax$cotwelm$Item_Data$allBracers = A2(
	_elm_lang$core$List$map,
	_mordrax$cotwelm$Item_Data$ItemTypeBracers,
	{
		ctor: '::',
		_0: _mordrax$cotwelm$Item_Data$NormalBracers,
		_1: {ctor: '[]'}
	});
var _mordrax$cotwelm$Item_Data$GauntletOfStrengthVS = {ctor: 'GauntletOfStrengthVS'};
var _mordrax$cotwelm$Item_Data$GauntletOfStrengthS = {ctor: 'GauntletOfStrengthS'};
var _mordrax$cotwelm$Item_Data$GauntletOfStrength = {ctor: 'GauntletOfStrength'};
var _mordrax$cotwelm$Item_Data$GauntletOfDexterityVS = {ctor: 'GauntletOfDexterityVS'};
var _mordrax$cotwelm$Item_Data$GauntletOfDexterityS = {ctor: 'GauntletOfDexterityS'};
var _mordrax$cotwelm$Item_Data$GauntletOfDexterity = {ctor: 'GauntletOfDexterity'};
var _mordrax$cotwelm$Item_Data$GauntletOfSlayingVS_VS = {ctor: 'GauntletOfSlayingVS_VS'};
var _mordrax$cotwelm$Item_Data$GauntletOfSlayingS_S = {ctor: 'GauntletOfSlayingS_S'};
var _mordrax$cotwelm$Item_Data$GauntletOfSlaying = {ctor: 'GauntletOfSlaying'};
var _mordrax$cotwelm$Item_Data$GauntletOfProtectionVS = {ctor: 'GauntletOfProtectionVS'};
var _mordrax$cotwelm$Item_Data$GauntletOfProtectionS = {ctor: 'GauntletOfProtectionS'};
var _mordrax$cotwelm$Item_Data$GauntletOfProtection = {ctor: 'GauntletOfProtection'};
var _mordrax$cotwelm$Item_Data$NormalGauntlets = {ctor: 'NormalGauntlets'};
var _mordrax$cotwelm$Item_Data$allGauntlets = A2(
	_elm_lang$core$List$map,
	_mordrax$cotwelm$Item_Data$ItemTypeGauntlets,
	{
		ctor: '::',
		_0: _mordrax$cotwelm$Item_Data$NormalGauntlets,
		_1: {ctor: '[]'}
	});
var _mordrax$cotwelm$Item_Data$EnchantedLargePackOfHolding = {ctor: 'EnchantedLargePackOfHolding'};
var _mordrax$cotwelm$Item_Data$EnchantedMediumPackOfHolding = {ctor: 'EnchantedMediumPackOfHolding'};
var _mordrax$cotwelm$Item_Data$EnchantedSmallPackOfHolding = {ctor: 'EnchantedSmallPackOfHolding'};
var _mordrax$cotwelm$Item_Data$LargeChest = {ctor: 'LargeChest'};
var _mordrax$cotwelm$Item_Data$MediumChest = {ctor: 'MediumChest'};
var _mordrax$cotwelm$Item_Data$SmallChest = {ctor: 'SmallChest'};
var _mordrax$cotwelm$Item_Data$LargePack = {ctor: 'LargePack'};
var _mordrax$cotwelm$Item_Data$MediumPack = {ctor: 'MediumPack'};
var _mordrax$cotwelm$Item_Data$SmallPack = {ctor: 'SmallPack'};
var _mordrax$cotwelm$Item_Data$LargeBag = {ctor: 'LargeBag'};
var _mordrax$cotwelm$Item_Data$MediumBag = {ctor: 'MediumBag'};
var _mordrax$cotwelm$Item_Data$SmallBag = {ctor: 'SmallBag'};
var _mordrax$cotwelm$Item_Data$allPacks = A2(
	_elm_lang$core$List$map,
	_mordrax$cotwelm$Item_Data$ItemTypePack,
	{
		ctor: '::',
		_0: _mordrax$cotwelm$Item_Data$SmallBag,
		_1: {
			ctor: '::',
			_0: _mordrax$cotwelm$Item_Data$MediumBag,
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$Item_Data$LargeBag,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Item_Data$SmallPack,
					_1: {
						ctor: '::',
						_0: _mordrax$cotwelm$Item_Data$MediumPack,
						_1: {
							ctor: '::',
							_0: _mordrax$cotwelm$Item_Data$LargePack,
							_1: {
								ctor: '::',
								_0: _mordrax$cotwelm$Item_Data$SmallChest,
								_1: {
									ctor: '::',
									_0: _mordrax$cotwelm$Item_Data$MediumChest,
									_1: {
										ctor: '::',
										_0: _mordrax$cotwelm$Item_Data$LargeChest,
										_1: {
											ctor: '::',
											_0: _mordrax$cotwelm$Item_Data$EnchantedSmallPackOfHolding,
											_1: {
												ctor: '::',
												_0: _mordrax$cotwelm$Item_Data$EnchantedMediumPackOfHolding,
												_1: {
													ctor: '::',
													_0: _mordrax$cotwelm$Item_Data$EnchantedLargePackOfHolding,
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _mordrax$cotwelm$Item_Data$WandQuiverBelt = {ctor: 'WandQuiverBelt'};
var _mordrax$cotwelm$Item_Data$UtilityBelt = {ctor: 'UtilityBelt'};
var _mordrax$cotwelm$Item_Data$FourSlotBelt = {ctor: 'FourSlotBelt'};
var _mordrax$cotwelm$Item_Data$ThreeSlotBelt = {ctor: 'ThreeSlotBelt'};
var _mordrax$cotwelm$Item_Data$TwoSlotBelt = {ctor: 'TwoSlotBelt'};
var _mordrax$cotwelm$Item_Data$allBelts = A2(
	_elm_lang$core$List$map,
	_mordrax$cotwelm$Item_Data$ItemTypeBelt,
	{
		ctor: '::',
		_0: _mordrax$cotwelm$Item_Data$TwoSlotBelt,
		_1: {
			ctor: '::',
			_0: _mordrax$cotwelm$Item_Data$ThreeSlotBelt,
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$Item_Data$FourSlotBelt,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Item_Data$UtilityBelt,
					_1: {
						ctor: '::',
						_0: _mordrax$cotwelm$Item_Data$WandQuiverBelt,
						_1: {ctor: '[]'}
					}
				}
			}
		}
	});
var _mordrax$cotwelm$Item_Data$NoOp1 = {ctor: 'NoOp1'};
var _mordrax$cotwelm$Item_Data$NoOp2 = {ctor: 'NoOp2'};
var _mordrax$cotwelm$Item_Data$NoOp3 = {ctor: 'NoOp3'};
var _mordrax$cotwelm$Item_Data$NoOp4 = {ctor: 'NoOp4'};

var _mordrax$cotwelm$Item_Belt$initBeltContainer = function (beltType) {
	var _p0 = beltType;
	switch (_p0.ctor) {
		case 'TwoSlotBelt':
			return A2(_mordrax$cotwelm$Item_Data$TwoSlot, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing);
		case 'ThreeSlotBelt':
			return A3(_mordrax$cotwelm$Item_Data$ThreeSlot, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing);
		case 'FourSlotBelt':
			return A4(_mordrax$cotwelm$Item_Data$FourSlot, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing);
		case 'UtilityBelt':
			return A2(_mordrax$cotwelm$Item_Data$TwoSlot, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing);
		default:
			return A2(_mordrax$cotwelm$Item_Data$TwoSlot, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing);
	}
};
var _mordrax$cotwelm$Item_Belt$init = F3(
	function (beltType, status, idStatus) {
		var make = F5(
			function (name, mass, css, itemValue, container) {
				return {
					ctor: '_Tuple2',
					_0: A6(_mordrax$cotwelm$Item_Data$BaseItem, name, itemValue, css, mass, status, idStatus),
					_1: {
						beltType: beltType,
						beltContainer: _mordrax$cotwelm$Item_Belt$initBeltContainer(beltType)
					}
				};
			});
		var _p1 = beltType;
		switch (_p1.ctor) {
			case 'TwoSlotBelt':
				return A5(
					make,
					'Two Slot Belt',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 0, 0),
					'slot-belt',
					_mordrax$cotwelm$Item_Data$ItemValue(12),
					_mordrax$cotwelm$Item_Belt$initBeltContainer(_mordrax$cotwelm$Item_Data$TwoSlotBelt));
			case 'ThreeSlotBelt':
				return A5(
					make,
					'Three Slot Belt',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 0, 0),
					'slot-belt',
					_mordrax$cotwelm$Item_Data$ItemValue(12),
					_mordrax$cotwelm$Item_Belt$initBeltContainer(_mordrax$cotwelm$Item_Data$ThreeSlotBelt));
			case 'FourSlotBelt':
				return A5(
					make,
					'Four Slot Belt',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 0, 0),
					'slot-belt',
					_mordrax$cotwelm$Item_Data$ItemValue(12),
					_mordrax$cotwelm$Item_Belt$initBeltContainer(_mordrax$cotwelm$Item_Data$FourSlotBelt));
			case 'UtilityBelt':
				return A5(
					make,
					'Utility Belt',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 0, 0),
					'utility-belt',
					_mordrax$cotwelm$Item_Data$ItemValue(54),
					_mordrax$cotwelm$Item_Belt$initBeltContainer(_mordrax$cotwelm$Item_Data$UtilityBelt));
			default:
				return A5(
					make,
					'Wand Quiver Belt',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 0, 0),
					'wand-quiver-belt',
					_mordrax$cotwelm$Item_Data$ItemValue(12),
					_mordrax$cotwelm$Item_Belt$initBeltContainer(_mordrax$cotwelm$Item_Data$WandQuiverBelt));
		}
	});

var _mordrax$cotwelm$Item_Pack$init = F4(
	function (packType, toContainer, status, idStatus) {
		var make = F5(
			function (name, itemValue, css, mass, capacity) {
				return {
					ctor: '_Tuple2',
					_0: A6(_mordrax$cotwelm$Item_Data$BaseItem, name, itemValue, css, mass, status, idStatus),
					_1: {
						packType: packType,
						container: toContainer(capacity)
					}
				};
			});
		var _p0 = packType;
		switch (_p0.ctor) {
			case 'SmallBag':
				return A5(
					make,
					'Small Bag',
					_mordrax$cotwelm$Item_Data$ItemValue(12),
					'bag',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 0, 0),
					A2(_mordrax$cotwelm$Utils_Mass$Capacity, 120, 100));
			case 'MediumBag':
				return A5(
					make,
					'Medium Bag',
					_mordrax$cotwelm$Item_Data$ItemValue(20),
					'bag',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 0, 0),
					A2(_mordrax$cotwelm$Utils_Mass$Capacity, 240, 200));
			case 'LargeBag':
				return A5(
					make,
					'Large Bag',
					_mordrax$cotwelm$Item_Data$ItemValue(36),
					'bag',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 0, 0),
					A2(_mordrax$cotwelm$Utils_Mass$Capacity, 360, 300));
			case 'SmallPack':
				return A5(
					make,
					'Small Pack',
					_mordrax$cotwelm$Item_Data$ItemValue(40),
					'pack',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 0, 0),
					A2(_mordrax$cotwelm$Utils_Mass$Capacity, 1000, 240));
			case 'MediumPack':
				return A5(
					make,
					'Medium Pack',
					_mordrax$cotwelm$Item_Data$ItemValue(80),
					'pack',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 0, 0),
					A2(_mordrax$cotwelm$Utils_Mass$Capacity, 1500, 440));
			case 'LargePack':
				return A5(
					make,
					'Large Pack',
					_mordrax$cotwelm$Item_Data$ItemValue(160),
					'pack',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 0, 0),
					A2(_mordrax$cotwelm$Utils_Mass$Capacity, 2000, 700));
			case 'SmallChest':
				return A5(
					make,
					'Small Chest',
					_mordrax$cotwelm$Item_Data$ItemValue(200),
					'chest',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 0, 0),
					A2(_mordrax$cotwelm$Utils_Mass$Capacity, 1000, 2000));
			case 'MediumChest':
				return A5(
					make,
					'Medium Chest',
					_mordrax$cotwelm$Item_Data$ItemValue(600),
					'chest',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 0, 0),
					A2(_mordrax$cotwelm$Utils_Mass$Capacity, 3000, 2000));
			case 'LargeChest':
				return A5(
					make,
					'Large Chest',
					_mordrax$cotwelm$Item_Data$ItemValue(1000),
					'chest',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 0, 0),
					A2(_mordrax$cotwelm$Utils_Mass$Capacity, 5000, 2000));
			case 'EnchantedSmallPackOfHolding':
				return A5(
					make,
					'Enchanted Small Pack Of Holding',
					_mordrax$cotwelm$Item_Data$ItemValue(2000),
					'enchanted-pack',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 0, 0),
					A2(_mordrax$cotwelm$Utils_Mass$Capacity, 3000, 1000));
			case 'EnchantedMediumPackOfHolding':
				return A5(
					make,
					'Enchanted Medium Pack Of Holding',
					_mordrax$cotwelm$Item_Data$ItemValue(300),
					'enchanted-pack',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 0, 0),
					A2(_mordrax$cotwelm$Utils_Mass$Capacity, 4000, 1500));
			default:
				return A5(
					make,
					'Enchanted Large Pack Of Holding',
					_mordrax$cotwelm$Item_Data$ItemValue(4000),
					'enchanted-pack',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 0, 0),
					A2(_mordrax$cotwelm$Utils_Mass$Capacity, 5000, 2000));
		}
	});
var _mordrax$cotwelm$Item_Pack$remove = F2(
	function (item, _p1) {
		var _p2 = _p1;
		var _p3 = _p2._1;
		var newContainer = A2(_mordrax$cotwelm$Container$remove, item, _p3.container);
		return {
			ctor: '_Tuple2',
			_0: _p2._0,
			_1: _elm_lang$core$Native_Utils.update(
				_p3,
				{container: newContainer})
		};
	});
var _mordrax$cotwelm$Item_Pack$add = F2(
	function (item, _p4) {
		var _p5 = _p4;
		var _p6 = _p5._1;
		return A2(
			_elm_lang$core$Result$andThen,
			function (container) {
				return _elm_lang$core$Result$Ok(
					{
						ctor: '_Tuple2',
						_0: _p5._0,
						_1: _elm_lang$core$Native_Utils.update(
							_p6,
							{container: container})
					});
			},
			A2(_mordrax$cotwelm$Container$add, item, _p6.container));
	});
var _mordrax$cotwelm$Item_Pack$contents = function (_p7) {
	var _p8 = _p7;
	return _mordrax$cotwelm$Container$list(_p8._1.container);
};
var _mordrax$cotwelm$Item_Pack$info = function (_p9) {
	var _p10 = _p9;
	var _p11 = _p10._1.container;
	return {
		ctor: '_Tuple2',
		_0: _mordrax$cotwelm$Container$mass(_p11),
		_1: _mordrax$cotwelm$Container$capacity(_p11)
	};
};

var _mordrax$cotwelm$Item_Purse$toLeastSilvers = function (coins) {
	return {
		ctor: '_Tuple2',
		_0: A2(_elm_lang$core$Basics_ops['%'], coins, 10),
		_1: (coins / 10) | 0
	};
};
var _mordrax$cotwelm$Item_Purse$toLeastGold = function (coins) {
	var _p0 = _mordrax$cotwelm$Item_Purse$toLeastSilvers(coins);
	var copper = _p0._0;
	var silver = _p0._1;
	return {
		ctor: '_Tuple3',
		_0: copper,
		_1: A2(_elm_lang$core$Basics_ops['%'], silver, 10),
		_2: (silver / 10) | 0
	};
};
var _mordrax$cotwelm$Item_Purse$toLeastCoins = function (coppers) {
	var _p1 = _mordrax$cotwelm$Item_Purse$toLeastGold(coppers);
	var copper = _p1._0;
	var silver = _p1._1;
	var gold = _p1._2;
	return A4(
		_mordrax$cotwelm$Item_Data$Coins,
		copper,
		silver,
		A2(_elm_lang$core$Basics_ops['%'], gold, 10),
		(gold / 10) | 0);
};
var _mordrax$cotwelm$Item_Purse$ppCoins_ = F2(
	function (coinPairs, currentString) {
		ppCoins_:
		while (true) {
			var _p2 = coinPairs;
			if (_p2.ctor === '[]') {
				return currentString;
			} else {
				if (_p2._1.ctor === '[]') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						currentString,
						A2(
							_elm_lang$core$Basics_ops['++'],
							' ',
							A2(_elm_lang$core$Basics_ops['++'], _p2._0, ' pieces')));
				} else {
					if (_p2._1._1.ctor === '[]') {
						return A2(
							_elm_lang$core$Basics_ops['++'],
							currentString,
							A2(
								_elm_lang$core$Basics_ops['++'],
								' ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_p2._0,
									A2(
										_elm_lang$core$Basics_ops['++'],
										' and ',
										A2(_elm_lang$core$Basics_ops['++'], _p2._1._0, ' pieces')))));
					} else {
						var _v1 = _p2._1,
							_v2 = A2(
							_elm_lang$core$Basics_ops['++'],
							currentString,
							A2(_elm_lang$core$Basics_ops['++'], _p2._0, ', '));
						coinPairs = _v1;
						currentString = _v2;
						continue ppCoins_;
					}
				}
			}
		}
	});
var _mordrax$cotwelm$Item_Purse$ppCoins = function (_p3) {
	var _p4 = _p3;
	var joinValueToUnit = function (_p5) {
		var _p6 = _p5;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(_p6._0),
			A2(_elm_lang$core$Basics_ops['++'], ' ', _p6._1));
	};
	var greaterThanZero = function (_p7) {
		var _p8 = _p7;
		return _elm_lang$core$Native_Utils.cmp(_p8._0, 0) > 0;
	};
	var coinPairs = {
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: _p4.platinum, _1: 'platinum'},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: _p4.gold, _1: 'gold'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: _p4.silver, _1: 'silver'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: _p4.copper, _1: 'copper'},
					_1: {ctor: '[]'}
				}
			}
		}
	};
	return A3(
		_elm_lang$core$Basics$flip,
		_mordrax$cotwelm$Item_Purse$ppCoins_,
		'',
		A2(
			_elm_lang$core$List$map,
			joinValueToUnit,
			A2(_elm_lang$core$List$filter, greaterThanZero, coinPairs)));
};
var _mordrax$cotwelm$Item_Purse$remove = F2(
	function (copperToRemove, _p9) {
		var _p10 = _p9;
		var _p15 = _p10._1;
		var _p14 = _p10._1.coins;
		var _p13 = _p10._0;
		var totalSilvers = _p14.copper + (_p14.silver * 10);
		var totalGold = totalSilvers + (_p14.gold * 100);
		var totalPlatinum = totalGold + (_p14.platinum * 1000);
		if (_elm_lang$core$Native_Utils.cmp(copperToRemove, _p14.copper) < 1) {
			return _elm_lang$core$Result$Ok(
				{
					ctor: '_Tuple2',
					_0: _p13,
					_1: _elm_lang$core$Native_Utils.update(
						_p15,
						{
							coins: _elm_lang$core$Native_Utils.update(
								_p14,
								{copper: _p14.copper - copperToRemove})
						})
				});
		} else {
			if (_elm_lang$core$Native_Utils.cmp(copperToRemove, totalSilvers) < 1) {
				var _p11 = _mordrax$cotwelm$Item_Purse$toLeastSilvers(totalSilvers - copperToRemove);
				var copper_ = _p11._0;
				var silver_ = _p11._1;
				return _elm_lang$core$Result$Ok(
					{
						ctor: '_Tuple2',
						_0: _p13,
						_1: _elm_lang$core$Native_Utils.update(
							_p15,
							{
								coins: _elm_lang$core$Native_Utils.update(
									_p14,
									{copper: copper_, silver: silver_})
							})
					});
			} else {
				if (_elm_lang$core$Native_Utils.cmp(copperToRemove, totalGold) < 1) {
					var _p12 = _mordrax$cotwelm$Item_Purse$toLeastGold(totalGold - copperToRemove);
					var copper_ = _p12._0;
					var silver_ = _p12._1;
					var gold_ = _p12._2;
					return _elm_lang$core$Result$Ok(
						{
							ctor: '_Tuple2',
							_0: _p13,
							_1: _elm_lang$core$Native_Utils.update(
								_p15,
								{
									coins: _elm_lang$core$Native_Utils.update(
										_p14,
										{copper: copper_, silver: silver_, gold: gold_})
								})
						});
				} else {
					if (_elm_lang$core$Native_Utils.cmp(copperToRemove, totalPlatinum) < 1) {
						var coins = _mordrax$cotwelm$Item_Purse$toLeastCoins(totalPlatinum - copperToRemove);
						return _elm_lang$core$Result$Ok(
							{
								ctor: '_Tuple2',
								_0: _p13,
								_1: _elm_lang$core$Native_Utils.update(
									_p15,
									{
										coins: _elm_lang$core$Native_Utils.update(
											coins,
											{copper: coins.copper, silver: coins.silver, gold: coins.gold, platinum: coins.platinum})
									})
							});
					} else {
						return _elm_lang$core$Result$Err('Ops! Looks like you don\'t have enough coins.');
					}
				}
			}
		}
	});
var _mordrax$cotwelm$Item_Purse$merge_ = F3(
	function (op, c1, c2) {
		return A4(
			_mordrax$cotwelm$Item_Data$Coins,
			A2(op, c1.copper, c2.copper),
			A2(op, c1.silver, c2.silver),
			A2(op, c1.gold, c2.gold),
			A2(op, c1.platinum, c2.platinum));
	});
var _mordrax$cotwelm$Item_Purse$merge = F2(
	function (_p17, _p16) {
		var _p18 = _p17;
		var _p19 = _p16;
		return {
			ctor: '_Tuple2',
			_0: _p18._0,
			_1: {
				coins: A3(
					_mordrax$cotwelm$Item_Purse$merge_,
					F2(
						function (x, y) {
							return x + y;
						}),
					_p18._1.coins,
					_p19._1.coins)
			}
		};
	});
var _mordrax$cotwelm$Item_Purse$addCoins = F2(
	function (newCoins, _p20) {
		var _p21 = _p20;
		return {
			ctor: '_Tuple2',
			_0: _p21._0,
			_1: {
				coins: A3(
					_mordrax$cotwelm$Item_Purse$merge_,
					F2(
						function (x, y) {
							return x + y;
						}),
					newCoins,
					_p21._1.coins)
			}
		};
	});
var _mordrax$cotwelm$Item_Purse$add = F2(
	function (coppers, _p22) {
		var _p23 = _p22;
		var _p24 = _p23._1.coins;
		var leastCoins = _mordrax$cotwelm$Item_Purse$toLeastCoins(coppers);
		return {
			ctor: '_Tuple2',
			_0: _p23._0,
			_1: _elm_lang$core$Native_Utils.update(
				_p23._1,
				{
					coins: A4(_mordrax$cotwelm$Item_Data$Coins, _p24.copper + leastCoins.copper, _p24.silver + leastCoins.silver, _p24.gold + leastCoins.gold, _p24.platinum + leastCoins.platinum)
				})
		};
	});
var _mordrax$cotwelm$Item_Purse$initCoinBaseItem = F3(
	function (name, css, value) {
		return A6(
			_mordrax$cotwelm$Item_Data$BaseItem,
			name,
			_mordrax$cotwelm$Item_Data$ItemValue(value),
			css,
			A2(_mordrax$cotwelm$Utils_Mass$Mass, 0, 0),
			_mordrax$cotwelm$Item_Data$Normal,
			_mordrax$cotwelm$Item_Data$Identified);
	});
var _mordrax$cotwelm$Item_Purse$initCoppers = function (value) {
	return {
		ctor: '_Tuple2',
		_0: A3(_mordrax$cotwelm$Item_Purse$initCoinBaseItem, 'Copper', 'coins-copper', value),
		_1: value
	};
};
var _mordrax$cotwelm$Item_Purse$initSilvers = function (value) {
	return {
		ctor: '_Tuple2',
		_0: A3(_mordrax$cotwelm$Item_Purse$initCoinBaseItem, 'Silver', 'coins-silver', value),
		_1: value
	};
};
var _mordrax$cotwelm$Item_Purse$initGolds = function (value) {
	return {
		ctor: '_Tuple2',
		_0: A3(_mordrax$cotwelm$Item_Purse$initCoinBaseItem, 'Gold', 'coins-gold', value),
		_1: value
	};
};
var _mordrax$cotwelm$Item_Purse$initPlatinums = function (value) {
	return {
		ctor: '_Tuple2',
		_0: A3(_mordrax$cotwelm$Item_Purse$initCoinBaseItem, 'Platinum', 'coins-platinum', value),
		_1: value
	};
};
var _mordrax$cotwelm$Item_Purse$init = {
	ctor: '_Tuple2',
	_0: A6(
		_mordrax$cotwelm$Item_Data$BaseItem,
		'Purse',
		_mordrax$cotwelm$Item_Data$ItemValue(0),
		'Purse',
		A2(_mordrax$cotwelm$Utils_Mass$Mass, 0, 0),
		_mordrax$cotwelm$Item_Data$Normal,
		_mordrax$cotwelm$Item_Data$Identified),
	_1: {
		coins: A4(_mordrax$cotwelm$Item_Data$Coins, 100, 10, 1, 1)
	}
};

var _mordrax$cotwelm$Item_Weapon$encode = _elm_lang$core$Basics$toString;
var _mordrax$cotwelm$Item_Weapon$usableWeapons = {
	ctor: '::',
	_0: _mordrax$cotwelm$Item_Data$BrokenSword,
	_1: {
		ctor: '::',
		_0: _mordrax$cotwelm$Item_Data$Club,
		_1: {
			ctor: '::',
			_0: _mordrax$cotwelm$Item_Data$Dagger,
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$Item_Data$Hammer,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Item_Data$HandAxe,
					_1: {
						ctor: '::',
						_0: _mordrax$cotwelm$Item_Data$Quarterstaff,
						_1: {
							ctor: '::',
							_0: _mordrax$cotwelm$Item_Data$Spear,
							_1: {
								ctor: '::',
								_0: _mordrax$cotwelm$Item_Data$ShortSword,
								_1: {
									ctor: '::',
									_0: _mordrax$cotwelm$Item_Data$Mace,
									_1: {
										ctor: '::',
										_0: _mordrax$cotwelm$Item_Data$Flail,
										_1: {
											ctor: '::',
											_0: _mordrax$cotwelm$Item_Data$Axe,
											_1: {
												ctor: '::',
												_0: _mordrax$cotwelm$Item_Data$WarHammer,
												_1: {
													ctor: '::',
													_0: _mordrax$cotwelm$Item_Data$LongSword,
													_1: {
														ctor: '::',
														_0: _mordrax$cotwelm$Item_Data$BattleAxe,
														_1: {
															ctor: '::',
															_0: _mordrax$cotwelm$Item_Data$BroadSword,
															_1: {
																ctor: '::',
																_0: _mordrax$cotwelm$Item_Data$MorningStar,
																_1: {
																	ctor: '::',
																	_0: _mordrax$cotwelm$Item_Data$BastardSword,
																	_1: {
																		ctor: '::',
																		_0: _mordrax$cotwelm$Item_Data$TwoHandedSword,
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _mordrax$cotwelm$Item_Weapon$listTypes = A2(
	_elm_lang$core$Basics_ops['++'],
	_mordrax$cotwelm$Item_Weapon$usableWeapons,
	{
		ctor: '::',
		_0: _mordrax$cotwelm$Item_Data$SmallClaws,
		_1: {
			ctor: '::',
			_0: _mordrax$cotwelm$Item_Data$SmallBite,
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$Item_Data$Crossbow,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Item_Data$Fangs,
					_1: {
						ctor: '::',
						_0: _mordrax$cotwelm$Item_Data$Pincers,
						_1: {
							ctor: '::',
							_0: _mordrax$cotwelm$Item_Data$Bow,
							_1: {
								ctor: '::',
								_0: _mordrax$cotwelm$Item_Data$LargeClaws,
								_1: {
									ctor: '::',
									_0: _mordrax$cotwelm$Item_Data$Pike,
									_1: {
										ctor: '::',
										_0: _mordrax$cotwelm$Item_Data$LargeClub,
										_1: {
											ctor: '::',
											_0: _mordrax$cotwelm$Item_Data$StoneClub,
											_1: {
												ctor: '::',
												_0: _mordrax$cotwelm$Item_Data$GiantAxe,
												_1: {
													ctor: '::',
													_0: _mordrax$cotwelm$Item_Data$Boulder,
													_1: {
														ctor: '::',
														_0: _mordrax$cotwelm$Item_Data$GiantMaul,
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _mordrax$cotwelm$Item_Weapon$weaponTypeDict = function () {
	var makeKVP = function (x) {
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Basics$toString(x),
			_1: x
		};
	};
	return _elm_lang$core$Dict$fromList(
		A2(_elm_lang$core$List$map, makeKVP, _mordrax$cotwelm$Item_Weapon$listTypes));
}();
var _mordrax$cotwelm$Item_Weapon$decoder = function (value) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		_mordrax$cotwelm$Item_Data$BrokenSword,
		A2(_elm_lang$core$Dict$get, value, _mordrax$cotwelm$Item_Weapon$weaponTypeDict));
};
var _mordrax$cotwelm$Item_Weapon$init = F3(
	function (weaponType, status, idStatus) {
		var d = F3(
			function (n, faces, bonus) {
				return A3(_mordrax$cotwelm$Dice$Dice, n, faces, bonus);
			});
		var make = F5(
			function (name, mass, css, itemValue, damage) {
				return {
					ctor: '_Tuple2',
					_0: A6(_mordrax$cotwelm$Item_Data$BaseItem, name, itemValue, css, mass, status, idStatus),
					_1: {weaponType: weaponType, damage: damage}
				};
			});
		var makeMonsterWeapon = F2(
			function (name, damage) {
				return A5(
					make,
					name,
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 0, 0),
					'',
					_mordrax$cotwelm$Item_Data$ItemValue(0),
					damage);
			});
		var _p0 = weaponType;
		switch (_p0.ctor) {
			case 'BrokenSword':
				return A5(
					make,
					'Broken Sword',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 20, 100),
					'broken-sword',
					_mordrax$cotwelm$Item_Data$ItemValue(1),
					A3(d, 1, 6, -2));
			case 'Dagger':
				return A5(
					make,
					'Dagger',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 10, 10),
					'sword',
					_mordrax$cotwelm$Item_Data$ItemValue(16),
					A3(d, 1, 4, 0));
			case 'ShortSword':
				return A5(
					make,
					'Short Sword',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 30, 100),
					'sword',
					_mordrax$cotwelm$Item_Data$ItemValue(36),
					A3(d, 1, 6, 0));
			case 'LongSword':
				return A5(
					make,
					'Long Sword',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 50, 160),
					'sword',
					_mordrax$cotwelm$Item_Data$ItemValue(64),
					A3(d, 1, 8, 0));
			case 'BroadSword':
				return A5(
					make,
					'Broad Sword',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 60, 180),
					'sword',
					_mordrax$cotwelm$Item_Data$ItemValue(59),
					A3(d, 1, 7, 1));
			case 'BastardSword':
				return A5(
					make,
					'Bastard Sword',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 70, 200),
					'sword',
					_mordrax$cotwelm$Item_Data$ItemValue(100),
					A3(d, 1, 10, 0));
			case 'TwoHandedSword':
				return A5(
					make,
					'Two Handed Sword',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 80, 240),
					'sword',
					_mordrax$cotwelm$Item_Data$ItemValue(225),
					A3(d, 1, 15, 0));
			case 'Club':
				return A5(
					make,
					'Club',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 70, 120),
					'club',
					_mordrax$cotwelm$Item_Data$ItemValue(12),
					A3(d, 2, 2, 1));
			case 'Hammer':
				return A5(
					make,
					'Hammer',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 40, 60),
					'hammer',
					_mordrax$cotwelm$Item_Data$ItemValue(24),
					A3(d, 2, 2, 0));
			case 'Quarterstaff':
				return A5(
					make,
					'Quarterstaff',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 20, 50),
					'spear',
					_mordrax$cotwelm$Item_Data$ItemValue(36),
					A3(d, 1, 6, 0));
			case 'Mace':
				return A5(
					make,
					'Mace',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 50, 90),
					'mace',
					_mordrax$cotwelm$Item_Data$ItemValue(54),
					A3(d, 2, 3, 0));
			case 'MorningStar':
				return A5(
					make,
					'Morning Star',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 60, 180),
					'morning-star',
					_mordrax$cotwelm$Item_Data$ItemValue(92),
					A3(d, 2, 4, 0));
			case 'WarHammer':
				return A5(
					make,
					'War Hammer',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 70, 150),
					'hammer',
					_mordrax$cotwelm$Item_Data$ItemValue(288),
					A3(d, 3, 4, 0));
			case 'Flail':
				return A5(
					make,
					'Flail',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 90, 200),
					'flail',
					_mordrax$cotwelm$Item_Data$ItemValue(450),
					A3(d, 3, 5, 0));
			case 'HandAxe':
				return A5(
					make,
					'Hand Axe',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 20, 60),
					'axe',
					_mordrax$cotwelm$Item_Data$ItemValue(35),
					A3(d, 1, 5, 1));
			case 'Axe':
				return A5(
					make,
					'Axe',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 60, 100),
					'axe',
					_mordrax$cotwelm$Item_Data$ItemValue(110),
					A3(d, 1, 10, 1));
			case 'Spear':
				return A5(
					make,
					'Spear',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 50, 120),
					'spear',
					_mordrax$cotwelm$Item_Data$ItemValue(144),
					A3(d, 1, 12, 0));
			case 'BattleAxe':
				return A5(
					make,
					'Battle Axe',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 70, 120),
					'axe',
					_mordrax$cotwelm$Item_Data$ItemValue(164),
					A3(d, 1, 12, 2));
			case 'SmallClaws':
				return A2(
					makeMonsterWeapon,
					'Small Claws',
					A3(d, 1, 4, 0));
			case 'SmallBite':
				return A2(
					makeMonsterWeapon,
					'Small Bite',
					A3(d, 1, 5, 0));
			case 'Crossbow':
				return A2(
					makeMonsterWeapon,
					'Crossbow',
					A3(d, 1, 10, 0));
			case 'Fangs':
				return A2(
					makeMonsterWeapon,
					'Fangs',
					A3(d, 1, 4, 0));
			case 'Pincers':
				return A2(
					makeMonsterWeapon,
					'Pincers',
					A3(d, 4, 2, 0));
			case 'Bow':
				return A2(
					makeMonsterWeapon,
					'Bow',
					A3(d, 1, 6, 0));
			case 'LargeClaws':
				return A2(
					makeMonsterWeapon,
					'Large Claws',
					A3(d, 1, 8, 0));
			case 'LargeClub':
				return A2(
					makeMonsterWeapon,
					'Large Club',
					A3(d, 3, 4, 2));
			case 'Pike':
				return A2(
					makeMonsterWeapon,
					'Pike',
					A3(d, 1, 15, 2));
			case 'StoneClub':
				return A2(
					makeMonsterWeapon,
					'Stone Club',
					A3(d, 3, 8, 5));
			case 'GiantAxe':
				return A2(
					makeMonsterWeapon,
					'Giant Axe',
					A3(d, 2, 10, 5));
			case 'Boulder':
				return A2(
					makeMonsterWeapon,
					'Boulder',
					A3(d, 3, 3, 3));
			default:
				return A2(
					makeMonsterWeapon,
					'Giant Maul',
					A3(d, 4, 6, 10));
		}
	});
var _mordrax$cotwelm$Item_Weapon$initBasic = function (weaponType) {
	return A3(_mordrax$cotwelm$Item_Weapon$init, weaponType, _mordrax$cotwelm$Item_Data$Normal, _mordrax$cotwelm$Item_Data$Identified);
};

var _mordrax$cotwelm$Item_Wearable$initShield = F3(
	function (shieldType, status, idStatus) {
		var make = F5(
			function (name, mass, css, itemValue, ac) {
				return {
					ctor: '_Tuple2',
					_0: A6(_mordrax$cotwelm$Item_Data$BaseItem, name, itemValue, css, mass, status, idStatus),
					_1: {shieldType: shieldType, ac: ac}
				};
			});
		var _p0 = shieldType;
		switch (_p0.ctor) {
			case 'BrokenShield':
				return A5(
					make,
					'Broken Shield',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 80, 700),
					'broken-shield',
					_mordrax$cotwelm$Item_Data$ItemValue(1),
					_mordrax$cotwelm$Item_Data$AC(0));
			case 'SmallWoodenShield':
				return A5(
					make,
					'Small Wooden Shield',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 60, 300),
					'wood-shield',
					_mordrax$cotwelm$Item_Data$ItemValue(12),
					_mordrax$cotwelm$Item_Data$AC(3));
			case 'MediumWoodenShield':
				return A5(
					make,
					'Medium Wooden Shield',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 80, 700),
					'wood-shield',
					_mordrax$cotwelm$Item_Data$ItemValue(24),
					_mordrax$cotwelm$Item_Data$AC(6));
			case 'LargeWoodenShield':
				return A5(
					make,
					'Large Wooden Shield',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 100, 1000),
					'wood-shield',
					_mordrax$cotwelm$Item_Data$ItemValue(48),
					_mordrax$cotwelm$Item_Data$AC(9));
			case 'SmallIronShield':
				return A5(
					make,
					'Small Iron Shield',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 80, 300),
					'metal-shield',
					_mordrax$cotwelm$Item_Data$ItemValue(29),
					_mordrax$cotwelm$Item_Data$AC(6));
			case 'MediumIronShield':
				return A5(
					make,
					'Medium Iron Shield',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 100, 700),
					'metal-shield',
					_mordrax$cotwelm$Item_Data$ItemValue(58),
					_mordrax$cotwelm$Item_Data$AC(9));
			case 'LargeIronShield':
				return A5(
					make,
					'Large Iron Shield',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 120, 1000),
					'metal-shield',
					_mordrax$cotwelm$Item_Data$ItemValue(72),
					_mordrax$cotwelm$Item_Data$AC(12));
			case 'SmallSteelShield':
				return A5(
					make,
					'Small Steel Shield',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 80, 300),
					'metal-shield',
					_mordrax$cotwelm$Item_Data$ItemValue(62),
					_mordrax$cotwelm$Item_Data$AC(9));
			case 'MediumSteelShield':
				return A5(
					make,
					'Medium Steel Shield',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 100, 700),
					'metal-shield',
					_mordrax$cotwelm$Item_Data$ItemValue(77),
					_mordrax$cotwelm$Item_Data$AC(12));
			case 'LargeSteelShield':
				return A5(
					make,
					'Large Steel Shield',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 120, 1000),
					'metal-shield',
					_mordrax$cotwelm$Item_Data$ItemValue(96),
					_mordrax$cotwelm$Item_Data$AC(15));
			case 'SmallMeteoricSteelShield':
				return A5(
					make,
					'Small Meteoric Steel Shield',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 50, 300),
					'metal-shield',
					_mordrax$cotwelm$Item_Data$ItemValue(104),
					_mordrax$cotwelm$Item_Data$AC(15));
			case 'MediumMeteoricSteelShield':
				return A5(
					make,
					'Medium Meteoric Steel Shield',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 70, 700),
					'metal-shield',
					_mordrax$cotwelm$Item_Data$ItemValue(132),
					_mordrax$cotwelm$Item_Data$AC(18));
			default:
				return A5(
					make,
					'Large Meteoric Steel Shield',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 90, 1000),
					'metal-shield',
					_mordrax$cotwelm$Item_Data$ItemValue(168),
					_mordrax$cotwelm$Item_Data$AC(21));
		}
	});
var _mordrax$cotwelm$Item_Wearable$initHelmet = F3(
	function (helmetType, status, idStatus) {
		var make = F5(
			function (name, mass, css, itemValue, ac) {
				return {
					ctor: '_Tuple2',
					_0: A6(_mordrax$cotwelm$Item_Data$BaseItem, name, itemValue, css, mass, status, idStatus),
					_1: {helmetType: helmetType, ac: ac}
				};
			});
		var _p1 = helmetType;
		switch (_p1.ctor) {
			case 'BrokenHelmet':
				return A5(
					make,
					'Broken Helmet',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 20, 20),
					'broken-helmet',
					_mordrax$cotwelm$Item_Data$ItemValue(1),
					_mordrax$cotwelm$Item_Data$AC(0));
			case 'LeatherHelmet':
				return A5(
					make,
					'Leather Helmet',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 10, 10),
					'leather-helmet',
					_mordrax$cotwelm$Item_Data$ItemValue(12),
					_mordrax$cotwelm$Item_Data$AC(3));
			case 'IronHelmet':
				return A5(
					make,
					'Iron Helmet',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 40, 40),
					'metal-helmet',
					_mordrax$cotwelm$Item_Data$ItemValue(24),
					_mordrax$cotwelm$Item_Data$AC(6));
			case 'SteelHelmet':
				return A5(
					make,
					'Steel Helmet',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 50, 40),
					'metal-helmet',
					_mordrax$cotwelm$Item_Data$ItemValue(72),
					_mordrax$cotwelm$Item_Data$AC(9));
			case 'MeteoricSteelHelmet':
				return A5(
					make,
					'Meteoric Steel Helmet',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 20, 40),
					'metal-helmet',
					_mordrax$cotwelm$Item_Data$ItemValue(240),
					_mordrax$cotwelm$Item_Data$AC(15));
			case 'HelmetOfDetectMonsters':
				return A5(
					make,
					'Helmet Of Detect Monsters',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 50, 40),
					'helmet-of-detect-monsters',
					_mordrax$cotwelm$Item_Data$ItemValue(960),
					_mordrax$cotwelm$Item_Data$AC(9));
			default:
				return A5(
					make,
					'Enchanted Helm Of Storms',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 20, 40),
					'enchanted-helm-of-storms',
					_mordrax$cotwelm$Item_Data$ItemValue(24000),
					_mordrax$cotwelm$Item_Data$AC(25));
		}
	});
var _mordrax$cotwelm$Item_Wearable$initGauntlets = F3(
	function (gauntletsType, status, idStatus) {
		var make = F5(
			function (name, mass, css, itemValue, ac) {
				return {
					ctor: '_Tuple2',
					_0: A6(_mordrax$cotwelm$Item_Data$BaseItem, name, itemValue, css, mass, status, idStatus),
					_1: {gauntletsType: gauntletsType, ac: ac}
				};
			});
		var _p2 = gauntletsType;
		switch (_p2.ctor) {
			case 'NormalGauntlets':
				return A5(
					make,
					'Gauntlet',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 10, 40),
					'gauntlet',
					_mordrax$cotwelm$Item_Data$ItemValue(60),
					_mordrax$cotwelm$Item_Data$AC(5));
			case 'GauntletOfProtection':
				return A5(
					make,
					'Gauntlet Of Protection',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 10, 40),
					'gauntlet-enchanted',
					_mordrax$cotwelm$Item_Data$ItemValue(1500),
					_mordrax$cotwelm$Item_Data$AC(10));
			case 'GauntletOfProtectionS':
				return A5(
					make,
					'Gauntlet Of Protection Strong',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 10, 40),
					'gauntlet-enchanted',
					_mordrax$cotwelm$Item_Data$ItemValue(3600),
					_mordrax$cotwelm$Item_Data$AC(15));
			case 'GauntletOfProtectionVS':
				return A5(
					make,
					'Gauntlet Of Protection Very Strong',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 10, 40),
					'gauntlet-enchanted',
					_mordrax$cotwelm$Item_Data$ItemValue(6900),
					_mordrax$cotwelm$Item_Data$AC(20));
			case 'GauntletOfSlaying':
				return A5(
					make,
					'Gauntlet Of Slaying',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 10, 40),
					'gauntlet-of-slaying',
					_mordrax$cotwelm$Item_Data$ItemValue(2100),
					_mordrax$cotwelm$Item_Data$AC(0));
			case 'GauntletOfSlayingS_S':
				return A5(
					make,
					'Gauntlet Of Slaying Strong',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 10, 40),
					'gauntlet-of-slaying',
					_mordrax$cotwelm$Item_Data$ItemValue(4200),
					_mordrax$cotwelm$Item_Data$AC(0));
			case 'GauntletOfSlayingVS_VS':
				return A5(
					make,
					'Gauntlet Of Slaying Very Strong',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 10, 40),
					'gauntlet-of-slaying',
					_mordrax$cotwelm$Item_Data$ItemValue(7500),
					_mordrax$cotwelm$Item_Data$AC(0));
			case 'GauntletOfDexterity':
				return A5(
					make,
					'Gauntlet Of Dexterity',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 10, 40),
					'gauntlet-enchanted',
					_mordrax$cotwelm$Item_Data$ItemValue(1800),
					_mordrax$cotwelm$Item_Data$AC(5));
			case 'GauntletOfDexterityS':
				return A5(
					make,
					'Gauntlet Of Dexterity Strong',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 10, 40),
					'gauntlet-enchanted',
					_mordrax$cotwelm$Item_Data$ItemValue(3900),
					_mordrax$cotwelm$Item_Data$AC(5));
			case 'GauntletOfDexterityVS':
				return A5(
					make,
					'Gauntlet Of Dexterity Very Strong',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 10, 40),
					'gauntlet-enchanted',
					_mordrax$cotwelm$Item_Data$ItemValue(7200),
					_mordrax$cotwelm$Item_Data$AC(5));
			case 'GauntletOfStrength':
				return A5(
					make,
					'Gauntlet Of Strength',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 10, 40),
					'gauntlet-enchanted',
					_mordrax$cotwelm$Item_Data$ItemValue(1800),
					_mordrax$cotwelm$Item_Data$AC(5));
			case 'GauntletOfStrengthS':
				return A5(
					make,
					'Gauntlet Of Strength Strong',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 10, 40),
					'gauntlet-enchanted',
					_mordrax$cotwelm$Item_Data$ItemValue(0),
					_mordrax$cotwelm$Item_Data$AC(5));
			default:
				return A5(
					make,
					'Gauntlet Of Strength Very Strong',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 10, 40),
					'gauntlet-enchanted',
					_mordrax$cotwelm$Item_Data$ItemValue(7200),
					_mordrax$cotwelm$Item_Data$AC(5));
		}
	});
var _mordrax$cotwelm$Item_Wearable$initBracers = F3(
	function (bracersType, status, idStatus) {
		var make = F5(
			function (name, mass, css, itemValue, ac) {
				return {
					ctor: '_Tuple2',
					_0: A6(_mordrax$cotwelm$Item_Data$BaseItem, name, itemValue, css, mass, status, idStatus),
					_1: {bracersType: bracersType, ac: ac}
				};
			});
		var _p3 = bracersType;
		switch (_p3.ctor) {
			case 'NormalBracers':
				return A5(
					make,
					'Bracers',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 10, 40),
					'bracers',
					_mordrax$cotwelm$Item_Data$ItemValue(60),
					_mordrax$cotwelm$Item_Data$AC(3));
			case 'BracersOfDefenseNormal':
				return A5(
					make,
					'Bracers Of Defense Normal',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 10, 40),
					'bracers-enchanted',
					_mordrax$cotwelm$Item_Data$ItemValue(320),
					_mordrax$cotwelm$Item_Data$AC(8));
			case 'BracersOfDefenseS':
				return A5(
					make,
					'Bracers Of Defense Strong',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 10, 40),
					'bracers-enchanted',
					_mordrax$cotwelm$Item_Data$ItemValue(480),
					_mordrax$cotwelm$Item_Data$AC(13));
			default:
				return A5(
					make,
					'Bracers Of Defense Very Strong',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 10, 40),
					'bracers-enchanted',
					_mordrax$cotwelm$Item_Data$ItemValue(640),
					_mordrax$cotwelm$Item_Data$AC(18));
		}
	});
var _mordrax$cotwelm$Item_Wearable$encodeArmour = _elm_lang$core$Basics$toString;
var _mordrax$cotwelm$Item_Wearable$armourTypes = {
	ctor: '::',
	_0: _mordrax$cotwelm$Item_Data$RustyArmour,
	_1: {
		ctor: '::',
		_0: _mordrax$cotwelm$Item_Data$LeatherArmour,
		_1: {
			ctor: '::',
			_0: _mordrax$cotwelm$Item_Data$StuddedLeatherArmour,
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$Item_Data$RingMail,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Item_Data$ScaleMail,
					_1: {
						ctor: '::',
						_0: _mordrax$cotwelm$Item_Data$ChainMail,
						_1: {
							ctor: '::',
							_0: _mordrax$cotwelm$Item_Data$SplintMail,
							_1: {
								ctor: '::',
								_0: _mordrax$cotwelm$Item_Data$PlateMail,
								_1: {
									ctor: '::',
									_0: _mordrax$cotwelm$Item_Data$PlateArmour,
									_1: {
										ctor: '::',
										_0: _mordrax$cotwelm$Item_Data$MeteoricSteelPlate,
										_1: {
											ctor: '::',
											_0: _mordrax$cotwelm$Item_Data$ElvenChainMail,
											_1: {
												ctor: '::',
												_0: _mordrax$cotwelm$Item_Data$SoftHide,
												_1: {
													ctor: '::',
													_0: _mordrax$cotwelm$Item_Data$Bones,
													_1: {
														ctor: '::',
														_0: _mordrax$cotwelm$Item_Data$Shell,
														_1: {
															ctor: '::',
															_0: _mordrax$cotwelm$Item_Data$ToughHide,
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _mordrax$cotwelm$Item_Wearable$armourTypeDict = function () {
	var makeKVP = function (x) {
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Basics$toString(x),
			_1: x
		};
	};
	return _elm_lang$core$Dict$fromList(
		A2(_elm_lang$core$List$map, makeKVP, _mordrax$cotwelm$Item_Wearable$armourTypes));
}();
var _mordrax$cotwelm$Item_Wearable$decodeArmour = function (value) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		_mordrax$cotwelm$Item_Data$RustyArmour,
		A2(_elm_lang$core$Dict$get, value, _mordrax$cotwelm$Item_Wearable$armourTypeDict));
};
var _mordrax$cotwelm$Item_Wearable$initArmour = F3(
	function (armourType, status, idStatus) {
		var make = F5(
			function (name, mass, css, itemValue, ac) {
				return {
					ctor: '_Tuple2',
					_0: A6(_mordrax$cotwelm$Item_Data$BaseItem, name, itemValue, css, mass, status, idStatus),
					_1: {armourType: armourType, ac: ac}
				};
			});
		var makeMonsterArmour = F2(
			function (name, ac) {
				return A5(
					make,
					name,
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 0, 0),
					'',
					_mordrax$cotwelm$Item_Data$ItemValue(0),
					ac);
			});
		var _p4 = armourType;
		switch (_p4.ctor) {
			case 'RustyArmour':
				return A5(
					make,
					'Rusty Armour',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 200, 600),
					'broken-armour',
					_mordrax$cotwelm$Item_Data$ItemValue(1),
					_mordrax$cotwelm$Item_Data$AC(0));
			case 'LeatherArmour':
				return A5(
					make,
					'Leather Armour',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 100, 450),
					'leather-armour',
					_mordrax$cotwelm$Item_Data$ItemValue(42),
					_mordrax$cotwelm$Item_Data$AC(6));
			case 'StuddedLeatherArmour':
				return A5(
					make,
					'Studded Leather Armour',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 140, 500),
					'leather-armour',
					_mordrax$cotwelm$Item_Data$ItemValue(126),
					_mordrax$cotwelm$Item_Data$AC(12));
			case 'RingMail':
				return A5(
					make,
					'Ring Mail',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 160, 600),
					'metal-armour',
					_mordrax$cotwelm$Item_Data$ItemValue(252),
					_mordrax$cotwelm$Item_Data$AC(18));
			case 'ScaleMail':
				return A5(
					make,
					'Scale Mail',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 180, 600),
					'metal-armour',
					_mordrax$cotwelm$Item_Data$ItemValue(432),
					_mordrax$cotwelm$Item_Data$AC(24));
			case 'ChainMail':
				return A5(
					make,
					'Chain Mail',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 200, 600),
					'metal-armour',
					_mordrax$cotwelm$Item_Data$ItemValue(648),
					_mordrax$cotwelm$Item_Data$AC(30));
			case 'SplintMail':
				return A5(
					make,
					'Splint Mail',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 240, 800),
					'metal-armour',
					_mordrax$cotwelm$Item_Data$ItemValue(1080),
					_mordrax$cotwelm$Item_Data$AC(36));
			case 'PlateMail':
				return A5(
					make,
					'Plate Mail',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 300, 800),
					'metal-armour',
					_mordrax$cotwelm$Item_Data$ItemValue(1680),
					_mordrax$cotwelm$Item_Data$AC(42));
			case 'PlateArmour':
				return A5(
					make,
					'Plate Armour',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 300, 1200),
					'metal-armour',
					_mordrax$cotwelm$Item_Data$ItemValue(2880),
					_mordrax$cotwelm$Item_Data$AC(48));
			case 'MeteoricSteelPlate':
				return A5(
					make,
					'Meteoric Steel Plate',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 100, 600),
					'metal-armour',
					_mordrax$cotwelm$Item_Data$ItemValue(4200),
					_mordrax$cotwelm$Item_Data$AC(54));
			case 'ElvenChainMail':
				return A5(
					make,
					'Elven Chain Mail',
					A2(_mordrax$cotwelm$Utils_Mass$Mass, 100, 480),
					'metal-armour',
					_mordrax$cotwelm$Item_Data$ItemValue(6480),
					_mordrax$cotwelm$Item_Data$AC(52));
			case 'SoftHide':
				return A2(
					makeMonsterArmour,
					'Soft Hide',
					_mordrax$cotwelm$Item_Data$AC(10));
			case 'Bones':
				return A2(
					makeMonsterArmour,
					'Bones',
					_mordrax$cotwelm$Item_Data$AC(15));
			case 'Shell':
				return A2(
					makeMonsterArmour,
					'Shell',
					_mordrax$cotwelm$Item_Data$AC(20));
			default:
				return A2(
					makeMonsterArmour,
					'Tough Hide',
					_mordrax$cotwelm$Item_Data$AC(20));
		}
	});

var _mordrax$cotwelm$Item$ppArmour = function (_p0) {
	var _p1 = _p0;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_p1._0.name,
		A2(
			_elm_lang$core$Basics_ops['++'],
			' ( ',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(_p1._1.ac),
				' )')));
};
var _mordrax$cotwelm$Item$ppWeapon = function (_p2) {
	var _p3 = _p2;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_p3._0.name,
		A2(
			_elm_lang$core$Basics_ops['++'],
			' ( ',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_mordrax$cotwelm$Dice$pp(_p3._1.damage),
				' )')));
};
var _mordrax$cotwelm$Item$detail = _elm_lang$core$Tuple$second;
var _mordrax$cotwelm$Item$base = _elm_lang$core$Tuple$first;
var _mordrax$cotwelm$Item$viewSlot = F2(
	function (_p4, extraContent) {
		var _p5 = _p4;
		var _p7 = _p5._0;
		var itemName = function () {
			var _p6 = _p5._1;
			switch (_p6.ctor) {
				case 'CopperDetail':
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(_p6._0),
						' Copper pieces');
				case 'SilverDetail':
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(_p6._0),
						' Silver pieces');
				case 'GoldDetail':
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(_p6._0),
						' Gold pieces');
				case 'PlatinumDetail':
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(_p6._0),
						' Platinum pieces');
				default:
					return _p7.name;
			}
		}();
		var itemImg = A2(
			_elm_lang$html$Html$i,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(
					A2(_elm_lang$core$Basics_ops['++'], 'cotw-item ', _p7.css)),
				_1: {ctor: '[]'}
			},
			{ctor: '[]'});
		return A2(
			_mordrax$cotwelm$View_UI$viewWithTooltip,
			A2(_elm_lang$core$Basics_ops['++'], itemName, '!!!'),
			A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('item'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('item__img'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: itemImg,
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('item__name'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(itemName),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}));
	});
var _mordrax$cotwelm$Item$css = function (_p8) {
	var _p9 = _p8;
	return _p9._0.css;
};
var _mordrax$cotwelm$Item$view = function (item) {
	return A2(_mordrax$cotwelm$Item$viewSlot, item, '');
};
var _mordrax$cotwelm$Item$equals = F2(
	function (_p11, _p10) {
		var _p12 = _p11;
		var _p13 = _p10;
		return _elm_lang$core$Native_Utils.eq(_p12._0.name, _p13._0.name);
	});
var _mordrax$cotwelm$Item$isCursed = function (_p14) {
	var _p15 = _p14;
	return _elm_lang$core$Native_Utils.eq(_p15._0.status, _mordrax$cotwelm$Item_Data$Cursed);
};
var _mordrax$cotwelm$Item$mass = function (_p16) {
	var _p17 = _p16;
	return _p17._0.mass;
};
var _mordrax$cotwelm$Item$containerBuilder = function (capacity) {
	return A3(_mordrax$cotwelm$Container$init, capacity, _mordrax$cotwelm$Item$mass, _mordrax$cotwelm$Item$equals);
};
var _mordrax$cotwelm$Item$newWithOptions = F3(
	function (itemType, status, idStatus) {
		var makeItem = F2(
			function (tag, _p18) {
				var _p19 = _p18;
				return A2(
					_mordrax$cotwelm$Item_Data$Item,
					_p19._0,
					tag(_p19._1));
			});
		var _p20 = itemType;
		switch (_p20.ctor) {
			case 'ItemTypeWeapon':
				return A2(
					makeItem,
					_mordrax$cotwelm$Item_Data$WeaponDetail,
					A3(_mordrax$cotwelm$Item_Weapon$init, _p20._0, status, idStatus));
			case 'ItemTypeArmour':
				return A2(
					makeItem,
					_mordrax$cotwelm$Item_Data$ArmourDetail,
					A3(_mordrax$cotwelm$Item_Wearable$initArmour, _p20._0, status, idStatus));
			case 'ItemTypeShield':
				return A2(
					makeItem,
					_mordrax$cotwelm$Item_Data$ShieldDetail,
					A3(_mordrax$cotwelm$Item_Wearable$initShield, _p20._0, status, idStatus));
			case 'ItemTypeHelmet':
				return A2(
					makeItem,
					_mordrax$cotwelm$Item_Data$HelmetDetail,
					A3(_mordrax$cotwelm$Item_Wearable$initHelmet, _p20._0, status, idStatus));
			case 'ItemTypeBracers':
				return A2(
					makeItem,
					_mordrax$cotwelm$Item_Data$BracersDetail,
					A3(_mordrax$cotwelm$Item_Wearable$initBracers, _p20._0, status, idStatus));
			case 'ItemTypeGauntlets':
				return A2(
					makeItem,
					_mordrax$cotwelm$Item_Data$GauntletsDetail,
					A3(_mordrax$cotwelm$Item_Wearable$initGauntlets, _p20._0, status, idStatus));
			case 'ItemTypeBelt':
				return A2(
					makeItem,
					_mordrax$cotwelm$Item_Data$BeltDetail,
					A3(_mordrax$cotwelm$Item_Belt$init, _p20._0, status, idStatus));
			case 'ItemTypePack':
				return A2(
					makeItem,
					_mordrax$cotwelm$Item_Data$PackDetail,
					A4(_mordrax$cotwelm$Item_Pack$init, _p20._0, _mordrax$cotwelm$Item$containerBuilder, status, idStatus));
			case 'ItemTypePurse':
				return A2(makeItem, _mordrax$cotwelm$Item_Data$PurseDetail, _mordrax$cotwelm$Item_Purse$init);
			case 'ItemTypeCopper':
				return A2(
					makeItem,
					_mordrax$cotwelm$Item_Data$CopperDetail,
					_mordrax$cotwelm$Item_Purse$initCoppers(_p20._0));
			case 'ItemTypeSilver':
				return A2(
					makeItem,
					_mordrax$cotwelm$Item_Data$SilverDetail,
					_mordrax$cotwelm$Item_Purse$initSilvers(_p20._0));
			case 'ItemTypeGold':
				return A2(
					makeItem,
					_mordrax$cotwelm$Item_Data$GoldDetail,
					_mordrax$cotwelm$Item_Purse$initGolds(_p20._0));
			case 'ItemTypePlatinum':
				return A2(
					makeItem,
					_mordrax$cotwelm$Item_Data$PlatinumDetail,
					_mordrax$cotwelm$Item_Purse$initPlatinums(_p20._0));
			default:
				return A2(
					makeItem,
					_mordrax$cotwelm$Item_Data$WeaponDetail,
					A3(_mordrax$cotwelm$Item_Weapon$init, _mordrax$cotwelm$Item_Data$Dagger, status, idStatus));
		}
	});
var _mordrax$cotwelm$Item$new = function (itemType) {
	return A3(_mordrax$cotwelm$Item$newWithOptions, itemType, _mordrax$cotwelm$Item_Data$Normal, _mordrax$cotwelm$Item_Data$Identified);
};
var _mordrax$cotwelm$Item$name = function (_p21) {
	var _p22 = _p21;
	return _p22._0.name;
};
var _mordrax$cotwelm$Item$baseValue = function (_p23) {
	var _p24 = _p23;
	var _p25 = _p24._0.itemValue;
	var value = _p25._0;
	return value;
};
var _mordrax$cotwelm$Item$markupValue = function (_p26) {
	var _p27 = _p26;
	var _p28 = _p27._0.itemValue;
	var value = _p28._0;
	return _elm_lang$core$Basics$round(
		A2(
			F2(
				function (x, y) {
					return x * y;
				}),
			1.5,
			_elm_lang$core$Basics$toFloat(value + 25)));
};

var _mordrax$cotwelm$Equipment$getFromDict = _elm_lang$core$Basics$flip(_eeue56$elm_all_dict$EveryDict$get);
var _mordrax$cotwelm$Equipment$clearSlot_ = F2(
	function (slot, model) {
		var _p0 = slot;
		switch (_p0.ctor) {
			case 'WeaponSlot':
				return _elm_lang$core$Native_Utils.update(
					model,
					{weapon: _elm_lang$core$Maybe$Nothing});
			case 'FreehandSlot':
				return _elm_lang$core$Native_Utils.update(
					model,
					{freehand: _elm_lang$core$Maybe$Nothing});
			case 'ArmourSlot':
				return _elm_lang$core$Native_Utils.update(
					model,
					{armour: _elm_lang$core$Maybe$Nothing});
			case 'ShieldSlot':
				return _elm_lang$core$Native_Utils.update(
					model,
					{shield: _elm_lang$core$Maybe$Nothing});
			case 'HelmetSlot':
				return _elm_lang$core$Native_Utils.update(
					model,
					{helmet: _elm_lang$core$Maybe$Nothing});
			case 'BracersSlot':
				return _elm_lang$core$Native_Utils.update(
					model,
					{bracers: _elm_lang$core$Maybe$Nothing});
			case 'GauntletsSlot':
				return _elm_lang$core$Native_Utils.update(
					model,
					{gauntlets: _elm_lang$core$Maybe$Nothing});
			case 'BeltSlot':
				return _elm_lang$core$Native_Utils.update(
					model,
					{belt: _elm_lang$core$Maybe$Nothing});
			case 'PurseSlot':
				return _elm_lang$core$Native_Utils.update(
					model,
					{purse: _elm_lang$core$Maybe$Nothing});
			case 'PackSlot':
				return _elm_lang$core$Native_Utils.update(
					model,
					{pack: _elm_lang$core$Maybe$Nothing});
			case 'NeckwearSlot':
				return _elm_lang$core$Native_Utils.update(
					model,
					{neckwear: _elm_lang$core$Maybe$Nothing});
			case 'OvergarmentSlot':
				return _elm_lang$core$Native_Utils.update(
					model,
					{overgarment: _elm_lang$core$Maybe$Nothing});
			case 'LeftRingSlot':
				return _elm_lang$core$Native_Utils.update(
					model,
					{leftRing: _elm_lang$core$Maybe$Nothing});
			case 'RightRingSlot':
				return _elm_lang$core$Native_Utils.update(
					model,
					{rightRing: _elm_lang$core$Maybe$Nothing});
			default:
				return _elm_lang$core$Native_Utils.update(
					model,
					{boots: _elm_lang$core$Maybe$Nothing});
		}
	});
var _mordrax$cotwelm$Equipment$get = F2(
	function (slot, _p1) {
		var _p2 = _p1;
		var _p6 = _p2._0;
		var toItem = F2(
			function (tag, _p3) {
				var _p4 = _p3;
				return A2(
					_mordrax$cotwelm$Item_Data$Item,
					_p4._0,
					tag(_p4._1));
			});
		var _p5 = slot;
		switch (_p5.ctor) {
			case 'WeaponSlot':
				return A2(
					_elm_lang$core$Maybe$map,
					toItem(_mordrax$cotwelm$Item_Data$WeaponDetail),
					_p6.weapon);
			case 'FreehandSlot':
				return _p6.freehand;
			case 'ArmourSlot':
				return A2(
					_elm_lang$core$Maybe$map,
					toItem(_mordrax$cotwelm$Item_Data$ArmourDetail),
					_p6.armour);
			case 'ShieldSlot':
				return A2(
					_elm_lang$core$Maybe$map,
					toItem(_mordrax$cotwelm$Item_Data$ShieldDetail),
					_p6.shield);
			case 'HelmetSlot':
				return A2(
					_elm_lang$core$Maybe$map,
					toItem(_mordrax$cotwelm$Item_Data$HelmetDetail),
					_p6.helmet);
			case 'BracersSlot':
				return A2(
					_elm_lang$core$Maybe$map,
					toItem(_mordrax$cotwelm$Item_Data$BracersDetail),
					_p6.bracers);
			case 'GauntletsSlot':
				return A2(
					_elm_lang$core$Maybe$map,
					toItem(_mordrax$cotwelm$Item_Data$GauntletsDetail),
					_p6.gauntlets);
			case 'BeltSlot':
				return A2(
					_elm_lang$core$Maybe$map,
					toItem(_mordrax$cotwelm$Item_Data$BeltDetail),
					_p6.belt);
			case 'PurseSlot':
				return A2(
					_elm_lang$core$Maybe$map,
					toItem(_mordrax$cotwelm$Item_Data$PurseDetail),
					_p6.purse);
			case 'PackSlot':
				return A2(
					_elm_lang$core$Maybe$map,
					toItem(_mordrax$cotwelm$Item_Data$PackDetail),
					_p6.pack);
			case 'NeckwearSlot':
				return A2(
					_elm_lang$core$Maybe$map,
					toItem(_mordrax$cotwelm$Item_Data$NeckwearDetail),
					_p6.neckwear);
			case 'OvergarmentSlot':
				return A2(
					_elm_lang$core$Maybe$map,
					toItem(_mordrax$cotwelm$Item_Data$OvergarmentDetail),
					_p6.overgarment);
			case 'LeftRingSlot':
				return A2(
					_elm_lang$core$Maybe$map,
					toItem(_mordrax$cotwelm$Item_Data$RingDetail),
					_p6.leftRing);
			case 'RightRingSlot':
				return A2(
					_elm_lang$core$Maybe$map,
					toItem(_mordrax$cotwelm$Item_Data$RingDetail),
					_p6.rightRing);
			default:
				return A2(
					_elm_lang$core$Maybe$map,
					toItem(_mordrax$cotwelm$Item_Data$BootsDetail),
					_p6.boots);
		}
	});
var _mordrax$cotwelm$Equipment$getArmour = function (_p7) {
	var _p8 = _p7;
	return _p8._0.armour;
};
var _mordrax$cotwelm$Equipment$getWeapon = function (_p9) {
	var _p10 = _p9;
	return _p10._0.weapon;
};
var _mordrax$cotwelm$Equipment$getPack = function (_p11) {
	var _p12 = _p11;
	return _p12._0.pack;
};
var _mordrax$cotwelm$Equipment$getPurse = function (_p13) {
	var _p14 = _p13;
	return _p14._0.purse;
};
var _mordrax$cotwelm$Equipment$getPackContent = function (_p15) {
	var _p16 = _p15;
	var _p17 = _p16._0.pack;
	if (_p17.ctor === 'Just') {
		return _mordrax$cotwelm$Item_Pack$contents(_p17._0);
	} else {
		return {ctor: '[]'};
	}
};
var _mordrax$cotwelm$Equipment$equipMessage = F2(
	function (slot, item) {
		var _p18 = slot;
		if (_p18.ctor === 'WeaponSlot') {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'You brandish your ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_mordrax$cotwelm$Item$name(item),
					' ... _impressively_'));
		} else {
			return 'You put on your new shiny armour.';
		}
	});
var _mordrax$cotwelm$Equipment$calculateAC = function (_p19) {
	var _p20 = _p19;
	var getAC = function (item) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			_mordrax$cotwelm$Item_Data$AC(0),
			A2(
				_elm_lang$core$Maybe$map,
				function (_) {
					return _.ac;
				},
				A2(_elm_lang$core$Maybe$map, _elm_lang$core$Tuple$second, item)));
	};
	return A2(
		_mordrax$cotwelm$Item_Data$addAC,
		getAC(_p20._0.gauntlets),
		A2(
			_mordrax$cotwelm$Item_Data$addAC,
			getAC(_p20._0.bracers),
			A2(
				_mordrax$cotwelm$Item_Data$addAC,
				getAC(_p20._0.helmet),
				A2(
					_mordrax$cotwelm$Item_Data$addAC,
					getAC(_p20._0.shield),
					getAC(_p20._0.armour)))));
};
var _mordrax$cotwelm$Equipment$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return {weapon: a, freehand: b, armour: c, shield: d, helmet: e, bracers: f, gauntlets: g, belt: h, purse: i, pack: j, neckwear: k, overgarment: l, leftRing: m, rightRing: n, boots: o};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _mordrax$cotwelm$Equipment$A = function (a) {
	return {ctor: 'A', _0: a};
};
var _mordrax$cotwelm$Equipment$init = _mordrax$cotwelm$Equipment$A(
	{weapon: _elm_lang$core$Maybe$Nothing, freehand: _elm_lang$core$Maybe$Nothing, armour: _elm_lang$core$Maybe$Nothing, shield: _elm_lang$core$Maybe$Nothing, helmet: _elm_lang$core$Maybe$Nothing, bracers: _elm_lang$core$Maybe$Nothing, gauntlets: _elm_lang$core$Maybe$Nothing, belt: _elm_lang$core$Maybe$Nothing, purse: _elm_lang$core$Maybe$Nothing, pack: _elm_lang$core$Maybe$Nothing, neckwear: _elm_lang$core$Maybe$Nothing, overgarment: _elm_lang$core$Maybe$Nothing, leftRing: _elm_lang$core$Maybe$Nothing, rightRing: _elm_lang$core$Maybe$Nothing, boots: _elm_lang$core$Maybe$Nothing});
var _mordrax$cotwelm$Equipment$setSlot_ = F2(
	function (_p22, _p21) {
		var _p23 = _p22;
		var _p27 = _p23._1._0;
		var _p24 = _p21;
		var _p26 = _p24._0;
		var _p25 = {ctor: '_Tuple2', _0: _p23._0, _1: _p23._1._1};
		_v14_15:
		do {
			if (_p25.ctor === '_Tuple2') {
				switch (_p25._0.ctor) {
					case 'WeaponSlot':
						if (_p25._1.ctor === 'WeaponDetail') {
							return _elm_lang$core$Result$Ok(
								_mordrax$cotwelm$Equipment$A(
									_elm_lang$core$Native_Utils.update(
										_p26,
										{
											weapon: _elm_lang$core$Maybe$Just(
												{ctor: '_Tuple2', _0: _p27, _1: _p25._1._0})
										})));
						} else {
							break _v14_15;
						}
					case 'FreehandSlot':
						return _elm_lang$core$Result$Ok(
							_mordrax$cotwelm$Equipment$A(
								_elm_lang$core$Native_Utils.update(
									_p26,
									{
										freehand: _elm_lang$core$Maybe$Just(_p23._1)
									})));
					case 'ArmourSlot':
						if (_p25._1.ctor === 'ArmourDetail') {
							return _elm_lang$core$Result$Ok(
								_mordrax$cotwelm$Equipment$A(
									_elm_lang$core$Native_Utils.update(
										_p26,
										{
											armour: _elm_lang$core$Maybe$Just(
												{ctor: '_Tuple2', _0: _p27, _1: _p25._1._0})
										})));
						} else {
							break _v14_15;
						}
					case 'ShieldSlot':
						if (_p25._1.ctor === 'ShieldDetail') {
							return _elm_lang$core$Result$Ok(
								_mordrax$cotwelm$Equipment$A(
									_elm_lang$core$Native_Utils.update(
										_p26,
										{
											shield: _elm_lang$core$Maybe$Just(
												{ctor: '_Tuple2', _0: _p27, _1: _p25._1._0})
										})));
						} else {
							break _v14_15;
						}
					case 'HelmetSlot':
						if (_p25._1.ctor === 'HelmetDetail') {
							return _elm_lang$core$Result$Ok(
								_mordrax$cotwelm$Equipment$A(
									_elm_lang$core$Native_Utils.update(
										_p26,
										{
											helmet: _elm_lang$core$Maybe$Just(
												{ctor: '_Tuple2', _0: _p27, _1: _p25._1._0})
										})));
						} else {
							break _v14_15;
						}
					case 'BracersSlot':
						if (_p25._1.ctor === 'BracersDetail') {
							return _elm_lang$core$Result$Ok(
								_mordrax$cotwelm$Equipment$A(
									_elm_lang$core$Native_Utils.update(
										_p26,
										{
											bracers: _elm_lang$core$Maybe$Just(
												{ctor: '_Tuple2', _0: _p27, _1: _p25._1._0})
										})));
						} else {
							break _v14_15;
						}
					case 'GauntletsSlot':
						if (_p25._1.ctor === 'GauntletsDetail') {
							return _elm_lang$core$Result$Ok(
								_mordrax$cotwelm$Equipment$A(
									_elm_lang$core$Native_Utils.update(
										_p26,
										{
											gauntlets: _elm_lang$core$Maybe$Just(
												{ctor: '_Tuple2', _0: _p27, _1: _p25._1._0})
										})));
						} else {
							break _v14_15;
						}
					case 'BeltSlot':
						if (_p25._1.ctor === 'BeltDetail') {
							return _elm_lang$core$Result$Ok(
								_mordrax$cotwelm$Equipment$A(
									_elm_lang$core$Native_Utils.update(
										_p26,
										{
											belt: _elm_lang$core$Maybe$Just(
												{ctor: '_Tuple2', _0: _p27, _1: _p25._1._0})
										})));
						} else {
							break _v14_15;
						}
					case 'PurseSlot':
						if (_p25._1.ctor === 'PurseDetail') {
							return _elm_lang$core$Result$Ok(
								_mordrax$cotwelm$Equipment$A(
									_elm_lang$core$Native_Utils.update(
										_p26,
										{
											purse: _elm_lang$core$Maybe$Just(
												{ctor: '_Tuple2', _0: _p27, _1: _p25._1._0})
										})));
						} else {
							break _v14_15;
						}
					case 'PackSlot':
						if (_p25._1.ctor === 'PackDetail') {
							return _elm_lang$core$Result$Ok(
								_mordrax$cotwelm$Equipment$A(
									_elm_lang$core$Native_Utils.update(
										_p26,
										{
											pack: _elm_lang$core$Maybe$Just(
												{ctor: '_Tuple2', _0: _p27, _1: _p25._1._0})
										})));
						} else {
							break _v14_15;
						}
					case 'NeckwearSlot':
						if (_p25._1.ctor === 'NeckwearDetail') {
							return _elm_lang$core$Result$Ok(
								_mordrax$cotwelm$Equipment$A(
									_elm_lang$core$Native_Utils.update(
										_p26,
										{
											neckwear: _elm_lang$core$Maybe$Just(
												{ctor: '_Tuple2', _0: _p27, _1: _p25._1._0})
										})));
						} else {
							break _v14_15;
						}
					case 'OvergarmentSlot':
						if (_p25._1.ctor === 'OvergarmentDetail') {
							return _elm_lang$core$Result$Ok(
								_mordrax$cotwelm$Equipment$A(
									_elm_lang$core$Native_Utils.update(
										_p26,
										{
											overgarment: _elm_lang$core$Maybe$Just(
												{ctor: '_Tuple2', _0: _p27, _1: _p25._1._0})
										})));
						} else {
							break _v14_15;
						}
					case 'LeftRingSlot':
						if (_p25._1.ctor === 'RingDetail') {
							return _elm_lang$core$Result$Ok(
								_mordrax$cotwelm$Equipment$A(
									_elm_lang$core$Native_Utils.update(
										_p26,
										{
											leftRing: _elm_lang$core$Maybe$Just(
												{ctor: '_Tuple2', _0: _p27, _1: _p25._1._0})
										})));
						} else {
							break _v14_15;
						}
					case 'RightRingSlot':
						if (_p25._1.ctor === 'RingDetail') {
							return _elm_lang$core$Result$Ok(
								_mordrax$cotwelm$Equipment$A(
									_elm_lang$core$Native_Utils.update(
										_p26,
										{
											rightRing: _elm_lang$core$Maybe$Just(
												{ctor: '_Tuple2', _0: _p27, _1: _p25._1._0})
										})));
						} else {
							break _v14_15;
						}
					default:
						if (_p25._1.ctor === 'BootsDetail') {
							return _elm_lang$core$Result$Ok(
								_mordrax$cotwelm$Equipment$A(
									_elm_lang$core$Native_Utils.update(
										_p26,
										{
											boots: _elm_lang$core$Maybe$Just(
												{ctor: '_Tuple2', _0: _p27, _1: _p25._1._0})
										})));
						} else {
							break _v14_15;
						}
				}
			} else {
				break _v14_15;
			}
		} while(false);
		return _elm_lang$core$Result$Err('Hum, it doesn\'t want to fit, weird...');
	});
var _mordrax$cotwelm$Equipment$setMany_ = F2(
	function (itemSlotPairs, equipment) {
		return A2(
			_elm_lang$core$Result$withDefault,
			equipment,
			A3(
				_mordrax$cotwelm$Utils_Misc$foldResult,
				function (itemSlotPair) {
					return _mordrax$cotwelm$Equipment$setSlot_(itemSlotPair);
				},
				_elm_lang$core$Result$Ok(equipment),
				itemSlotPairs));
	});
var _mordrax$cotwelm$Equipment$unequip = F2(
	function (slot, _p28) {
		var _p29 = _p28;
		var _p31 = _p29._0;
		var maybeItem = A2(
			_mordrax$cotwelm$Equipment$get,
			slot,
			_mordrax$cotwelm$Equipment$A(_p31));
		var itemCursed = A2(
			_elm_lang$core$Maybe$withDefault,
			false,
			A2(_elm_lang$core$Maybe$map, _mordrax$cotwelm$Item$isCursed, maybeItem));
		var _p30 = {ctor: '_Tuple2', _0: maybeItem, _1: itemCursed};
		_v16_0:
		do {
			if (_p30._1 === true) {
				if (_p30._0.ctor === 'Nothing') {
					break _v16_0;
				} else {
					return _elm_lang$core$Result$Err('Urgh, you can\'t seem to take the item off! Cursed...');
				}
			} else {
				if (_p30._0.ctor === 'Nothing') {
					break _v16_0;
				} else {
					return _elm_lang$core$Result$Ok(
						{
							ctor: '_Tuple2',
							_0: _mordrax$cotwelm$Equipment$A(
								A2(_mordrax$cotwelm$Equipment$clearSlot_, slot, _p31)),
							_1: maybeItem
						});
				}
			}
		} while(false);
		return _elm_lang$core$Result$Ok(
			{
				ctor: '_Tuple2',
				_0: _mordrax$cotwelm$Equipment$A(_p31),
				_1: _elm_lang$core$Maybe$Nothing
			});
	});
var _mordrax$cotwelm$Equipment$equip = F2(
	function (_p33, _p32) {
		var _p34 = _p33;
		var _p39 = _p34._0;
		var _p38 = _p34._1;
		var _p35 = _p32;
		var equip_ = function (_p36) {
			var _p37 = _p36;
			return A2(
				_elm_lang$core$Result$andThen,
				function (eq) {
					return _elm_lang$core$Result$Ok(
						{
							ctor: '_Tuple3',
							_0: eq,
							_1: _p37._1,
							_2: A2(_mordrax$cotwelm$Equipment$equipMessage, _p39, _p38)
						});
				},
				A2(
					_mordrax$cotwelm$Equipment$setSlot_,
					{ctor: '_Tuple2', _0: _p39, _1: _p38},
					_p37._0));
		};
		return A2(
			_elm_lang$core$Result$andThen,
			equip_,
			A2(
				_mordrax$cotwelm$Equipment$unequip,
				_p39,
				_mordrax$cotwelm$Equipment$A(_p35._0)));
	});
var _mordrax$cotwelm$Equipment$putInPack_ = F2(
	function (_p41, _p40) {
		var _p42 = _p41;
		var _p43 = _p40;
		var _p45 = _p43._0;
		var _p44 = {ctor: '_Tuple2', _0: _p45.pack, _1: _p42._1};
		if (_p44._0.ctor === 'Nothing') {
			return _elm_lang$core$Result$Err('You try to put it in your pack, only to find that you don\'t actually have any.');
		} else {
			if (_p44._1.ctor === 'PackDetail') {
				return _elm_lang$core$Result$Err('Cannot Put A Pack In A Pack In A Pack In a Pack inap Ackin ap AK on a donkey.');
			} else {
				return A2(
					_elm_lang$core$Result$andThen,
					function (pack) {
						return _elm_lang$core$Result$Ok(
							_mordrax$cotwelm$Equipment$A(
								_elm_lang$core$Native_Utils.update(
									_p45,
									{
										pack: _elm_lang$core$Maybe$Just(pack)
									})));
					},
					A2(_mordrax$cotwelm$Item_Pack$add, _p42, _p44._0._0));
			}
		}
	});
var _mordrax$cotwelm$Equipment$removeFromPack = F2(
	function (item, _p46) {
		var _p47 = _p46;
		var _p49 = _p47._0;
		var noChange = _mordrax$cotwelm$Equipment$A(_p49);
		var _p48 = _p49.pack;
		if (_p48.ctor === 'Nothing') {
			return noChange;
		} else {
			return _mordrax$cotwelm$Equipment$A(
				_elm_lang$core$Native_Utils.update(
					_p49,
					{
						pack: _elm_lang$core$Maybe$Just(
							A2(_mordrax$cotwelm$Item_Pack$remove, item, _p48._0))
					}));
		}
	});
var _mordrax$cotwelm$Equipment$setPurse = F2(
	function (purse, _p50) {
		var _p51 = _p50;
		return _mordrax$cotwelm$Equipment$A(
			_elm_lang$core$Native_Utils.update(
				_p51._0,
				{
					purse: _elm_lang$core$Maybe$Just(purse)
				}));
	});
var _mordrax$cotwelm$Equipment$putInPurse = F2(
	function (coins, equipment) {
		var purse = A2(
			_mordrax$cotwelm$Item_Purse$addCoins,
			coins,
			A2(
				_elm_lang$core$Maybe$withDefault,
				_mordrax$cotwelm$Item_Purse$init,
				_mordrax$cotwelm$Equipment$getPurse(equipment)));
		return A2(_mordrax$cotwelm$Equipment$setPurse, purse, equipment);
	});
var _mordrax$cotwelm$Equipment$putInPack = F2(
	function (_p52, equipment) {
		var _p53 = _p52;
		var _p55 = _p53._1;
		var _p54 = _p55;
		switch (_p54.ctor) {
			case 'CopperDetail':
				return _elm_lang$core$Result$Ok(
					A2(
						_mordrax$cotwelm$Equipment$putInPurse,
						A4(_mordrax$cotwelm$Item_Data$Coins, _p54._0, 0, 0, 0),
						equipment));
			case 'SilverDetail':
				return _elm_lang$core$Result$Ok(
					A2(
						_mordrax$cotwelm$Equipment$putInPurse,
						A4(_mordrax$cotwelm$Item_Data$Coins, 0, _p54._0, 0, 0),
						equipment));
			case 'GoldDetail':
				return _elm_lang$core$Result$Ok(
					A2(
						_mordrax$cotwelm$Equipment$putInPurse,
						A4(_mordrax$cotwelm$Item_Data$Coins, 0, 0, _p54._0, 0),
						equipment));
			case 'PlatinumDetail':
				return _elm_lang$core$Result$Ok(
					A2(
						_mordrax$cotwelm$Equipment$putInPurse,
						A4(_mordrax$cotwelm$Item_Data$Coins, 0, 0, 0, _p54._0),
						equipment));
			default:
				return A2(
					_mordrax$cotwelm$Equipment$putInPack_,
					A2(_mordrax$cotwelm$Item_Data$Item, _p53._0, _p55),
					equipment);
		}
	});
var _mordrax$cotwelm$Equipment$BootsSlot = {ctor: 'BootsSlot'};
var _mordrax$cotwelm$Equipment$RightRingSlot = {ctor: 'RightRingSlot'};
var _mordrax$cotwelm$Equipment$LeftRingSlot = {ctor: 'LeftRingSlot'};
var _mordrax$cotwelm$Equipment$OvergarmentSlot = {ctor: 'OvergarmentSlot'};
var _mordrax$cotwelm$Equipment$NeckwearSlot = {ctor: 'NeckwearSlot'};
var _mordrax$cotwelm$Equipment$PackSlot = {ctor: 'PackSlot'};
var _mordrax$cotwelm$Equipment$PurseSlot = {ctor: 'PurseSlot'};
var _mordrax$cotwelm$Equipment$BeltSlot = {ctor: 'BeltSlot'};
var _mordrax$cotwelm$Equipment$GauntletsSlot = {ctor: 'GauntletsSlot'};
var _mordrax$cotwelm$Equipment$BracersSlot = {ctor: 'BracersSlot'};
var _mordrax$cotwelm$Equipment$HelmetSlot = {ctor: 'HelmetSlot'};
var _mordrax$cotwelm$Equipment$ShieldSlot = {ctor: 'ShieldSlot'};
var _mordrax$cotwelm$Equipment$ArmourSlot = {ctor: 'ArmourSlot'};
var _mordrax$cotwelm$Equipment$FreehandSlot = {ctor: 'FreehandSlot'};
var _mordrax$cotwelm$Equipment$WeaponSlot = {ctor: 'WeaponSlot'};
var _mordrax$cotwelm$Equipment$displayNameDict = _eeue56$elm_all_dict$EveryDict$fromList(
	{
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Equipment$WeaponSlot, _1: 'Weapon'},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Equipment$FreehandSlot, _1: 'Free hand'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Equipment$ArmourSlot, _1: 'Armour'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Equipment$ShieldSlot, _1: 'Shield'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Equipment$HelmetSlot, _1: 'Helmet'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Equipment$BracersSlot, _1: 'Bracers'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Equipment$GauntletsSlot, _1: 'Gauntlets'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Equipment$BeltSlot, _1: 'Belt'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Equipment$PurseSlot, _1: 'Purse'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Equipment$PackSlot, _1: 'Pack'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Equipment$NeckwearSlot, _1: 'Neckwear'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Equipment$OvergarmentSlot, _1: 'Overgarment'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Equipment$LeftRingSlot, _1: 'Left ring'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Equipment$RightRingSlot, _1: 'Right ring'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Equipment$BootsSlot, _1: 'Boots'},
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _mordrax$cotwelm$Equipment$slotDisplayName = function (_p56) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		'UnknownSlot',
		A2(_mordrax$cotwelm$Equipment$getFromDict, _mordrax$cotwelm$Equipment$displayNameDict, _p56));
};
var _mordrax$cotwelm$Equipment$CannotPutAPackInAPack = {ctor: 'CannotPutAPackInAPack'};
var _mordrax$cotwelm$Equipment$CannotUnequipCursedItem = {ctor: 'CannotUnequipCursedItem'};
var _mordrax$cotwelm$Equipment$ItemAlreadyEquipped = {ctor: 'ItemAlreadyEquipped'};
var _mordrax$cotwelm$Equipment$WrongSlotForItemType = {ctor: 'WrongSlotForItemType'};
var _mordrax$cotwelm$Equipment$NoPackEquipped = {ctor: 'NoPackEquipped'};
var _mordrax$cotwelm$Equipment$Success = {ctor: 'Success'};

var _mordrax$cotwelm$Types$Huge = {ctor: 'Huge'};
var _mordrax$cotwelm$Types$Large = {ctor: 'Large'};
var _mordrax$cotwelm$Types$Medium = {ctor: 'Medium'};
var _mordrax$cotwelm$Types$Small = {ctor: 'Small'};
var _mordrax$cotwelm$Types$Tiny = {ctor: 'Tiny'};
var _mordrax$cotwelm$Types$Monster = {ctor: 'Monster'};
var _mordrax$cotwelm$Types$Hero = {ctor: 'Hero'};
var _mordrax$cotwelm$Types$DungeonLevel = function (a) {
	return {ctor: 'DungeonLevel', _0: a};
};
var _mordrax$cotwelm$Types$DungeonLevelOne = {ctor: 'DungeonLevelOne'};
var _mordrax$cotwelm$Types$Farm = {ctor: 'Farm'};
var _mordrax$cotwelm$Types$Village = {ctor: 'Village'};
var _mordrax$cotwelm$Types$Female = {ctor: 'Female'};
var _mordrax$cotwelm$Types$Male = {ctor: 'Male'};
var _mordrax$cotwelm$Types$Impossible = {ctor: 'Impossible'};
var _mordrax$cotwelm$Types$Hard = {ctor: 'Hard'};
var _mordrax$cotwelm$Types$Intermediate = {ctor: 'Intermediate'};
var _mordrax$cotwelm$Types$Easy = {ctor: 'Easy'};
var _mordrax$cotwelm$Types$LineOfSight = {ctor: 'LineOfSight'};
var _mordrax$cotwelm$Types$Known = {ctor: 'Known'};
var _mordrax$cotwelm$Types$Hidden = {ctor: 'Hidden'};
var _mordrax$cotwelm$Types$Artificial = {ctor: 'Artificial'};
var _mordrax$cotwelm$Types$Sun = {ctor: 'Sun'};
var _mordrax$cotwelm$Types$Dark = {ctor: 'Dark'};
var _mordrax$cotwelm$Types$AcutePoison = {ctor: 'AcutePoison'};
var _mordrax$cotwelm$Types$MajorPoison = {ctor: 'MajorPoison'};
var _mordrax$cotwelm$Types$MinorPoison = {ctor: 'MinorPoison'};
var _mordrax$cotwelm$Types$NotPoisoned = {ctor: 'NotPoisoned'};
var _mordrax$cotwelm$Types$CoolOff = function (a) {
	return {ctor: 'CoolOff', _0: a};
};
var _mordrax$cotwelm$Types$Rush = function (a) {
	return {ctor: 'Rush', _0: a};
};
var _mordrax$cotwelm$Types$Calm = {ctor: 'Calm'};
var _mordrax$cotwelm$Types$Burning = function (a) {
	return {ctor: 'Burning', _0: a};
};
var _mordrax$cotwelm$Types$NotBurning = {ctor: 'NotBurning'};
var _mordrax$cotwelm$Types$Frozen = function (a) {
	return {ctor: 'Frozen', _0: a};
};
var _mordrax$cotwelm$Types$NotFrozen = {ctor: 'NotFrozen'};
var _mordrax$cotwelm$Types$Shocked = function (a) {
	return {ctor: 'Shocked', _0: a};
};
var _mordrax$cotwelm$Types$NotShocked = {ctor: 'NotShocked'};

var _mordrax$cotwelm$Stats$healthDescription = function (stats) {
	var healthPercent = _elm_lang$core$Basics$toFloat(stats.currentHP) / _elm_lang$core$Basics$toFloat(stats.hardMaxHP);
	return _elm_lang$core$Native_Utils.eq(healthPercent, 1) ? 'Still in top shape!' : ((_elm_lang$core$Native_Utils.cmp(healthPercent, 0.9) > -1) ? 'It is slightly injured.' : ((_elm_lang$core$Native_Utils.cmp(healthPercent, 0.8) > -1) ? 'It\'s looking a little worried.' : ((_elm_lang$core$Native_Utils.cmp(healthPercent, 0.7) > -1) ? 'It is taking the fight seriously now.' : ((_elm_lang$core$Native_Utils.cmp(healthPercent, 0.6) > -1) ? 'It has a few decent wounds.' : ((_elm_lang$core$Native_Utils.cmp(healthPercent, 0.5) > -1) ? 'It has seen better days.' : ((_elm_lang$core$Native_Utils.cmp(healthPercent, 0.4) > -1) ? 'It looks bruised and battered, shoulders drooping.' : ((_elm_lang$core$Native_Utils.cmp(healthPercent, 0.3) > -1) ? 'It doesn\'t look like it can handle much more.' : ((_elm_lang$core$Native_Utils.cmp(healthPercent, 0.2) > -1) ? 'It saying it\'s prayers.' : ((_elm_lang$core$Native_Utils.cmp(healthPercent, 0.1) > -1) ? 'It is bleeding from critical wounds.' : ((_elm_lang$core$Native_Utils.cmp(healthPercent, 0.0) > -1) ? 'It seems to be mortally wounded.' : ((_elm_lang$core$Native_Utils.cmp(healthPercent, -0.5) > -1) ? 'It is clinically dead.' : ((_elm_lang$core$Native_Utils.cmp(healthPercent, -1) > -1) ? 'It has been well and truly put down. Well done!' : 'It has been pummeled into an unrecognisable heap.'))))))))))));
};
var _mordrax$cotwelm$Stats$printAOverB = F2(
	function (a, b) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(a),
			A2(
				_elm_lang$core$Basics_ops['++'],
				' [',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(b),
					']')));
	});
var _mordrax$cotwelm$Stats$printSP = function (model) {
	return A2(_mordrax$cotwelm$Stats$printAOverB, model.currentSP, model.maxSP);
};
var _mordrax$cotwelm$Stats$printHP = function (model) {
	return A2(_mordrax$cotwelm$Stats$printAOverB, model.currentHP, model.maxHP);
};
var _mordrax$cotwelm$Stats$spLow = function (_p0) {
	var _p1 = _p0;
	var _p2 = _p1.currentSP;
	var spLowerThanThreshold = _elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$Basics$toFloat(_p2) / _elm_lang$core$Basics$toFloat(_p1.maxSP),
		0.2) < 0;
	var spLessThanTen = _elm_lang$core$Native_Utils.cmp(_p2, 10) < 0;
	return spLessThanTen || spLowerThanThreshold;
};
var _mordrax$cotwelm$Stats$hpLow = function (_p3) {
	var _p4 = _p3;
	var _p5 = _p4.currentHP;
	var hpLowerThanThreshold = _elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$Basics$toFloat(_p5) / _elm_lang$core$Basics$toFloat(_p4.maxHP),
		0.2) < 0;
	var hpLessThanTen = _elm_lang$core$Native_Utils.cmp(_p5, 10) < 0;
	return hpLessThanTen || hpLowerThanThreshold;
};
var _mordrax$cotwelm$Stats$takeHit = F2(
	function (damage, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{currentHP: model.currentHP - damage});
	});
var _mordrax$cotwelm$Stats$isDead = function (model) {
	return _elm_lang$core$Native_Utils.cmp(model.currentHP, 0) < 0;
};
var _mordrax$cotwelm$Stats$spBonus = function (_p6) {
	var _p7 = _p6;
	return (_p7.$int / 10) | 0;
};
var _mordrax$cotwelm$Stats$hpBonus = function (_p8) {
	var _p9 = _p8;
	return ((_p9.con / 10) | 0) + ((_p9.str / 20) | 0);
};
var _mordrax$cotwelm$Stats$incLevel = F3(
	function (newLevel, attributes, stats) {
		var totalSpBonus = newLevel * _mordrax$cotwelm$Stats$spBonus(attributes);
		var totalHpBonus = newLevel * _mordrax$cotwelm$Stats$hpBonus(attributes);
		return _elm_lang$core$Native_Utils.update(
			stats,
			{currentHP: stats.currentHP + totalHpBonus, maxHP: stats.maxHP + totalHpBonus, hardMaxHP: stats.hardMaxHP + totalHpBonus, currentSP: stats.currentSP + totalSpBonus, maxSP: stats.maxSP + totalSpBonus, hardMaxSP: stats.hardMaxSP + totalSpBonus});
	});
var _mordrax$cotwelm$Stats$regenerateSP = function (_p10) {
	var _p11 = _p10;
	var _p14 = _p11;
	var _p13 = _p11.regeneration;
	var _p12 = _p13.hpCounter;
	if (_p12 === 0) {
		return _elm_lang$core$Native_Utils.update(
			_p14,
			{
				regeneration: _elm_lang$core$Native_Utils.update(
					_p13,
					{hpCounter: _p13.hpRate}),
				currentSP: A2(_elm_lang$core$Basics$min, _p11.currentSP + 1, _p11.maxSP)
			});
	} else {
		return _elm_lang$core$Native_Utils.update(
			_p14,
			{
				regeneration: _elm_lang$core$Native_Utils.update(
					_p13,
					{hpCounter: _p13.hpCounter - 1})
			});
	}
};
var _mordrax$cotwelm$Stats$regenerateHP = function (_p15) {
	var _p16 = _p15;
	var _p19 = _p16;
	var _p18 = _p16.regeneration;
	var _p17 = _p18.hpCounter;
	if (_p17 === 0) {
		return function (regen) {
			return _elm_lang$core$Native_Utils.update(
				_p19,
				{
					regeneration: regen,
					currentHP: A2(_elm_lang$core$Basics$min, _p16.currentHP + 1, _p16.maxHP)
				});
		}(
			_elm_lang$core$Native_Utils.update(
				_p18,
				{hpCounter: _p18.hpRate}));
	} else {
		return function (regen) {
			return _elm_lang$core$Native_Utils.update(
				_p19,
				{regeneration: regen});
		}(
			function (counter) {
				return _elm_lang$core$Native_Utils.update(
					_p18,
					{hpCounter: counter});
			}(_p18.hpCounter - 1));
	}
};
var _mordrax$cotwelm$Stats$tick = function (_p20) {
	return _mordrax$cotwelm$Stats$regenerateSP(
		_mordrax$cotwelm$Stats$regenerateHP(_p20));
};
var _mordrax$cotwelm$Stats$RegenerationStatus = F4(
	function (a, b, c, d) {
		return {hpRate: a, hpCounter: b, spRate: c, spCounter: d};
	});
var _mordrax$cotwelm$Stats$Stats = F8(
	function (a, b, c, d, e, f, g, h) {
		return {currentHP: a, maxHP: b, hardMaxHP: c, currentSP: d, maxSP: e, hardMaxSP: f, effects: g, regeneration: h};
	});
var _mordrax$cotwelm$Stats$Effects = F5(
	function (a, b, c, d, e) {
		return {poison: a, adrenaline: b, burn: c, frost: d, shock: e};
	});
var _mordrax$cotwelm$Stats$init = function (attributes) {
	var baseSp = 5;
	var sp = _mordrax$cotwelm$Stats$spBonus(attributes) + baseSp;
	var baseHp = 10;
	var hp = _mordrax$cotwelm$Stats$hpBonus(attributes) + baseHp;
	return {
		currentHP: hp,
		maxHP: hp,
		hardMaxHP: hp,
		currentSP: sp,
		maxSP: sp,
		hardMaxSP: sp,
		effects: A5(_mordrax$cotwelm$Stats$Effects, _mordrax$cotwelm$Types$NotPoisoned, _mordrax$cotwelm$Types$Calm, _mordrax$cotwelm$Types$NotBurning, _mordrax$cotwelm$Types$NotFrozen, _mordrax$cotwelm$Types$NotShocked),
		regeneration: {hpRate: 10, hpCounter: 10, spRate: 10, spCounter: 10}
	};
};
var _mordrax$cotwelm$Stats$initExperienced = F2(
	function (attributes, level) {
		return A3(
			_mordrax$cotwelm$Stats$incLevel,
			level,
			attributes,
			_mordrax$cotwelm$Stats$init(attributes));
	});
var _mordrax$cotwelm$Stats$Dead = {ctor: 'Dead'};
var _mordrax$cotwelm$Stats$Alive = {ctor: 'Alive'};

var _mordrax$cotwelm$Game_Combat$defenderName = F2(
	function (_p0, adjective) {
		var _p1 = _p0;
		var _p3 = _p1.name;
		var _p2 = {ctor: '_Tuple2', _0: _p1.type_, _1: adjective};
		if (_p2._1.ctor === 'Possessive') {
			if (_p2._0.ctor === 'Hero') {
				return 'your';
			} else {
				return A2(_elm_lang$core$Basics_ops['++'], _p3, '\'s');
			}
		} else {
			if (_p2._0.ctor === 'Hero') {
				return 'you';
			} else {
				return _p3;
			}
		}
	});
var _mordrax$cotwelm$Game_Combat$attackerName = F2(
	function (_p4, adjective) {
		var _p5 = _p4;
		var _p7 = _p5.name;
		var _p6 = {ctor: '_Tuple2', _0: _p5.type_, _1: adjective};
		if (_p6._1.ctor === 'Possessive') {
			if (_p6._0.ctor === 'Hero') {
				return 'Your ';
			} else {
				return A2(_elm_lang$core$Basics_ops['++'], _p7, '\'s');
			}
		} else {
			if (_p6._0.ctor === 'Hero') {
				return 'You ';
			} else {
				return _p7;
			}
		}
	});
var _mordrax$cotwelm$Game_Combat$hitMsg = F3(
	function (_p9, _p8, defender) {
		var _p10 = _p9;
		var _p14 = _p10.att;
		var _p11 = _p8;
		var _p13 = _p11._0;
		var defenderAfterDamage = _elm_lang$core$Native_Utils.update(
			defender,
			{
				stats: A2(_mordrax$cotwelm$Stats$takeHit, _p13, defender.stats)
			});
		var addStatus = function (msg) {
			var _p12 = defender.type_;
			if (_p12.ctor === 'Hero') {
				return msg;
			} else {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					msg,
					A2(
						_elm_lang$core$Basics_ops['++'],
						' ',
						_mordrax$cotwelm$Stats$healthDescription(defenderAfterDamage.stats)));
			}
		};
		var defaultCritMsg = A2(
			_elm_lang$core$Basics_ops['++'],
			_p14,
			A2(
				_elm_lang$core$Basics_ops['++'],
				' found a weak spot in ',
				A2(_elm_lang$core$Basics_ops['++'], _p10.defr, ' defense! Ouch!')));
		var defaultHitMsg = A2(
			_elm_lang$core$Basics_ops['++'],
			_p14,
			A2(
				_elm_lang$core$Basics_ops['++'],
				' scored a hit on ',
				A2(_elm_lang$core$Basics_ops['++'], _p10.def, '!')));
		var hitMsgs = {ctor: '[]'};
		var critMsgs = {ctor: '[]'};
		return (_elm_lang$core$Native_Utils.cmp(_p13, _p11._1) > -1) ? A2(
			_mgold$elm_random_pcg$Random_Pcg$map,
			function (msg) {
				return {ctor: '_Tuple2', _0: msg, _1: defenderAfterDamage};
			},
			A2(
				_mgold$elm_random_pcg$Random_Pcg$map,
				addStatus,
				A2(
					_mgold$elm_random_pcg$Random_Pcg$map,
					_elm_lang$core$Maybe$withDefault(defaultCritMsg),
					_mgold$elm_random_pcg$Random_Pcg$sample(critMsgs)))) : A2(
			_mgold$elm_random_pcg$Random_Pcg$map,
			function (msg) {
				return {ctor: '_Tuple2', _0: msg, _1: defenderAfterDamage};
			},
			A2(
				_mgold$elm_random_pcg$Random_Pcg$map,
				addStatus,
				A2(
					_mgold$elm_random_pcg$Random_Pcg$map,
					_elm_lang$core$Maybe$withDefault(defaultHitMsg),
					_mgold$elm_random_pcg$Random_Pcg$sample(hitMsgs))));
	});
var _mordrax$cotwelm$Game_Combat$blockedMsg = function (_p15) {
	var _p16 = _p15;
	return A2(
		_mgold$elm_random_pcg$Random_Pcg$map,
		_elm_lang$core$Maybe$withDefault(
			A2(
				_elm_lang$core$Basics_ops['++'],
				_p16.attr,
				A2(
					_elm_lang$core$Basics_ops['++'],
					' swing clanged against ',
					A2(_elm_lang$core$Basics_ops['++'], _p16.defr, ' shield.')))),
		_mgold$elm_random_pcg$Random_Pcg$sample(
			{ctor: '[]'}));
};
var _mordrax$cotwelm$Game_Combat$missMsg = function (_p17) {
	var _p18 = _p17;
	var _p21 = _p18.def;
	var _p20 = _p18.attr;
	var _p19 = _p18.att;
	return A2(
		_mgold$elm_random_pcg$Random_Pcg$map,
		_elm_lang$core$Maybe$withDefault(
			A2(
				_elm_lang$core$Basics_ops['++'],
				_p20,
				A2(
					_elm_lang$core$Basics_ops['++'],
					' fumbled attack complete missed ',
					A2(_elm_lang$core$Basics_ops['++'], _p21, '.')))),
		_mgold$elm_random_pcg$Random_Pcg$sample(
			{
				ctor: '::',
				_0: A2(
					_elm_lang$core$Basics_ops['++'],
					_p20,
					A2(
						_elm_lang$core$Basics_ops['++'],
						' half arsed attack failed to hit ',
						A2(_elm_lang$core$Basics_ops['++'], _p21, '.'))),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$core$Basics_ops['++'],
						_p20,
						A2(
							_elm_lang$core$Basics_ops['++'],
							' fancy footwork did not fool ',
							A2(_elm_lang$core$Basics_ops['++'], _p21, '.'))),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$core$Basics_ops['++'], _p19, ' could not hit the broadside of a barn with that pathetic attempt.'),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$core$Basics_ops['++'],
								_p19,
								A2(
									_elm_lang$core$Basics_ops['++'],
									' perform a decent attack but ',
									A2(_elm_lang$core$Basics_ops['++'], _p21, ' perfectly parried the shot.'))),
							_1: {ctor: '[]'}
						}
					}
				}
			}));
};
var _mordrax$cotwelm$Game_Combat$attackSpeed = F2(
	function (weapon, _p22) {
		var _p23 = _p22;
		return 1;
	});
var _mordrax$cotwelm$Game_Combat$damageCalculator = function (_p24) {
	var _p25 = _p24;
	var _p27 = _p25.attributes;
	var strBonus = function (str) {
		return A3(_elm_lang$core$Basics$clamp, 0, 5, ((str - 50) / 10) | 0);
	};
	var addStrToBonus = F2(
		function (str, die) {
			return _elm_lang$core$Native_Utils.update(
				die,
				{
					bonus: die.bonus + strBonus(str)
				});
		});
	var maybeWeapon = _mordrax$cotwelm$Equipment$getWeapon(_p25.equipment);
	var dice = function () {
		var _p26 = maybeWeapon;
		if ((_p26.ctor === 'Just') && (_p26._0.ctor === '_Tuple2')) {
			return A2(addStrToBonus, _p27.str, _p26._0._1.damage);
		} else {
			return A3(_mordrax$cotwelm$Dice$Dice, 1, (_p27.str / 10) | 0, 0);
		}
	}();
	return A2(
		_mgold$elm_random_pcg$Random_Pcg$map,
		function (roll) {
			return {ctor: '_Tuple2', _0: roll, _1: (dice.nDice * dice.sides) + dice.bonus};
		},
		_mordrax$cotwelm$Dice$roll(dice));
};
var _mordrax$cotwelm$Game_Combat$bodySizeToDodge = function (bodySize) {
	var _p28 = bodySize;
	switch (_p28.ctor) {
		case 'Tiny':
			return -10;
		case 'Small':
			return -5;
		case 'Medium':
			return 0;
		case 'Large':
			return 5;
		default:
			return 10;
	}
};
var _mordrax$cotwelm$Game_Combat$cthThreshold = function (cth) {
	return A3(_elm_lang$core$Basics$clamp, 1, 99, (((cth.baseCTH - cth.ac) + cth.sizeModifier) + cth.weaponBulkPenalty) + cth.armourPenalty);
};
var _mordrax$cotwelm$Game_Combat$hitResult = F4(
	function (cth, names, defender, _p29) {
		var _p30 = _p29;
		var _p33 = _p30._1._1;
		var _p32 = _p30._0;
		var hitThreshold = _mordrax$cotwelm$Game_Combat$cthThreshold(cth);
		var isHit = _elm_lang$core$Native_Utils.cmp(_p32, hitThreshold) < 1;
		var isCrit = _elm_lang$core$Native_Utils.cmp(
			_p32,
			_elm_lang$core$Basics$ceiling(
				(_elm_lang$core$Basics$toFloat(cth.critRange) * _elm_lang$core$Basics$toFloat(hitThreshold)) / 100)) < 1;
		var isBlocked = _elm_lang$core$Native_Utils.cmp(_p32, hitThreshold) < 1;
		var _p31 = {ctor: '_Tuple3', _0: isHit, _1: isCrit, _2: isBlocked};
		_v14_3:
		do {
			_v14_0:
			do {
				if (_p31.ctor === '_Tuple3') {
					if (_p31._0 === true) {
						if (_p31._1 === true) {
							break _v14_0;
						} else {
							return A3(
								_mordrax$cotwelm$Game_Combat$hitMsg,
								names,
								{ctor: '_Tuple2', _0: _p30._1._0, _1: _p33},
								defender);
						}
					} else {
						if (_p31._1 === true) {
							break _v14_0;
						} else {
							if (_p31._2 === true) {
								return A2(
									_mgold$elm_random_pcg$Random_Pcg$map,
									function (msg) {
										return {ctor: '_Tuple2', _0: msg, _1: defender};
									},
									_mordrax$cotwelm$Game_Combat$blockedMsg(names));
							} else {
								break _v14_3;
							}
						}
					}
				} else {
					break _v14_3;
				}
			} while(false);
			return A3(
				_mordrax$cotwelm$Game_Combat$hitMsg,
				names,
				{ctor: '_Tuple2', _0: _p33, _1: _p33},
				defender);
		} while(false);
		return A2(
			_mgold$elm_random_pcg$Random_Pcg$map,
			function (msg) {
				return {ctor: '_Tuple2', _0: msg, _1: defender};
			},
			_mordrax$cotwelm$Game_Combat$missMsg(names));
	});
var _mordrax$cotwelm$Game_Combat$quadraticCTHCalculator = F2(
	function (cthMax, y) {
		var absY = _elm_lang$core$Basics$abs(y);
		var sign = (y / _elm_lang$core$Basics$abs(y)) | 0;
		return A2(
			F2(
				function (x, y) {
					return x * y;
				}),
			sign,
			_elm_lang$core$Basics$round(
				A2(
					F2(
						function (x, y) {
							return x * y;
						}),
					_elm_lang$core$Basics$toFloat(cthMax),
					A3(
						_elm_lang$core$Basics$clamp,
						0,
						1,
						function (x) {
							return Math.pow(x, 2);
						}(
							_elm_lang$core$Basics$toFloat(absY) / 50.0)))));
	});
var _mordrax$cotwelm$Game_Combat$chanceToHit = F2(
	function (attacker, defender) {
		var sizeModifier = A3(
			_elm_lang$core$Basics$clamp,
			-10,
			10,
			_mordrax$cotwelm$Game_Combat$bodySizeToDodge(defender.bodySize));
		var maxWeaponWeight = 5000.0;
		var weaponMass = A2(
			_elm_lang$core$Maybe$withDefault,
			A2(_mordrax$cotwelm$Utils_Mass$Mass, 0, 0),
			A2(
				_elm_lang$core$Maybe$map,
				function (_) {
					return _.mass;
				},
				A2(
					_elm_lang$core$Maybe$map,
					_mordrax$cotwelm$Item$base,
					_mordrax$cotwelm$Equipment$getWeapon(attacker.equipment))));
		var weaponWeightToWielderCapacityDifference = attacker.attributes.str - _elm_lang$core$Basics$round(
			(_elm_lang$core$Basics$toFloat(weaponMass.weight) / maxWeaponWeight) * 100);
		var weaponBulkPenalty = A3(
			_elm_lang$core$Basics$clamp,
			-15,
			10,
			A2(_mordrax$cotwelm$Game_Combat$quadraticCTHCalculator, 15, weaponWeightToWielderCapacityDifference));
		var armourMass = A2(
			_elm_lang$core$Maybe$withDefault,
			A2(_mordrax$cotwelm$Utils_Mass$Mass, 0, 0),
			A2(
				_elm_lang$core$Maybe$map,
				function (_) {
					return _.mass;
				},
				A2(
					_elm_lang$core$Maybe$map,
					_mordrax$cotwelm$Item$base,
					_mordrax$cotwelm$Equipment$getArmour(attacker.equipment))));
		var armourPenalty = A3(
			_elm_lang$core$Basics$clamp,
			-20,
			0,
			A2(
				_mordrax$cotwelm$Game_Combat$quadraticCTHCalculator,
				20,
				attacker.attributes.str - _elm_lang$core$Basics$round(
					(_elm_lang$core$Basics$toFloat(armourMass.weight) / 15000) * 100)));
		var ac = _mordrax$cotwelm$Equipment$calculateAC(defender.equipment);
		return {
			baseCTH: attacker.attributes.dex + (attacker.expLevel * 2),
			ac: _mordrax$cotwelm$Item_Data$acToInt(ac) + (defender.expLevel * 2),
			armourPenalty: armourPenalty,
			weaponBulkPenalty: weaponBulkPenalty,
			sizeModifier: sizeModifier,
			blockPenalty: 5,
			critRange: 20
		};
	});
var _mordrax$cotwelm$Game_Combat$CTH = F7(
	function (a, b, c, d, e, f, g) {
		return {baseCTH: a, ac: b, weaponBulkPenalty: c, armourPenalty: d, sizeModifier: e, blockPenalty: f, critRange: g};
	});
var _mordrax$cotwelm$Game_Combat$Names = F4(
	function (a, b, c, d) {
		return {att: a, attr: b, def: c, defr: d};
	});
var _mordrax$cotwelm$Game_Combat$NonPossessive = {ctor: 'NonPossessive'};
var _mordrax$cotwelm$Game_Combat$Possessive = {ctor: 'Possessive'};
var _mordrax$cotwelm$Game_Combat$makeNames = F2(
	function (attacker, defender) {
		return {
			att: A2(_mordrax$cotwelm$Game_Combat$attackerName, attacker, _mordrax$cotwelm$Game_Combat$NonPossessive),
			attr: A2(_mordrax$cotwelm$Game_Combat$attackerName, attacker, _mordrax$cotwelm$Game_Combat$Possessive),
			def: A2(_mordrax$cotwelm$Game_Combat$defenderName, defender, _mordrax$cotwelm$Game_Combat$NonPossessive),
			defr: A2(_mordrax$cotwelm$Game_Combat$defenderName, defender, _mordrax$cotwelm$Game_Combat$Possessive)
		};
	});
var _mordrax$cotwelm$Game_Combat$attack_ = F3(
	function (attacker, defender, numAttacks) {
		var attackAgain = function (_p34) {
			var _p35 = _p34;
			return A2(
				_mgold$elm_random_pcg$Random_Pcg$map,
				function (_p36) {
					var _p37 = _p36;
					return {
						ctor: '_Tuple2',
						_0: A2(_elm_lang$core$Basics_ops['++'], _p35._0, _p37._0),
						_1: _p37._1
					};
				},
				A3(_mordrax$cotwelm$Game_Combat$attack_, attacker, _p35._1, numAttacks - 1));
		};
		var names = A2(_mordrax$cotwelm$Game_Combat$makeNames, attacker, defender);
		var damageDie = _mordrax$cotwelm$Game_Combat$damageCalculator(attacker);
		var hitDie = A2(_mgold$elm_random_pcg$Random_Pcg$int, 1, 100);
		var cth = A2(_mordrax$cotwelm$Game_Combat$chanceToHit, attacker, defender);
		var genResult = A2(
			_mgold$elm_random_pcg$Random_Pcg$andThen,
			function (rolls) {
				return A4(_mordrax$cotwelm$Game_Combat$hitResult, cth, names, defender, rolls);
			},
			A3(
				_mgold$elm_random_pcg$Random_Pcg$map2,
				F2(
					function (v0, v1) {
						return {ctor: '_Tuple2', _0: v0, _1: v1};
					}),
				hitDie,
				damageDie));
		var _p38 = numAttacks;
		if (_p38 === 1) {
			return genResult;
		} else {
			return A2(_mgold$elm_random_pcg$Random_Pcg$andThen, attackAgain, genResult);
		}
	});
var _mordrax$cotwelm$Game_Combat$attack = F2(
	function (attacker, defender) {
		return A3(_mordrax$cotwelm$Game_Combat$attack_, attacker, defender, attacker.attacks);
	});

var _mordrax$cotwelm$Arena_Round$fighting = function (_p0) {
	var _p1 = _p0;
	var _p8 = _p1;
	var _p7 = _p1.red;
	var _p6 = _p1.blue;
	var isDamaged = F2(
		function (a, a_) {
			return _elm_lang$core$Native_Utils.cmp(a.stats.currentHP, a_.stats.currentHP) > 0;
		});
	var oneIfDamaged = F2(
		function (a, a_) {
			return A2(isDamaged, a, a_) ? 1 : 0;
		});
	var updateBlue = function (newBlue) {
		return _elm_lang$core$Native_Utils.update(
			_p8,
			{
				blue: newBlue,
				redTurns: _p8.redTurns + 1,
				isBlueAttacking: true,
				redHitBlue: _p8.redHitBlue + A2(oneIfDamaged, _p8.blue, newBlue)
			});
	};
	var updateRed = function (newRed) {
		return _elm_lang$core$Native_Utils.update(
			_p8,
			{
				red: newRed,
				blueTurns: _p8.blueTurns + 1,
				isBlueAttacking: false,
				blueHitRed: _p8.blueHitRed + A2(oneIfDamaged, _p8.red, newRed)
			});
	};
	return _mordrax$cotwelm$Stats$isDead(_p6.stats) ? _mgold$elm_random_pcg$Random_Pcg$constant(
		_elm_lang$core$Native_Utils.update(
			_p8,
			{hpRemaining: 0})) : (_mordrax$cotwelm$Stats$isDead(_p7.stats) ? _mgold$elm_random_pcg$Random_Pcg$constant(
		_elm_lang$core$Native_Utils.update(
			_p8,
			{hpRemaining: _p6.stats.currentHP})) : (_elm_lang$core$Native_Utils.eq(_p1.isBlueAttacking, true) ? A2(
		_mgold$elm_random_pcg$Random_Pcg$andThen,
		function (_p2) {
			var _p3 = _p2;
			return _mordrax$cotwelm$Arena_Round$fighting(
				updateRed(_p3._1));
		},
		A2(_mordrax$cotwelm$Game_Combat$attack, _p6, _p7)) : A2(
		_mgold$elm_random_pcg$Random_Pcg$andThen,
		function (_p4) {
			var _p5 = _p4;
			return _mordrax$cotwelm$Arena_Round$fighting(
				updateBlue(_p5._1));
		},
		A2(_mordrax$cotwelm$Game_Combat$attack, _p7, _p6))));
};
var _mordrax$cotwelm$Arena_Round$RoundResult = F8(
	function (a, b, c, d, e, f, g, h) {
		return {blue: a, red: b, isBlueAttacking: c, blueTurns: d, redTurns: e, hpRemaining: f, blueHitRed: g, redHitBlue: h};
	});
var _mordrax$cotwelm$Arena_Round$fight = F2(
	function (blue, red) {
		return _mordrax$cotwelm$Arena_Round$fighting(
			A8(_mordrax$cotwelm$Arena_Round$RoundResult, blue, red, true, 0, 0, 0, 0, 0));
	});

var _mordrax$cotwelm$Arena_View$armourToString = function (equipment) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		'No Armour',
		A2(
			_elm_lang$core$Maybe$map,
			_mordrax$cotwelm$Item$ppArmour,
			_mordrax$cotwelm$Equipment$getArmour(equipment)));
};
var _mordrax$cotwelm$Arena_View$weaponToString = function (equipment) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		'No Weapon',
		A2(
			_elm_lang$core$Maybe$map,
			_mordrax$cotwelm$Item$ppWeapon,
			_mordrax$cotwelm$Equipment$getWeapon(equipment)));
};

var _mordrax$cotwelm$Arena_Match$toPercentage = function (num) {
	return A3(
		_elm_lang$core$String$slice,
		0,
		4,
		_elm_lang$core$Basics$toString(
			A2(
				F2(
					function (x, y) {
						return x * y;
					}),
				100,
				num)));
};
var _mordrax$cotwelm$Arena_Match$toNSignificantPlaces = F2(
	function (num, sig) {
		var factor = _elm_lang$core$Basics$toFloat(
			Math.pow(10, sig));
		return A3(
			_elm_lang$core$Basics$flip,
			F2(
				function (x, y) {
					return x / y;
				}),
			factor,
			_elm_lang$core$Basics$toFloat(
				_elm_lang$core$Basics$round(
					A2(
						F2(
							function (x, y) {
								return x * y;
							}),
						factor,
						num))));
	});
var _mordrax$cotwelm$Arena_Match$toOneDecimal = function (num) {
	return _elm_lang$core$Basics$toString(
		A2(_mordrax$cotwelm$Arena_Match$toNSignificantPlaces, num, 1));
};
var _mordrax$cotwelm$Arena_Match$ppAttributes = function (_p0) {
	var _p1 = _p0;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(_p1.str),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'/',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(_p1.dex),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'/',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(_p1.con),
						A2(
							_elm_lang$core$Basics_ops['++'],
							'/',
							_elm_lang$core$Basics$toString(_p1.$int)))))));
};
var _mordrax$cotwelm$Arena_Match$view = function (_p2) {
	var _p3 = _p2;
	var _p8 = _p3.rounds;
	var _p7 = _p3.redTurnsInRounds;
	var _p6 = _p3.red;
	var _p5 = _p3.blueTurnsInRounds;
	var _p4 = _p3.blue;
	var redCTHThreshold = _mordrax$cotwelm$Game_Combat$cthThreshold(
		A2(_mordrax$cotwelm$Game_Combat$chanceToHit, _p6, _p4));
	var blueCTHThreshold = _mordrax$cotwelm$Game_Combat$cthThreshold(
		A2(_mordrax$cotwelm$Game_Combat$chanceToHit, _p4, _p6));
	var avgRedHitBlue = _elm_lang$core$Basics$toFloat(
		_elm_lang$core$List$sum(_p3.redHitBlue)) / _elm_lang$core$Basics$toFloat(
		_elm_lang$core$List$sum(_p7));
	var avgBlueHitRed = _elm_lang$core$Basics$toFloat(
		_elm_lang$core$List$sum(_p3.blueHitRed)) / _elm_lang$core$Basics$toFloat(
		_elm_lang$core$List$sum(_p5));
	var redCTH = A2(_mordrax$cotwelm$Game_Combat$chanceToHit, _p6, _p4);
	var redCTHText = A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(redCTH.baseCTH),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'/',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(redCTH.weaponBulkPenalty),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'/',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(redCTH.armourPenalty),
						A2(
							_elm_lang$core$Basics_ops['++'],
							'/',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(redCTH.sizeModifier),
								A2(
									_elm_lang$core$Basics_ops['++'],
									' = (',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(redCTHThreshold),
										')')))))))));
	var cth = A2(_mordrax$cotwelm$Game_Combat$chanceToHit, _p4, _p6);
	var cthText = A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(cth.baseCTH),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'/',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(cth.weaponBulkPenalty),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'/',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(cth.armourPenalty),
						A2(
							_elm_lang$core$Basics_ops['++'],
							'/',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(cth.sizeModifier),
								A2(
									_elm_lang$core$Basics_ops['++'],
									' = (',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(blueCTHThreshold),
										')')))))))));
	var avgBlueTurnsTaken = _elm_lang$core$Basics$toFloat(
		_elm_lang$core$List$sum(_p5)) / _elm_lang$core$Basics$toFloat(_p8);
	var avgTurnsTaken = _elm_lang$core$Basics$toFloat(
		_elm_lang$core$List$sum(_p5) + _elm_lang$core$List$sum(_p7)) / _elm_lang$core$Basics$toFloat(_p8);
	var avgHpRemaining = _mordrax$cotwelm$Arena_Match$toOneDecimal(
		_elm_lang$core$Basics$toFloat(
			_elm_lang$core$List$sum(_p3.hpRemaining)) / _elm_lang$core$Basics$toFloat(_p8));
	var armour = _mordrax$cotwelm$Arena_View$armourToString(_p6.equipment);
	var weapon = _mordrax$cotwelm$Arena_View$weaponToString(_p6.equipment);
	var brackets = function (a) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			'( ',
			A2(_elm_lang$core$Basics_ops['++'], a, ' )'));
	};
	var totalArmour = brackets(
		_elm_lang$core$Basics$toString(
			_mordrax$cotwelm$Equipment$calculateAC(_p6.equipment)));
	var percent = function (a) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(a),
			'%');
	};
	return A2(
		_elm_lang$html$Html$tr,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$td,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(_p6.name),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(_p6.expLevel)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_mordrax$cotwelm$Arena_Match$ppAttributes(_p6.attributes)),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(weapon),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(
											_elm_lang$core$Basics_ops['++'],
											armour,
											A2(_elm_lang$core$Basics_ops['++'], ' ', totalArmour))),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$td,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											_elm_lang$core$Basics$toString(_p6.bodySize)),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$td,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												_elm_lang$core$Basics$toString(_p6.stats.maxHP)),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$td,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(
													percent(
														(_elm_lang$core$Basics$toFloat(_p3.blueWins) * 100) / _elm_lang$core$Basics$toFloat(_p8))),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$td,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(
														A2(
															_elm_lang$core$Basics_ops['++'],
															avgHpRemaining,
															A2(
																_elm_lang$core$Basics_ops['++'],
																' / ',
																_elm_lang$core$Basics$toString(_p4.stats.maxHP)))),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$td,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text(
															A2(
																_elm_lang$core$Basics_ops['++'],
																_mordrax$cotwelm$Arena_Match$toOneDecimal(avgTurnsTaken),
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	' ',
																	brackets(
																		_mordrax$cotwelm$Arena_Match$toOneDecimal(avgBlueTurnsTaken))))),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$td,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	_mordrax$cotwelm$Arena_Match$toPercentage(avgBlueHitRed),
																	'%')),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$td,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		_mordrax$cotwelm$Arena_Match$toPercentage(avgRedHitBlue),
																		'%')),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$td,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(cthText),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$td,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text(redCTHText),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _mordrax$cotwelm$Arena_Match$updateMatch = F2(
	function (_p9, match) {
		var _p10 = _p9;
		var _p11 = _p10.hpRemaining;
		var incBattle = function (model) {
			return _elm_lang$core$Native_Utils.update(
				model,
				{rounds: model.rounds + 1});
		};
		var addResult = function (model) {
			return _elm_lang$core$Native_Utils.update(
				model,
				{
					hpRemaining: {ctor: '::', _0: _p11, _1: model.hpRemaining},
					blueTurnsInRounds: {ctor: '::', _0: _p10.blueTurns, _1: model.blueTurnsInRounds},
					redTurnsInRounds: {ctor: '::', _0: _p10.redTurns, _1: model.redTurnsInRounds},
					blueHitRed: {ctor: '::', _0: _p10.blueHitRed, _1: model.blueHitRed},
					redHitBlue: {ctor: '::', _0: _p10.redHitBlue, _1: model.redHitBlue}
				});
		};
		var addWin = function (model) {
			return (_elm_lang$core$Native_Utils.cmp(_p11, 0) > 0) ? _elm_lang$core$Native_Utils.update(
				model,
				{blueWins: model.blueWins + 1}) : model;
		};
		return incBattle(
			addResult(
				addWin(match)));
	});
var _mordrax$cotwelm$Arena_Match$fightSingleRound = function (_p12) {
	var _p13 = _p12;
	return A2(
		_mgold$elm_random_pcg$Random_Pcg$map,
		function (roundResult) {
			return A2(_mordrax$cotwelm$Arena_Match$updateMatch, roundResult, _p13);
		},
		A2(_mordrax$cotwelm$Arena_Round$fight, _p13.blue, _p13.red));
};
var _mordrax$cotwelm$Arena_Match$maxRounds = 2000;
var _mordrax$cotwelm$Arena_Match$fight = function (match) {
	return (_elm_lang$core$Native_Utils.cmp(match.rounds, _mordrax$cotwelm$Arena_Match$maxRounds) > -1) ? _mgold$elm_random_pcg$Random_Pcg$constant(match) : A2(
		_mgold$elm_random_pcg$Random_Pcg$andThen,
		_mordrax$cotwelm$Arena_Match$fight,
		_mordrax$cotwelm$Arena_Match$fightSingleRound(match));
};
var _mordrax$cotwelm$Arena_Match$init = F2(
	function (blue, red) {
		return {
			blue: blue,
			red: red,
			rounds: 0,
			blueWins: 0,
			hpRemaining: {ctor: '[]'},
			blueTurnsInRounds: {ctor: '[]'},
			redTurnsInRounds: {ctor: '[]'},
			blueHitRed: {ctor: '[]'},
			redHitBlue: {ctor: '[]'}
		};
	});
var _mordrax$cotwelm$Arena_Match$Model = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {blue: a, red: b, rounds: c, blueWins: d, hpRemaining: e, blueTurnsInRounds: f, redTurnsInRounds: g, blueHitRed: h, redHitBlue: i};
	});

var _mordrax$cotwelm$Monsters_Types$Spell = {ctor: 'Spell'};
var _mordrax$cotwelm$Monsters_Types$Steal = {ctor: 'Steal'};
var _mordrax$cotwelm$Monsters_Types$Drain = {ctor: 'Drain'};
var _mordrax$cotwelm$Monsters_Types$Lightning = {ctor: 'Lightning'};
var _mordrax$cotwelm$Monsters_Types$Ice = {ctor: 'Ice'};
var _mordrax$cotwelm$Monsters_Types$Fire = {ctor: 'Fire'};
var _mordrax$cotwelm$Monsters_Types$Acid = {ctor: 'Acid'};
var _mordrax$cotwelm$Monsters_Types$Poison = {ctor: 'Poison'};
var _mordrax$cotwelm$Monsters_Types$Ranged = {ctor: 'Ranged'};
var _mordrax$cotwelm$Monsters_Types$Melee = {ctor: 'Melee'};
var _mordrax$cotwelm$Monsters_Types$GreenDragon = {ctor: 'GreenDragon'};
var _mordrax$cotwelm$Monsters_Types$WhiteDragon = {ctor: 'WhiteDragon'};
var _mordrax$cotwelm$Monsters_Types$BlueDragon = {ctor: 'BlueDragon'};
var _mordrax$cotwelm$Monsters_Types$RedDragon = {ctor: 'RedDragon'};
var _mordrax$cotwelm$Monsters_Types$StoneGiantKing = {ctor: 'StoneGiantKing'};
var _mordrax$cotwelm$Monsters_Types$HillGiantKing = {ctor: 'HillGiantKing'};
var _mordrax$cotwelm$Monsters_Types$FrostGiantKing = {ctor: 'FrostGiantKing'};
var _mordrax$cotwelm$Monsters_Types$FireGiantKing = {ctor: 'FireGiantKing'};
var _mordrax$cotwelm$Monsters_Types$Surtur = {ctor: 'Surtur'};
var _mordrax$cotwelm$Monsters_Types$FireGiant = {ctor: 'FireGiant'};
var _mordrax$cotwelm$Monsters_Types$StoneGiant = {ctor: 'StoneGiant'};
var _mordrax$cotwelm$Monsters_Types$FrostGiant = {ctor: 'FrostGiant'};
var _mordrax$cotwelm$Monsters_Types$TwoHeadedGiant = {ctor: 'TwoHeadedGiant'};
var _mordrax$cotwelm$Monsters_Types$HillGiant = {ctor: 'HillGiant'};
var _mordrax$cotwelm$Monsters_Types$EarthElemental = {ctor: 'EarthElemental'};
var _mordrax$cotwelm$Monsters_Types$IceElemental = {ctor: 'IceElemental'};
var _mordrax$cotwelm$Monsters_Types$MagmaElemental = {ctor: 'MagmaElemental'};
var _mordrax$cotwelm$Monsters_Types$WaterElemental = {ctor: 'WaterElemental'};
var _mordrax$cotwelm$Monsters_Types$FireElemental = {ctor: 'FireElemental'};
var _mordrax$cotwelm$Monsters_Types$DustElemental = {ctor: 'DustElemental'};
var _mordrax$cotwelm$Monsters_Types$WindElemental = {ctor: 'WindElemental'};
var _mordrax$cotwelm$Monsters_Types$AbyssFiend = {ctor: 'AbyssFiend'};
var _mordrax$cotwelm$Monsters_Types$HornedDevil = {ctor: 'HornedDevil'};
var _mordrax$cotwelm$Monsters_Types$SpikedDevil = {ctor: 'SpikedDevil'};
var _mordrax$cotwelm$Monsters_Types$BullMan = {ctor: 'BullMan'};
var _mordrax$cotwelm$Monsters_Types$BearMan = {ctor: 'BearMan'};
var _mordrax$cotwelm$Monsters_Types$WolfMan = {ctor: 'WolfMan'};
var _mordrax$cotwelm$Monsters_Types$RatMan = {ctor: 'RatMan'};
var _mordrax$cotwelm$Monsters_Types$IceDevil = {ctor: 'IceDevil'};
var _mordrax$cotwelm$Monsters_Types$Vampire = {ctor: 'Vampire'};
var _mordrax$cotwelm$Monsters_Types$Spectre = {ctor: 'Spectre'};
var _mordrax$cotwelm$Monsters_Types$EerieGhost = {ctor: 'EerieGhost'};
var _mordrax$cotwelm$Monsters_Types$DarkWraith = {ctor: 'DarkWraith'};
var _mordrax$cotwelm$Monsters_Types$BarrowWight = {ctor: 'BarrowWight'};
var _mordrax$cotwelm$Monsters_Types$Necromancer = {ctor: 'Necromancer'};
var _mordrax$cotwelm$Monsters_Types$Wizard = {ctor: 'Wizard'};
var _mordrax$cotwelm$Monsters_Types$EvilWarrior = {ctor: 'EvilWarrior'};
var _mordrax$cotwelm$Monsters_Types$Bandit = {ctor: 'Bandit'};
var _mordrax$cotwelm$Monsters_Types$AnimatedWoodenStatue = {ctor: 'AnimatedWoodenStatue'};
var _mordrax$cotwelm$Monsters_Types$AnimatedMarbleStatue = {ctor: 'AnimatedMarbleStatue'};
var _mordrax$cotwelm$Monsters_Types$AnimatedIronStatue = {ctor: 'AnimatedIronStatue'};
var _mordrax$cotwelm$Monsters_Types$AnimatedBronzeStatue = {ctor: 'AnimatedBronzeStatue'};
var _mordrax$cotwelm$Monsters_Types$Manticore = {ctor: 'Manticore'};
var _mordrax$cotwelm$Monsters_Types$GruesomeTroll = {ctor: 'GruesomeTroll'};
var _mordrax$cotwelm$Monsters_Types$GelatinousGlob = {ctor: 'GelatinousGlob'};
var _mordrax$cotwelm$Monsters_Types$CaveBear = {ctor: 'CaveBear'};
var _mordrax$cotwelm$Monsters_Types$BrownBear = {ctor: 'BrownBear'};
var _mordrax$cotwelm$Monsters_Types$WhiteWolf = {ctor: 'WhiteWolf'};
var _mordrax$cotwelm$Monsters_Types$GrayWolf = {ctor: 'GrayWolf'};
var _mordrax$cotwelm$Monsters_Types$SmirkingSneakThief = {ctor: 'SmirkingSneakThief'};
var _mordrax$cotwelm$Monsters_Types$Shadow = {ctor: 'Shadow'};
var _mordrax$cotwelm$Monsters_Types$Hobgoblin = {ctor: 'Hobgoblin'};
var _mordrax$cotwelm$Monsters_Types$Goblin = {ctor: 'Goblin'};
var _mordrax$cotwelm$Monsters_Types$HugeLizard = {ctor: 'HugeLizard'};
var _mordrax$cotwelm$Monsters_Types$WalkingCorpse = {ctor: 'WalkingCorpse'};
var _mordrax$cotwelm$Monsters_Types$HugeOgre = {ctor: 'HugeOgre'};
var _mordrax$cotwelm$Monsters_Types$Viper = {ctor: 'Viper'};
var _mordrax$cotwelm$Monsters_Types$GreenSlime = {ctor: 'GreenSlime'};
var _mordrax$cotwelm$Monsters_Types$GiantScorpion = {ctor: 'GiantScorpion'};
var _mordrax$cotwelm$Monsters_Types$CarrionCreeper = {ctor: 'CarrionCreeper'};
var _mordrax$cotwelm$Monsters_Types$GiantBat = {ctor: 'GiantBat'};
var _mordrax$cotwelm$Monsters_Types$GiantTrapdoorSpider = {ctor: 'GiantTrapdoorSpider'};
var _mordrax$cotwelm$Monsters_Types$Skeleton = {ctor: 'Skeleton'};
var _mordrax$cotwelm$Monsters_Types$WildDog = {ctor: 'WildDog'};
var _mordrax$cotwelm$Monsters_Types$GiantRedAnt = {ctor: 'GiantRedAnt'};
var _mordrax$cotwelm$Monsters_Types$LargeSnake = {ctor: 'LargeSnake'};
var _mordrax$cotwelm$Monsters_Types$GiantRat = {ctor: 'GiantRat'};
var _mordrax$cotwelm$Monsters_Types$Kobold = {ctor: 'Kobold'};
var _mordrax$cotwelm$Monsters_Types$monsterRanking = {
	ctor: '::',
	_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$AnimatedWoodenStatue, _1: 0},
	_1: {
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$GreenSlime, _1: 1},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$AnimatedBronzeStatue, _1: 2},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$GiantRat, _1: 3},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$LargeSnake, _1: 4},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$SmirkingSneakThief, _1: 5},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$GiantBat, _1: 6},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$AnimatedMarbleStatue, _1: 7},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$Goblin, _1: 8},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$Bandit, _1: 9},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$AnimatedIronStatue, _1: 10},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$Hobgoblin, _1: 11},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$WalkingCorpse, _1: 12},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$WildDog, _1: 13},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$GrayWolf, _1: 14},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$Skeleton, _1: 15},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$GiantTrapdoorSpider, _1: 16},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$CarrionCreeper, _1: 17},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$GelatinousGlob, _1: 18},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$Kobold, _1: 19},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$GiantScorpion, _1: 20},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$Shadow, _1: 21},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$Viper, _1: 22},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$WhiteWolf, _1: 23},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$EerieGhost, _1: 24},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$BrownBear, _1: 25},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$IceDevil, _1: 26},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$HugeLizard, _1: 27},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$WaterElemental, _1: 28},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$HornedDevil, _1: 29},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$BarrowWight, _1: 30},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$GiantRedAnt, _1: 31},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$SpikedDevil, _1: 32},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$GruesomeTroll, _1: 33},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$RatMan, _1: 34},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$CaveBear, _1: 35},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$IceElemental, _1: 36},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$EarthElemental, _1: 37},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$Spectre, _1: 38},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$FireElemental, _1: 39},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$MagmaElemental, _1: 40},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$BearMan, _1: 41},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$WolfMan, _1: 42},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$BullMan, _1: 43},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$WindElemental, _1: 44},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$DustElemental, _1: 45},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$Wizard, _1: 46},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$HugeOgre, _1: 47},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$EvilWarrior, _1: 48},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$Necromancer, _1: 49},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$Manticore, _1: 50},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$Vampire, _1: 51},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$HillGiant, _1: 52},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$StoneGiant, _1: 53},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$FireGiant, _1: 54},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$DarkWraith, _1: 55},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$FrostGiant, _1: 56},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$TwoHeadedGiant, _1: 57},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$AbyssFiend, _1: 58},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$StoneGiantKing, _1: 59},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$FireGiantKing, _1: 60},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$FrostGiantKing, _1: 61},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$HillGiantKing, _1: 62},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$RedDragon, _1: 63},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$BlueDragon, _1: 64},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$WhiteDragon, _1: 65},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$GreenDragon, _1: 66},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Monsters_Types$Surtur, _1: 67},
																																																																				_1: {ctor: '[]'}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _mordrax$cotwelm$Monsters_Types$cappedRank = function (maxRank) {
	var lessThanMaxRank = function (_p0) {
		var _p1 = _p0;
		return _elm_lang$core$Native_Utils.cmp(_p1._1, maxRank) < 0;
	};
	return A2(
		_elm_lang$core$List$map,
		_elm_lang$core$Tuple$first,
		A2(_elm_lang$core$List$filter, lessThanMaxRank, _mordrax$cotwelm$Monsters_Types$monsterRanking));
};
var _mordrax$cotwelm$Monsters_Types$monsterTypesToList = {
	ctor: '::',
	_0: _mordrax$cotwelm$Monsters_Types$Kobold,
	_1: {
		ctor: '::',
		_0: _mordrax$cotwelm$Monsters_Types$GiantRat,
		_1: {
			ctor: '::',
			_0: _mordrax$cotwelm$Monsters_Types$LargeSnake,
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$Monsters_Types$GiantRedAnt,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Monsters_Types$WildDog,
					_1: {
						ctor: '::',
						_0: _mordrax$cotwelm$Monsters_Types$Skeleton,
						_1: {
							ctor: '::',
							_0: _mordrax$cotwelm$Monsters_Types$GiantTrapdoorSpider,
							_1: {
								ctor: '::',
								_0: _mordrax$cotwelm$Monsters_Types$GiantBat,
								_1: {
									ctor: '::',
									_0: _mordrax$cotwelm$Monsters_Types$CarrionCreeper,
									_1: {
										ctor: '::',
										_0: _mordrax$cotwelm$Monsters_Types$GiantScorpion,
										_1: {
											ctor: '::',
											_0: _mordrax$cotwelm$Monsters_Types$GreenSlime,
											_1: {
												ctor: '::',
												_0: _mordrax$cotwelm$Monsters_Types$Viper,
												_1: {
													ctor: '::',
													_0: _mordrax$cotwelm$Monsters_Types$HugeOgre,
													_1: {
														ctor: '::',
														_0: _mordrax$cotwelm$Monsters_Types$WalkingCorpse,
														_1: {
															ctor: '::',
															_0: _mordrax$cotwelm$Monsters_Types$HugeLizard,
															_1: {
																ctor: '::',
																_0: _mordrax$cotwelm$Monsters_Types$Goblin,
																_1: {
																	ctor: '::',
																	_0: _mordrax$cotwelm$Monsters_Types$Hobgoblin,
																	_1: {
																		ctor: '::',
																		_0: _mordrax$cotwelm$Monsters_Types$Shadow,
																		_1: {
																			ctor: '::',
																			_0: _mordrax$cotwelm$Monsters_Types$SmirkingSneakThief,
																			_1: {
																				ctor: '::',
																				_0: _mordrax$cotwelm$Monsters_Types$GrayWolf,
																				_1: {
																					ctor: '::',
																					_0: _mordrax$cotwelm$Monsters_Types$WhiteWolf,
																					_1: {
																						ctor: '::',
																						_0: _mordrax$cotwelm$Monsters_Types$BrownBear,
																						_1: {
																							ctor: '::',
																							_0: _mordrax$cotwelm$Monsters_Types$CaveBear,
																							_1: {
																								ctor: '::',
																								_0: _mordrax$cotwelm$Monsters_Types$GelatinousGlob,
																								_1: {
																									ctor: '::',
																									_0: _mordrax$cotwelm$Monsters_Types$GruesomeTroll,
																									_1: {
																										ctor: '::',
																										_0: _mordrax$cotwelm$Monsters_Types$Manticore,
																										_1: {
																											ctor: '::',
																											_0: _mordrax$cotwelm$Monsters_Types$AnimatedBronzeStatue,
																											_1: {
																												ctor: '::',
																												_0: _mordrax$cotwelm$Monsters_Types$AnimatedIronStatue,
																												_1: {
																													ctor: '::',
																													_0: _mordrax$cotwelm$Monsters_Types$AnimatedMarbleStatue,
																													_1: {
																														ctor: '::',
																														_0: _mordrax$cotwelm$Monsters_Types$AnimatedWoodenStatue,
																														_1: {
																															ctor: '::',
																															_0: _mordrax$cotwelm$Monsters_Types$Bandit,
																															_1: {
																																ctor: '::',
																																_0: _mordrax$cotwelm$Monsters_Types$EvilWarrior,
																																_1: {
																																	ctor: '::',
																																	_0: _mordrax$cotwelm$Monsters_Types$Wizard,
																																	_1: {
																																		ctor: '::',
																																		_0: _mordrax$cotwelm$Monsters_Types$Necromancer,
																																		_1: {
																																			ctor: '::',
																																			_0: _mordrax$cotwelm$Monsters_Types$BarrowWight,
																																			_1: {
																																				ctor: '::',
																																				_0: _mordrax$cotwelm$Monsters_Types$DarkWraith,
																																				_1: {
																																					ctor: '::',
																																					_0: _mordrax$cotwelm$Monsters_Types$EerieGhost,
																																					_1: {
																																						ctor: '::',
																																						_0: _mordrax$cotwelm$Monsters_Types$Spectre,
																																						_1: {
																																							ctor: '::',
																																							_0: _mordrax$cotwelm$Monsters_Types$Vampire,
																																							_1: {
																																								ctor: '::',
																																								_0: _mordrax$cotwelm$Monsters_Types$IceDevil,
																																								_1: {
																																									ctor: '::',
																																									_0: _mordrax$cotwelm$Monsters_Types$RatMan,
																																									_1: {
																																										ctor: '::',
																																										_0: _mordrax$cotwelm$Monsters_Types$WolfMan,
																																										_1: {
																																											ctor: '::',
																																											_0: _mordrax$cotwelm$Monsters_Types$BearMan,
																																											_1: {
																																												ctor: '::',
																																												_0: _mordrax$cotwelm$Monsters_Types$BullMan,
																																												_1: {
																																													ctor: '::',
																																													_0: _mordrax$cotwelm$Monsters_Types$SpikedDevil,
																																													_1: {
																																														ctor: '::',
																																														_0: _mordrax$cotwelm$Monsters_Types$HornedDevil,
																																														_1: {
																																															ctor: '::',
																																															_0: _mordrax$cotwelm$Monsters_Types$AbyssFiend,
																																															_1: {
																																																ctor: '::',
																																																_0: _mordrax$cotwelm$Monsters_Types$WindElemental,
																																																_1: {
																																																	ctor: '::',
																																																	_0: _mordrax$cotwelm$Monsters_Types$DustElemental,
																																																	_1: {
																																																		ctor: '::',
																																																		_0: _mordrax$cotwelm$Monsters_Types$FireElemental,
																																																		_1: {
																																																			ctor: '::',
																																																			_0: _mordrax$cotwelm$Monsters_Types$WaterElemental,
																																																			_1: {
																																																				ctor: '::',
																																																				_0: _mordrax$cotwelm$Monsters_Types$MagmaElemental,
																																																				_1: {
																																																					ctor: '::',
																																																					_0: _mordrax$cotwelm$Monsters_Types$IceElemental,
																																																					_1: {
																																																						ctor: '::',
																																																						_0: _mordrax$cotwelm$Monsters_Types$EarthElemental,
																																																						_1: {
																																																							ctor: '::',
																																																							_0: _mordrax$cotwelm$Monsters_Types$HillGiant,
																																																							_1: {
																																																								ctor: '::',
																																																								_0: _mordrax$cotwelm$Monsters_Types$TwoHeadedGiant,
																																																								_1: {
																																																									ctor: '::',
																																																									_0: _mordrax$cotwelm$Monsters_Types$FrostGiant,
																																																									_1: {
																																																										ctor: '::',
																																																										_0: _mordrax$cotwelm$Monsters_Types$StoneGiant,
																																																										_1: {
																																																											ctor: '::',
																																																											_0: _mordrax$cotwelm$Monsters_Types$FireGiant,
																																																											_1: {
																																																												ctor: '::',
																																																												_0: _mordrax$cotwelm$Monsters_Types$Surtur,
																																																												_1: {
																																																													ctor: '::',
																																																													_0: _mordrax$cotwelm$Monsters_Types$FireGiantKing,
																																																													_1: {
																																																														ctor: '::',
																																																														_0: _mordrax$cotwelm$Monsters_Types$FrostGiantKing,
																																																														_1: {
																																																															ctor: '::',
																																																															_0: _mordrax$cotwelm$Monsters_Types$HillGiantKing,
																																																															_1: {
																																																																ctor: '::',
																																																																_0: _mordrax$cotwelm$Monsters_Types$StoneGiantKing,
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: _mordrax$cotwelm$Monsters_Types$RedDragon,
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: _mordrax$cotwelm$Monsters_Types$BlueDragon,
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: _mordrax$cotwelm$Monsters_Types$WhiteDragon,
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: _mordrax$cotwelm$Monsters_Types$GreenDragon,
																																																																				_1: {ctor: '[]'}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _mordrax$cotwelm$Monsters_Types$Devil = {ctor: 'Devil'};
var _mordrax$cotwelm$Monsters_Types$Giant = {ctor: 'Giant'};
var _mordrax$cotwelm$Monsters_Types$Elemental = {ctor: 'Elemental'};
var _mordrax$cotwelm$Monsters_Types$Dragon = {ctor: 'Dragon'};
var _mordrax$cotwelm$Monsters_Types$Other = {ctor: 'Other'};
var _mordrax$cotwelm$Monsters_Types$Statue = {ctor: 'Statue'};
var _mordrax$cotwelm$Monsters_Types$AnimalMan = {ctor: 'AnimalMan'};
var _mordrax$cotwelm$Monsters_Types$Animal = {ctor: 'Animal'};
var _mordrax$cotwelm$Monsters_Types$Canine = {ctor: 'Canine'};
var _mordrax$cotwelm$Monsters_Types$Humanoid = {ctor: 'Humanoid'};
var _mordrax$cotwelm$Monsters_Types$Undead = {ctor: 'Undead'};
var _mordrax$cotwelm$Monsters_Types$GiantInsect = {ctor: 'GiantInsect'};

var _mordrax$cotwelm$Monsters_Model$setVisible = F2(
	function (val, monster) {
		return _elm_lang$core$Native_Utils.update(
			monster,
			{visible: val});
	});
var _mordrax$cotwelm$Monsters_Model$setSpeed = F2(
	function (val, monster) {
		return _elm_lang$core$Native_Utils.update(
			monster,
			{speed: val});
	});
var _mordrax$cotwelm$Monsters_Model$setAttacks = F2(
	function (val, monster) {
		return _elm_lang$core$Native_Utils.update(
			monster,
			{attacks: val});
	});
var _mordrax$cotwelm$Monsters_Model$setAttackTypes = F2(
	function (val, monster) {
		return _elm_lang$core$Native_Utils.update(
			monster,
			{attackTypes: val});
	});
var _mordrax$cotwelm$Monsters_Model$setBodySize = F2(
	function (val, monster) {
		return _elm_lang$core$Native_Utils.update(
			monster,
			{bodySize: val});
	});
var _mordrax$cotwelm$Monsters_Model$setExpLevel = F2(
	function (val, monster) {
		return _elm_lang$core$Native_Utils.update(
			monster,
			{expLevel: val});
	});
var _mordrax$cotwelm$Monsters_Model$setEquipmentSlot = F2(
	function (slot, _p0) {
		var _p1 = _p0;
		return A2(
			_elm_lang$core$Result$map,
			function (eq) {
				return _elm_lang$core$Native_Utils.update(
					_p1,
					{equipment: eq});
			},
			A2(_mordrax$cotwelm$Equipment$setSlot_, slot, _p1.equipment));
	});
var _mordrax$cotwelm$Monsters_Model$setEquipmentSlotIfAble = F2(
	function (slot, monster) {
		return A2(
			_elm_lang$core$Result$withDefault,
			monster,
			A2(_mordrax$cotwelm$Monsters_Model$setEquipmentSlot, slot, monster));
	});
var _mordrax$cotwelm$Monsters_Model$setEquipment = F2(
	function (val, monster) {
		return _elm_lang$core$Native_Utils.update(
			monster,
			{equipment: val});
	});
var _mordrax$cotwelm$Monsters_Model$setAttributes = F2(
	function (val, monster) {
		return _elm_lang$core$Native_Utils.update(
			monster,
			{attributes: val});
	});
var _mordrax$cotwelm$Monsters_Model$scaleAttributes = F5(
	function (str, dex, con, $int, monster) {
		return _elm_lang$core$Native_Utils.update(
			monster,
			{
				attributes: A5(_mordrax$cotwelm$Attributes$scale, str, dex, con, $int, monster.attributes)
			});
	});
var _mordrax$cotwelm$Monsters_Model$setStats = F2(
	function (val, monster) {
		return _elm_lang$core$Native_Utils.update(
			monster,
			{stats: val});
	});
var _mordrax$cotwelm$Monsters_Model$setPosition = F2(
	function (val, monster) {
		return _elm_lang$core$Native_Utils.update(
			monster,
			{position: val});
	});
var _mordrax$cotwelm$Monsters_Model$setMonsterType = F2(
	function (val, monster) {
		return _elm_lang$core$Native_Utils.update(
			monster,
			{monsterType: val});
	});
var _mordrax$cotwelm$Monsters_Model$setType_ = F2(
	function (val, monster) {
		return _elm_lang$core$Native_Utils.update(
			monster,
			{type_: val});
	});
var _mordrax$cotwelm$Monsters_Model$setName = F2(
	function (val, monster) {
		return _elm_lang$core$Native_Utils.update(
			monster,
			{name: val});
	});
var _mordrax$cotwelm$Monsters_Model$Monster = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return {name: a, type_: b, monsterType: c, position: d, stats: e, attributes: f, equipment: g, expLevel: h, bodySize: i, attackTypes: j, attacks: k, speed: l, visible: m};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};

var _mordrax$cotwelm$Utils_LexicalRandom$choices = F2(
	function ($default, list) {
		return A2(
			_mgold$elm_random_pcg$Random_Pcg$andThen,
			_elm_lang$core$Maybe$withDefault($default),
			_mgold$elm_random_pcg$Random_Pcg$sample(list));
	});
var _mordrax$cotwelm$Utils_LexicalRandom$combine = function (generators) {
	var _p0 = generators;
	if (_p0.ctor === '[]') {
		return _mgold$elm_random_pcg$Random_Pcg$constant(
			{ctor: '[]'});
	} else {
		return A3(
			_mgold$elm_random_pcg$Random_Pcg$map2,
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			_p0._0,
			_mordrax$cotwelm$Utils_LexicalRandom$combine(_p0._1));
	}
};
var _mordrax$cotwelm$Utils_LexicalRandom$generator = F3(
	function (filler, lexicon, key) {
		var _p1 = A2(_elm_lang$core$Dict$get, key, lexicon);
		if (_p1.ctor === 'Nothing') {
			return _mgold$elm_random_pcg$Random_Pcg$constant(filler);
		} else {
			var reducedLexicon = A2(_elm_lang$core$Dict$remove, key, lexicon);
			var fragmentToGenerator = function (fragment) {
				var _p2 = fragment;
				if (_p2.ctor === 'Key') {
					return A3(_mordrax$cotwelm$Utils_LexicalRandom$generator, filler, reducedLexicon, _p2._0);
				} else {
					return _mgold$elm_random_pcg$Random_Pcg$constant(_p2._0);
				}
			};
			var definitionToGenerator = function (definition) {
				return A2(
					_mgold$elm_random_pcg$Random_Pcg$map,
					_elm_lang$core$String$join(''),
					_mordrax$cotwelm$Utils_LexicalRandom$combine(
						A2(_elm_lang$core$List$map, fragmentToGenerator, definition)));
			};
			return A2(
				_mordrax$cotwelm$Utils_LexicalRandom$choices,
				_mgold$elm_random_pcg$Random_Pcg$constant(''),
				A2(_elm_lang$core$List$map, definitionToGenerator, _p1._0));
		}
	});
var _mordrax$cotwelm$Utils_LexicalRandom$Key = function (a) {
	return {ctor: 'Key', _0: a};
};
var _mordrax$cotwelm$Utils_LexicalRandom$Constant = function (a) {
	return {ctor: 'Constant', _0: a};
};
var _mordrax$cotwelm$Utils_LexicalRandom$fromString = function (stringLexicon) {
	var stringToDefinition = function (stringDefinition) {
		var chunkToFrags = function (chunk) {
			var _p3 = A2(_elm_lang$core$String$split, '}', chunk);
			if (((_p3.ctor === '::') && (_p3._1.ctor === '::')) && (_p3._1._1.ctor === '[]')) {
				return {
					ctor: '::',
					_0: _mordrax$cotwelm$Utils_LexicalRandom$Key(_p3._0),
					_1: {
						ctor: '::',
						_0: _mordrax$cotwelm$Utils_LexicalRandom$Constant(_p3._1._0),
						_1: {ctor: '[]'}
					}
				};
			} else {
				return {
					ctor: '::',
					_0: _mordrax$cotwelm$Utils_LexicalRandom$Constant(chunk),
					_1: {ctor: '[]'}
				};
			}
		};
		return _elm_lang$core$List$concat(
			A2(
				_elm_lang$core$List$map,
				chunkToFrags,
				A2(_elm_lang$core$String$split, '{', stringDefinition)));
	};
	var addToLexiconKey = F3(
		function (key, line, lexicon) {
			var existingDefinitions = A2(
				_elm_lang$core$Maybe$withDefault,
				{ctor: '[]'},
				A2(_elm_lang$core$Dict$get, key, lexicon));
			var newDefinitions = A2(
				_elm_lang$core$List$map,
				stringToDefinition,
				A2(
					_elm_lang$core$List$filter,
					F2(
						function (x, y) {
							return !_elm_lang$core$Native_Utils.eq(x, y);
						})(''),
					A2(
						_elm_lang$core$List$map,
						_elm_lang$core$String$trim,
						A2(_elm_lang$core$String$split, ',', line))));
			return A3(
				_elm_lang$core$Dict$insert,
				key,
				A2(_elm_lang$core$List$append, existingDefinitions, newDefinitions),
				lexicon);
		});
	var addLine = F2(
		function (line, _p4) {
			var _p5 = _p4;
			var _p7 = _p5._1;
			var _p6 = _p5._0;
			return A2(
				_elm_lang$core$Regex$contains,
				_elm_lang$core$Regex$regex('^\\s*#'),
				line) ? {ctor: '_Tuple2', _0: _p6, _1: _p7} : (A2(
				_elm_lang$core$Regex$contains,
				_elm_lang$core$Regex$regex('^\\s'),
				line) ? {
				ctor: '_Tuple2',
				_0: _p6,
				_1: A3(addToLexiconKey, _p6, line, _p7)
			} : {ctor: '_Tuple2', _0: line, _1: _p7});
		});
	return _elm_lang$core$Tuple$second(
		A3(
			_elm_lang$core$List$foldl,
			addLine,
			{ctor: '_Tuple2', _0: 'default', _1: _elm_lang$core$Dict$empty},
			_elm_lang$core$String$lines(stringLexicon)));
};

var _mordrax$cotwelm$Utils_LexicalRandomNames$nameLexicons = '\n\ncompound\n    {noun} {noun}\n    {noun} {verb}\n    {verb} {noun}\n    {color} {noun}\n    {adjective} {noun}\n    {adjective} {verb}\n\ncolor\n    blue,red,gray,purple,vermillion,yellow,black,white,azure\n\nnoun\n    archer\n    aristocracy\n    armor\n    ballista\n    baron\n    baroness\n    baronet\n    bastion\n    battering ram\n    battle axe\n    birthright\n    castle\n    catapult\n    chain mail\n    chateau\n    chieftain\n    chivalry\n    count\n    countess\n    court jester\n    crenelations\n    crest\n    crossbow\n    crown\n    crown jewels\n    curtain wall\n    donjon\n    dragon\n    drawbridge\n    duke\n    duchess\n    dungeon\n    dynasty\n    earl\n    empire\n    feudal\n    fort\n    fortress\n    gatehouse\n    grand duke\n    great hall\n    heraldry\n    hereditary\n    highness\n    honor\n    imperial\n    jester\n    jousting\n    keep\n    king\n    kingdom\n    knight\n    lady\n    lady-in-waiting\n    lance\n    lord\n    maid\n    maiden\n    mangonel\n    manor\n    manor house\n    marquis\n    Middle Ages\n    moat\n    monarch\n    noble\n    nobility\n    onager\n    palace\n    peel tower\n    peer\n    prince\n    princess\n    queen\n    realm\n    reign\n    Renaissance\n    royal\n    royalty\n    scepter\n    serf\n    shield\n    siege\n    sovereign\n    sword\n    titles\n    tower\n    trebuchet\n    turret\n    unicorn\n    viscount\n    wall\n    watchtower\n    aardvark\n    abacus\n    abbey\n    abdomen\n    ability\n    abolishment\n    abroad\n    abuse\n    accelerant\n    accelerator\n    access\n    accident\n    accommodation\n    accompanist\n    accordion\n    account\n    accountant\n    achiever\n    acid\n    acknowledgment\n    acoustic\n    acoustics\n    acrylic\n    act\n    action\n    activity\n    actor\n    actress\n    acupuncture\n    ad\n    adapter\n    addiction\n    addition\n    address\n    adjustment\n    administration\n    adrenalin\n    adult\n    adulthood\n    advance\n    advancement\n    advantage\n    advertisement\n    advertising\n    advice\n    affair\n    affect\n    aftermath\n    afternoon\n    aftershave\n    aftershock\n    afterthought\n    age\n    agency\n    agenda\n    agent\n    aggression\n    aglet\n    agreement\n    aid\n    air\n    airbag\n    airbus\n    airfare\n    airforce\n    airline\n    airmail\n    airplane\n    airport\n    airship\n    alarm\n    alb\n    albatross\n    alcohol\n    alcove\n    alder\n    algebra\n    alibi\n    allergist\n    alley\n    alligator\n    alloy\n    almanac\n    almond\n    alpaca\n    alpenglow\n    alpenhorn\n    alpha\n    alphabet\n    alternative\n    altitude\n    alto\n    aluminium\n    aluminum\n    ambassador\n    ambition\n    ambulance\n    amendment\n    amount\n    amusement\n    anagram\n    analgesia\n    analog\n    analogue\n    analogy\n    analysis\n    analyst\n    anatomy\n    anesthesiology\n    anethesiologist\n    anger\n    angiosperm\n    angle\n    angora\n    angstrom\n    anguish\n    animal\n    anime\n    ankle\n    anklet\n    annual\n    anorak\n    answer\n    ant\n    anteater\n    antechamber\n    antelope\n    anthony\n    anthropology\n    antler\n    anxiety\n    anybody\n    anything\n    anywhere\n    apartment\n    ape\n    aperitif\n    apology\n    apparatus\n    apparel\n    appeal\n    appearance\n    appendix\n    applause\n    apple\n    applewood\n    appliance\n    application\n    appointment\n    approval\n    apron\n    apse\n    aquifer\n    arch\n    archaeology\n    archeology\n    archer\n    architect\n    architecture\n    arch-rival\n    area\n    argument\n    arithmetic\n    arm\n    armadillo\n    armament\n    armchair\n    armoire\n    armor\n    arm-rest\n    army\n    arrival\n    arrow\n    art\n    artichoke\n    article\n    artificer\n    ascot\n    ash\n    ashram\n    ashtray\n    aside\n    ask\n    asparagus\n    aspect\n    asphalt\n    assignment\n    assist\n    assistance\n    assistant\n    associate\n    association\n    assumption\n    asterisk\n    astrakhan\n    astrolabe\n    astrologer\n    astrology\n    astronomy\n    atelier\n    athlete\n    athletics\n    atmosphere\n    atom\n    atrium\n    attachment\n    attack\n    attempt\n    attendant\n    attention\n    attenuation\n    attic\n    attitude\n    attorney\n    attraction\n    audience\n    auditorium\n    aunt\n    author\n    authorisation\n    authority\n    authorization\n    automaton\n    avalanche\n    avenue\n    average\n    award\n    awareness\n    azimuth\n    babe\n    baboon\n    babushka\n    baby\n    back\n    backbone\n    backdrop\n    background\n    backpack\n    bacon\n    bad\n    badge\n    badger\n    bafflement\n    bag\n    bagel\n    baggage\n    bagpipe\n    bail\n    bait\n    bake\n    baker\n    bakery\n    bakeware\n    balaclava\n    balalaika\n    balance\n    balcony\n    ball\n    ballet\n    balloon\n    ballpark\n    bamboo\n    banana\n    band\n    bandana\n    bandanna\n    bandolier\n    bangle\n    banjo\n    bank\n    bankbook\n    banker\n    banquette\n    baobab\n    bar\n    barbeque\n    barber\n    barbiturate\n    barge\n    baritone\n    barium\n    barn\n    barometer\n    barracks\n    barstool\n    base\n    baseball\n    basement\n    basin\n    basis\n    basket\n    basketball\n    bass\n    bassinet\n    bassoon\n    bat\n    bath\n    bather\n    bathhouse\n    bathrobe\n    bathroom\n    bathtub\n    batter\n    battery\n    batting\n    battle\n    battleship\n    bay\n    bayou\n    beach\n    bead\n    beak\n    beam\n    bean\n    beanie\n    beanstalk\n    bear\n    beard\n    beast\n    beat\n    beautiful\n    beauty\n    beaver\n    bed\n    bedroom\n    bee\n    beech\n    beef\n    beer\n    beet\n    beetle\n    beggar\n    beginner\n    beginning\n    begonia\n    behavior\n    beheading\n    behest\n    being\n    belfry\n    belief\n    believe\n    bell\n    belligerency\n    bellows\n    belly\n    belt\n    bench\n    bend\n    beneficiary\n    benefit\n    bengal\n    beret\n    berry\n    bestseller\n    best-seller\n    bet\n    beverage\n    beyond\n    bibliography\n    bicycle\n    bid\n    bidet\n    bifocals\n    big\n    big-rig\n    bijou\n    bike\n    bikini\n    bill\n    billboard\n    bin\n    biology\n    biplane\n    birch\n    bird\n    birdbath\n    birdcage\n    birdhouse\n    bird-watcher\n    birth\n    birthday\n    bit\n    bite\n    bitter\n    black\n    blackberry\n    blackboard\n    blackfish\n    bladder\n    blade\n    blame\n    blank\n    blanket\n    blazer\n    blight\n    blind\n    blinker\n    blister\n    blizzard\n    block\n    blocker\n    blood\n    bloodflow\n    bloom\n    bloomers\n    blossom\n    blouse\n    blow\n    blowgun\n    blowhole\n    blue\n    blueberry\n    boar\n    board\n    boat\n    boat-building\n    boatload\n    boatyard\n    bobcat\n    body\n    bog\n    bolero\n    bolt\n    bomb\n    bomber\n    bondsman\n    bone\n    bongo\n    bonnet\n    bonsai\n    bonus\n    boogeyman\n    book\n    bookcase\n    bookend\n    booklet\n    booster\n    boot\n    bootee\n    bootie\n    boots\n    booty\n    border\n    bore\n    bosom\n    boss\n    botany\n    bother\n    bottle\n    bottling\n    bottom\n    bottom-line\n    boudoir\n    bough\n    boundary\n    bow\n    bower\n    bowl\n    bowler\n    bowling\n    bowtie\n    box\n    boxer\n    boxspring\n    boy\n    boyfriend\n    bra\n    brace\n    bracelet\n    bracket\n    brain\n    brake\n    branch\n    brand\n    brandy\n    brass\n    brassiere\n    bratwurst\n    brave\n    bread\n    breadcrumb\n    break\n    breakfast\n    breakpoint\n    breast\n    breastplate\n    breath\n    breeze\n    bribery\n    brick\n    bricklaying\n    bridge\n    brief\n    briefs\n    brilliant\n    british\n    broad\n    broccoli\n    brochure\n    broiler\n    broker\n    brome\n    bronchitis\n    bronco\n    bronze\n    brooch\n    brood\n    brook\n    broom\n    brother\n    brother-in-law\n    brow\n    brown\n    brush\n    brushfire\n    brushing\n    bubble\n    bucket\n    buckle\n    bud\n    buddy\n    budget\n    buffer\n    buffet\n    bug\n    buggy\n    bugle\n    building\n    bulb\n    bull\n    bulldozer\n    bullet\n    bull-fighter\n    bumper\n    bun\n    bunch\n    bungalow\n    bunghole\n    bunkhouse\n    burglar\n    burlesque\n    burn\n    burn-out\n    burst\n    bus\n    bush\n    business\n    bust\n    bustle\n    butane\n    butcher\n    butter\n    button\n    buy\n    buyer\n    buzzard\n    cabana\n    cabbage\n    cabin\n    cabinet\n    cable\n    caboose\n    cacao\n    cactus\n    caddy\n    cadet\n    cafe\n    caftan\n    cake\n    calcification\n    calculation\n    calculator\n    calculus\n    calendar\n    calf\n    calico\n    call\n    calm\n    camel\n    cameo\n    camera\n    camp\n    campaign\n    campanile\n    can\n    canal\n    cancel\n    cancer\n    candelabra\n    candidate\n    candle\n    candy\n    cane\n    cannon\n    canoe\n    canon\n    canopy\n    canteen\n    canvas\n    cap\n    cape\n    capital\n    capitulation\n    capon\n    cappelletti\n    cappuccino\n    captain\n    caption\n    car\n    caravan\n    carbon\n    card\n    cardboard\n    cardigan\n    care\n    career\n    cargo\n    carload\n    carnation\n    carol\n    carotene\n    carp\n    carpenter\n    carpet\n    carport\n    carriage\n    carrier\n    carrot\n    carry\n    cart\n    cartilage\n    cartload\n    cartoon\n    cartridge\n    cascade\n    case\n    casement\n    cash\n    cashier\n    casino\n    casserole\n    cassock\n    cast\n    castanet\n    castanets\n    castle\n    cat\n    catacomb\n    catamaran\n    catch\n    category\n    caterpillar\n    cathedral\n    catsup\n    cattle\n    cauliflower\n    cause\n    caution\n    cave\n    c-clamp\n    cd\n    ceiling\n    celebration\n    celeriac\n    celery\n    celeste\n    cell\n    cellar\n    cello\n    celsius\n    cement\n    cemetery\n    cenotaph\n    census\n    cent\n    center\n    centimeter\n    centurion\n    century\n    cephalopod\n    ceramic\n    cereal\n    certification\n    cesspool\n    chafe\n    chain\n    chainstay\n    chair\n    chairlift\n    chairman\n    chairperson\n    chaise\n    chalet\n    chalice\n    chalk\n    challenge\n    champion\n    championship\n    chance\n    chandelier\n    change\n    channel\n    chaos\n    chap\n    chapel\n    chapter\n    character\n    chard\n    charge\n    charity\n    charlatan\n    charles\n    charm\n    chart\n    chastity\n    chasuble\n    chateau\n    chauffeur\n    chauvinist\n    check\n    checkroom\n    cheek\n    cheetah\n    chef\n    chemical\n    chemistry\n    cheque\n    cherries\n    cherry\n    chess\n    chest\n    chick\n    chicken\n    chicory\n    chief\n    chiffonier\n    child\n    childhood\n    children\n    chill\n    chime\n    chimpanzee\n    chin\n    chino\n    chip\n    chipmunk\n    chit-chat\n    chivalry\n    chive\n    chocolate\n    choice\n    choker\n    chop\n    chopstick\n    chord\n    chowder\n    chrome\n    chromolithograph\n    chronograph\n    chronometer\n    chub\n    chug\n    church\n    churn\n    cicada\n    cigarette\n    cinema\n    circle\n    circulation\n    circumference\n    cirrus\n    citizenship\n    city\n    civilisation\n    claim\n    clam\n    clank\n    clapboard\n    clarinet\n    clasp\n    class\n    classic\n    classroom\n    clause\n    clave\n    clavicle\n    clavier\n    cleaner\n    cleat\n    cleavage\n    clef\n    cleric\n    clerk\n    click\n    client\n    cliff\n    climate\n    climb\n    clip\n    clipper\n    cloak\n    cloakroom\n    clock\n    clockwork\n    clogs\n    cloister\n    close\n    closet\n    cloth\n    clothes\n    clothing\n    cloud\n    cloudburst\n    cloudy\n    clove\n    clover\n    club\n    clue\n    clutch\n    coach\n    coal\n    coast\n    coat\n    cob\n    cobweb\n    cockpit\n    cockroach\n    cocktail\n    cocoa\n    cod\n    code\n    codon\n    codpiece\n    coevolution\n    coffee\n    coffin\n    coil\n    coin\n    coinsurance\n    coke\n    cold\n    coliseum\n    collar\n    collection\n    college\n    collision\n    colloquia\n    colon\n    colonisation\n    colony\n    color\n    colt\n    column\n    columnist\n    comb\n    combat\n    combination\n    combine\n    comfort\n    comfortable\n    comic\n    comma\n    command\n    comment\n    commerce\n    commercial\n    commission\n    committee\n    common\n    communicant\n    communication\n    community\n    company\n    comparison\n    compassion\n    competition\n    competitor\n    complaint\n    complement\n    complex\n    component\n    comportment\n    composer\n    composition\n    compost\n    comprehension\n    compulsion\n    computer\n    comradeship\n    concentrate\n    concept\n    concern\n    concert\n    conclusion\n    concrete\n    condition\n    condominium\n    condor\n    conductor\n    cone\n    confectionery\n    conference\n    confidence\n    confirmation\n    conflict\n    confusion\n    conga\n    congo\n    congress\n    congressman\n    congressperson\n    conifer\n    connection\n    consent\n    consequence\n    consideration\n    consist\n    console\n    consonant\n    conspirator\n    constant\n    constellation\n    construction\n    consul\n    consulate\n    contact\n    contact lens\n    contagion\n    content\n    contest\n    context\n    continent\n    contract\n    contrail\n    contrary\n    contribution\n    control\n    convection\n    conversation\n    convert\n    convertible\n    cook\n    cookie\n    cooking\n    coonskin\n    cope\n    cop-out\n    copper\n    co-producer\n    copy\n    copyright\n    copywriter\n    cord\n    corduroy\n    cork\n    cormorant\n    corn\n    corner\n    cornerstone\n    cornet\n    corral\n    correspondent\n    corridor\n    corruption\n    corsage\n    cost\n    costume\n    cot\n    cottage\n    cotton\n    couch\n    cougar\n    cough\n    council\n    councilman\n    councilor\n    councilperson\n    count\n    counter\n    counter-force\n    countess\n    country\n    county\n    couple\n    courage\n    course\n    court\n    cousin\n    covariate\n    cover\n    coverall\n    cow\n    cowbell\n    cowboy\n    crab\n    crack\n    cracker\n    crackers\n    cradle\n    craft\n    craftsman\n    crash\n    crate\n    cravat\n    craw\n    crawdad\n    crayfish\n    crayon\n    crazy\n    cream\n    creative\n    creator\n    creature\n    creche\n    credenza\n    credit\n    creditor\n    creek\n    creme brulee\n    crest\n    crew\n    crib\n    cribbage\n    cricket\n    cricketer\n    crime\n    criminal\n    crinoline\n    criteria\n    criterion\n    criticism\n    crocodile\n    crocus\n    croissant\n    crook\n    crop\n    cross\n    cross-contamination\n    cross-stitch\n    crotch\n    croup\n    crow\n    crowd\n    crown\n    crude\n    crush\n    cry\n    crystallography\n    cub\n    cuckoo\n    cucumber\n    cuff-links\n    cultivar\n    cultivator\n    culture\n    culvert\n    cummerbund\n    cup\n    cupboard\n    cupcake\n    cupola\n    curio\n    curl\n    curler\n    currency\n    current\n    cursor\n    curtain\n    curve\n    cushion\n    custard\n    customer\n    cut\n    cuticle\n    cutlet\n    cutover\n    cutting\n    cyclamen\n    cycle\n    cyclone\n    cylinder\n    cymbal\n    cymbals\n    cynic\n    cyst\n    cytoplasm\n    dad\n    daffodil\n    dagger\n    dahlia\n    daisy\n    damage\n    dame\n    dance\n    dancer\n    dancing\n    danger\n    daniel\n    dare\n    dark\n    dart\n    dash\n    dashboard\n    data\n    database\n    date\n    daughter\n    david\n    day\n    daybed\n    dead\n    deadline\n    deal\n    dealer\n    dear\n    death\n    deathwatch\n    debate\n    debt\n    debtor\n    decade\n    decimal\n    decision\n    deck\n    declination\n    decongestant\n    decrease\n    decryption\n    dedication\n    deep\n    deer\n    defense\n    deficit\n    definition\n    deformation\n    degree\n    delay\n    delete\n    delight\n    delivery\n    demand\n    demur\n    den\n    denim\n    dentist\n    deodorant\n    department\n    departure\n    dependent\n    deployment\n    deposit\n    depression\n    depressive\n    depth\n    deputy\n    derby\n    derrick\n    description\n    desert\n    design\n    designer\n    desire\n    desk\n    dessert\n    destiny\n    destroyer\n    destruction\n    detail\n    detainment\n    detective\n    detention\n    determination\n    development\n    deviance\n    device\n    devil\n    dew\n    dhow\n    diadem\n    diamond\n    diaphragm\n    diarist\n    dibble\n    dickey\n    dictaphone\n    diction\n    dictionary\n    diet\n    difference\n    differential\n    difficulty\n    dig\n    digestion\n    digger\n    digital\n    dignity\n    dilapidation\n    dill\n    dime\n    dimension\n    dimple\n    diner\n    dinghy\n    dinner\n    dinosaur\n    diploma\n    dipstick\n    direction\n    director\n    dirndl\n    dirt\n    disadvantage\n    disarmament\n    disaster\n    discipline\n    disco\n    disconnection\n    discount\n    discovery\n    discrepancy\n    discussion\n    disease\n    disembodiment\n    disengagement\n    disguise\n    disgust\n    dish\n    dishes\n    dishwasher\n    disk\n    display\n    disposer\n    distance\n    distribution\n    distributor\n    district\n    divan\n    diver\n    divide\n    divider\n    diving\n    division\n    dock\n    doctor\n    document\n    doe\n    dog\n    dogsled\n    dogwood\n    doll\n    dollar\n    dolman\n    dolphin\n    domain\n    donkey\n    door\n    doorknob\n    doorpost\n    dory\n    dot\n    double\n    doubling\n    doubt\n    doubter\n    downforce\n    downgrade\n    downtown\n    draft\n    drag\n    dragon\n    dragonfly\n    dragster\n    drain\n    drake\n    drama\n    dramaturge\n    draw\n    drawbridge\n    drawer\n    drawing\n    dream\n    dredger\n    dress\n    dresser\n    dressing\n    drill\n    drink\n    drive\n    driver\n    driveway\n    driving\n    drizzle\n    dromedary\n    drop\n    drug\n    drum\n    drummer\n    drunk\n    dry\n    dryer\n    duck\n    duckling\n    dud\n    due\n    duffel\n    dugout\n    dulcimer\n    dumbwaiter\n    dump\n    dump truck\n    dune buggy\n    dungarees\n    dungeon\n    duplexer\n    dust\n    dust storm\n    duster\n    duty\n    dwarf\n    dwelling\n    dynamo\n    eagle\n    ear\n    eardrum\n    earmuffs\n    earplug\n    earrings\n    earth\n    earthquake\n    earthworm\n    ease\n    easel\n    east\n    eat\n    eave\n    eavesdropper\n    e-book\n    ecclesia\n    eclipse\n    ecliptic\n    economics\n    economy\n    ecumenist\n    eddy\n    edge\n    edger\n    editor\n    editorial\n    education\n    edward\n    eel\n    effacement\n    effect\n    effective\n    efficacy\n    efficiency\n    effort\n    egg\n    egghead\n    eggnog\n    eggplant\n    eight\n    ejector\n    elbow\n    election\n    electricity\n    electrocardiogram\n    element\n    elephant\n    elevator\n    elixir\n    elk\n    ellipse\n    elm\n    elongation\n    embossing\n    emergence\n    emergency\n    emergent\n    emery\n    emotion\n    emphasis\n    employ\n    employee\n    employer\n    employment\n    empowerment\n    emu\n    encirclement\n    encyclopedia\n    end\n    endothelium\n    enemy\n    energy\n    engine\n    engineer\n    engineering\n    enigma\n    enjoyment\n    enquiry\n    entertainment\n    enthusiasm\n    entrance\n    entry\n    environment\n    envy\n    epauliere\n    epee\n    ephemera\n    ephemeris\n    epoch\n    eponym\n    epoxy\n    equal\n    equinox\n    equipment\n    equivalent\n    era\n    e-reader\n    error\n    escape\n    ese\n    espadrille\n    espalier\n    essay\n    establishment\n    estate\n    estimate\n    estrogen\n    estuary\n    ethernet\n    ethics\n    euphonium\n    eurocentrism\n    europe\n    evaluator\n    evening\n    evening-wear\n    event\n    eviction\n    evidence\n    evocation\n    evolution\n    exam\n    examination\n    examiner\n    example\n    exchange\n    excitement\n    exclamation\n    excuse\n    executor\n    exercise\n    exhaust\n    ex-husband\n    exile\n    existence\n    exit\n    expansion\n    expansionism\n    experience\n    expert\n    explanation\n    exposition\n    expression\n    extension\n    extent\n    external\n    extreme\n    ex-wife\n    eye\n    eyeball\n    eyebrow\n    eyebrows\n    eyeglasses\n    eyelash\n    eyelashes\n    eyelid\n    eyelids\n    eyeliner\n    eyestrain\n    face\n    facelift\n    facet\n    facilities\n    facsimile\n    fact\n    factor\n    factory\n    faculty\n    fahrenheit\n    fail\n    failure\n    fairies\n    fairy\n    faith\n    fall\n    falling-out\n    fame\n    familiar\n    family\n    fan\n    fang\n    fanlight\n    fanny\n    fanny-pack\n    farm\n    farmer\n    fascia\n    fat\n    father\n    father-in-law\n    fatigues\n    faucet\n    fault\n    fawn\n    fax\n    fear\n    feast\n    feather\n    feature\n    fedelini\n    fedora\n    fee\n    feed\n    feedback\n    feel\n    feeling\n    feet\n    felony\n    female\n    fen\n    fence\n    fencing\n    fender\n    ferry\n    ferryboat\n    fertilizer\n    few\n    fiber\n    fiberglass\n    fibre\n    fiction\n    fiddle\n    field\n    fifth\n    fight\n    fighter\n    figure\n    figurine\n    file\n    fill\n    filly\n    film\n    filth\n    final\n    finance\n    find\n    finding\n    fine\n    finger\n    fingernail\n    finish\n    finisher\n    fir\n    fire\n    fireman\n    fireplace\n    firewall\n    fish\n    fishbone\n    fisherman\n    fishery\n    fishing\n    fishmonger\n    fishnet\n    fisting\n    fix\n    fixture\n    flag\n    flame\n    flanker\n    flare\n    flash\n    flat\n    flatboat\n    flavor\n    flax\n    fleck\n    fleece\n    flesh\n    flight\n    flintlock\n    flip-flops\n    flock\n    flood\n    floor\n    floozie\n    flour\n    flow\n    flower\n    flu\n    flugelhorn\n    fluke\n    flute\n    fly\n    flytrap\n    foam\n    fob\n    focus\n    fog\n    fold\n    folder\n    following\n    fondue\n    font\n    food\n    foot\n    football\n    footnote\n    footrest\n    foot-rest\n    footstool\n    foray\n    force\n    forearm\n    forebear\n    forecast\n    forehead\n    forest\n    forestry\n    forever\n    forgery\n    fork\n    form\n    formal\n    format\n    former\n    fort\n    fortnight\n    fortress\n    fortune\n    forum\n    foundation\n    fountain\n    fowl\n    fox\n    foxglove\n    fragrance\n    frame\n    fratricide\n    fraudster\n    frazzle\n    freckle\n    freedom\n    freeplay\n    freeze\n    freezer\n    freight\n    freighter\n    freon\n    fresco\n    friction\n    fridge\n    friend\n    friendship\n    frigate\n    fringe\n    frock\n    frog\n    front\n    frost\n    frown\n    fruit\n    frustration\n    fuel\n    fulfillment\n    full\n    fun\n    function\n    fundraising\n    funeral\n    funny\n    fur\n    furnace\n    furniture\n    fusarium\n    futon\n    future\n    gaffer\n    gain\n    gaiters\n    gale\n    gall-bladder\n    gallery\n    galley\n    gallon\n    galn\n    galoshes\n    game\n    gamebird\n    gamma-ray\n    gander\n    gap\n    garage\n    garb\n    garbage\n    garden\n    garlic\n    garment\n    garter\n    gas\n    gasoline\n    gastropod\n    gate\n    gateway\n    gather\n    gauge\n    gauntlet\n    gazebo\n    gazelle\n    gear\n    gearshift\n    geese\n    gelding\n    gem\n    gemsbok\n    gender\n    gene\n    general\n    genetics\n    geography\n    geology\n    geometry\n    george\n    geranium\n    gerbil\n    geyser\n    gherkin\n    ghost\n    giant\n    gift\n    gigantism\n    ginseng\n    giraffe\n    girdle\n    girl\n    girlfriend\n    git\n    give\n    glad\n    gladiolus\n    gland\n    glass\n    glasses\n    glen\n    glider\n    gliding\n    glockenspiel\n    glove\n    gloves\n    glue\n    glut\n    go\n    goal\n    goat\n    gobbler\n    god\n    godmother\n    goggles\n    go-kart\n    gold\n    goldfish\n    golf\n    gondola\n    gong\n    good\n    goodbye\n    good-bye\n    goodie\n    goose\n    gopher\n    gore-tex\n    gorilla\n    gosling\n    gossip\n    governance\n    government\n    governor\n    gown\n    grab\n    grab-bag\n    grade\n    grain\n    gram\n    grammar\n    grand\n    granddaughter\n    grandfather\n    grandmom\n    grandmother\n    grandson\n    granny\n    grape\n    grapefruit\n    graph\n    graphic\n    grass\n    grasshopper\n    grassland\n    gratitude\n    gray\n    grease\n    great\n    great-grandfather\n    great-grandmother\n    greek\n    green\n    greenhouse\n    grenade\n    grey\n    grief\n    grill\n    grip\n    grit\n    grocery\n    ground\n    group\n    grouper\n    grouse\n    growth\n    guarantee\n    guard\n    guess\n    guest\n    guestbook\n    guidance\n    guide\n    guilt\n    guilty\n    guitar\n    guitarist\n    gum\n    gumshoes\n    gun\n    gutter\n    guy\n    gym\n    gymnast\n    gymnastics\n    gynaecology\n    gyro\n    habit\n    hacienda\n    hacksaw\n    hackwork\n    hail\n    hair\n    haircut\n    half\n    half-brother\n    half-sister\n    halibut\n    hall\n    hallway\n    hamaki\n    hamburger\n    hammer\n    hammock\n    hamster\n    hand\n    handball\n    hand-holding\n    handicap\n    handle\n    handlebar\n    handmaiden\n    handsaw\n    hang\n    happiness\n    harbor\n    harbour\n    hardboard\n    hardcover\n    hardening\n    hardhat\n    hard-hat\n    hardware\n    harm\n    harmonica\n    harmony\n    harp\n    harpooner\n    harpsichord\n    hassock\n    hat\n    hatbox\n    hatchet\n    hate\n    hatred\n    haunt\n    haversack\n    hawk\n    hay\n    head\n    headlight\n    headline\n    headrest\n    health\n    hearing\n    heart\n    heartache\n    hearth\n    hearthside\n    heart-throb\n    heartwood\n    heat\n    heater\n    heaven\n    heavy\n    hedge\n    hedgehog\n    heel\n    height\n    heirloom\n    helen\n    helicopter\n    helium\n    hell\n    hellcat\n    hello\n    helmet\n    helo\n    help\n    hemp\n    hen\n    herb\n    heron\n    herring\n    hexagon\n    heyday\n    hide\n    high\n    highlight\n    high-rise\n    highway\n    hill\n    hip\n    hippodrome\n    hippopotamus\n    hire\n    history\n    hit\n    hive\n    hobbies\n    hobbit\n    hobby\n    hockey\n    hoe\n    hog\n    hold\n    hole\n    holiday\n    home\n    homework\n    homogenate\n    homonym\n    honesty\n    honey\n    honeybee\n    honoree\n    hood\n    hoof\n    hook\n    hope\n    hops\n    horn\n    hornet\n    horror\n    horse\n    hose\n    hosiery\n    hospice\n    hospital\n    hospitality\n    host\n    hostel\n    hostess\n    hot\n    hot-dog\n    hotel\n    hour\n    hourglass\n    house\n    houseboat\n    housework\n    housing\n    hovel\n    hovercraft\n    howitzer\n    hub\n    hubcap\n    hugger\n    human\n    humidity\n    humor\n    humour\n    hunger\n    hunt\n    hurdler\n    hurricane\n    hurry\n    hurt\n    husband\n    hut\n    hutch\n    hyacinth\n    hybridisation\n    hydrant\n    hydraulics\n    hydrofoil\n    hydrogen\n    hyena\n    hygienic\n    hyphenation\n    hypochondria\n    hypothermia\n    ice\n    icebreaker\n    icecream\n    ice-cream\n    icicle\n    icon\n    idea\n    ideal\n    if\n    igloo\n    ikebana\n    illegal\n    image\n    imagination\n    impact\n    implement\n    importance\n    impress\n    impression\n    imprisonment\n    improvement\n    impudence\n    impulse\n    inbox\n    incandescence\n    inch\n    incident\n    income\n    increase\n    independence\n    independent\n    index\n    indication\n    indigence\n    individual\n    industry\n    inevitable\n    infancy\n    inflammation\n    inflation\n    influence\n    information\n    infusion\n    inglenook\n    ingrate\n    initial\n    initiative\n    in-joke\n    injury\n    injustice\n    ink\n    in-laws\n    inlay\n    inn\n    innervation\n    innocence\n    innocent\n    input\n    inquiry\n    inscription\n    insect\n    inside\n    insolence\n    inspection\n    inspector\n    instance\n    instruction\n    instrument\n    instrumentalist\n    instrumentation\n    insulation\n    insurance\n    insurgence\n    intelligence\n    intention\n    interaction\n    interactive\n    interest\n    interferometer\n    interior\n    interloper\n    internal\n    international\n    internet\n    interpreter\n    intervenor\n    interview\n    interviewer\n    intestine\n    intestines\n    introduction\n    invention\n    inventor\n    inventory\n    investment\n    invite\n    invoice\n    iridescence\n    iris\n    iron\n    ironclad\n    irony\n    island\n    issue\n    it\n    item\n    jackal\n    jacket\n    jaguar\n    jail\n    jailhouse\n    jam\n    james\n    jar\n    jasmine\n    jaw\n    jealousy\n    jeans\n    jeep\n    jeff\n    jelly\n    jellyfish\n    jet\n    jewel\n    jewelry\n    jiffy\n    job\n    jockey\n    jodhpurs\n    joey\n    jogging\n    join\n    joint\n    joke\n    jot\n    journey\n    joy\n    judge\n    judgment\n    judo\n    juggernaut\n    juice\n    jumbo\n    jump\n    jumper\n    jumpsuit\n    junior\n    junk\n    junker\n    junket\n    jury\n    justice\n    jute\n    kale\n    kamikaze\n    kangaroo\n    karate\n    karen\n    kayak\n    kazoo\n    keep\n    kendo\n    ketch\n    ketchup\n    kettle\n    kettledrum\n    key\n    keyboard\n    keyboarding\n    keystone\n    kick\n    kick-off\n    kid\n    kidney\n    kidneys\n    kielbasa\n    kill\n    kilogram\n    kilometer\n    kilt\n    kimono\n    kind\n    kindness\n    king\n    kingfish\n    kiosk\n    kiss\n    kitchen\n    kite\n    kitten\n    kitty\n    kleenex\n    klomps\n    knee\n    kneejerk\n    knickers\n    knife\n    knife-edge\n    knight\n    knitting\n    knot\n    knowledge\n    knuckle\n    koala\n    kohlrabi\n    lab\n    laborer\n    labour\n    lace\n    lack\n    lacquerware\n    ladder\n    lady\n    ladybug\n    lake\n    lamb\n    lamp\n    lan\n    lanai\n    land\n    landform\n    landmine\n    landscape\n    language\n    lantern\n    lap\n    laparoscope\n    lapdog\n    laptop\n    larch\n    larder\n    lark\n    laryngitis\n    lasagna\n    latency\n    latex\n    lathe\n    latte\n    laugh\n    laughter\n    laundry\n    lava\n    law\n    lawn\n    lawsuit\n    lawyer\n    lay\n    layer\n    lead\n    leader\n    leadership\n    leading\n    leaf\n    league\n    leaker\n    learning\n    leash\n    leather\n    leave\n    leaver\n    lecture\n    leek\n    leg\n    legal\n    legging\n    legume\n    lei\n    leisure\n    lemon\n    lemonade\n    lemur\n    length\n    lentil\n    leprosy\n    lesson\n    let\n    letter\n    lettuce\n    level\n    lever\n    leverage\n    license\n    lie\n    lier\n    life\n    lift\n    light\n    lighting\n    lightning\n    lilac\n    lily\n    limit\n    limo\n    line\n    linen\n    liner\n    linguistics\n    link\n    linseed\n    lion\n    lip\n    lipstick\n    liquid\n    liquor\n    lisa\n    list\n    listen\n    literature\n    litigation\n    litter\n    liver\n    livestock\n    living\n    lizard\n    llama\n    load\n    loaf\n    loafer\n    loan\n    lobotomy\n    lobster\n    local\n    location\n    lock\n    locker\n    locket\n    locomotive\n    locust\n    loft\n    log\n    loggia\n    logic\n    loincloth\n    loneliness\n    long\n    look\n    loss\n    lot\n    lotion\n    lounge\n    lout\n    love\n    low\n    loyalty\n    luck\n    luggage\n    lumber\n    lumberman\n    lunch\n    luncheonette\n    lunchroom\n    lung\n    lunge\n    lute\n    luttuce\n    lycra\n    lye\n    lymphocyte\n    lynx\n    lyocell\n    lyre\n    lyric\n    macadamia\n    macaroni\n    machine\n    machinery\n    macrame\n    macrofauna\n    maelstrom\n    maestro\n    magazine\n    magic\n    maid\n    maiden\n    mail\n    mailbox\n    mailman\n    main\n    maintenance\n    major\n    major-league\n    make\n    makeup\n    male\n    mall\n    mallet\n    mambo\n    mammoth\n    man\n    management\n    manager\n    mandarin\n    mandolin\n    mangrove\n    manhunt\n    maniac\n    manicure\n    mankind\n    manner\n    manor\n    mansard\n    manservant\n    mansion\n    mantel\n    mantle\n    mantua\n    manufacturer\n    manx\n    many\n    map\n    maple\n    maraca\n    maracas\n    marble\n    mare\n    margin\n    mariachi\n    marimba\n    mark\n    market\n    marketing\n    marksman\n    marriage\n    marsh\n    marshland\n    marxism\n    mascara\n    mask\n    mass\n    massage\n    master\n    mastication\n    mastoid\n    mat\n    match\n    mate\n    material\n    math\n    mathematics\n    matter\n    mattock\n    mattress\n    maximum\n    maybe\n    mayonnaise\n    mayor\n    meal\n    meaning\n    measles\n    measure\n    measurement\n    meat\n    mechanic\n    media\n    medicine\n    medium\n    meet\n    meeting\n    megaliac\n    melody\n    member\n    membership\n    memory\n    men\n    menorah\n    mention\n    menu\n    mercury\n    mess\n    message\n    metal\n    metallurgist\n    meteor\n    meteorology\n    meter\n    methane\n    method\n    methodology\n    metro\n    metronome\n    mezzanine\n    mice\n    microlending\n    microwave\n    mid-course\n    middle\n    middleman\n    midi\n    midline\n    midnight\n    midwife\n    might\n    migrant\n    mile\n    milk\n    milkshake\n    millennium\n    millimeter\n    millisecond\n    mime\n    mimosa\n    mind\n    mine\n    mini\n    minibus\n    minimum\n    minion\n    mini-skirt\n    minister\n    minor\n    minor-league\n    mint\n    minute\n    mirror\n    miscarriage\n    miscommunication\n    misfit\n    misogyny\n    misplacement\n    misreading\n    miss\n    missile\n    mission\n    mist\n    mistake\n    mister\n    miter\n    mitten\n    mix\n    mixer\n    mixture\n    moat\n    mobile\n    moccasins\n    mocha\n    mode\n    model\n    modem\n    mole\n    mom\n    moment\n    monastery\n    monasticism\n    money\n    monger\n    monitor\n    monkey\n    monocle\n    monotheism\n    monsoon\n    monster\n    month\n    mood\n    moon\n    moonscape\n    moonshine\n    mop\n    morning\n    morsel\n    mortgage\n    mortise\n    mosque\n    mosquito\n    most\n    motel\n    moth\n    mother\n    mother-in-law\n    motion\n    motor\n    motorboat\n    motorcar\n    motorcycle\n    mound\n    mountain\n    mouse\n    mouser\n    mousse\n    moustache\n    mouth\n    mouton\n    move\n    mover\n    movie\n    mower\n    mud\n    mug\n    mukluk\n    mule\n    multimedia\n    muscle\n    musculature\n    museum\n    music\n    music-box\n    music-making\n    mustache\n    mustard\n    mutt\n    mycoplasma\n    n\n    nail\n    name\n    naming\n    nanoparticle\n    napkin\n    nasty\n    nation\n    national\n    native\n    natural\n    naturalisation\n    nature\n    neat\n    necessary\n    neck\n    necklace\n    necktie\n    need\n    needle\n    negative\n    negligee\n    negotiation\n    neologism\n    neon\n    nephew\n    nerve\n    nest\n    net\n    netball\n    netbook\n    netsuke\n    network\n    neurobiologist\n    neuropathologist\n    neuropsychiatry\n    news\n    newspaper\n    newsprint\n    newsstand\n    nexus\n    nicety\n    niche\n    nickel\n    niece\n    night\n    nightclub\n    nightgown\n    nightingale\n    nightlight\n    nitrogen\n    nobody\n    node\n    noise\n    nonbeliever\n    nonconformist\n    nondisclosure\n    nonsense\n    noodle\n    normal\n    norse\n    north\n    nose\n    note\n    notebook\n    nothing\n    notice\n    notify\n    notoriety\n    nougat\n    novel\n    nudge\n    number\n    numeracy\n    numeric\n    numismatist\n    nurse\n    nursery\n    nurture\n    nut\n    nutrition\n    nylon\n    oak\n    oar\n    oasis\n    oatmeal\n    obedience\n    obesity\n    obi\n    object\n    objective\n    obligation\n    oboe\n    observation\n    observatory\n    occasion\n    occupation\n    ocean\n    ocelot\n    octagon\n    octave\n    octavo\n    octet\n    octopus\n    odometer\n    oeuvre\n    offence\n    offer\n    office\n    officer\n    official\n    off-ramp\n    oil\n    okra\n    oldie\n    olive\n    omega\n    omelet\n    oncology\n    one\n    onion\n    open\n    opening\n    opera\n    operation\n    ophthalmologist\n    opinion\n    opium\n    opossum\n    opportunist\n    opportunity\n    opposite\n    option\n    orange\n    orangutan\n    orator\n    orchard\n    orchestra\n    orchid\n    order\n    ordinary\n    ordination\n    organ\n    organisation\n    organization\n    original\n    ornament\n    osmosis\n    osprey\n    ostrich\n    other\n    others\n    ott\n    otter\n    ounce\n    outback\n    outcome\n    outfit\n    outhouse\n    outlay\n    output\n    outrigger\n    outset\n    outside\n    oval\n    ovary\n    oven\n    overcharge\n    overclocking\n    overcoat\n    overexertion\n    overflight\n    overnighter\n    overshoot\n    owl\n    owner\n    ox\n    oxen\n    oxford\n    oxygen\n    oyster\n    pace\n    pacemaker\n    pack\n    package\n    packet\n    pad\n    paddle\n    paddock\n    page\n    pagoda\n    pail\n    pain\n    paint\n    painter\n    painting\n    paintwork\n    pair\n    pajama\n    pajamas\n    palm\n    pamphlet\n    pan\n    pancake\n    pancreas\n    panda\n    panic\n    pannier\n    panpipe\n    pansy\n    panther\n    panties\n    pantologist\n    pantology\n    pantry\n    pants\n    pantsuit\n    panty\n    pantyhose\n    paper\n    paperback\n    parable\n    parachute\n    parade\n    parallelogram\n    paramedic\n    parcel\n    parchment\n    pard\n    parent\n    parentheses\n    park\n    parka\n    parking\n    parrot\n    parsnip\n    part\n    participant\n    particle\n    particular\n    partner\n    partridge\n    party\n    pass\n    passage\n    passbook\n    passenger\n    passion\n    passive\n    past\n    pasta\n    paste\n    pastor\n    pastoralist\n    pastry\n    patch\n    path\n    patience\n    patient\n    patina\n    patio\n    patriarch\n    patricia\n    patrimony\n    patriot\n    patrol\n    pattern\n    pause\n    pavement\n    pavilion\n    paw\n    pawnshop\n    pay\n    payee\n    payment\n    pea\n    peace\n    peach\n    peacoat\n    peacock\n    peak\n    peanut\n    pear\n    pearl\n    pedal\n    peen\n    peer\n    peer-to-peer\n    pegboard\n    pelican\n    pelt\n    pen\n    penalty\n    pencil\n    pendant\n    pendulum\n    penicillin\n    pension\n    pentagon\n    peony\n    people\n    pepper\n    percentage\n    perception\n    perch\n    performance\n    perfume\n    period\n    periodical\n    peripheral\n    permafrost\n    permission\n    permit\n    perp\n    person\n    personal\n    personality\n    perspective\n    pest\n    pet\n    petal\n    petticoat\n    pew\n    pha\n    pharmacist\n    pharmacopoeia\n    phase\n    pheasant\n    philosopher\n    philosophy\n    phone\n    photo\n    photographer\n    phrase\n    physical\n    physics\n    pianist\n    piano\n    piccolo\n    pick\n    pickax\n    picket\n    pickle\n    picture\n    pie\n    piece\n    pier\n    piety\n    pig\n    pigeon\n    pike\n    pile\n    pilgrimage\n    pillbox\n    pillow\n    pilot\n    pimp\n    pimple\n    pin\n    pinafore\n    pince-nez\n    pine\n    pineapple\n    pinecone\n    ping\n    pink\n    pinkie\n    pinstripe\n    pint\n    pinto\n    pinworm\n    pioneer\n    pipe\n    piracy\n    piss\n    pitch\n    pitching\n    pith\n    pizza\n    place\n    plain\n    plan\n    plane\n    planet\n    plant\n    plantation\n    planter\n    plaster\n    plasterboard\n    plastic\n    plate\n    platform\n    platinum\n    platypus\n    play\n    player\n    playground\n    playroom\n    pleasure\n    pleated\n    plenty\n    plier\n    plot\n    plough\n    plover\n    plow\n    plowman\n    plume\n    plunger\n    plywood\n    pneumonia\n    pocket\n    pocketbook\n    pocket-watch\n    poem\n    poet\n    poetry\n    poignance\n    point\n    poison\n    poisoning\n    pole\n    polenta\n    police\n    policeman\n    policy\n    polish\n    politics\n    pollution\n    polo\n    polyester\n    pompom\n    poncho\n    pond\n    pony\n    poof\n    pool\n    pop\n    popcorn\n    poppy\n    popsicle\n    population\n    populist\n    porch\n    porcupine\n    port\n    porter\n    portfolio\n    porthole\n    position\n    positive\n    possession\n    possibility\n    possible\n    post\n    postage\n    postbox\n    poster\n    pot\n    potato\n    potential\n    potty\n    pouch\n    poultry\n    pound\n    pounding\n    poverty\n    powder\n    power\n    practice\n    precedent\n    precipitation\n    preface\n    preference\n    prelude\n    premeditation\n    premier\n    preoccupation\n    preparation\n    presence\n    present\n    presentation\n    president\n    press\n    pressroom\n    pressure\n    pressurisation\n    price\n    pride\n    priest\n    priesthood\n    primary\n    primate\n    prince\n    princess\n    principal\n    principle\n    print\n    printer\n    prior\n    priority\n    prison\n    private\n    prize\n    prizefight\n    probation\n    problem\n    procedure\n    process\n    processing\n    produce\n    producer\n    product\n    production\n    profession\n    professional\n    professor\n    profile\n    profit\n    program\n    progress\n    project\n    promise\n    promotion\n    prompt\n    pronunciation\n    proof\n    proof-reader\n    propane\n    property\n    proposal\n    prose\n    prosecution\n    protection\n    protest\n    protocol\n    prow\n    pruner\n    pseudoscience\n    psychiatrist\n    psychoanalyst\n    psychologist\n    psychology\n    ptarmigan\n    public\n    publicity\n    publisher\n    pudding\n    puddle\n    puffin\n    pull\n    pulley\n    puma\n    pump\n    pumpkin\n    pumpkinseed\n    punch\n    punctuation\n    punishment\n    pupa\n    pupil\n    puppy\n    purchase\n    puritan\n    purple\n    purpose\n    purse\n    push\n    pusher\n    put\n    pvc\n    pyjama\n    pyramid\n    quadrant\n    quail\n    quality\n    quantity\n    quart\n    quarter\n    quartz\n    queen\n    question\n    quicksand\n    quiet\n    quill\n    quilt\n    quince\n    quit\n    quiver\n    quotation\n    quote\n    rabbi\n    rabbit\n    raccoon\n    race\n    racer\n    racing\n    racism\n    racist\n    rack\n    radar\n    radiator\n    radio\n    radiosonde\n    radish\n    raffle\n    raft\n    rag\n    rage\n    rail\n    railway\n    raiment\n    rain\n    rainbow\n    raincoat\n    rainmaker\n    rainstorm\n    raise\n    rake\n    ram\n    rambler\n    ramie\n    ranch\n    random\n    randomisation\n    range\n    rank\n    raspberry\n    rat\n    rate\n    ratio\n    raven\n    ravioli\n    raw\n    rawhide\n    ray\n    rayon\n    reach\n    reactant\n    reaction\n    read\n    reading\n    reality\n    reamer\n    rear\n    reason\n    receipt\n    reception\n    recess\n    recipe\n    recliner\n    recognition\n    recommendation\n    record\n    recorder\n    recording\n    recover\n    recreation\n    recruit\n    rectangle\n    red\n    redesign\n    rediscovery\n    reduction\n    reef\n    refectory\n    reference\n    reflection\n    refrigerator\n    refund\n    refuse\n    region\n    register\n    regret\n    regular\n    regulation\n    reindeer\n    reinscription\n    reject\n    relation\n    relationship\n    relative\n    relaxation\n    release\n    reliability\n    relief\n    religion\n    relish\n    reminder\n    remote\n    remove\n    rent\n    repair\n    reparation\n    repeat\n    replace\n    replacement\n    replication\n    reply\n    report\n    representative\n    reprocessing\n    republic\n    reputation\n    request\n    requirement\n    resale\n    research\n    reserve\n    resident\n    resist\n    resolution\n    resolve\n    resort\n    resource\n    respect\n    respite\n    respond\n    response\n    responsibility\n    rest\n    restaurant\n    result\n    retailer\n    rethinking\n    retina\n    retouch\n    return\n    reveal\n    revenant\n    revenge\n    revenue\n    review\n    revolution\n    revolve\n    revolver\n    reward\n    rheumatism\n    rhinoceros\n    rhyme\n    rhythm\n    rice\n    rich\n    riddle\n    ride\n    rider\n    ridge\n    rifle\n    right\n    rim\n    ring\n    ringworm\n    rip\n    ripple\n    rise\n    riser\n    risk\n    river\n    riverbed\n    rivulet\n    road\n    roadway\n    roast\n    robe\n    robin\n    rock\n    rocker\n    rocket\n    rocket-ship\n    rod\n    role\n    roll\n    roller\n    roof\n    room\n    rooster\n    root\n    rope\n    rose\n    rostrum\n    rotate\n    rough\n    round\n    roundabout\n    route\n    router\n    routine\n    row\n    rowboat\n    royal\n    rub\n    rubber\n    rubbish\n    rubric\n    ruckus\n    ruffle\n    rugby\n    ruin\n    rule\n    rum\n    run\n    runaway\n    runner\n    rush\n    rutabaga\n    ruth\n    ry\n    sabre\n    sack\n    sad\n    saddle\n    safe\n    safety\n    sage\n    sail\n    sailboat\n    sailor\n    salad\n    salary\n    sale\n    salesman\n    salmon\n    salon\n    saloon\n    salt\n    samovar\n    sampan\n    sample\n    samurai\n    sand\n    sandals\n    sandbar\n    sandwich\n    sardine\n    sari\n    sarong\n    sash\n    satellite\n    satin\n    satire\n    satisfaction\n    sauce\n    sausage\n    save\n    saving\n    savings\n    savior\n    saviour\n    saw\n    saxophone\n    scale\n    scallion\n    scanner\n    scarecrow\n    scarf\n    scarification\n    scene\n    scenery\n    scent\n    schedule\n    scheme\n    schizophrenic\n    schnitzel\n    school\n    schoolhouse\n    schooner\n    science\n    scimitar\n    scissors\n    scooter\n    score\n    scorn\n    scow\n    scraper\n    scratch\n    screamer\n    screen\n    screenwriting\n    screw\n    screwdriver\n    screw-up\n    scrim\n    scrip\n    script\n    sculpting\n    sculpture\n    sea\n    seafood\n    seagull\n    seal\n    seaplane\n    search\n    seashore\n    seaside\n    season\n    seat\n    second\n    secret\n    secretariat\n    secretary\n    section\n    sectional\n    sector\n    secure\n    security\n    seed\n    seeder\n    segment\n    select\n    selection\n    self\n    sell\n    semicircle\n    semicolon\n    senator\n    senior\n    sense\n    sensitive\n    sentence\n    sepal\n    septicaemia\n    series\n    servant\n    serve\n    server\n    service\n    session\n    set\n    setting\n    settler\n    sewer\n    sex\n    shack\n    shade\n    shadow\n    shadowbox\n    shake\n    shakedown\n    shaker\n    shallot\n    shame\n    shampoo\n    shanty\n    shape\n    share\n    shark\n    sharon\n    shawl\n    she\n    shearling\n    shears\n    sheath\n    shed\n    sheep\n    sheet\n    shelf\n    shell\n    shelter\n    sherry\n    shield\n    shift\n    shin\n    shine\n    shingle\n    ship\n    shirt\n    shirtdress\n    shoat\n    shock\n    shoe\n    shoehorn\n    shoe-horn\n    shoelace\n    shoemaker\n    shoes\n    shoestring\n    shofar\n    shoot\n    shootdown\n    shop\n    shopper\n    shopping\n    shore\n    shortage\n    shorts\n    shortwave\n    shot\n    shoulder\n    shovel\n    show\n    shower\n    show-stopper\n    shred\n    shrimp\n    shrine\n    sibling\n    sick\n    side\n    sideboard\n    sideburns\n    sidecar\n    sidestream\n    sidewalk\n    siding\n    sign\n    signal\n    signature\n    signet\n    significance\n    signup\n    silence\n    silica\n    silk\n    silkworm\n    sill\n    silly\n    silo\n    silver\n    simple\n    sing\n    singer\n    single\n    sink\n    sir\n    sister\n    sister-in-law\n    sitar\n    site\n    situation\n    size\n    skate\n    skiing\n    skill\n    skin\n    skirt\n    skull\n    skullcap\n    skullduggery\n    skunk\n    sky\n    skylight\n    skyscraper\n    skywalk\n    slapstick\n    slash\n    slave\n    sled\n    sledge\n    sleep\n    sleet\n    sleuth\n    slice\n    slide\n    slider\n    slime\n    slip\n    slipper\n    slippers\n    slope\n    sloth\n    smash\n    smell\n    smelting\n    smile\n    smock\n    smog\n    smoke\n    smoking\n    smuggling\n    snail\n    snake\n    snakebite\n    sneakers\n    sneeze\n    snob\n    snorer\n    snow\n    snowboarding\n    snowflake\n    snowman\n    snowmobiling\n    snowplow\n    snowstorm\n    snowsuit\n    snuggle\n    soap\n    soccer\n    society\n    sociology\n    sock\n    socks\n    soda\n    sofa\n    soft\n    softball\n    softdrink\n    softening\n    software\n    soil\n    soldier\n    solid\n    solitaire\n    solution\n    sombrero\n    somersault\n    somewhere\n    son\n    song\n    songbird\n    sonnet\n    soot\n    soprano\n    sorbet\n    sorrow\n    sort\n    soulmate\n    sound\n    soup\n    source\n    sourwood\n    sousaphone\n    south\n    south america\n    south korea\n    sow\n    soy\n    soybean\n    space\n    spacing\n    spade\n    spaghetti\n    spandex\n    spank\n    spare\n    spark\n    sparrow\n    spasm\n    speaker\n    speakerphone\n    spear\n    special\n    specialist\n    specific\n    spectacle\n    spectacles\n    spectrograph\n    speech\n    speed\n    speedboat\n    spell\n    spelling\n    spend\n    sphere\n    sphynx\n    spider\n    spike\n    spinach\n    spine\n    spiral\n    spirit\n    spiritual\n    spite\n    spleen\n    split\n    sponge\n    spoon\n    sport\n    spot\n    spotlight\n    spray\n    spread\n    spring\n    sprinter\n    sprout\n    spruce\n    spume\n    spur\n    spy\n    square\n    squash\n    squatter\n    squeegee\n    squid\n    squirrel\n    stable\n    stack\n    stacking\n    stadium\n    staff\n    stag\n    stage\n    stain\n    stair\n    staircase\n    stallion\n    stamen\n    stamina\n    stamp\n    stance\n    stand\n    standard\n    standoff\n    star\n    start\n    starter\n    state\n    statement\n    station\n    station-wagon\n    statistic\n    status\n    stay\n    steak\n    steal\n    steam\n    steamroller\n    steel\n    steeple\n    stem\n    stencil\n    step\n    step-aunt\n    step-brother\n    stepdaughter\n    step-daughter\n    step-father\n    step-grandfather\n    step-grandmother\n    stepmother\n    step-mother\n    stepping-stone\n    steps\n    step-sister\n    stepson\n    step-son\n    step-uncle\n    stew\n    stick\n    stiletto\n    still\n    stinger\n    stitch\n    stock\n    stocking\n    stockings\n    stock-in-trade\n    stole\n    stomach\n    stone\n    stonework\n    stool\n    stop\n    stopsign\n    stopwatch\n    storage\n    store\n    storey\n    storm\n    story\n    storyboard\n    story-telling\n    stove\n    strain\n    strait\n    stranger\n    strap\n    strategy\n    straw\n    strawberry\n    stream\n    street\n    streetcar\n    strength\n    stress\n    stretch\n    strike\n    string\n    strip\n    stroke\n    structure\n    struggle\n    stud\n    student\n    studio\n    study\n    stuff\n    stumbling\n    stupid\n    stupidity\n    sturgeon\n    style\n    styling\n    stylus\n    subcomponent\n    subconscious\n    subject\n    submarine\n    subroutine\n    subsidence\n    substance\n    suburb\n    subway\n    success\n    suck\n    suede\n    suffocation\n    sugar\n    suggestion\n    suit\n    suitcase\n    sultan\n    summer\n    sun\n    sunbeam\n    sunbonnet\n    sunday\n    sundial\n    sunflower\n    sunglasses\n    sunlamp\n    sunroom\n    sunshine\n    supermarket\n    supply\n    support\n    supporter\n    suppression\n    surface\n    surfboard\n    surgeon\n    surgery\n    surname\n    surprise\n    surround\n    survey\n    sushi\n    suspect\n    suspenders\n    sustainment\n    SUV\n    swallow\n    swamp\n    swan\n    swath\n    sweat\n    sweater\n    sweats\n    sweatshirt\n    sweatshop\n    sweatsuit\n    swedish\n    sweet\n    sweets\n    swell\n    swim\n    swimming\n    swimsuit\n    swing\n    swiss\n    switch\n    switchboard\n    swivel\n    sword\n    swordfish\n    sycamore\n    symmetry\n    sympathy\n    syndicate\n    synergy\n    synod\n    syrup\n    system\n    tabby\n    tabernacle\n    table\n    tablecloth\n    tabletop\n    tachometer\n    tackle\n    tadpole\n    tail\n    tailor\n    tailspin\n    tale\n    talk\n    tam\n    tambour\n    tambourine\n    tam-o\'-shanter\n    tandem\n    tangerine\n    tank\n    tanker\n    tankful\n    tank-top\n    tap\n    tard\n    target\n    task\n    tassel\n    taste\n    tatami\n    tattler\n    tattoo\n    tavern\n    tax\n    taxi\n    taxicab\n    tea\n    teach\n    teacher\n    teaching\n    team\n    tear\n    technologist\n    technology\n    teen\n    teeth\n    telephone\n    telescreen\n    teletype\n    television\n    tell\n    teller\n    temp\n    temper\n    temperature\n    temple\n    tempo\n    temporariness\n    temporary\n    temptress\n    tendency\n    tenement\n    tennis\n    tenor\n    tension\n    tent\n    tepee\n    term\n    terracotta\n    terrapin\n    territory\n    test\n    text\n    textbook\n    texture\n    thanks\n    thaw\n    theater\n    theism\n    theme\n    theory\n    therapist\n    thermals\n    thermometer\n    thigh\n    thing\n    thinking\n    thirst\n    thistle\n    thomas\n    thong\n    thongs\n    thorn\n    thought\n    thread\n    thrill\n    throat\n    throne\n    thrush\n    thumb\n    thunder\n    thunderbolt\n    thunderhead\n    thunderstorm\n    tiara\n    tic\n    ticket\n    tie\n    tiger\n    tight\n    tights\n    tile\n    till\n    timbale\n    timber\n    time\n    timeline\n    timeout\n    timer\n    timpani\n    tin\n    tinderbox\n    tinkle\n    tintype\n    tip\n    tire\n    tissue\n    titanium\n    title\n    toad\n    toast\n    today\n    toe\n    toenail\n    toga\n    togs\n    toilet\n    tolerance\n    tom\n    tomato\n    tomography\n    tomorrow\n    tom-tom\n    ton\n    tone\n    tongue\n    tonight\n    tool\n    toot\n    tooth\n    toothbrush\n    toothpaste\n    toothpick\n    top\n    top-hat\n    topic\n    topsail\n    toque\n    torchiere\n    toreador\n    tornado\n    torso\n    tortellini\n    tortoise\n    tosser\n    total\n    tote\n    touch\n    tough\n    tough-guy\n    tour\n    tourist\n    towel\n    tower\n    town\n    townhouse\n    tow-truck\n    toy\n    trachoma\n    track\n    tracksuit\n    tractor\n    trade\n    tradition\n    traditionalism\n    traffic\n    trail\n    trailer\n    train\n    trainer\n    training\n    tram\n    tramp\n    transaction\n    transition\n    translation\n    transmission\n    transom\n    transport\n    transportation\n    trapdoor\n    trapezium\n    trapezoid\n    trash\n    travel\n    tray\n    treat\n    treatment\n    tree\n    trellis\n    tremor\n    trench\n    trial\n    triangle\n    tribe\n    trick\n    trigonometry\n    trim\n    trinket\n    trip\n    tripod\n    trolley\n    trombone\n    trooper\n    trouble\n    trousers\n    trout\n    trove\n    trowel\n    truck\n    truckit\n    trumpet\n    trunk\n    trust\n    truth\n    try\n    t-shirt\n    tsunami\n    tub\n    tuba\n    tube\n    tugboat\n    tulip\n    tummy\n    tuna\n    tune\n    tune-up\n    tunic\n    tunnel\n    turban\n    turkish\n    turn\n    turnip\n    turnover\n    turnstile\n    turret\n    turtle\n    tussle\n    tutu\n    tuxedo\n    tv\n    twig\n    twilight\n    twine\n    twist\n    twister\n    two\n    type\n    typewriter\n    typhoon\n    tyvek\n    ukulele\n    umbrella\n    unblinking\n    uncle\n    underclothes\n    underground\n    underneath\n    underpants\n    underpass\n    undershirt\n    understanding\n    underwear\n    underwire\n    unemployment\n    unibody\n    uniform\n    union\n    unique\n    unit\n    unity\n    university\n    upper\n    upstairs\n    urn\n    usage\n    use\n    user\n    usher\n    usual\n    utensil\n    vacation\n    vacuum\n    vagrant\n    valance\n    validity\n    valley\n    valuable\n    value\n    van\n    vane\n    vanity\n    variation\n    variety\n    vase\n    vast\n    vault\n    vaulting\n    veal\n    vegetable\n    vegetarianism\n    vegetation\n    vehicle\n    veil\n    vein\n    veldt\n    vellum\n    velodrome\n    velvet\n    vengeance\n    venom\n    veranda\n    verdict\n    vermicelli\n    verse\n    version\n    vertigo\n    verve\n    vessel\n    vest\n    vestment\n    vibe\n    vibraphone\n    vibration\n    video\n    view\n    villa\n    village\n    vineyard\n    vinyl\n    viola\n    violence\n    violet\n    violin\n    virginal\n    virtue\n    virus\n    viscose\n    vise\n    vision\n    visit\n    visitor\n    visor\n    visual\n    vitality\n    vixen\n    voice\n    volcano\n    volleyball\n    volume\n    voyage\n    vulture\n    wad\n    wafer\n    waffle\n    waist\n    waistband\n    wait\n    waiter\n    waitress\n    wake\n    walk\n    walker\n    walkway\n    wall\n    wallaby\n    wallet\n    walnut\n    walrus\n    wampum\n    wannabe\n    war\n    warden\n    warlock\n    warmth\n    warm-up\n    warning\n    wash\n    washbasin\n    washcloth\n    washer\n    washtub\n    wasp\n    waste\n    wastebasket\n    watch\n    watchmaker\n    water\n    waterbed\n    waterfall\n    waterskiing\n    waterspout\n    wave\n    wax\n    way\n    weakness\n    wealth\n    weapon\n    wear\n    weasel\n    weather\n    web\n    wedding\n    wedge\n    weed\n    weeder\n    weedkiller\n    week\n    weekend\n    weekender\n    weight\n    weird\n    welcome\n    welfare\n    well\n    west\n    western\n    wet-bar\n    wetsuit\n    whale\n    wharf\n    wheat\n    wheel\n    whereas\n    while\n    whip\n    whirlpool\n    whirlwind\n    whisker\n    whiskey\n    whistle\n    white\n    whole\n    wholesale\n    wholesaler\n    whorl\n    width\n    wife\n    wilderness\n    wildlife\n    will\n    willow\n    win\n    wind\n    windage\n    wind-chime\n    window\n    windscreen\n    windshield\n    wine\n    wing\n    wingman\n    wingtip\n    winner\n    winter\n    wire\n    wisdom\n    wiseguy\n    wish\n    wisteria\n    witch\n    witch-hunt\n    withdrawal\n    witness\n    wolf\n    wombat\n    women\n    wonder\n    wood\n    woodland\n    woodshed\n    woodwind\n    wool\n    woolen\n    word\n    work\n    workbench\n    worker\n    workhorse\n    working\n    worklife\n    workshop\n    world\n    worm\n    worry\n    worth\n    worthy\n    wound\n    wrap\n    wraparound\n    wrecker\n    wren\n    wrench\n    wrestler\n    wrinkle\n    wrist\n    writer\n    writing\n    wrong\n    xylophone\n    yacht\n    yak\n    yam\n    yard\n    yarmulke\n    yarn\n    yawl\n    year\n    yeast\n    yellow\n    yesterday\n    yew\n    yin\n    yoga\n    yogurt\n    yoke\n    you\n    young\n    youth\n    yurt\n    zampone\n    zebra\n    zebrafish\n    zephyr\n    ziggurat\n    zinc\n    zipper\n    zither\n    zone\n    zoo\n    zoologist\n    zoology\n    zoot-suit\n    zucchini\n\nadjective\n    abandoned\n    able\n    absolute\n    adorable\n    adventurous\n    academic\n    acceptable\n    acclaimed\n    accomplished\n    accurate\n    aching\n    acidic\n    acrobatic\n    active\n    actual\n    adept\n    admirable\n    admired\n    adolescent\n    adorable\n    adored\n    advanced\n    afraid\n    affectionate\n    aged\n    aggravating\n    aggressive\n    agile\n    agitated\n    agonizing\n    agreeable\n    ajar\n    alarmed\n    alarming\n    alert\n    alienated\n    alive\n    all\n    altruistic\n    amazing\n    ambitious\n    ample\n    amused\n    amusing\n    anchored\n    ancient\n    angelic\n    angry\n    anguished\n    animated\n    annual\n    another\n    antique\n    anxious\n    any\n    apprehensive\n    appropriate\n    apt\n    arctic\n    arid\n    aromatic\n    artistic\n    ashamed\n    assured\n    astonishing\n    athletic\n    attached\n    attentive\n    attractive\n    austere\n    authentic\n    authorized\n    automatic\n    avaricious\n    average\n    aware\n    awesome\n    awful\n    awkward\n    babyish\n    bad\n    back\n    baggy\n    bare\n    barren\n    basic\n    beautiful\n    belated\n    beloved\n    beneficial\n    better\n    best\n    bewitched\n    big\n    big-hearted\n    biodegradable\n    bite-sized\n    bitter\n    black\n    black-and-white\n    bland\n    blank\n    blaring\n    bleak\n    blind\n    blissful\n    blond\n    blue\n    blushing\n    bogus\n    boiling\n    bold\n    bony\n    boring\n    bossy\n    both\n    bouncy\n    bountiful\n    bowed\n    brave\n    breakable\n    brief\n    bright\n    brilliant\n    brisk\n    broken\n    bronze\n    brown\n    bruised\n    bubbly\n    bulky\n    bumpy\n    buoyant\n    burdensome\n    burly\n    bustling\n    busy\n    buttery\n    buzzing\n    calculating\n    calm\n    candid\n    canine\n    capital\n    carefree\n    careful\n    careless\n    caring\n    cautious\n    cavernous\n    celebrated\n    charming\n    cheap\n    cheerful\n    cheery\n    chief\n    chilly\n    chubby\n    circular\n    classic\n    clean\n    clear\n    clear-cut\n    clever\n    close\n    closed\n    cloudy\n    clueless\n    clumsy\n    cluttered\n    coarse\n    cold\n    colorful\n    colorless\n    colossal\n    comfortable\n    common\n    compassionate\n    competent\n    complete\n    complex\n    complicated\n    composed\n    concerned\n    concrete\n    confused\n    conscious\n    considerate\n    constant\n    content\n    conventional\n    cooked\n    cool\n    cooperative\n    coordinated\n    corny\n    corrupt\n    costly\n    courageous\n    courteous\n    crafty\n    crazy\n    creamy\n    creative\n    creepy\n    criminal\n    crisp\n    critical\n    crooked\n    crowded\n    cruel\n    crushing\n    cuddly\n    cultivated\n    cultured\n    cumbersome\n    curly\n    curvy\n    cute\n    cylindrical\n    damaged\n    damp\n    dangerous\n    dapper\n    daring\n    darling\n    dark\n    dazzling\n    dead\n    deadly\n    deafening\n    dear\n    dearest\n    decent\n    decimal\n    decisive\n    deep\n    defenseless\n    defensive\n    defiant\n    deficient\n    definite\n    definitive\n    delayed\n    delectable\n    delicious\n    delightful\n    delirious\n    demanding\n    dense\n    dental\n    dependable\n    dependent\n    descriptive\n    deserted\n    detailed\n    determined\n    devoted\n    different\n    difficult\n    digital\n    diligent\n    dim\n    dimpled\n    dimwitted\n    direct\n    disastrous\n    discrete\n    disfigured\n    disgusting\n    disloyal\n    dismal\n    distant\n    downright\n    dreary\n    dirty\n    disguised\n    dishonest\n    dismal\n    distant\n    distinct\n    distorted\n    dizzy\n    dopey\n    doting\n    double\n    downright\n    drab\n    drafty\n    dramatic\n    dreary\n    droopy\n    dry\n    dual\n    dull\n    dutiful\n    each\n    eager\n    earnest\n    early\n    easy\n    easy-going\n    ecstatic\n    edible\n    educated\n    elaborate\n    elastic\n    elated\n    elderly\n    electric\n    elegant\n    elementary\n    elliptical\n    embarrassed\n    embellished\n    eminent\n    emotional\n    empty\n    enchanted\n    enchanting\n    energetic\n    enlightened\n    enormous\n    enraged\n    entire\n    envious\n    equal\n    equatorial\n    essential\n    esteemed\n    ethical\n    euphoric\n    even\n    evergreen\n    everlasting\n    every\n    evil\n    exalted\n    excellent\n    exemplary\n    exhausted\n    excitable\n    excited\n    exciting\n    exotic\n    expensive\n    experienced\n    expert\n    extraneous\n    extroverted\n    extra-large\n    extra-small\n    fabulous\n    failing\n    faint\n    fair\n    faithful\n    fake\n    false\n    familiar\n    famous\n    fancy\n    fantastic\n    far\n    faraway\n    far-flung\n    far-off\n    fast\n    fat\n    fatal\n    fatherly\n    favorable\n    favorite\n    fearful\n    fearless\n    feisty\n    feline\n    female\n    feminine\n    few\n    fickle\n    filthy\n    fine\n    finished\n    firm\n    first\n    firsthand\n    fitting\n    fixed\n    flaky\n    flamboyant\n    flashy\n    flat\n    flawed\n    flawless\n    flickering\n    flimsy\n    flippant\n    flowery\n    fluffy\n    fluid\n    flustered\n    focused\n    fond\n    foolhardy\n    foolish\n    forceful\n    forked\n    formal\n    forsaken\n    forthright\n    fortunate\n    fragrant\n    frail\n    frank\n    frayed\n    free\n    French\n    fresh\n    frequent\n    friendly\n    frightened\n    frightening\n    frigid\n    frilly\n    frizzy\n    frivolous\n    front\n    frosty\n    frozen\n    frugal\n    fruitful\n    full\n    fumbling\n    functional\n    funny\n    fussy\n    fuzzy\n    gargantuan\n    gaseous\n    general\n    generous\n    gentle\n    genuine\n    giant\n    giddy\n    gigantic\n    gifted\n    giving\n    glamorous\n    glaring\n    glass\n    gleaming\n    gleeful\n    glistening\n    glittering\n    gloomy\n    glorious\n    glossy\n    glum\n    golden\n    good\n    good-natured\n    gorgeous\n    graceful\n    gracious\n    grand\n    grandiose\n    granular\n    grateful\n    grave\n    gray\n    great\n    greedy\n    green\n    gregarious\n    grim\n    grimy\n    gripping\n    grizzled\n    gross\n    grotesque\n    grouchy\n    grounded\n    growing\n    growling\n    grown\n    grubby\n    gruesome\n    grumpy\n    guilty\n    gullible\n    gummy\n    hairy\n    half\n    handmade\n    handsome\n    handy\n    happy\n    happy-go-lucky\n    hard\n    hard-to-find\n    harmful\n    harmless\n    harmonious\n    harsh\n    hasty\n    hateful\n    haunting\n    healthy\n    heartfelt\n    hearty\n    heavenly\n    heavy\n    hefty\n    helpful\n    helpless\n    hidden\n    hideous\n    high\n    high-level\n    hilarious\n    hoarse\n    hollow\n    homely\n    honest\n    honorable\n    honored\n    hopeful\n    horrible\n    hospitable\n    hot\n    huge\n    humble\n    humiliating\n    humming\n    humongous\n    hungry\n    hurtful\n    husky\n    icky\n    icy\n    ideal\n    idealistic\n    identical\n    idle\n    idiotic\n    idolized\n    ignorant\n    ill\n    illegal\n    ill-fated\n    ill-informed\n    illiterate\n    illustrious\n    imaginary\n    imaginative\n    immaculate\n    immaterial\n    immediate\n    immense\n    impassioned\n    impeccable\n    impartial\n    imperfect\n    imperturbable\n    impish\n    impolite\n    important\n    impossible\n    impractical\n    impressionable\n    impressive\n    improbable\n    impure\n    inborn\n    incomparable\n    incompatible\n    incomplete\n    inconsequential\n    incredible\n    indelible\n    inexperienced\n    indolent\n    infamous\n    infantile\n    infatuated\n    inferior\n    infinite\n    informal\n    innocent\n    insecure\n    insidious\n    insignificant\n    insistent\n    instructive\n    insubstantial\n    intelligent\n    intent\n    intentional\n    interesting\n    internal\n    international\n    intrepid\n    ironclad\n    irresponsible\n    irritating\n    itchy\n    jaded\n    jagged\n    jam-packed\n    jaunty\n    jealous\n    jittery\n    joint\n    jolly\n    jovial\n    joyful\n    joyous\n    jubilant\n    judicious\n    juicy\n    jumbo\n    junior\n    jumpy\n    juvenile\n    kaleidoscopic\n    keen\n    key\n    kind\n    kindhearted\n    kindly\n    klutzy\n    knobby\n    knotty\n    knowledgeable\n    knowing\n    known\n    kooky\n    kosher\n    lame\n    lanky\n    large\n    last\n    lasting\n    late\n    lavish\n    lawful\n    lazy\n    leading\n    lean\n    leafy\n    left\n    legal\n    legitimate\n    light\n    lighthearted\n    likable\n    likely\n    limited\n    limp\n    limping\n    linear\n    lined\n    liquid\n    little\n    live\n    lively\n    livid\n    loathsome\n    lone\n    lonely\n    long\n    long-term\n    loose\n    lopsided\n    lost\n    loud\n    lovable\n    lovely\n    loving\n    low\n    loyal\n    lucky\n    lumbering\n    luminous\n    lumpy\n    lustrous\n    luxurious\n    mad\n    made-up\n    magnificent\n    majestic\n    major\n    male\n    mammoth\n    married\n    marvelous\n    masculine\n    massive\n    mature\n    meager\n    mealy\n    mean\n    measly\n    meaty\n    medical\n    mediocre\n    medium\n    meek\n    mellow\n    melodic\n    memorable\n    menacing\n    merry\n    messy\n    metallic\n    mild\n    milky\n    mindless\n    miniature\n    minor\n    minty\n    miserable\n    miserly\n    misguided\n    misty\n    mixed\n    modern\n    modest\n    moist\n    monstrous\n    monthly\n    monumental\n    moral\n    mortified\n    motherly\n    motionless\n    mountainous\n    muddy\n    muffled\n    multicolored\n    mundane\n    murky\n    mushy\n    musty\n    muted\n    mysterious\n    naive\n    narrow\n    nasty\n    natural\n    naughty\n    nautical\n    near\n    neat\n    necessary\n    needy\n    negative\n    neglected\n    negligible\n    neighboring\n    nervous\n    new\n    next\n    nice\n    nifty\n    nimble\n    nippy\n    nocturnal\n    noisy\n    nonstop\n    normal\n    notable\n    noted\n    noteworthy\n    novel\n    noxious\n    numb\n    nutritious\n    nutty\n    obedient\n    obese\n    oblong\n    oily\n    oblong\n    obvious\n    occasional\n    odd\n    oddball\n    offbeat\n    offensive\n    official\n    old\n    old-fashioned\n    only\n    open\n    optimal\n    optimistic\n    opulent\n    orange\n    orderly\n    organic\n    ornate\n    ornery\n    ordinary\n    original\n    other\n    our\n    outlying\n    outgoing\n    outlandish\n    outrageous\n    outstanding\n    oval\n    overcooked\n    overdue\n    overjoyed\n    overlooked\n    palatable\n    pale\n    paltry\n    parallel\n    parched\n    partial\n    passionate\n    past\n    pastel\n    peaceful\n    peppery\n    perfect\n    perfumed\n    periodic\n    perky\n    personal\n    pertinent\n    pesky\n    pessimistic\n    petty\n    phony\n    physical\n    piercing\n    pink\n    pitiful\n    plain\n    plaintive\n    plastic\n    playful\n    pleasant\n    pleased\n    pleasing\n    plump\n    plush\n    polished\n    polite\n    political\n    pointed\n    pointless\n    poised\n    poor\n    popular\n    portly\n    posh\n    positive\n    possible\n    potable\n    powerful\n    powerless\n    practical\n    precious\n    present\n    prestigious\n    pretty\n    precious\n    previous\n    pricey\n    prickly\n    primary\n    prime\n    pristine\n    private\n    prize\n    probable\n    productive\n    profitable\n    profuse\n    proper\n    proud\n    prudent\n    punctual\n    pungent\n    puny\n    pure\n    purple\n    pushy\n    putrid\n    puzzled\n    puzzling\n    quaint\n    qualified\n    quarrelsome\n    quarterly\n    queasy\n    querulous\n    questionable\n    quick\n    quick-witted\n    quiet\n    quintessential\n    quirky\n    quixotic\n    quizzical\n    radiant\n    ragged\n    rapid\n    rare\n    rash\n    raw\n    recent\n    reckless\n    rectangular\n    ready\n    real\n    realistic\n    reasonable\n    red\n    reflecting\n    regal\n    regular\n    reliable\n    relieved\n    remarkable\n    remorseful\n    remote\n    repentant\n    required\n    respectful\n    responsible\n    repulsive\n    revolving\n    rewarding\n    rich\n    rigid\n    right\n    ringed\n    ripe\n    roasted\n    robust\n    rosy\n    rotating\n    rotten\n    rough\n    round\n    rowdy\n    royal\n    rubbery\n    rundown\n    ruddy\n    rude\n    runny\n    rural\n    rusty\n    sad\n    safe\n    salty\n    same\n    sandy\n    sane\n    sarcastic\n    sardonic\n    satisfied\n    scaly\n    scarce\n    scared\n    scary\n    scented\n    scholarly\n    scientific\n    scornful\n    scratchy\n    scrawny\n    second\n    secondary\n    second-hand\n    secret\n    self-assured\n    self-reliant\n    selfish\n    sentimental\n    separate\n    serene\n    serious\n    serpentine\n    several\n    severe\n    shabby\n    shadowy\n    shady\n    shallow\n    shameful\n    shameless\n    sharp\n    shimmering\n    shiny\n    shocked\n    shocking\n    shoddy\n    short\n    short-term\n    showy\n    shrill\n    shy\n    sick\n    silent\n    silky\n    silly\n    silver\n    similar\n    simple\n    simplistic\n    sinful\n    single\n    sizzling\n    skeletal\n    skinny\n    sleepy\n    slight\n    slim\n    slimy\n    slippery\n    slow\n    slushy\n    small\n    smart\n    smoggy\n    smooth\n    smug\n    snappy\n    snarling\n    sneaky\n    sniveling\n    snoopy\n    sociable\n    soft\n    soggy\n    solid\n    somber\n    some\n    spherical\n    sophisticated\n    sore\n    sorrowful\n    soulful\n    soupy\n    sour\n    Spanish\n    sparkling\n    sparse\n    specific\n    spectacular\n    speedy\n    spicy\n    spiffy\n    spirited\n    spiteful\n    splendid\n    spotless\n    spotted\n    spry\n    square\n    squeaky\n    squiggly\n    stable\n    staid\n    stained\n    stale\n    standard\n    starchy\n    stark\n    starry\n    steep\n    sticky\n    stiff\n    stimulating\n    stingy\n    stormy\n    straight\n    strange\n    steel\n    strict\n    strident\n    striking\n    striped\n    strong\n    studious\n    stunning\n    stupendous\n    stupid\n    sturdy\n    stylish\n    subdued\n    submissive\n    substantial\n    subtle\n    suburban\n    sudden\n    sugary\n    sunny\n    super\n    superb\n    superficial\n    superior\n    supportive\n    sure-footed\n    surprised\n    suspicious\n    svelte\n    sweaty\n    sweet\n    sweltering\n    swift\n    sympathetic\n    tall\n    talkative\n    tame\n    tan\n    tangible\n    tart\n    tasty\n    tattered\n    taut\n    tedious\n    teeming\n    tempting\n    tender\n    tense\n    tepid\n    terrible\n    terrific\n    testy\n    thankful\n    that\n    these\n    thick\n    thin\n    third\n    thirsty\n    this\n    thorough\n    thorny\n    those\n    thoughtful\n    threadbare\n    thrifty\n    thunderous\n    tidy\n    tight\n    timely\n    tinted\n    tiny\n    tired\n    torn\n    total\n    tough\n    traumatic\n    treasured\n    tremendous\n    tragic\n    trained\n    tremendous\n    triangular\n    tricky\n    trifling\n    trim\n    trivial\n    troubled\n    true\n    trusting\n    trustworthy\n    trusty\n    truthful\n    tubby\n    turbulent\n    twin\n    ugly\n    ultimate\n    unacceptable\n    unaware\n    uncomfortable\n    uncommon\n    unconscious\n    understated\n    unequaled\n    uneven\n    unfinished\n    unfit\n    unfolded\n    unfortunate\n    unhappy\n    unhealthy\n    uniform\n    unimportant\n    unique\n    united\n    unkempt\n    unknown\n    unlawful\n    unlined\n    unlucky\n    unnatural\n    unpleasant\n    unrealistic\n    unripe\n    unruly\n    unselfish\n    unsightly\n    unsteady\n    unsung\n    untidy\n    untimely\n    untried\n    untrue\n    unused\n    unusual\n    unwelcome\n    unwieldy\n    unwilling\n    unwitting\n    unwritten\n    upbeat\n    upright\n    upset\n    urban\n    usable\n    used\n    useful\n    useless\n    utilized\n    utter\n    vacant\n    vague\n    vain\n    valid\n    valuable\n    vapid\n    variable\n    vast\n    velvety\n    venerated\n    vengeful\n    verifiable\n    vibrant\n    vicious\n    victorious\n    vigilant\n    vigorous\n    villainous\n    violet\n    violent\n    virtual\n    virtuous\n    visible\n    vital\n    vivacious\n    vivid\n    voluminous\n    wan\n    warlike\n    warm\n    warmhearted\n    warped\n    wary\n    wasteful\n    watchful\n    waterlogged\n    watery\n    wavy\n    wealthy\n    weak\n    weary\n    webbed\n    wee\n    weekly\n    weepy\n    weighty\n    weird\n    welcome\n    well-documented\n    well-groomed\n    well-informed\n    well-lit\n    well-made\n    well-off\n    well-to-do\n    well-worn\n    wet\n    which\n    whimsical\n    whirlwind\n    whispered\n    white\n    whole\n    whopping\n    wicked\n    wide\n    wide-eyed\n    wiggly\n    wild\n    willing\n    wilted\n    winding\n    windy\n    winged\n    wiry\n    wise\n    witty\n    wobbly\n    woeful\n    wonderful\n    wooden\n    woozy\n    wordy\n    worldly\n    worn\n    worried\n    worrisome\n    worse\n    worst\n    worthless\n    worthwhile\n    worthy\n    wrathful\n    wretched\n    writhing\n    wrong\n    wry\n    yawning\n    yearly\n    yellow\n    yellowish\n    young\n    youthful\n    yummy\n    zany\n    zealous\n    zesty\n    zigzag\n\nverb\n    accept\n    ache\n    acknowledge\n    act\n    add\n    admire\n    admit\n    admonish\n    advise\n    adopt\n    affirm\n    afford\n    agree\n    ail\n    alert\n    allege\n    allow\n    allude\n    amuse\n    analyze\n    announce\n    annoy\n    answer\n    apologize\n    appeal\n    appear\n    applaud\n    appreciate\n    approve\n    argue\n    arrange\n    arrest\n    arrive\n    articulate\n    ask\n    assert\n    assure\n    attach\n    attack\n    attempt\n    attend\n    attract\n    auction\n    avoid\n    avow\n    awake\n    babble\n    back\n    bake\n    balance\n    balk\n    ban\n    bang\n    bandage\n    bar\n    bare\n    bargain\n    bark\n    barrage\n    barter\n    baste\n    bat\n    bathe\n    battle\n    bawl\n    be\n    beam\n    bear\n    beat\n    become\n    befriend\n    beg\n    begin\n    behave\n    believe\n    bellow\n    belong\n    bend\n    berate\n    besiege\n    bestow\n    bet\n    bid\n    bite\n    bleach\n    bleed\n    bless\n    blind\n    blink\n    blot\n    blow\n    blurt\n    blush\n    boast\n    bob\n    boil\n    bolt\n    bomb\n    book\n    bore\n    borrow\n    bounce\n    bow\n    box\n    brag\n    brake\n    branch\n    brand\n    break\n    breathe\n    breed\n    bring\n    broadcast\n    broil\n    bruise\n    brush\n    bubble\n    build\n    bump\n    burn\n    burnish\n    bury\n    buy\n    buzz\n    cajole\n    calculate\n    call\n    camp\n    care\n    carry\n    carve\n    cause\n    caution\n    catch\n    challenge\n    change\n    chant\n    charge\n    chase\n    cheat\n    check\n    cheer\n    chew\n    chide\n    chip\n    choke\n    chomp\n    choose\n    chop\n    claim\n    clap\n    clean\n    clear\n    climb\n    clip\n    close\n    coach\n    coil\n    collect\n    color\n    comb\n    come\n    comfort\n    command\n    comment\n    communicate\n    compare\n    compete\n    complain\n    complete\n    concede\n    concentrate\n    concern\n    conclude\n    concur\n    confess\n    confide\n    confirm\n    connect\n    consent\n    consider\n    consist\n    contain\n    contend\n    continue\n    cook\n    copy\n    correct\n    cost\n    cough\n    count\n    counter\n    cover\n    covet\n    crack\n    crash\n    crave\n    crawl\n    crochet\n    cross\n    criticize\n    croak\n    cross-examine\n    crowd\n    crush\n    cry\n    cure\n    curl\n    curse\n    curve\n    cut\n    cycle\n    dam\n    damage\n    dance\n    dare\n    deal\n    debate\n    decay\n    deceive\n    decide\n    decipher\n    declare\n    decorate\n    delay\n    delight\n    deliver\n    demand\n    deny\n    depend\n    describe\n    desert\n    deserve\n    desire\n    deter\n    develop\n    dial\n    dictate\n    die\n    dig\n    digress\n    direct\n    disclose\n    dislike\n    dive\n    divide\n    divorce\n    divulge\n    do\n    dock\n    dole\n    dote\n    double\n    doubt\n    drag\n    drain\n    draw\n    dream\n    dress\n    drip\n    drill\n    drink\n    drive\n    drone\n    drop\n    drown\n    dry\n    dupe\n    dump\n    dust\n    dye\n    earn\n    eat\n    echo\n    edit\n    educate\n    elope\n    embarrass\n    emigrate\n    emit\n    emphasize\n    employ\n    empty\n    enchant\n    encode\n    encourage\n    end\n    enjoin\n    enjoy\n    enter\n    entertain\n    enunciate\n    envy\n    equivocate\n    escape\n    evacuate\n    evaporate\n    exaggerate\n    examine\n    excite\n    exclaim\n    excuse\n    exercise\n    exist\n    expand\n    expect\n    expel\n    exhort\n    explain\n    explode\n    explore\n    extend\n    extoll\n    face\n    fade\n    fail\n    fall\n    falter\n    fasten\n    favor\n    fax\n    fear\n    feed\n    feel\n    fence\n    fetch\n    fight\n    file\n    fill\n    film\n    find\n    fire\n    fish\n    fit\n    fix\n    flap\n    flash\n    flee\n    float\n    flood\n    floss\n    flow\n    flower\n    fly\n    fold\n    follow\n    fool\n    force\n    foretell\n    forget\n    forgive\n    form\n    found\n    frame\n    freeze\n    fret\n    frighten\n    fry\n    fume\n    garden\n    gasp\n    gather\n    gaze\n    gel\n    get\n    gild\n    give\n    glide\n    glue\n    gnaw\n    go\n    grab\n    grate\n    grease\n    greet\n    grill\n    grin\n    grip\n    groan\n    grow\n    growl\n    grumble\n    grunt\n    guarantee\n    guard\n    guess\n    guide\n    gurgle\n    gush\n    hail\n    hammer\n    hand\n    handle\n    hang\n    happen\n    harass\n    harm\n    harness\n    hate\n    haunt\n    have\n    head\n    heal\n    heap\n    hear\n    heat\n    help\n    hide\n    highlight\n    hijack\n    hinder\n    hint\n    hiss\n    hit\n    hold\n    hook\n    hoot\n    hop\n    hope\n    hover\n    howl\n    hug\n    hum\n    hunt\n    hurry\n    hurt\n    ice\n    identify\n    ignore\n    imagine\n    immigrate\n    imply\n    implore\n    impress\n    improve\n    include\n    increase\n    infect\n    inflate\n    influence\n    inform\n    infuse\n    inject\n    injure\n    inquire\n    insist\n    inspect\n    inspire\n    instruct\n    intend\n    interest\n    interfere\n    interject\n    interrupt\n    introduce\n    invent\n    invest\n    invite\n    irritate\n    iron\n    itch\n    jab\n    jabber\n    jail\n    jam\n    jeer\n    jest\n    jog\n    join\n    joke\n    jolt\n    judge\n    juggle\n    jump\n    keep\n    kick\n    kill\n    kiss\n    kneel\n    knit\n    knock\n    knot\n    know\n    label\n    lament\n    land\n    last\n    laugh\n    lay\n    lead\n    lean\n    learn\n    leave\n    lecture\n    lend\n    let\n    level\n    license\n    lick\n    lie\n    lift\n    light\n    lighten\n    like\n    list\n    listen\n    live\n    load\n    loan\n    lock\n    long\n    look\n    loosen\n    lose\n    love\n    lower\n    mail\n    maintain\n    make\n    man\n    manage\n    mar\n    march\n    mark\n    marry\n    marvel\n    mate\n    matter\n    mean\n    measure\n    meet\n    melt\n    memorize\n    mend\n    mention\n    merge\n    milk\n    mine\n    miss\n    mix\n    moan\n    moor\n    mourn\n    molt\n    move\n    mow\n    mug\n    multiply\n    mumble\n    murder\n    mutter\n    nag\n    nail\n    name\n    nap\n    need\n    nest\n    nod\n    note\n    notice\n    number\n    obey\n    object\n    observe\n    obtain\n    occur\n    offend\n    offer\n    ogle\n    oil\n    omit\n    open\n    operate\n    order\n    overflow\n    overrun\n    owe\n    own\n    pack\n    pad\n    paddle\n    paint\n    pant\n    park\n    part\n    pass\n    paste\n    pat\n    pause\n    pay\n    peck\n    pedal\n    peel\n    peep\n    peer\n    peg\n    pelt\n    perform\n    permit\n    pester\n    pet\n    phone\n    pick\n    pinch\n    pine\n    place\n    plan\n    plant\n    play\n    plead\n    please\n    pledge\n    plow\n    plug\n    point\n    poke\n    polish\n    ponder\n    pop\n    possess\n    post\n    postulate\n    pour\n    practice\n    pray\n    preach\n    precede\n    predict\n    prefer\n    prepare\n    present\n    preserve\n    press\n    pretend\n    prevent\n    prick\n    print\n    proceed\n    proclaim\n    produce\n    profess\n    program\n    promise\n    propose\n    protect\n    protest\n    provide\n    pry\n    pull\n    pump\n    punch\n    puncture\n    punish\n    push\n    put\n    question\n    quilt\n    quit\n    quiz\n    quote\n    race\n    radiate\n    rain\n    raise\n    rant\n    rain\n    rate\n    rave\n    reach\n    realize\n    read\n    rebuff\n    recall\n    receive\n    recite\n    recognize\n    recommend\n    record\n    reduce\n    reflect\n    refuse\n    regret\n    reign\n    reiterate\n    reject\n    rejoice\n    relate\n    relax\n    release\n    rely\n    remain\n    remember\n    remind\n    remove\n    repair\n    repeat\n    replace\n    reply\n    report\n    reprimand\n    reproduce\n    request\n    rescue\n    retire\n    retort\n    return\n    reveal\n    reverse\n    rhyme\n    ride\n    ring\n    rinse\n    rise\n    risk\n    roar\n    rob\n    rock\n    roll\n    rot\n    row\n    rub\n    ruin\n    rule\n    run\n    rush\n    sack\n    sail\n    satisfy\n    save\n    savor\n    saw\n    say\n    scare\n    scatter\n    scoff\n    scold\n    scoot\n    scorch\n    scrape\n    scratch\n    scream\n    screech\n    screw\n    scribble\n    seal\n    search\n    see\n    sell\n    send\n    sense\n    separate\n    serve\n    set\n    settle\n    sever\n    sew\n    shade\n    shampoo\n    share\n    shave\n    shelter\n    shift\n    shiver\n    shock\n    shoot\n    shop\n    shout\n    show\n    shriek\n    shrug\n    shut\n    sigh\n    sign\n    signal\n    sin\n    sing\n    singe\n    sip\n    sit\n    skate\n    skateboard\n    sketch\n    ski\n    skip\n    slap\n    sleep\n    slice\n    slide\n    slip\n    slow\n    smash\n    smell\n    smile\n    smoke\n    snap\n    snarl\n    snatch\n    sneak\n    sneer\n    sneeze\n    snicker\n    sniff\n    snore\n    snort\n    snoop\n    snooze\n    snow\n    soak\n    sob\n    soothe\n    sound\n    sow\n    span\n    spare\n    spark\n    sparkle\n    speak\n    speculate\n    spell\n    spend\n    spill\n    spin\n    spoil\n    spot\n    spray\n    sprout\n    sputter\n    squash\n    squeeze\n    stab\n    stain\n    stammer\n    stamp\n    stand\n    star\n    stare\n    start\n    stash\n    state\n    stay\n    steer\n    step\n    stipulate\n    stir\n    stitch\n    stop\n    store\n    strap\n    storm\n    stow\n    strengthen\n    stress\n    stretch\n    strip\n    stroke\n    stuff\n    stutter\n    stray\n    strum\n    strut\n    stun\n    stunt\n    submerge\n    succeed\n    suffer\n    suggest\n    suit\n    supply\n    support\n    suppose\n    surmise\n    surprise\n    surround\n    suspect\n    suspend\n    sway\n    swear\n    swim\n    swing\n    switch\n    swoop\n    sympathize\n    talk\n    take\n    tame\n    tap\n    taste\n    taunt\n    teach\n    tear\n    tease\n    telephone\n    tell\n    tempt\n    terrify\n    test\n    testify\n    thank\n    thaw\n    theorize\n    think\n    threaten\n    throw\n    thunder\n    tick\n    tickle\n    tie\n    time\n    tip\n    tire\n    toast\n    toss\n    touch\n    tour\n    tow\n    trace\n    track\n    trade\n    train\n    translate\n    transport\n    trap\n    travel\n    treat\n    tremble\n    trick\n    trickle\n    trim\n    trip\n    trot\n    trouble\n    trust\n    trounce\n    try\n    tug\n    tumble\n    turn\n    twist\n    type\n    understand\n    undress\n    unfasten\n    unite\n    unlock\n    unpack\n    uphold\n    upset\n    upstage\n    urge\n    untie\n    use\n    usurp\n    utter\n    vacuum\n    value\n    vanish\n    vanquish\n    venture\n    visit\n    voice\n    volunteer\n    vote\n    vouch\n    wail\n    wait\n    wake\n    walk\n    wallow\n    wander\n    want\n    warm\n    warn\n    wash\n    waste\n    watch\n    water\n    wave\n    waver\n    wear\n    weave\n    wed\n    weigh\n    welcome\n    whimper\n    whine\n    whip\n    whirl\n    whisper\n    whistle\n    win\n    wink\n    wipe\n    wish\n    wobble\n    wonder\n    work\n    worry\n    wrap\n    wreck\n    wrestle\n    wriggle\n    write\n    writhe\n    yawn\n    yell\n    yelp\n    yield\n    yodel\n    zip\n    zoom\n';

var _mordrax$cotwelm$Monsters_Factory$make_ = F2(
	function (attributes, monsterType) {
		return {
			name: _elm_community$string_extra$String_Extra$toTitleCase(
				_elm_community$string_extra$String_Extra$humanize(
					_elm_lang$core$Basics$toString(monsterType))),
			type_: _mordrax$cotwelm$Types$Monster,
			monsterType: monsterType,
			position: {ctor: '_Tuple2', _0: 0, _1: 0},
			stats: _mordrax$cotwelm$Stats$init(attributes),
			attributes: attributes,
			equipment: _mordrax$cotwelm$Equipment$init,
			expLevel: 1,
			bodySize: _mordrax$cotwelm$Types$Medium,
			attackTypes: {
				ctor: '::',
				_0: _mordrax$cotwelm$Monsters_Types$Melee,
				_1: {ctor: '[]'}
			},
			attacks: 1,
			speed: 100,
			visible: _mordrax$cotwelm$Types$Hidden
		};
	});
var _mordrax$cotwelm$Monsters_Factory$makeUndead = _mordrax$cotwelm$Monsters_Factory$make_(
	A5(_mordrax$cotwelm$Attributes$Attributes, 0, 100, 50, 100, 50));
var _mordrax$cotwelm$Monsters_Factory$makeCaster = function (_p0) {
	return A2(
		_mordrax$cotwelm$Monsters_Model$setAttackTypes,
		{
			ctor: '::',
			_0: _mordrax$cotwelm$Monsters_Types$Spell,
			_1: {ctor: '[]'}
		},
		A2(
			_mordrax$cotwelm$Monsters_Factory$make_,
			A5(_mordrax$cotwelm$Attributes$Attributes, 0, 25, 50, 50, 150),
			_p0));
};
var _mordrax$cotwelm$Monsters_Factory$makeElemental = _mordrax$cotwelm$Monsters_Factory$make_(
	A5(_mordrax$cotwelm$Attributes$Attributes, 0, 100, 60, 100, 50));
var _mordrax$cotwelm$Monsters_Factory$makeDevil = _mordrax$cotwelm$Monsters_Factory$make_(
	A5(_mordrax$cotwelm$Attributes$Attributes, 0, 90, 75, 90, 80));
var _mordrax$cotwelm$Monsters_Factory$makeDragon = function (_p1) {
	return A2(
		_mordrax$cotwelm$Monsters_Model$setBodySize,
		_mordrax$cotwelm$Types$Huge,
		A2(
			_mordrax$cotwelm$Monsters_Factory$make_,
			A5(_mordrax$cotwelm$Attributes$Attributes, 0, 300, 100, 300, 100),
			_p1));
};
var _mordrax$cotwelm$Monsters_Factory$makeStatue = _mordrax$cotwelm$Monsters_Factory$make_(
	A5(_mordrax$cotwelm$Attributes$Attributes, 0, 50, 50, 75, 50));
var _mordrax$cotwelm$Monsters_Factory$plateEquipment = A2(
	_mordrax$cotwelm$Equipment$setMany_,
	{
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: _mordrax$cotwelm$Equipment$ArmourSlot,
			_1: _mordrax$cotwelm$Item$new(
				_mordrax$cotwelm$Item_Data$ItemTypeArmour(_mordrax$cotwelm$Item_Data$PlateArmour))
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: _mordrax$cotwelm$Equipment$HelmetSlot,
				_1: _mordrax$cotwelm$Item$new(
					_mordrax$cotwelm$Item_Data$ItemTypeHelmet(_mordrax$cotwelm$Item_Data$MeteoricSteelHelmet))
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: _mordrax$cotwelm$Equipment$GauntletsSlot,
					_1: _mordrax$cotwelm$Item$new(
						_mordrax$cotwelm$Item_Data$ItemTypeGauntlets(_mordrax$cotwelm$Item_Data$NormalGauntlets))
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: _mordrax$cotwelm$Equipment$BracersSlot,
						_1: _mordrax$cotwelm$Item$new(
							_mordrax$cotwelm$Item_Data$ItemTypeBracers(_mordrax$cotwelm$Item_Data$NormalBracers))
					},
					_1: {ctor: '[]'}
				}
			}
		}
	},
	_mordrax$cotwelm$Equipment$init);
var _mordrax$cotwelm$Monsters_Factory$ironEquipment = A2(
	_mordrax$cotwelm$Equipment$setMany_,
	{
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: _mordrax$cotwelm$Equipment$ArmourSlot,
			_1: _mordrax$cotwelm$Item$new(
				_mordrax$cotwelm$Item_Data$ItemTypeArmour(_mordrax$cotwelm$Item_Data$ChainMail))
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: _mordrax$cotwelm$Equipment$HelmetSlot,
				_1: _mordrax$cotwelm$Item$new(
					_mordrax$cotwelm$Item_Data$ItemTypeHelmet(_mordrax$cotwelm$Item_Data$IronHelmet))
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: _mordrax$cotwelm$Equipment$GauntletsSlot,
					_1: _mordrax$cotwelm$Item$new(
						_mordrax$cotwelm$Item_Data$ItemTypeGauntlets(_mordrax$cotwelm$Item_Data$NormalGauntlets))
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: _mordrax$cotwelm$Equipment$BracersSlot,
						_1: _mordrax$cotwelm$Item$new(
							_mordrax$cotwelm$Item_Data$ItemTypeBracers(_mordrax$cotwelm$Item_Data$NormalBracers))
					},
					_1: {ctor: '[]'}
				}
			}
		}
	},
	_mordrax$cotwelm$Equipment$init);
var _mordrax$cotwelm$Monsters_Factory$leatherEquipment = A2(
	_mordrax$cotwelm$Equipment$setMany_,
	{
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: _mordrax$cotwelm$Equipment$ArmourSlot,
			_1: _mordrax$cotwelm$Item$new(
				_mordrax$cotwelm$Item_Data$ItemTypeArmour(_mordrax$cotwelm$Item_Data$LeatherArmour))
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: _mordrax$cotwelm$Equipment$HelmetSlot,
				_1: _mordrax$cotwelm$Item$new(
					_mordrax$cotwelm$Item_Data$ItemTypeHelmet(_mordrax$cotwelm$Item_Data$LeatherHelmet))
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: _mordrax$cotwelm$Equipment$GauntletsSlot,
					_1: _mordrax$cotwelm$Item$new(
						_mordrax$cotwelm$Item_Data$ItemTypeGauntlets(_mordrax$cotwelm$Item_Data$NormalGauntlets))
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: _mordrax$cotwelm$Equipment$BracersSlot,
						_1: _mordrax$cotwelm$Item$new(
							_mordrax$cotwelm$Item_Data$ItemTypeBracers(_mordrax$cotwelm$Item_Data$NormalBracers))
					},
					_1: {ctor: '[]'}
				}
			}
		}
	},
	_mordrax$cotwelm$Equipment$init);
var _mordrax$cotwelm$Monsters_Factory$makeHumanoid = function (_p2) {
	return A2(
		_mordrax$cotwelm$Monsters_Model$setEquipment,
		_mordrax$cotwelm$Monsters_Factory$leatherEquipment,
		A2(
			_mordrax$cotwelm$Monsters_Model$setBodySize,
			_mordrax$cotwelm$Types$Medium,
			A2(
				_mordrax$cotwelm$Monsters_Factory$make_,
				A5(_mordrax$cotwelm$Attributes$Attributes, 0, 50, 50, 50, 50),
				_p2)));
};
var _mordrax$cotwelm$Monsters_Factory$makeAnimalMen = function (_p3) {
	return A2(
		_mordrax$cotwelm$Monsters_Model$setEquipment,
		_mordrax$cotwelm$Monsters_Factory$leatherEquipment,
		A2(
			_mordrax$cotwelm$Monsters_Factory$make_,
			A5(_mordrax$cotwelm$Attributes$Attributes, 0, 75, 60, 60, 30),
			_p3));
};
var _mordrax$cotwelm$Monsters_Factory$makeGiant = function (_p4) {
	return A2(
		_mordrax$cotwelm$Monsters_Model$setEquipment,
		_mordrax$cotwelm$Monsters_Factory$leatherEquipment,
		A2(
			_mordrax$cotwelm$Monsters_Model$setBodySize,
			_mordrax$cotwelm$Types$Huge,
			A2(
				_mordrax$cotwelm$Monsters_Factory$make_,
				A5(_mordrax$cotwelm$Attributes$Attributes, 0, 200, 40, 200, 50),
				_p4)));
};
var _mordrax$cotwelm$Monsters_Factory$makeShield = function (shieldType) {
	return _mordrax$cotwelm$Item$new(
		_mordrax$cotwelm$Item_Data$ItemTypeShield(shieldType));
};
var _mordrax$cotwelm$Monsters_Factory$armourSlot = function (armourType) {
	return {
		ctor: '_Tuple2',
		_0: _mordrax$cotwelm$Equipment$ArmourSlot,
		_1: _mordrax$cotwelm$Item$new(
			_mordrax$cotwelm$Item_Data$ItemTypeArmour(armourType))
	};
};
var _mordrax$cotwelm$Monsters_Factory$weaponSlot = function (weaponType) {
	return {
		ctor: '_Tuple2',
		_0: _mordrax$cotwelm$Equipment$WeaponSlot,
		_1: _mordrax$cotwelm$Item$new(
			_mordrax$cotwelm$Item_Data$ItemTypeWeapon(weaponType))
	};
};
var _mordrax$cotwelm$Monsters_Factory$basicEquipment = F2(
	function (weapon, armour) {
		return A2(
			_mordrax$cotwelm$Equipment$setMany_,
			{
				ctor: '::',
				_0: _mordrax$cotwelm$Monsters_Factory$weaponSlot(weapon),
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Monsters_Factory$armourSlot(armour),
					_1: {ctor: '[]'}
				}
			},
			_mordrax$cotwelm$Equipment$init);
	});
var _mordrax$cotwelm$Monsters_Factory$makeGiantInsect = function (_p5) {
	return A2(
		_mordrax$cotwelm$Monsters_Model$setBodySize,
		_mordrax$cotwelm$Types$Large,
		A2(
			_mordrax$cotwelm$Monsters_Model$setEquipment,
			A2(_mordrax$cotwelm$Monsters_Factory$basicEquipment, _mordrax$cotwelm$Item_Data$Pincers, _mordrax$cotwelm$Item_Data$Shell),
			A2(
				_mordrax$cotwelm$Monsters_Factory$make_,
				A5(_mordrax$cotwelm$Attributes$Attributes, 0, 75, 50, 40, 10),
				_p5)));
};
var _mordrax$cotwelm$Monsters_Factory$makeCanine = function (_p6) {
	return A2(
		_mordrax$cotwelm$Monsters_Model$setBodySize,
		_mordrax$cotwelm$Types$Small,
		A2(
			_mordrax$cotwelm$Monsters_Model$setEquipment,
			A2(_mordrax$cotwelm$Monsters_Factory$basicEquipment, _mordrax$cotwelm$Item_Data$SmallBite, _mordrax$cotwelm$Item_Data$ToughHide),
			A2(
				_mordrax$cotwelm$Monsters_Factory$make_,
				A5(_mordrax$cotwelm$Attributes$Attributes, 0, 50, 80, 40, 40),
				_p6)));
};
var _mordrax$cotwelm$Monsters_Factory$makeSmallAnimal = function (_p7) {
	return A2(
		_mordrax$cotwelm$Monsters_Model$setBodySize,
		_mordrax$cotwelm$Types$Small,
		A2(
			_mordrax$cotwelm$Monsters_Model$setEquipment,
			A2(_mordrax$cotwelm$Monsters_Factory$basicEquipment, _mordrax$cotwelm$Item_Data$SmallClaws, _mordrax$cotwelm$Item_Data$SoftHide),
			A2(
				_mordrax$cotwelm$Monsters_Factory$make_,
				A5(_mordrax$cotwelm$Attributes$Attributes, 0, 40, 60, 60, 30),
				_p7)));
};
var _mordrax$cotwelm$Monsters_Factory$makeLargeAnimal = function (_p8) {
	return A2(
		_mordrax$cotwelm$Monsters_Model$setBodySize,
		_mordrax$cotwelm$Types$Large,
		A2(
			_mordrax$cotwelm$Monsters_Model$setEquipment,
			A2(_mordrax$cotwelm$Monsters_Factory$basicEquipment, _mordrax$cotwelm$Item_Data$LargeClaws, _mordrax$cotwelm$Item_Data$ToughHide),
			A2(
				_mordrax$cotwelm$Monsters_Factory$make_,
				A5(_mordrax$cotwelm$Attributes$Attributes, 0, 80, 60, 80, 30),
				_p8)));
};
var _mordrax$cotwelm$Monsters_Factory$make = F2(
	function (monsterType, position) {
		var addPosition = F2(
			function (makeFn, monsterType) {
				return A2(
					_mordrax$cotwelm$Monsters_Model$setPosition,
					position,
					makeFn(monsterType));
			});
		var _p9 = monsterType;
		switch (_p9.ctor) {
			case 'GreenSlime':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setPosition,
					position,
					A2(
						_mordrax$cotwelm$Monsters_Model$setAttackTypes,
						{
							ctor: '::',
							_0: _mordrax$cotwelm$Monsters_Types$Acid,
							_1: {ctor: '[]'}
						},
						A2(
							_mordrax$cotwelm$Monsters_Factory$make_,
							A5(_mordrax$cotwelm$Attributes$Attributes, 0, 50, 50, 75, 50),
							_mordrax$cotwelm$Monsters_Types$GreenSlime)));
			case 'GelatinousGlob':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setPosition,
					position,
					A2(
						_mordrax$cotwelm$Monsters_Model$setAttackTypes,
						{
							ctor: '::',
							_0: _mordrax$cotwelm$Monsters_Types$Steal,
							_1: {ctor: '[]'}
						},
						A2(
							_mordrax$cotwelm$Monsters_Factory$make_,
							A5(_mordrax$cotwelm$Attributes$Attributes, 0, 75, 75, 100, 50),
							_mordrax$cotwelm$Monsters_Types$GelatinousGlob)));
			case 'AnimatedWoodenStatue':
				return A5(
					_mordrax$cotwelm$Monsters_Model$scaleAttributes,
					0.75,
					1,
					0.75,
					1,
					A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeStatue, _mordrax$cotwelm$Monsters_Types$AnimatedWoodenStatue));
			case 'AnimatedBronzeStatue':
				return A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeStatue, _mordrax$cotwelm$Monsters_Types$AnimatedBronzeStatue);
			case 'AnimatedIronStatue':
				return A5(
					_mordrax$cotwelm$Monsters_Model$scaleAttributes,
					1.5,
					1,
					1,
					1,
					A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeStatue, _mordrax$cotwelm$Monsters_Types$AnimatedIronStatue));
			case 'AnimatedMarbleStatue':
				return A5(
					_mordrax$cotwelm$Monsters_Model$scaleAttributes,
					1.5,
					0.8,
					2,
					1,
					A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeStatue, _mordrax$cotwelm$Monsters_Types$AnimatedMarbleStatue));
			case 'Kobold':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setEquipmentSlotIfAble,
					_mordrax$cotwelm$Monsters_Factory$weaponSlot(_mordrax$cotwelm$Item_Data$Crossbow),
					A2(
						_mordrax$cotwelm$Monsters_Model$setAttackTypes,
						{
							ctor: '::',
							_0: _mordrax$cotwelm$Monsters_Types$Melee,
							_1: {
								ctor: '::',
								_0: _mordrax$cotwelm$Monsters_Types$Ranged,
								_1: {ctor: '[]'}
							}
						},
						A2(
							_mordrax$cotwelm$Monsters_Model$setBodySize,
							_mordrax$cotwelm$Types$Small,
							A5(
								_mordrax$cotwelm$Monsters_Model$scaleAttributes,
								0.5,
								1.5,
								0.5,
								1,
								A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeHumanoid, _mordrax$cotwelm$Monsters_Types$Kobold)))));
			case 'Goblin':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setEquipmentSlotIfAble,
					_mordrax$cotwelm$Monsters_Factory$weaponSlot(_mordrax$cotwelm$Item_Data$Club),
					A2(
						_mordrax$cotwelm$Monsters_Model$setBodySize,
						_mordrax$cotwelm$Types$Small,
						A5(
							_mordrax$cotwelm$Monsters_Model$scaleAttributes,
							0.5,
							1,
							0.6,
							1,
							A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeHumanoid, _mordrax$cotwelm$Monsters_Types$Goblin))));
			case 'Hobgoblin':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setEquipmentSlotIfAble,
					_mordrax$cotwelm$Monsters_Factory$weaponSlot(_mordrax$cotwelm$Item_Data$Spear),
					A5(
						_mordrax$cotwelm$Monsters_Model$scaleAttributes,
						0.7,
						1,
						0.7,
						1,
						A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeHumanoid, _mordrax$cotwelm$Monsters_Types$Hobgoblin)));
			case 'Bandit':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setAttackTypes,
					{
						ctor: '::',
						_0: _mordrax$cotwelm$Monsters_Types$Ranged,
						_1: {ctor: '[]'}
					},
					A2(
						_mordrax$cotwelm$Monsters_Model$setEquipmentSlotIfAble,
						_mordrax$cotwelm$Monsters_Factory$weaponSlot(_mordrax$cotwelm$Item_Data$Bow),
						A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeHumanoid, _mordrax$cotwelm$Monsters_Types$Bandit)));
			case 'SmirkingSneakThief':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setAttackTypes,
					{
						ctor: '::',
						_0: _mordrax$cotwelm$Monsters_Types$Steal,
						_1: {ctor: '[]'}
					},
					A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeHumanoid, _mordrax$cotwelm$Monsters_Types$SmirkingSneakThief));
			case 'EvilWarrior':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setEquipmentSlotIfAble,
					_mordrax$cotwelm$Monsters_Factory$weaponSlot(_mordrax$cotwelm$Item_Data$BastardSword),
					A2(
						_mordrax$cotwelm$Monsters_Model$setEquipment,
						_mordrax$cotwelm$Monsters_Factory$ironEquipment,
						A5(
							_mordrax$cotwelm$Monsters_Model$scaleAttributes,
							1.5,
							1.5,
							1.5,
							1,
							A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeHumanoid, _mordrax$cotwelm$Monsters_Types$EvilWarrior))));
			case 'GiantScorpion':
				return A5(
					_mordrax$cotwelm$Monsters_Model$scaleAttributes,
					1.0,
					1.2,
					1.0,
					1.0,
					A2(
						_mordrax$cotwelm$Monsters_Model$setAttackTypes,
						{
							ctor: '::',
							_0: _mordrax$cotwelm$Monsters_Types$Poison,
							_1: {
								ctor: '::',
								_0: _mordrax$cotwelm$Monsters_Types$Melee,
								_1: {ctor: '[]'}
							}
						},
						A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeGiantInsect, _mordrax$cotwelm$Monsters_Types$GiantScorpion)));
			case 'GiantTrapdoorSpider':
				return A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeGiantInsect, _mordrax$cotwelm$Monsters_Types$GiantTrapdoorSpider);
			case 'CarrionCreeper':
				return A5(
					_mordrax$cotwelm$Monsters_Model$scaleAttributes,
					1.0,
					1.0,
					1.5,
					1.0,
					A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeGiantInsect, _mordrax$cotwelm$Monsters_Types$CarrionCreeper));
			case 'WildDog':
				return A5(
					_mordrax$cotwelm$Monsters_Model$scaleAttributes,
					0.8,
					0.8,
					0.5,
					1,
					A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeCanine, _mordrax$cotwelm$Monsters_Types$WildDog));
			case 'GrayWolf':
				return A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeCanine, _mordrax$cotwelm$Monsters_Types$GrayWolf);
			case 'WhiteWolf':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setAttacks,
					2,
					A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeCanine, _mordrax$cotwelm$Monsters_Types$WhiteWolf));
			case 'GiantRat':
				return A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeSmallAnimal, _mordrax$cotwelm$Monsters_Types$GiantRat);
			case 'GiantBat':
				return A5(
					_mordrax$cotwelm$Monsters_Model$scaleAttributes,
					0.8,
					1.2,
					1,
					1,
					A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeSmallAnimal, _mordrax$cotwelm$Monsters_Types$GiantBat));
			case 'LargeSnake':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setAttackTypes,
					{
						ctor: '::',
						_0: _mordrax$cotwelm$Monsters_Types$Poison,
						_1: {ctor: '[]'}
					},
					A2(
						_mordrax$cotwelm$Monsters_Model$setBodySize,
						_mordrax$cotwelm$Types$Tiny,
						A2(
							_mordrax$cotwelm$Monsters_Model$setEquipment,
							A2(_mordrax$cotwelm$Monsters_Factory$basicEquipment, _mordrax$cotwelm$Item_Data$Fangs, _mordrax$cotwelm$Item_Data$SoftHide),
							A5(
								_mordrax$cotwelm$Monsters_Model$scaleAttributes,
								0.5,
								1,
								0.7,
								1,
								A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeSmallAnimal, _mordrax$cotwelm$Monsters_Types$LargeSnake)))));
			case 'Viper':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setAttacks,
					2,
					A2(
						_mordrax$cotwelm$Monsters_Model$setAttackTypes,
						{
							ctor: '::',
							_0: _mordrax$cotwelm$Monsters_Types$Poison,
							_1: {ctor: '[]'}
						},
						A2(
							_mordrax$cotwelm$Monsters_Model$setBodySize,
							_mordrax$cotwelm$Types$Tiny,
							A2(
								_mordrax$cotwelm$Monsters_Model$setEquipment,
								A2(_mordrax$cotwelm$Monsters_Factory$basicEquipment, _mordrax$cotwelm$Item_Data$Fangs, _mordrax$cotwelm$Item_Data$SoftHide),
								A5(
									_mordrax$cotwelm$Monsters_Model$scaleAttributes,
									0.5,
									1.5,
									0.5,
									1.5,
									A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeSmallAnimal, _mordrax$cotwelm$Monsters_Types$Viper))))));
			case 'HugeLizard':
				return A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeLargeAnimal, _mordrax$cotwelm$Monsters_Types$HugeLizard);
			case 'GiantRedAnt':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setEquipment,
					A2(_mordrax$cotwelm$Monsters_Factory$basicEquipment, _mordrax$cotwelm$Item_Data$Pincers, _mordrax$cotwelm$Item_Data$Shell),
					A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeLargeAnimal, _mordrax$cotwelm$Monsters_Types$GiantRedAnt));
			case 'GruesomeTroll':
				return A5(
					_mordrax$cotwelm$Monsters_Model$scaleAttributes,
					1.5,
					1,
					1,
					1,
					A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeLargeAnimal, _mordrax$cotwelm$Monsters_Types$GruesomeTroll));
			case 'BrownBear':
				return A5(
					_mordrax$cotwelm$Monsters_Model$scaleAttributes,
					0.8,
					1.2,
					1,
					1,
					A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeLargeAnimal, _mordrax$cotwelm$Monsters_Types$BrownBear));
			case 'CaveBear':
				return A5(
					_mordrax$cotwelm$Monsters_Model$scaleAttributes,
					1.2,
					1.2,
					1.2,
					1,
					A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeLargeAnimal, _mordrax$cotwelm$Monsters_Types$CaveBear));
			case 'Manticore':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setAttacks,
					3,
					A2(
						_mordrax$cotwelm$Monsters_Model$setAttackTypes,
						{
							ctor: '::',
							_0: _mordrax$cotwelm$Monsters_Types$Melee,
							_1: {
								ctor: '::',
								_0: _mordrax$cotwelm$Monsters_Types$Poison,
								_1: {ctor: '[]'}
							}
						},
						A5(
							_mordrax$cotwelm$Monsters_Model$scaleAttributes,
							2,
							1,
							1.5,
							1,
							A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeLargeAnimal, _mordrax$cotwelm$Monsters_Types$Manticore))));
			case 'Skeleton':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setEquipment,
					A2(_mordrax$cotwelm$Monsters_Factory$basicEquipment, _mordrax$cotwelm$Item_Data$ShortSword, _mordrax$cotwelm$Item_Data$Bones),
					A5(
						_mordrax$cotwelm$Monsters_Model$scaleAttributes,
						0.6,
						0.8,
						0.5,
						0.2,
						A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeUndead, _mordrax$cotwelm$Monsters_Types$Skeleton)));
			case 'WalkingCorpse':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setEquipment,
					A2(_mordrax$cotwelm$Monsters_Factory$basicEquipment, _mordrax$cotwelm$Item_Data$SmallClaws, _mordrax$cotwelm$Item_Data$SoftHide),
					A5(
						_mordrax$cotwelm$Monsters_Model$scaleAttributes,
						0.6,
						0.8,
						0.75,
						0.2,
						A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeUndead, _mordrax$cotwelm$Monsters_Types$WalkingCorpse)));
			case 'Shadow':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setEquipmentSlotIfAble,
					_mordrax$cotwelm$Monsters_Factory$weaponSlot(_mordrax$cotwelm$Item_Data$BroadSword),
					A5(
						_mordrax$cotwelm$Monsters_Model$scaleAttributes,
						0.8,
						1,
						1,
						0.5,
						A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeUndead, _mordrax$cotwelm$Monsters_Types$Shadow)));
			case 'EerieGhost':
				return A5(
					_mordrax$cotwelm$Monsters_Model$scaleAttributes,
					1,
					1.2,
					1.2,
					1,
					A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeUndead, _mordrax$cotwelm$Monsters_Types$EerieGhost));
			case 'BarrowWight':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setAttackTypes,
					{
						ctor: '::',
						_0: _mordrax$cotwelm$Monsters_Types$Drain,
						_1: {ctor: '[]'}
					},
					A5(
						_mordrax$cotwelm$Monsters_Model$scaleAttributes,
						1.2,
						1.2,
						1.2,
						0.8,
						A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeUndead, _mordrax$cotwelm$Monsters_Types$BarrowWight)));
			case 'DarkWraith':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setAttackTypes,
					{
						ctor: '::',
						_0: _mordrax$cotwelm$Monsters_Types$Drain,
						_1: {ctor: '[]'}
					},
					A5(
						_mordrax$cotwelm$Monsters_Model$scaleAttributes,
						50,
						50,
						50,
						50,
						A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeUndead, _mordrax$cotwelm$Monsters_Types$DarkWraith)));
			case 'Spectre':
				return A5(
					_mordrax$cotwelm$Monsters_Model$scaleAttributes,
					1.5,
					1.5,
					2,
					1.2,
					A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeUndead, _mordrax$cotwelm$Monsters_Types$Spectre));
			case 'Vampire':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setAttackTypes,
					{
						ctor: '::',
						_0: _mordrax$cotwelm$Monsters_Types$Drain,
						_1: {ctor: '[]'}
					},
					A5(
						_mordrax$cotwelm$Monsters_Model$scaleAttributes,
						2,
						2,
						2,
						2,
						A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeUndead, _mordrax$cotwelm$Monsters_Types$Vampire)));
			case 'RatMan':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setEquipment,
					A2(_mordrax$cotwelm$Monsters_Factory$basicEquipment, _mordrax$cotwelm$Item_Data$LargeClaws, _mordrax$cotwelm$Item_Data$ToughHide),
					A5(
						_mordrax$cotwelm$Monsters_Model$scaleAttributes,
						1,
						1.2,
						1,
						2,
						A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeAnimalMen, _mordrax$cotwelm$Monsters_Types$RatMan)));
			case 'BearMan':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setEquipment,
					A2(_mordrax$cotwelm$Monsters_Factory$basicEquipment, _mordrax$cotwelm$Item_Data$Flail, _mordrax$cotwelm$Item_Data$ToughHide),
					A5(
						_mordrax$cotwelm$Monsters_Model$scaleAttributes,
						1.5,
						1,
						1.5,
						0.5,
						A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeAnimalMen, _mordrax$cotwelm$Monsters_Types$BearMan)));
			case 'BullMan':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setEquipment,
					A2(_mordrax$cotwelm$Monsters_Factory$basicEquipment, _mordrax$cotwelm$Item_Data$BattleAxe, _mordrax$cotwelm$Item_Data$ToughHide),
					A5(
						_mordrax$cotwelm$Monsters_Model$scaleAttributes,
						2,
						1,
						2,
						0.5,
						A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeAnimalMen, _mordrax$cotwelm$Monsters_Types$BullMan)));
			case 'WolfMan':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setEquipment,
					A2(_mordrax$cotwelm$Monsters_Factory$basicEquipment, _mordrax$cotwelm$Item_Data$MorningStar, _mordrax$cotwelm$Item_Data$ToughHide),
					A5(
						_mordrax$cotwelm$Monsters_Model$scaleAttributes,
						1,
						1.5,
						1,
						1,
						A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeAnimalMen, _mordrax$cotwelm$Monsters_Types$WolfMan)));
			case 'Wizard':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setAttackTypes,
					{
						ctor: '::',
						_0: _mordrax$cotwelm$Monsters_Types$Spell,
						_1: {ctor: '[]'}
					},
					A5(
						_mordrax$cotwelm$Monsters_Model$scaleAttributes,
						50,
						50,
						50,
						50,
						A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeCaster, _mordrax$cotwelm$Monsters_Types$Wizard)));
			case 'Necromancer':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setAttackTypes,
					{
						ctor: '::',
						_0: _mordrax$cotwelm$Monsters_Types$Spell,
						_1: {ctor: '[]'}
					},
					A5(
						_mordrax$cotwelm$Monsters_Model$scaleAttributes,
						50,
						50,
						50,
						50,
						A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeCaster, _mordrax$cotwelm$Monsters_Types$Necromancer)));
			case 'DustElemental':
				return A5(
					_mordrax$cotwelm$Monsters_Model$scaleAttributes,
					1,
					2,
					1,
					1,
					A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeElemental, _mordrax$cotwelm$Monsters_Types$DustElemental));
			case 'IceElemental':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setAttackTypes,
					{
						ctor: '::',
						_0: _mordrax$cotwelm$Monsters_Types$Ice,
						_1: {ctor: '[]'}
					},
					A5(
						_mordrax$cotwelm$Monsters_Model$scaleAttributes,
						1.5,
						1,
						1.5,
						1,
						A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeElemental, _mordrax$cotwelm$Monsters_Types$IceElemental)));
			case 'WindElemental':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setAttackTypes,
					{
						ctor: '::',
						_0: _mordrax$cotwelm$Monsters_Types$Lightning,
						_1: {ctor: '[]'}
					},
					A5(
						_mordrax$cotwelm$Monsters_Model$scaleAttributes,
						1,
						2,
						1,
						1,
						A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeElemental, _mordrax$cotwelm$Monsters_Types$WindElemental)));
			case 'MagmaElemental':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setAttackTypes,
					{
						ctor: '::',
						_0: _mordrax$cotwelm$Monsters_Types$Fire,
						_1: {ctor: '[]'}
					},
					A5(
						_mordrax$cotwelm$Monsters_Model$scaleAttributes,
						2,
						1,
						1,
						1,
						A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeElemental, _mordrax$cotwelm$Monsters_Types$MagmaElemental)));
			case 'FireElemental':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setAttackTypes,
					{
						ctor: '::',
						_0: _mordrax$cotwelm$Monsters_Types$Fire,
						_1: {ctor: '[]'}
					},
					A5(
						_mordrax$cotwelm$Monsters_Model$scaleAttributes,
						2,
						1,
						1,
						1,
						A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeElemental, _mordrax$cotwelm$Monsters_Types$FireElemental)));
			case 'WaterElemental':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setAttackTypes,
					{
						ctor: '::',
						_0: _mordrax$cotwelm$Monsters_Types$Ice,
						_1: {ctor: '[]'}
					},
					A5(
						_mordrax$cotwelm$Monsters_Model$scaleAttributes,
						1,
						1,
						2,
						1,
						A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeElemental, _mordrax$cotwelm$Monsters_Types$WaterElemental)));
			case 'EarthElemental':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setBodySize,
					_mordrax$cotwelm$Types$Large,
					A5(
						_mordrax$cotwelm$Monsters_Model$scaleAttributes,
						2,
						1,
						2,
						1,
						A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeElemental, _mordrax$cotwelm$Monsters_Types$EarthElemental)));
			case 'SpikedDevil':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setAttackTypes,
					{
						ctor: '::',
						_0: _mordrax$cotwelm$Monsters_Types$Spell,
						_1: {
							ctor: '::',
							_0: _mordrax$cotwelm$Monsters_Types$Melee,
							_1: {ctor: '[]'}
						}
					},
					A2(
						_mordrax$cotwelm$Monsters_Model$setBodySize,
						_mordrax$cotwelm$Types$Small,
						A5(
							_mordrax$cotwelm$Monsters_Model$scaleAttributes,
							1,
							1,
							1,
							1,
							A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeDevil, _mordrax$cotwelm$Monsters_Types$SpikedDevil))));
			case 'HornedDevil':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setAttackTypes,
					{
						ctor: '::',
						_0: _mordrax$cotwelm$Monsters_Types$Fire,
						_1: {
							ctor: '::',
							_0: _mordrax$cotwelm$Monsters_Types$Spell,
							_1: {ctor: '[]'}
						}
					},
					A5(
						_mordrax$cotwelm$Monsters_Model$scaleAttributes,
						1,
						1,
						1,
						1,
						A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeDevil, _mordrax$cotwelm$Monsters_Types$HornedDevil)));
			case 'IceDevil':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setAttackTypes,
					{
						ctor: '::',
						_0: _mordrax$cotwelm$Monsters_Types$Ice,
						_1: {
							ctor: '::',
							_0: _mordrax$cotwelm$Monsters_Types$Spell,
							_1: {ctor: '[]'}
						}
					},
					A5(
						_mordrax$cotwelm$Monsters_Model$scaleAttributes,
						1,
						1,
						1,
						1,
						A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeDevil, _mordrax$cotwelm$Monsters_Types$IceDevil)));
			case 'AbyssFiend':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setAttackTypes,
					{
						ctor: '::',
						_0: _mordrax$cotwelm$Monsters_Types$Fire,
						_1: {
							ctor: '::',
							_0: _mordrax$cotwelm$Monsters_Types$Lightning,
							_1: {
								ctor: '::',
								_0: _mordrax$cotwelm$Monsters_Types$Spell,
								_1: {ctor: '[]'}
							}
						}
					},
					A2(
						_mordrax$cotwelm$Monsters_Model$setAttacks,
						2,
						A2(
							_mordrax$cotwelm$Monsters_Model$setEquipment,
							A2(_mordrax$cotwelm$Monsters_Factory$basicEquipment, _mordrax$cotwelm$Item_Data$LargeClaws, _mordrax$cotwelm$Item_Data$ToughHide),
							A5(
								_mordrax$cotwelm$Monsters_Model$scaleAttributes,
								2,
								2,
								2,
								2,
								A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeDevil, _mordrax$cotwelm$Monsters_Types$AbyssFiend)))));
			case 'HugeOgre':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setEquipmentSlotIfAble,
					_mordrax$cotwelm$Monsters_Factory$weaponSlot(_mordrax$cotwelm$Item_Data$Pike),
					A5(
						_mordrax$cotwelm$Monsters_Model$scaleAttributes,
						0.9,
						1,
						0.8,
						0.5,
						A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeGiant, _mordrax$cotwelm$Monsters_Types$HugeOgre)));
			case 'HillGiant':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setEquipmentSlotIfAble,
					_mordrax$cotwelm$Monsters_Factory$weaponSlot(_mordrax$cotwelm$Item_Data$LargeClub),
					A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeGiant, _mordrax$cotwelm$Monsters_Types$HillGiant));
			case 'StoneGiant':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setEquipmentSlotIfAble,
					_mordrax$cotwelm$Monsters_Factory$weaponSlot(_mordrax$cotwelm$Item_Data$StoneClub),
					A5(
						_mordrax$cotwelm$Monsters_Model$scaleAttributes,
						1.2,
						1,
						1.5,
						0.5,
						A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeGiant, _mordrax$cotwelm$Monsters_Types$StoneGiant)));
			case 'FrostGiant':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setEquipmentSlotIfAble,
					_mordrax$cotwelm$Monsters_Factory$weaponSlot(_mordrax$cotwelm$Item_Data$GiantAxe),
					A2(
						_mordrax$cotwelm$Monsters_Model$setAttackTypes,
						{
							ctor: '::',
							_0: _mordrax$cotwelm$Monsters_Types$Ice,
							_1: {ctor: '[]'}
						},
						A5(
							_mordrax$cotwelm$Monsters_Model$scaleAttributes,
							1,
							1.5,
							1,
							1,
							A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeGiant, _mordrax$cotwelm$Monsters_Types$FrostGiant))));
			case 'TwoHeadedGiant':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setEquipmentSlotIfAble,
					_mordrax$cotwelm$Monsters_Factory$weaponSlot(_mordrax$cotwelm$Item_Data$Boulder),
					A2(
						_mordrax$cotwelm$Monsters_Model$setAttackTypes,
						{
							ctor: '::',
							_0: _mordrax$cotwelm$Monsters_Types$Ranged,
							_1: {
								ctor: '::',
								_0: _mordrax$cotwelm$Monsters_Types$Melee,
								_1: {ctor: '[]'}
							}
						},
						A5(
							_mordrax$cotwelm$Monsters_Model$scaleAttributes,
							1,
							2,
							2,
							1,
							A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeGiant, _mordrax$cotwelm$Monsters_Types$TwoHeadedGiant))));
			case 'FireGiant':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setEquipmentSlotIfAble,
					_mordrax$cotwelm$Monsters_Factory$weaponSlot(_mordrax$cotwelm$Item_Data$TwoHandedSword),
					A2(
						_mordrax$cotwelm$Monsters_Model$setEquipment,
						_mordrax$cotwelm$Monsters_Factory$ironEquipment,
						A2(
							_mordrax$cotwelm$Monsters_Model$setAttackTypes,
							{
								ctor: '::',
								_0: _mordrax$cotwelm$Monsters_Types$Fire,
								_1: {ctor: '[]'}
							},
							A5(
								_mordrax$cotwelm$Monsters_Model$scaleAttributes,
								1,
								1,
								1,
								1,
								A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeGiant, _mordrax$cotwelm$Monsters_Types$FireGiant)))));
			case 'HillGiantKing':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setEquipmentSlotIfAble,
					_mordrax$cotwelm$Monsters_Factory$weaponSlot(_mordrax$cotwelm$Item_Data$GiantMaul),
					A2(
						_mordrax$cotwelm$Monsters_Model$setEquipment,
						_mordrax$cotwelm$Monsters_Factory$plateEquipment,
						A5(
							_mordrax$cotwelm$Monsters_Model$scaleAttributes,
							2,
							1,
							2,
							1,
							A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeGiant, _mordrax$cotwelm$Monsters_Types$HillGiantKing))));
			case 'FireGiantKing':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setEquipment,
					_mordrax$cotwelm$Monsters_Factory$plateEquipment,
					A2(
						_mordrax$cotwelm$Monsters_Model$setAttackTypes,
						{
							ctor: '::',
							_0: _mordrax$cotwelm$Monsters_Types$Fire,
							_1: {ctor: '[]'}
						},
						A5(
							_mordrax$cotwelm$Monsters_Model$scaleAttributes,
							2,
							1,
							2,
							1,
							A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeGiant, _mordrax$cotwelm$Monsters_Types$FireGiantKing))));
			case 'FrostGiantKing':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setEquipment,
					_mordrax$cotwelm$Monsters_Factory$plateEquipment,
					A2(
						_mordrax$cotwelm$Monsters_Model$setAttackTypes,
						{
							ctor: '::',
							_0: _mordrax$cotwelm$Monsters_Types$Ice,
							_1: {ctor: '[]'}
						},
						A5(
							_mordrax$cotwelm$Monsters_Model$scaleAttributes,
							2,
							1,
							2,
							1,
							A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeGiant, _mordrax$cotwelm$Monsters_Types$FrostGiantKing))));
			case 'StoneGiantKing':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setEquipmentSlotIfAble,
					_mordrax$cotwelm$Monsters_Factory$weaponSlot(_mordrax$cotwelm$Item_Data$Boulder),
					A2(
						_mordrax$cotwelm$Monsters_Model$setEquipment,
						_mordrax$cotwelm$Monsters_Factory$plateEquipment,
						A2(
							_mordrax$cotwelm$Monsters_Model$setAttackTypes,
							{
								ctor: '::',
								_0: _mordrax$cotwelm$Monsters_Types$Ranged,
								_1: {ctor: '[]'}
							},
							A5(
								_mordrax$cotwelm$Monsters_Model$scaleAttributes,
								3,
								1,
								4,
								1,
								A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeGiant, _mordrax$cotwelm$Monsters_Types$StoneGiantKing)))));
			case 'GreenDragon':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setAttackTypes,
					{
						ctor: '::',
						_0: _mordrax$cotwelm$Monsters_Types$Acid,
						_1: {ctor: '[]'}
					},
					A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeDragon, _mordrax$cotwelm$Monsters_Types$GreenDragon));
			case 'WhiteDragon':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setAttackTypes,
					{
						ctor: '::',
						_0: _mordrax$cotwelm$Monsters_Types$Ice,
						_1: {ctor: '[]'}
					},
					A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeDragon, _mordrax$cotwelm$Monsters_Types$WhiteDragon));
			case 'BlueDragon':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setAttackTypes,
					{
						ctor: '::',
						_0: _mordrax$cotwelm$Monsters_Types$Lightning,
						_1: {ctor: '[]'}
					},
					A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeDragon, _mordrax$cotwelm$Monsters_Types$BlueDragon));
			case 'RedDragon':
				return A2(
					_mordrax$cotwelm$Monsters_Model$setAttackTypes,
					{
						ctor: '::',
						_0: _mordrax$cotwelm$Monsters_Types$Fire,
						_1: {ctor: '[]'}
					},
					A2(addPosition, _mordrax$cotwelm$Monsters_Factory$makeDragon, _mordrax$cotwelm$Monsters_Types$RedDragon));
			default:
				return A2(
					_mordrax$cotwelm$Monsters_Model$setPosition,
					position,
					A2(
						_mordrax$cotwelm$Monsters_Model$setAttacks,
						3,
						A2(
							_mordrax$cotwelm$Monsters_Model$setAttackTypes,
							{
								ctor: '::',
								_0: _mordrax$cotwelm$Monsters_Types$Melee,
								_1: {
									ctor: '::',
									_0: _mordrax$cotwelm$Monsters_Types$Spell,
									_1: {
										ctor: '::',
										_0: _mordrax$cotwelm$Monsters_Types$Fire,
										_1: {
											ctor: '::',
											_0: _mordrax$cotwelm$Monsters_Types$Lightning,
											_1: {
												ctor: '::',
												_0: _mordrax$cotwelm$Monsters_Types$Ice,
												_1: {
													ctor: '::',
													_0: _mordrax$cotwelm$Monsters_Types$Acid,
													_1: {
														ctor: '::',
														_0: _mordrax$cotwelm$Monsters_Types$Drain,
														_1: {
															ctor: '::',
															_0: _mordrax$cotwelm$Monsters_Types$Ranged,
															_1: {
																ctor: '::',
																_0: _mordrax$cotwelm$Monsters_Types$Poison,
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							},
							A2(
								_mordrax$cotwelm$Monsters_Model$setEquipment,
								_mordrax$cotwelm$Monsters_Factory$plateEquipment,
								A2(
									_mordrax$cotwelm$Monsters_Factory$make_,
									A5(_mordrax$cotwelm$Attributes$Attributes, 0, 400, 100, 1000, 200),
									_mordrax$cotwelm$Monsters_Types$Surtur)))));
		}
	});
var _mordrax$cotwelm$Monsters_Factory$makeForArena = function (monsterType) {
	return A2(
		_mordrax$cotwelm$Monsters_Factory$make,
		monsterType,
		{ctor: '_Tuple2', _0: 0, _1: 0});
};
var _mordrax$cotwelm$Monsters_Factory$monsterNamesLexicon = _mordrax$cotwelm$Utils_LexicalRandom$fromString(_mordrax$cotwelm$Utils_LexicalRandomNames$nameLexicons);
var _mordrax$cotwelm$Monsters_Factory$monsterNameGenerator = A2(
	_mgold$elm_random_pcg$Random_Pcg$map,
	_elm_community$string_extra$String_Extra$toTitleCase,
	A3(_mordrax$cotwelm$Utils_LexicalRandom$generator, 'Bob', _mordrax$cotwelm$Monsters_Factory$monsterNamesLexicon, 'compound'));
var _mordrax$cotwelm$Monsters_Factory$randomMonster = F2(
	function (maxRank, position) {
		var updateMonsterName = F2(
			function (name, monster) {
				return _elm_lang$core$Native_Utils.update(
					monster,
					{
						name: A2(
							_elm_lang$core$Basics_ops['++'],
							name,
							A2(_elm_lang$core$Basics_ops['++'], ' the ', monster.name))
					});
			});
		var monsterGenerator = A2(
			_mgold$elm_random_pcg$Random_Pcg$map,
			A2(_elm_lang$core$Basics$flip, _mordrax$cotwelm$Monsters_Factory$make, position),
			A2(
				_mgold$elm_random_pcg$Random_Pcg$map,
				_elm_lang$core$Maybe$withDefault(_mordrax$cotwelm$Monsters_Types$GiantRat),
				A2(
					_mgold$elm_random_pcg$Random_Pcg$map,
					_elm_lang$core$List$head,
					_mordrax$cotwelm$Utils_Misc$shuffle(
						_mordrax$cotwelm$Monsters_Types$cappedRank(maxRank)))));
		var nameGenerator = _mordrax$cotwelm$Monsters_Factory$monsterNameGenerator;
		return A3(_mgold$elm_random_pcg$Random_Pcg$map2, updateMonsterName, nameGenerator, monsterGenerator);
	});
var _mordrax$cotwelm$Monsters_Factory$randomMonstersReducer = F3(
	function (maxRank, position, monsters) {
		return function (monster) {
			return A3(
				_mgold$elm_random_pcg$Random_Pcg$map2,
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					}),
				monster,
				monsters);
		}(
			A2(_mordrax$cotwelm$Monsters_Factory$randomMonster, maxRank, position));
	});
var _mordrax$cotwelm$Monsters_Factory$makeRandomMonsters = F2(
	function (maxRank, positions) {
		return A3(
			_elm_lang$core$List$foldl,
			_mordrax$cotwelm$Monsters_Factory$randomMonstersReducer(maxRank),
			_mgold$elm_random_pcg$Random_Pcg$constant(
				{ctor: '[]'}),
			positions);
	});
var _mordrax$cotwelm$Monsters_Factory$monsterNameLexicon = '\n\n# This defines how to generate a `fleet` name\n# It is used to generate the list *headers* you can see on the right ->\nfleet\n    # Three different ways of generating a fleet name\n    # (Try to add one and see what happens!)\n    {color} Fleet\n    {properNoun} Fleet\n    {noun} Fleet\n\n# This defines how to generate a `ship` name\n# It is used to generate the list *entries* you can see on the right ->\nship\n    {noun}\n    {properNoun}\n    {color} {properNoun}\n    {color} {noun}\n    {superlativeAdjective}\n    {pretentious}\n\nadverb\n    # you can divide the options by comma or newline, there is no difference\n    always,inevitably,necessarily\n    surely,inescapably,assuredly\n\nsuperlativeAdjective\n    flawless,victorious,favoured,triumphant,successful,fortunate,lucky,outstanding,strong,illustrious,splendid,fierce\n    auspicious,crowned,extraordinary,unbeaten,undefeated,unconquered,prevailing,excellent,superior,greatest\n    amazing,awesome,excellent,fabulous,fantastic,favorable,fortuitous,ineffable,perfect,propitious,spectacular,wondrous\n\ncolor\n    blue,red,gray,purple,vermillion,yellow,black,white,azure\n\nnoun\n    champion,challenger,defender,conqueror,guardian,paladin,vanquisher,victor,warrior,augury\n    hammer,mallet,anvil,sword,mercy,blade,sabre,dagger,scimitar,foil,glaive\n    arrow,fury,anger,wrath,storm,lightning,thunder,omen,vengeance,light,sunrise,peace\n    Sun,Moon,Daystar,cross\n\npotentiallyQualifiedNoun\n    {noun}\n    {noun}\n    {noun} of {properNoun}\n    {noun} of {properNoun}\n    {noun} of the Gods\n\npretentious\n    {adverb} {superlativeAdjective}\n    {adverb} {superlativeAdjective} {potentiallyQualifiedNoun}\n    {superlativeAdjective} {potentiallyQualifiedNoun}\n\nproperNoun\n    {ini}{end}\n    {ini}{mid}{end}\n\n# Phonems can be generated from dictionaries or lists of words.\n# Check inside the tools/ directory!\nini\n    in,re,un,con,de,dis,ex,im,an,com,en,al,pro,pre,per,over,as,ar,di,mis,be,ac,sub,ad,ma,mar,car,out,ap,au,or,for,ob,\n    par,co,se,em,man,vi,non,am,mo,su,ab,cor,ca,pa,es,hy,can,bar,mi,col,so,mon,at,up,ir,ver,ra,mer,lu,gen,trans,pe,ro,\n\nmid\n    i,ti,a,o,er,ter,u,ri,to,si,cal,di,ca,al,ta,li,ni,tion,per,der,ra,tu,e,ful,na,ma,la,ing,fi,sa,ci,ous,con,is,en,re,\n\nend\n    ly,es,ness,er,est,ers,tions,ty,tion,able,ic,ings,ments,ry,ties,tors,al,cal,man,ters,less,cy,ous,tive,ful,men,\n    ates,ble,an,tic,ists,gy,na,ies,sions,son,ans,ta,ment,ton,ism,ries,ics,bles,bly,als,fies,fy,la,da,en,lates,\n\n';

var _mordrax$cotwelm$Monster$remove = F2(
	function (monster, monsters) {
		return A2(
			_elm_lang$core$List$filter,
			function (x) {
				return !_elm_lang$core$Native_Utils.eq(monster.position, x.position);
			},
			monsters);
	});
var _mordrax$cotwelm$Monster$replaceMoved = F3(
	function (existing, $new, monsters) {
		return A2(
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			$new,
			A2(_mordrax$cotwelm$Monster$remove, existing, monsters));
	});
var _mordrax$cotwelm$Monster$replace = F2(
	function (monster, monsters) {
		return {
			ctor: '::',
			_0: monster,
			_1: A2(_mordrax$cotwelm$Monster$remove, monster, monsters)
		};
	});
var _mordrax$cotwelm$Monster$tick = function (monster) {
	return _elm_lang$core$Native_Utils.update(
		monster,
		{
			stats: _mordrax$cotwelm$Stats$tick(monster.stats)
		});
};
var _mordrax$cotwelm$Monster$make = _mordrax$cotwelm$Monsters_Factory$make;
var _mordrax$cotwelm$Monster$makeRandomMonsters = _mordrax$cotwelm$Monsters_Factory$makeRandomMonsters;
var _mordrax$cotwelm$Monster$makeForArena = _mordrax$cotwelm$Monsters_Factory$makeForArena;
var _mordrax$cotwelm$Monster$types = _mordrax$cotwelm$Monsters_Types$monsterTypesToList;

var _mordrax$cotwelm$Arena_MonsterArena$generateVSes = F2(
	function (currentVSes, remainingMonsters) {
		var _p0 = remainingMonsters;
		if (_p0.ctor === '[]') {
			return currentVSes;
		} else {
			var _p1 = _p0._1;
			return A2(
				F2(
					function (x, y) {
						return A2(_elm_lang$core$Basics_ops['++'], x, y);
					}),
				A2(
					_elm_lang$core$List$map,
					function (x) {
						return {ctor: '_Tuple2', _0: x, _1: _p0._0};
					},
					_p1),
				A2(_mordrax$cotwelm$Arena_MonsterArena$generateVSes, currentVSes, _p1));
		}
	});
var _mordrax$cotwelm$Arena_MonsterArena$monsterTypes = _mordrax$cotwelm$Monster$types;
var _mordrax$cotwelm$Arena_MonsterArena$contestants = A2(_elm_lang$core$List$map, _mordrax$cotwelm$Monster$makeForArena, _mordrax$cotwelm$Monster$types);
var _mordrax$cotwelm$Arena_MonsterArena$toRoundedPercent = F2(
	function (a, b) {
		return A3(
			_elm_lang$core$Basics$flip,
			F2(
				function (x, y) {
					return A2(_elm_lang$core$Basics_ops['++'], x, y);
				}),
			'%',
			_elm_lang$core$Basics$toString(
				_elm_lang$core$Basics$floor(
					A2(
						F2(
							function (x, y) {
								return x * y;
							}),
						100,
						_elm_lang$core$Basics$toFloat(a) / _elm_lang$core$Basics$toFloat(b)))));
	});
var _mordrax$cotwelm$Arena_MonsterArena$viewMatch = function (_p2) {
	var _p3 = _p2;
	var _p5 = _p3.rounds;
	var _p4 = _p3.blueWins;
	var winsPercent = _elm_lang$core$Basics$toFloat(_p4) / _elm_lang$core$Basics$toFloat(_p5);
	var lightness = _elm_lang$core$Basics$toString(
		function (x) {
			return 100 - x;
		}(
			_elm_lang$core$Basics$abs((winsPercent * 100) - 50)));
	var pickHue = function (x) {
		return (_elm_lang$core$Native_Utils.cmp(x, 128) > 0) ? 120 : 0;
	};
	var hue = _elm_lang$core$Basics$toString(
		pickHue(
			_elm_lang$core$Basics$floor(winsPercent * 255)));
	var winsToColor = {
		ctor: '_Tuple2',
		_0: 'background-color',
		_1: A2(
			_elm_lang$core$Basics_ops['++'],
			'hsl(',
			A2(
				_elm_lang$core$Basics_ops['++'],
				hue,
				A2(
					_elm_lang$core$Basics_ops['++'],
					', 100%, ',
					A2(_elm_lang$core$Basics_ops['++'], lightness, '%)'))))
	};
	return A2(
		_elm_lang$html$Html$td,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: winsToColor,
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				A2(_mordrax$cotwelm$Arena_MonsterArena$toRoundedPercent, _p4, _p5)),
			_1: {ctor: '[]'}
		});
};
var _mordrax$cotwelm$Arena_MonsterArena$viewMatches = F2(
	function (_p6, contestant) {
		var _p7 = _p6;
		var tdata = function (a) {
			return A2(
				_elm_lang$html$Html$td,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						_elm_lang$core$Basics$toString(a)),
					_1: {ctor: '[]'}
				});
		};
		var rank = A2(
			_elm_lang$core$Maybe$withDefault,
			'N/A',
			A2(
				_elm_lang$core$Maybe$map,
				_elm_lang$core$Basics$toString,
				A2(_eeue56$elm_all_dict$EveryDict$get, contestant, _p7.ranking)));
		var match = function (opponent) {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				A2(
					_elm_lang$html$Html$td,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('N/A'),
						_1: {ctor: '[]'}
					}),
				A2(
					_elm_lang$core$Maybe$map,
					_mordrax$cotwelm$Arena_MonsterArena$viewMatch,
					A2(
						_eeue56$elm_all_dict$EveryDict$get,
						{ctor: '_Tuple2', _0: contestant, _1: opponent},
						_p7.matches)));
		};
		return A2(
			_elm_lang$html$Html$tr,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: tdata(contestant),
				_1: {
					ctor: '::',
					_0: tdata(rank),
					_1: A2(_elm_lang$core$List$map, match, _mordrax$cotwelm$Arena_MonsterArena$monsterTypes)
				}
			});
	});
var _mordrax$cotwelm$Arena_MonsterArena$viewTournament = function (model) {
	var divStyle = _elm_lang$html$Html_Attributes$style(
		{
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'transform', _1: 'rotate(270deg)'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'width', _1: '10px'},
				_1: {ctor: '[]'}
			}
		});
	var headStyle = _elm_lang$html$Html_Attributes$style(
		{
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'height', _1: '150px'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'white-space', _1: 'nowrap'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'padding', _1: '0'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '10px'},
						_1: {ctor: '[]'}
					}
				}
			}
		});
	var header = function (headerText) {
		return A2(
			_elm_lang$html$Html$th,
			{
				ctor: '::',
				_0: headStyle,
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: divStyle,
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(headerText),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	};
	var contestantsAsStrings = A2(_elm_lang$core$List$map, _elm_lang$core$Basics$toString, _mordrax$cotwelm$Arena_MonsterArena$monsterTypes);
	var headers = {
		ctor: '::',
		_0: 'Combatants',
		_1: {ctor: '::', _0: 'Rank', _1: contestantsAsStrings}
	};
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'overflow', _1: 'scroll'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'height', _1: '800px'},
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$table,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('ui very basic compact striped celled table'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$thead,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$tr,
								{ctor: '[]'},
								A2(_elm_lang$core$List$map, header, headers)),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$tbody,
							{ctor: '[]'},
							A2(
								_elm_lang$core$List$map,
								_mordrax$cotwelm$Arena_MonsterArena$viewMatches(model),
								_mordrax$cotwelm$Monster$types)),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _mordrax$cotwelm$Arena_MonsterArena$fight = function (_p8) {
	var _p9 = _p8;
	var toGeneratorKVP = function (_p10) {
		var _p11 = _p10;
		return A2(
			_mgold$elm_random_pcg$Random_Pcg$map,
			function (match) {
				return {ctor: '_Tuple2', _0: _p11._0, _1: match};
			},
			_mordrax$cotwelm$Arena_Match$fightSingleRound(_p11._1));
	};
	return A2(
		_mgold$elm_random_pcg$Random_Pcg$map,
		_eeue56$elm_all_dict$EveryDict$fromList,
		_mordrax$cotwelm$Utils_Misc$combine(
			A2(
				_elm_lang$core$List$map,
				toGeneratorKVP,
				_eeue56$elm_all_dict$EveryDict$toList(_p9.matches))));
};
var _mordrax$cotwelm$Arena_MonsterArena$calculateRanking = function (matches) {
	var winsToRanking = function (wins) {
		return _eeue56$elm_all_dict$EveryDict$fromList(
			A2(
				_elm_lang$core$List$indexedMap,
				F2(
					function (a, b) {
						return {ctor: '_Tuple2', _0: b, _1: a};
					}),
				A2(
					_elm_lang$core$List$map,
					_elm_lang$core$Tuple$first,
					A2(
						_elm_lang$core$List$sortBy,
						_elm_lang$core$Tuple$second,
						_eeue56$elm_all_dict$EveryDict$toList(wins)))));
	};
	var addToWins_ = F3(
		function (monsterType, timesWon, wins) {
			return function (newWins) {
				return A3(_eeue56$elm_all_dict$EveryDict$insert, monsterType, newWins, wins);
			}(
				A2(
					F2(
						function (x, y) {
							return x + y;
						}),
					timesWon,
					A2(
						_elm_lang$core$Maybe$withDefault,
						0,
						A2(_eeue56$elm_all_dict$EveryDict$get, monsterType, wins))));
		});
	var addToWins = F2(
		function (_p12, wins) {
			var _p13 = _p12;
			var _p14 = _p13._1;
			return A3(
				addToWins_,
				_p13._0._1,
				_p14.rounds - _p14.blueWins,
				A3(addToWins_, _p13._0._0, _p14.blueWins, wins));
		});
	return winsToRanking(
		A3(
			_elm_lang$core$List$foldl,
			addToWins,
			_eeue56$elm_all_dict$EveryDict$empty,
			_eeue56$elm_all_dict$EveryDict$toList(matches)));
};
var _mordrax$cotwelm$Arena_MonsterArena$initMatch = function (_p15) {
	var _p16 = _p15;
	var createFighter = _mordrax$cotwelm$Monster$makeForArena;
	return A2(
		_mordrax$cotwelm$Arena_Match$init,
		createFighter(_p16._0),
		createFighter(_p16._1));
};
var _mordrax$cotwelm$Arena_MonsterArena$initMatches = function (vses) {
	var toKVP = function (vs) {
		return {
			ctor: '_Tuple2',
			_0: vs,
			_1: _mordrax$cotwelm$Arena_MonsterArena$initMatch(vs)
		};
	};
	return _eeue56$elm_all_dict$EveryDict$fromList(
		A2(_elm_lang$core$List$map, toKVP, vses));
};
var _mordrax$cotwelm$Arena_MonsterArena$Model = F4(
	function (a, b, c, d) {
		return {matches: a, vses: b, fightState: c, ranking: d};
	});
var _mordrax$cotwelm$Arena_MonsterArena$ChangeFightState = function (a) {
	return {ctor: 'ChangeFightState', _0: a};
};
var _mordrax$cotwelm$Arena_MonsterArena$FightResult = function (a) {
	return {ctor: 'FightResult', _0: a};
};
var _mordrax$cotwelm$Arena_MonsterArena$Fight = function (a) {
	return {ctor: 'Fight', _0: a};
};
var _mordrax$cotwelm$Arena_MonsterArena$subs = function (_p17) {
	var _p18 = _p17;
	var _p19 = _p18.fightState;
	if (_p19.ctor === 'Started') {
		return A2(_elm_lang$core$Time$every, _elm_lang$core$Time$millisecond * 500, _mordrax$cotwelm$Arena_MonsterArena$Fight);
	} else {
		return _elm_lang$core$Platform_Sub$none;
	}
};
var _mordrax$cotwelm$Arena_MonsterArena$StartTournament = {ctor: 'StartTournament'};
var _mordrax$cotwelm$Arena_MonsterArena$Stopped = {ctor: 'Stopped'};
var _mordrax$cotwelm$Arena_MonsterArena$update = F2(
	function (msg, model) {
		var _p20 = msg;
		switch (_p20.ctor) {
			case 'Fight':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(
						_mgold$elm_random_pcg$Random_Pcg$generate,
						_mordrax$cotwelm$Arena_MonsterArena$FightResult,
						_mordrax$cotwelm$Arena_MonsterArena$fight(model))
				};
			case 'FightResult':
				var _p21 = _p20._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							matches: _p21,
							ranking: _mordrax$cotwelm$Arena_MonsterArena$calculateRanking(_p21)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ChangeFightState':
				var _p23 = _p20._0;
				var _p22 = _elm_lang$core$Native_Utils.eq(_p23, _mordrax$cotwelm$Arena_MonsterArena$Stopped) ? A2(
					_elm_lang$core$Debug$log,
					'Monster ranks:',
					A2(
						_elm_lang$core$List$sortBy,
						_elm_lang$core$Tuple$second,
						_eeue56$elm_all_dict$EveryDict$toList(model.ranking))) : {ctor: '[]'};
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{fightState: _p23}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _mordrax$cotwelm$Arena_MonsterArena$Started = {ctor: 'Started'};
var _mordrax$cotwelm$Arena_MonsterArena$init = function () {
	var vses = A2(
		_mordrax$cotwelm$Arena_MonsterArena$generateVSes,
		{ctor: '[]'},
		_mordrax$cotwelm$Arena_MonsterArena$monsterTypes);
	return {
		matches: _mordrax$cotwelm$Arena_MonsterArena$initMatches(vses),
		vses: vses,
		fightState: _mordrax$cotwelm$Arena_MonsterArena$Started,
		ranking: _eeue56$elm_all_dict$EveryDict$empty
	};
}();
var _mordrax$cotwelm$Arena_MonsterArena$viewUI = A2(
	_elm_lang$html$Html$div,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: A2(
			_mordrax$cotwelm$View_UI$btn,
			'Start',
			_mordrax$cotwelm$Arena_MonsterArena$ChangeFightState(_mordrax$cotwelm$Arena_MonsterArena$Started)),
		_1: {
			ctor: '::',
			_0: A2(
				_mordrax$cotwelm$View_UI$btn,
				'Stop',
				_mordrax$cotwelm$Arena_MonsterArena$ChangeFightState(_mordrax$cotwelm$Arena_MonsterArena$Stopped)),
			_1: {ctor: '[]'}
		}
	});
var _mordrax$cotwelm$Arena_MonsterArena$view = function (model) {
	var title = A2(
		_elm_lang$html$Html$h1,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('Welcome to the pit!'),
			_1: {ctor: '[]'}
		});
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: title,
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$Arena_MonsterArena$viewUI,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Arena_MonsterArena$viewTournament(model),
					_1: {ctor: '[]'}
				}
			}
		});
};

var _mordrax$cotwelm$Hero$view = function (model) {
	var heroCss = _elm_lang$core$Native_Utils.eq(model.gender, _mordrax$cotwelm$Types$Male) ? 'male-hero' : 'female-hero';
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class(
				A2(_elm_lang$core$Basics_ops['++'], 'tile ', heroCss)),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					_mordrax$cotwelm$Utils_Misc$vectorToHtmlStyle(model.position)),
				_1: {ctor: '[]'}
			}
		},
		{ctor: '[]'});
};
var _mordrax$cotwelm$Hero$pickup_ = F2(
	function (item, _p0) {
		var _p1 = _p0;
		var _p5 = _p1._2;
		var _p4 = _p1._1;
		var _p3 = _p1._0;
		var heroUpdate = function (equipment) {
			return _elm_lang$core$Native_Utils.update(
				_p3,
				{equipment: equipment});
		};
		var _p2 = A2(_mordrax$cotwelm$Equipment$putInPack, item, _p3.equipment);
		if (_p2.ctor === 'Ok') {
			return {
				ctor: '_Tuple3',
				_0: heroUpdate(_p2._0),
				_1: _p4,
				_2: _p5
			};
		} else {
			return {
				ctor: '_Tuple3',
				_0: _p3,
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$core$Basics_ops['++'],
						'Failed to pick up item: ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_mordrax$cotwelm$Item$name(item),
							A2(_elm_lang$core$Basics_ops['++'], ' because: ', _p2._0))),
					_1: _p4
				},
				_2: {ctor: '::', _0: item, _1: _p5}
			};
		}
	});
var _mordrax$cotwelm$Hero$pickup = F2(
	function (items, hero) {
		var _p6 = A3(
			_elm_lang$core$List$foldl,
			_mordrax$cotwelm$Hero$pickup_,
			{
				ctor: '_Tuple3',
				_0: hero,
				_1: {ctor: '[]'},
				_2: {ctor: '[]'}
			},
			items);
		var hero_ = _p6._0;
		var msgs = _p6._1;
		var failedToPickup = _p6._2;
		return {ctor: '_Tuple3', _0: hero_, _1: failedToPickup, _2: msgs};
	});
var _mordrax$cotwelm$Hero$move = F2(
	function (direction, model) {
		return function (x) {
			return _elm_lang$core$Native_Utils.update(
				model,
				{position: x});
		}(
			A2(
				_mordrax$cotwelm$Utils_Vector$add,
				model.position,
				_mordrax$cotwelm$Utils_Vector$fromDirection(direction)));
	});
var _mordrax$cotwelm$Hero$levelUp = function (hero) {
	return _elm_lang$core$Native_Utils.update(
		hero,
		{
			stats: A3(_mordrax$cotwelm$Stats$incLevel, 1, hero.attributes, hero.stats),
			expLevel: hero.expLevel + 1
		});
};
var _mordrax$cotwelm$Hero$injured = function (_p7) {
	var _p8 = _p7;
	var _p9 = _p8.stats;
	return _elm_lang$core$Native_Utils.cmp(_p9.currentHP, _p9.maxHP) < 0;
};
var _mordrax$cotwelm$Hero$tick = function (hero) {
	return _elm_lang$core$Native_Utils.update(
		hero,
		{
			stats: _mordrax$cotwelm$Stats$tick(hero.stats)
		});
};
var _mordrax$cotwelm$Hero$setStats = F2(
	function (stats, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{stats: stats});
	});
var _mordrax$cotwelm$Hero$setPosition = F2(
	function (newPosition, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{position: newPosition});
	});
var _mordrax$cotwelm$Hero$setEquipment = F2(
	function (equipment, hero) {
		return _elm_lang$core$Native_Utils.update(
			hero,
			{equipment: equipment});
	});
var _mordrax$cotwelm$Hero$addExperience = F2(
	function (expIncrease, _p10) {
		addExperience:
		while (true) {
			var _p11 = _p10;
			var _p13 = _p11;
			var pointsRequiredToLevel = _p11.expLevel * 100;
			var increasedExperiencePoints = _p11.expPoints + expIncrease;
			var _p12 = _elm_lang$core$Native_Utils.cmp(increasedExperiencePoints, pointsRequiredToLevel) > 0;
			if (_p12 === true) {
				var _v5 = increasedExperiencePoints - pointsRequiredToLevel,
					_v6 = _mordrax$cotwelm$Hero$levelUp(_p13);
				expIncrease = _v5;
				_p10 = _v6;
				continue addExperience;
			} else {
				return _elm_lang$core$Native_Utils.update(
					_p13,
					{expPoints: increasedExperiencePoints});
			}
		}
	});
var _mordrax$cotwelm$Hero$init = F3(
	function (name, _p14, gender) {
		var _p15 = _p14;
		var _p16 = _p15;
		return {
			name: name,
			type_: _mordrax$cotwelm$Types$Hero,
			position: {ctor: '_Tuple2', _0: 11, _1: 17},
			stats: _mordrax$cotwelm$Stats$init(_p16),
			gender: gender,
			attributes: _p16,
			equipment: _mordrax$cotwelm$Equipment$init,
			expLevel: 1,
			expPoints: 0,
			bodySize: _mordrax$cotwelm$Types$Medium,
			attacks: 1
		};
	});
var _mordrax$cotwelm$Hero$Hero = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return {name: a, type_: b, position: c, stats: d, gender: e, attributes: f, equipment: g, expLevel: h, expPoints: i, bodySize: j, attacks: k};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};

var _mordrax$cotwelm$Arena_PlayerArena$initHeroLookup = function (hero) {
	var reducer = F3(
		function (dict, hero_, lvl) {
			reducer:
			while (true) {
				var _p0 = lvl;
				if (_p0 === 500) {
					return dict;
				} else {
					var _p1 = _p0;
					var nextLvlHero = _mordrax$cotwelm$Hero$levelUp(hero_);
					var _v1 = A3(_elm_lang$core$Dict$insert, _p1, hero_, dict),
						_v2 = nextLvlHero,
						_v3 = _p1 + 1;
					dict = _v1;
					hero_ = _v2;
					lvl = _v3;
					continue reducer;
				}
			}
		});
	return A3(reducer, _elm_lang$core$Dict$empty, hero, 1);
};
var _mordrax$cotwelm$Arena_PlayerArena$makeArmour = function (armourType) {
	return _mordrax$cotwelm$Item$new(
		_mordrax$cotwelm$Item_Data$ItemTypeArmour(armourType));
};
var _mordrax$cotwelm$Arena_PlayerArena$makeWeapon = function (weaponType) {
	return _mordrax$cotwelm$Item$new(
		_mordrax$cotwelm$Item_Data$ItemTypeWeapon(weaponType));
};
var _mordrax$cotwelm$Arena_PlayerArena$equipHero = F2(
	function (hero, _p2) {
		var _p3 = _p2;
		var _p5 = _p3._0;
		var _p4 = _p3._1;
		var makeBracers = function (bracersType) {
			return _mordrax$cotwelm$Item$new(
				_mordrax$cotwelm$Item_Data$ItemTypeBracers(bracersType));
		};
		var makeGauntlets = function (gauntletsType) {
			return _mordrax$cotwelm$Item$new(
				_mordrax$cotwelm$Item_Data$ItemTypeGauntlets(gauntletsType));
		};
		var makeHelmet = function (helmetType) {
			return _mordrax$cotwelm$Item$new(
				_mordrax$cotwelm$Item_Data$ItemTypeHelmet(helmetType));
		};
		var makeShield = function (shieldType) {
			return _mordrax$cotwelm$Item$new(
				_mordrax$cotwelm$Item_Data$ItemTypeShield(shieldType));
		};
		var lowLevel = {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: _mordrax$cotwelm$Equipment$WeaponSlot,
				_1: _mordrax$cotwelm$Arena_PlayerArena$makeWeapon(_p5)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: _mordrax$cotwelm$Equipment$ArmourSlot,
					_1: _mordrax$cotwelm$Arena_PlayerArena$makeArmour(_p4)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: _mordrax$cotwelm$Equipment$HelmetSlot,
						_1: makeHelmet(_mordrax$cotwelm$Item_Data$LeatherHelmet)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: _mordrax$cotwelm$Equipment$GauntletsSlot,
							_1: makeGauntlets(_mordrax$cotwelm$Item_Data$NormalGauntlets)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: _mordrax$cotwelm$Equipment$BracersSlot,
								_1: makeBracers(_mordrax$cotwelm$Item_Data$NormalBracers)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: _mordrax$cotwelm$Equipment$ShieldSlot,
									_1: makeShield(_mordrax$cotwelm$Item_Data$SmallWoodenShield)
								},
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		};
		var midLevel = {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: _mordrax$cotwelm$Equipment$WeaponSlot,
				_1: _mordrax$cotwelm$Arena_PlayerArena$makeWeapon(_p5)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: _mordrax$cotwelm$Equipment$ArmourSlot,
					_1: _mordrax$cotwelm$Arena_PlayerArena$makeArmour(_p4)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: _mordrax$cotwelm$Equipment$HelmetSlot,
						_1: makeHelmet(_mordrax$cotwelm$Item_Data$IronHelmet)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: _mordrax$cotwelm$Equipment$GauntletsSlot,
							_1: makeGauntlets(_mordrax$cotwelm$Item_Data$NormalGauntlets)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: _mordrax$cotwelm$Equipment$BracersSlot,
								_1: makeBracers(_mordrax$cotwelm$Item_Data$NormalBracers)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: _mordrax$cotwelm$Equipment$ShieldSlot,
									_1: makeShield(_mordrax$cotwelm$Item_Data$LargeIronShield)
								},
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		};
		var highLevel = {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: _mordrax$cotwelm$Equipment$WeaponSlot,
				_1: _mordrax$cotwelm$Arena_PlayerArena$makeWeapon(_p5)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: _mordrax$cotwelm$Equipment$ArmourSlot,
					_1: _mordrax$cotwelm$Arena_PlayerArena$makeArmour(_p4)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: _mordrax$cotwelm$Equipment$HelmetSlot,
						_1: makeHelmet(_mordrax$cotwelm$Item_Data$MeteoricSteelHelmet)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: _mordrax$cotwelm$Equipment$GauntletsSlot,
							_1: makeGauntlets(_mordrax$cotwelm$Item_Data$NormalGauntlets)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: _mordrax$cotwelm$Equipment$BracersSlot,
								_1: makeBracers(_mordrax$cotwelm$Item_Data$NormalBracers)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: _mordrax$cotwelm$Equipment$ShieldSlot,
									_1: makeShield(_mordrax$cotwelm$Item_Data$LargeMeteoricSteelShield)
								},
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		};
		return (_elm_lang$core$Native_Utils.cmp(hero.expLevel, 10) < 1) ? _elm_lang$core$Native_Utils.update(
			hero,
			{
				equipment: A2(_mordrax$cotwelm$Equipment$setMany_, lowLevel, hero.equipment)
			}) : ((_elm_lang$core$Native_Utils.cmp(hero.expLevel, 20) < 1) ? _elm_lang$core$Native_Utils.update(
			hero,
			{
				equipment: A2(_mordrax$cotwelm$Equipment$setMany_, midLevel, hero.equipment)
			}) : _elm_lang$core$Native_Utils.update(
			hero,
			{
				equipment: A2(_mordrax$cotwelm$Equipment$setMany_, highLevel, hero.equipment)
			}));
	});
var _mordrax$cotwelm$Arena_PlayerArena$initMatches = F2(
	function (heroLookup, _p6) {
		var _p7 = _p6;
		var customEquipment = A2(
			_mordrax$cotwelm$Equipment$setMany_,
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: _mordrax$cotwelm$Equipment$WeaponSlot,
					_1: _mordrax$cotwelm$Arena_PlayerArena$makeWeapon(_p7._0)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: _mordrax$cotwelm$Equipment$ArmourSlot,
						_1: _mordrax$cotwelm$Arena_PlayerArena$makeArmour(_p7._1)
					},
					_1: {ctor: '[]'}
				}
			},
			_mordrax$cotwelm$Equipment$init);
		var newMatch = function (monster) {
			var hero = function () {
				var _p8 = A2(_elm_lang$core$Dict$get, monster.expLevel, heroLookup);
				if (_p8.ctor === 'Just') {
					return A2(_mordrax$cotwelm$Hero$setEquipment, customEquipment, _p8._0);
				} else {
					return A2(
						_elm_lang$core$Native_Utils.crash(
							'Arena.PlayerArena',
							{
								start: {line: 454, column: 29},
								end: {line: 454, column: 40}
							}),
						'Could not look up a hero with exp level: ',
						monster.expLevel);
				}
			}();
			return A2(_mordrax$cotwelm$Arena_Match$init, hero, monster);
		};
		return A2(
			_elm_lang$core$List$map,
			newMatch,
			A2(
				_elm_lang$core$List$map,
				_mordrax$cotwelm$Monster$makeForArena,
				A2(_elm_lang$core$List$take, 20, _mordrax$cotwelm$Monster$types)));
	});
var _mordrax$cotwelm$Arena_PlayerArena$initHero = F2(
	function (attrs, equipment) {
		return function (x) {
			return A2(_mordrax$cotwelm$Arena_PlayerArena$equipHero, x, equipment);
		}(
			A3(_mordrax$cotwelm$Hero$init, 'Heox', attrs, _mordrax$cotwelm$Types$Male));
	});
var _mordrax$cotwelm$Arena_PlayerArena$customAttributes = A4(_mordrax$cotwelm$Attributes$initCustom, 70, 70, 70, 50);
var _mordrax$cotwelm$Arena_PlayerArena$welcomeView = A2(
	_elm_lang$html$Html$h1,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: _elm_lang$html$Html$text('Welcome to the arena!'),
		_1: {ctor: '[]'}
	});
var _mordrax$cotwelm$Arena_PlayerArena$combatView = function (_p9) {
	var _p10 = _p9;
	return A2(
		_elm_lang$html$Html$table,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('ui striped celled table'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$thead,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$tr,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$th,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Type'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$th,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Level'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$th,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Attributes'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$th,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Weapon'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$th,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Armour'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$th,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Size'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$th,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Hp'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$th,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Win %'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$th,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('HP'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$th,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Turns'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$th,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$colspan(2),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Hits / Turn'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$th,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$colspan(2),
																				_1: {ctor: '[]'}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('CTH: base/wea/arm/size/crit = (total)'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$tr,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$th,
									{ctor: '[]'},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$th,
										{ctor: '[]'},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$th,
											{ctor: '[]'},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$th,
												{ctor: '[]'},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$th,
													{ctor: '[]'},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$th,
														{ctor: '[]'},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$th,
															{ctor: '[]'},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$th,
																{ctor: '[]'},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$th,
																	{ctor: '[]'},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$th,
																		{ctor: '[]'},
																		{ctor: '[]'}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$th,
																			{ctor: '[]'},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Hero'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$th,
																				{ctor: '[]'},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('Monster'),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$th,
																					{ctor: '[]'},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('Hero'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$th,
																						{ctor: '[]'},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('Monster'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$tbody,
					{ctor: '[]'},
					A2(
						_elm_lang$core$List$map,
						function (_p11) {
							return A2(
								_elm_lang$core$Maybe$withDefault,
								A2(
									_elm_lang$html$Html$div,
									{ctor: '[]'},
									{ctor: '[]'}),
								A2(_elm_lang$core$Maybe$map, _mordrax$cotwelm$Arena_Match$view, _p11));
						},
						A2(
							_elm_lang$core$List$map,
							function (monsterType) {
								return A2(_elm_lang$core$Dict$get, monsterType, _p10.matchResults);
							},
							A2(_elm_lang$core$List$map, _elm_lang$core$Basics$toString, _mordrax$cotwelm$Monster$types)))),
				_1: {ctor: '[]'}
			}
		});
};
var _mordrax$cotwelm$Arena_PlayerArena$heroStatsView = function (hero) {
	var ac = _mordrax$cotwelm$Item_Data$acToInt(
		_mordrax$cotwelm$Equipment$calculateAC(hero.equipment));
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Hero HP: ',
							_elm_lang$core$Basics$toString(hero.stats.maxHP))),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Hero AC: ',
								_elm_lang$core$Basics$toString(ac))),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_mordrax$cotwelm$Arena_View$weaponToString(hero.equipment)),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_mordrax$cotwelm$Arena_View$armourToString(hero.equipment)),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _mordrax$cotwelm$Arena_PlayerArena$init = function () {
	var customEquipment = {ctor: '_Tuple2', _0: _mordrax$cotwelm$Item_Data$ShortSword, _1: _mordrax$cotwelm$Item_Data$LeatherArmour};
	var heroLookup = _mordrax$cotwelm$Arena_PlayerArena$initHeroLookup(
		A2(_mordrax$cotwelm$Arena_PlayerArena$initHero, _mordrax$cotwelm$Arena_PlayerArena$customAttributes, customEquipment));
	var attributesAtLevelOne = A2(
		_elm_lang$core$Maybe$withDefault,
		A4(_mordrax$cotwelm$Attributes$initCustom, 0, 0, 0, 0),
		A2(
			_elm_lang$core$Maybe$map,
			function (_) {
				return _.attributes;
			},
			A2(_elm_lang$core$Dict$get, 1, heroLookup)));
	return {
		matches: A2(_mordrax$cotwelm$Arena_PlayerArena$initMatches, heroLookup, customEquipment),
		heroAttributes: attributesAtLevelOne,
		heroLookup: heroLookup,
		matchResults: _elm_lang$core$Dict$fromList(
			{ctor: '[]'}),
		resetCounter: 0,
		customEquipment: customEquipment
	};
}();
var _mordrax$cotwelm$Arena_PlayerArena$Model = F6(
	function (a, b, c, d, e, f) {
		return {matches: a, matchResults: b, heroAttributes: c, heroLookup: d, customEquipment: e, resetCounter: f};
	});
var _mordrax$cotwelm$Arena_PlayerArena$ChangeHeroArmour = function (a) {
	return {ctor: 'ChangeHeroArmour', _0: a};
};
var _mordrax$cotwelm$Arena_PlayerArena$ChangeHeroWeapon = function (a) {
	return {ctor: 'ChangeHeroWeapon', _0: a};
};
var _mordrax$cotwelm$Arena_PlayerArena$heroEquipmentView = function (hero) {
	var armourTypeMatches = function (armourType) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			false,
			A2(
				_elm_lang$core$Maybe$map,
				F2(
					function (x, y) {
						return _elm_lang$core$Native_Utils.eq(x, y);
					})(armourType),
				A2(
					_elm_lang$core$Maybe$map,
					function (_) {
						return _.armourType;
					},
					A2(
						_elm_lang$core$Maybe$map,
						_mordrax$cotwelm$Item$detail,
						_mordrax$cotwelm$Equipment$getArmour(hero.equipment)))));
	};
	var armour = A2(
		_elm_lang$core$List$map,
		function (x) {
			return {
				ctor: '_Tuple2',
				_0: x,
				_1: armourTypeMatches(x)
			};
		},
		_mordrax$cotwelm$Item_Wearable$armourTypes);
	var weaponTypeMatches = function (weaponType) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			false,
			A2(
				_elm_lang$core$Maybe$map,
				F2(
					function (x, y) {
						return _elm_lang$core$Native_Utils.eq(x, y);
					})(weaponType),
				A2(
					_elm_lang$core$Maybe$map,
					function (_) {
						return _.weaponType;
					},
					A2(
						_elm_lang$core$Maybe$map,
						_mordrax$cotwelm$Item$detail,
						_mordrax$cotwelm$Equipment$getWeapon(hero.equipment)))));
	};
	var weapons = A2(
		_elm_lang$core$List$map,
		function (x) {
			return {
				ctor: '_Tuple2',
				_0: x,
				_1: weaponTypeMatches(x)
			};
		},
		_mordrax$cotwelm$Item_Weapon$listTypes);
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A4(
				_mordrax$cotwelm$View_UI$list,
				function (_p12) {
					return _elm_lang$html$Html$text(
						_elm_lang$core$Basics$toString(_p12));
				},
				_mordrax$cotwelm$Arena_PlayerArena$ChangeHeroWeapon,
				{ctor: '_Tuple2', _0: _mordrax$cotwelm$Item_Weapon$encode, _1: _mordrax$cotwelm$Item_Weapon$decoder},
				weapons),
			_1: {
				ctor: '::',
				_0: A4(
					_mordrax$cotwelm$View_UI$list,
					function (_p13) {
						return _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(_p13));
					},
					_mordrax$cotwelm$Arena_PlayerArena$ChangeHeroArmour,
					{ctor: '_Tuple2', _0: _mordrax$cotwelm$Item_Wearable$encodeArmour, _1: _mordrax$cotwelm$Item_Wearable$decodeArmour},
					armour),
				_1: {ctor: '[]'}
			}
		});
};
var _mordrax$cotwelm$Arena_PlayerArena$SetAttribute = F2(
	function (a, b) {
		return {ctor: 'SetAttribute', _0: a, _1: b};
	});
var _mordrax$cotwelm$Arena_PlayerArena$heroAttributesView = function (_p14) {
	var _p15 = _p14;
	var _p16 = _p15.attributes;
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A3(
				_mordrax$cotwelm$View_UI$labeledNumber,
				'Str: ',
				_p16.str,
				_mordrax$cotwelm$Arena_PlayerArena$SetAttribute(_mordrax$cotwelm$Attributes$Strength)),
			_1: {
				ctor: '::',
				_0: A3(
					_mordrax$cotwelm$View_UI$labeledNumber,
					'Dex: ',
					_p16.dex,
					_mordrax$cotwelm$Arena_PlayerArena$SetAttribute(_mordrax$cotwelm$Attributes$Dexterity)),
				_1: {
					ctor: '::',
					_0: A3(
						_mordrax$cotwelm$View_UI$labeledNumber,
						'Con: ',
						_p16.con,
						_mordrax$cotwelm$Arena_PlayerArena$SetAttribute(_mordrax$cotwelm$Attributes$Constitution)),
					_1: {
						ctor: '::',
						_0: A3(
							_mordrax$cotwelm$View_UI$labeledNumber,
							'Int: ',
							_p16.$int,
							_mordrax$cotwelm$Arena_PlayerArena$SetAttribute(_mordrax$cotwelm$Attributes$Intelligence)),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _mordrax$cotwelm$Arena_PlayerArena$heroView = function (hero) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h3,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Stats'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$Arena_PlayerArena$heroStatsView(hero),
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Arena_PlayerArena$heroAttributesView(hero),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h3,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Equipment'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _mordrax$cotwelm$Arena_PlayerArena$heroEquipmentView(hero),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _mordrax$cotwelm$Arena_PlayerArena$Stop = {ctor: 'Stop'};
var _mordrax$cotwelm$Arena_PlayerArena$Sleep = F2(
	function (a, b) {
		return {ctor: 'Sleep', _0: a, _1: b};
	});
var _mordrax$cotwelm$Arena_PlayerArena$Fight = F3(
	function (a, b, c) {
		return {ctor: 'Fight', _0: a, _1: b, _2: c};
	});
var _mordrax$cotwelm$Arena_PlayerArena$StartFight = F2(
	function (a, b) {
		return {ctor: 'StartFight', _0: a, _1: b};
	});
var _mordrax$cotwelm$Arena_PlayerArena$startNewFight = function (model) {
	return A2(
		_mordrax$cotwelm$Arena_PlayerArena$StartFight,
		A2(_mordrax$cotwelm$Arena_PlayerArena$initMatches, model.heroLookup, model.customEquipment),
		model.resetCounter + 1);
};
var _mordrax$cotwelm$Arena_PlayerArena$update = F2(
	function (msg, model) {
		update:
		while (true) {
			var spaceChar = _elm_lang$core$Char$fromCode(32);
			var removeSpace = function (str) {
				return A2(
					_elm_lang$core$String$filter,
					function (_p17) {
						return !A2(
							F2(
								function (x, y) {
									return _elm_lang$core$Native_Utils.eq(x, y);
								}),
							spaceChar,
							_p17);
					},
					str);
			};
			var asyncCmd = F3(
				function (match, matches, resetCounter) {
					return A2(
						_mgold$elm_random_pcg$Random_Pcg$generate,
						function (matchResult) {
							return A3(_mordrax$cotwelm$Arena_PlayerArena$Fight, matchResult, matches, resetCounter);
						},
						_mordrax$cotwelm$Arena_Match$fight(match));
				});
			var fightResult = F3(
				function (match, matches, resetCounter) {
					return A2(
						_elm_lang$core$Task$perform,
						function (_p18) {
							return A2(
								_mordrax$cotwelm$Arena_PlayerArena$Sleep,
								A3(asyncCmd, match, matches, resetCounter),
								resetCounter);
						},
						_elm_lang$core$Process$sleep(150));
				});
			var _p19 = msg;
			switch (_p19.ctor) {
				case 'Stop':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{resetCounter: model.resetCounter + 1}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'Sleep':
					return _elm_lang$core$Native_Utils.eq(_p19._1, model.resetCounter) ? {ctor: '_Tuple2', _0: model, _1: _p19._0} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				case 'StartFight':
					if (_p19._0.ctor === '[]') {
						var _p20 = A2(_elm_lang$core$Debug$log, 'starting a fight with no one', 1);
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					} else {
						var _p23 = _p19._1;
						var _p22 = _p19._0._0;
						var _p21 = A2(_elm_lang$core$Debug$log, 'starting a fight', _p22);
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									matchResults: _elm_lang$core$Dict$fromList(
										{ctor: '[]'}),
									resetCounter: _p23
								}),
							_1: A3(fightResult, _p22, _p19._0._1, _p23)
						};
					}
				case 'Fight':
					if (_p19._1.ctor === '[]') {
						var _p24 = _p19._0;
						return (!_elm_lang$core$Native_Utils.eq(model.resetCounter, _p19._2)) ? {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none} : {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									matchResults: A3(
										_elm_lang$core$Dict$insert,
										removeSpace(_p24.red.name),
										_p24,
										model.matchResults)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						var _p26 = _p19._2;
						var _p25 = _p19._0;
						return (!_elm_lang$core$Native_Utils.eq(model.resetCounter, _p26)) ? {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none} : {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									matchResults: A3(
										_elm_lang$core$Dict$insert,
										removeSpace(_p25.red.name),
										_p25,
										model.matchResults)
								}),
							_1: A3(fightResult, _p19._1._0, _p19._1._1, _p26)
						};
					}
				case 'SetAttribute':
					var attributes_ = A2(
						_mordrax$cotwelm$Attributes$set,
						{ctor: '_Tuple2', _0: _p19._0, _1: _p19._1},
						model.heroAttributes);
					var heroLookup_ = _mordrax$cotwelm$Arena_PlayerArena$initHeroLookup(
						A2(_mordrax$cotwelm$Arena_PlayerArena$initHero, attributes_, model.customEquipment));
					var model_ = _elm_lang$core$Native_Utils.update(
						model,
						{
							heroLookup: heroLookup_,
							matches: A2(_mordrax$cotwelm$Arena_PlayerArena$initMatches, heroLookup_, model.customEquipment),
							heroAttributes: attributes_
						});
					return {ctor: '_Tuple2', _0: model_, _1: _elm_lang$core$Platform_Cmd$none};
				case 'ChangeHeroWeapon':
					var customEquipment_ = {
						ctor: '_Tuple2',
						_0: _p19._0,
						_1: _elm_lang$core$Tuple$second(model.customEquipment)
					};
					var model_ = _elm_lang$core$Native_Utils.update(
						model,
						{customEquipment: customEquipment_});
					var _v10 = _mordrax$cotwelm$Arena_PlayerArena$startNewFight(model_),
						_v11 = model_;
					msg = _v10;
					model = _v11;
					continue update;
				default:
					var customEquipment_ = {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Tuple$first(model.customEquipment),
						_1: _p19._0
					};
					var model_ = _elm_lang$core$Native_Utils.update(
						model,
						{customEquipment: customEquipment_});
					var _v12 = _mordrax$cotwelm$Arena_PlayerArena$startNewFight(model_),
						_v13 = model_;
					msg = _v12;
					model = _v13;
					continue update;
			}
		}
	});
var _mordrax$cotwelm$Arena_PlayerArena$menuView = function (model) {
	var btn = F2(
		function (txt, msg) {
			return A2(
				_elm_lang$html$Html$button,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(msg),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('ui button'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(txt),
					_1: {ctor: '[]'}
				});
		});
	return A2(
		_elm_lang$html$Html$h1,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				btn,
				'Fight!',
				_mordrax$cotwelm$Arena_PlayerArena$startNewFight(model)),
			_1: {
				ctor: '::',
				_0: A2(btn, 'Stop', _mordrax$cotwelm$Arena_PlayerArena$Stop),
				_1: {ctor: '[]'}
			}
		});
};
var _mordrax$cotwelm$Arena_PlayerArena$view = function (model) {
	var hero = A2(
		_elm_lang$core$Maybe$withDefault,
		A2(_mordrax$cotwelm$Arena_PlayerArena$initHero, _mordrax$cotwelm$Arena_PlayerArena$customAttributes, model.customEquipment),
		A2(_elm_lang$core$Dict$get, 1, model.heroLookup));
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _mordrax$cotwelm$Arena_PlayerArena$welcomeView,
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$Arena_PlayerArena$menuView(model),
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Arena_PlayerArena$heroView(hero),
					_1: {
						ctor: '::',
						_0: _mordrax$cotwelm$Arena_PlayerArena$combatView(model),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};

var _mordrax$cotwelm$Shops$inventoryStock = function (shop) {
	var _p0 = shop;
	switch (_p0.ctor) {
		case 'WeaponSmith':
			return _mordrax$cotwelm$Item_Data$allWeapons;
		case 'GeneralStore':
			return _elm_lang$core$List$concat(
				{
					ctor: '::',
					_0: _mordrax$cotwelm$Item_Data$allArmours,
					_1: {
						ctor: '::',
						_0: _mordrax$cotwelm$Item_Data$allBelts,
						_1: {
							ctor: '::',
							_0: _mordrax$cotwelm$Item_Data$allBracers,
							_1: {
								ctor: '::',
								_0: _mordrax$cotwelm$Item_Data$allGauntlets,
								_1: {
									ctor: '::',
									_0: _mordrax$cotwelm$Item_Data$allHelmets,
									_1: {
										ctor: '::',
										_0: _mordrax$cotwelm$Item_Data$allPacks,
										_1: {
											ctor: '::',
											_0: _mordrax$cotwelm$Item_Data$allShields,
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				});
		case 'PotionStore':
			return {ctor: '[]'};
		default:
			return {ctor: '[]'};
	}
};
var _mordrax$cotwelm$Shops$updateShop = F2(
	function (_p2, _p1) {
		var _p3 = _p2;
		var _p4 = _p1;
		return _elm_lang$core$Native_Utils.update(
			_p4,
			{
				stores: A3(_eeue56$elm_all_dict$EveryDict$insert, _p3._1, _p3._0, _p4.stores)
			});
	});
var _mordrax$cotwelm$Shops$list = F2(
	function (shopType, stores) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			A2(_eeue56$elm_all_dict$EveryDict$get, shopType, stores));
	});
var _mordrax$cotwelm$Shops$wares = function (_p5) {
	var _p6 = _p5;
	return _p6._0;
};
var _mordrax$cotwelm$Shops$config = {replenishCounter: 200, stock: 10};
var _mordrax$cotwelm$Shops$replenish = function (itemTypes) {
	var defaultProduct = _mordrax$cotwelm$Item_Data$ItemTypeWeapon(_mordrax$cotwelm$Item_Data$BroadSword);
	return A2(
		_mgold$elm_random_pcg$Random_Pcg$map,
		_elm_lang$core$List$map(_mordrax$cotwelm$Item$new),
		A2(
			_mgold$elm_random_pcg$Random_Pcg$list,
			_mordrax$cotwelm$Shops$config.stock,
			A2(
				_mgold$elm_random_pcg$Random_Pcg$map,
				_elm_lang$core$Maybe$withDefault(defaultProduct),
				_mgold$elm_random_pcg$Random_Pcg$sample(itemTypes))));
};
var _mordrax$cotwelm$Shops$replenishReducer = F2(
	function (shopType, currentStoresGen) {
		var addToStores = F2(
			function (items, stores) {
				return A3(_eeue56$elm_all_dict$EveryDict$insert, shopType, items, stores);
			});
		var newItemsGen = _mordrax$cotwelm$Shops$replenish(
			_mordrax$cotwelm$Shops$inventoryStock(shopType));
		return A3(_mgold$elm_random_pcg$Random_Pcg$map2, addToStores, newItemsGen, currentStoresGen);
	});
var _mordrax$cotwelm$Shops$Shops = F2(
	function (a, b) {
		return {stores: a, replenishCounter: b};
	});
var _mordrax$cotwelm$Shops$PopulateShop = function (a) {
	return {ctor: 'PopulateShop', _0: a};
};
var _mordrax$cotwelm$Shops$getSeed = A2(
	_elm_lang$core$Task$perform,
	function (a) {
		return _mordrax$cotwelm$Shops$PopulateShop(
			_mgold$elm_random_pcg$Random_Pcg$initialSeed(
				_elm_lang$core$Basics$round(
					_elm_lang$core$Time$inSeconds(a))));
	},
	_elm_lang$core$Time$now);
var _mordrax$cotwelm$Shops$Ok = {ctor: 'Ok'};
var _mordrax$cotwelm$Shops$JunkShop = {ctor: 'JunkShop'};
var _mordrax$cotwelm$Shops$PotionStore = {ctor: 'PotionStore'};
var _mordrax$cotwelm$Shops$GeneralStore = {ctor: 'GeneralStore'};
var _mordrax$cotwelm$Shops$WeaponSmith = {ctor: 'WeaponSmith'};
var _mordrax$cotwelm$Shops$init = function () {
	var emptyStores = _mgold$elm_random_pcg$Random_Pcg$constant(
		_eeue56$elm_all_dict$EveryDict$fromList(
			{ctor: '[]'}));
	var storesGen = A3(
		_elm_lang$core$List$foldl,
		_mordrax$cotwelm$Shops$replenishReducer,
		emptyStores,
		{
			ctor: '::',
			_0: _mordrax$cotwelm$Shops$WeaponSmith,
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$Shops$GeneralStore,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Shops$PotionStore,
					_1: {
						ctor: '::',
						_0: _mordrax$cotwelm$Shops$JunkShop,
						_1: {ctor: '[]'}
					}
				}
			}
		});
	return A2(
		_mgold$elm_random_pcg$Random_Pcg$map,
		function (stores) {
			return {stores: stores, replenishCounter: _mordrax$cotwelm$Shops$config.replenishCounter};
		},
		storesGen);
}();
var _mordrax$cotwelm$Shops$tick = function (_p7) {
	var _p8 = _p7;
	var _p10 = _p8.replenishCounter;
	var _p9 = _p10;
	if (_p9 === 0) {
		return _mordrax$cotwelm$Shops$init;
	} else {
		return _mgold$elm_random_pcg$Random_Pcg$constant(
			_elm_lang$core$Native_Utils.update(
				_p8,
				{replenishCounter: _p10 - 1}));
	}
};
var _mordrax$cotwelm$Shops$Store = F2(
	function (a, b) {
		return {ctor: 'Store', _0: a, _1: b};
	});
var _mordrax$cotwelm$Shops$shop = F2(
	function (shopType, shops) {
		return A2(
			_mordrax$cotwelm$Shops$Store,
			A2(_mordrax$cotwelm$Shops$list, shopType, shops.stores),
			shopType);
	});
var _mordrax$cotwelm$Shops$remove = F2(
	function (item, _p11) {
		var _p12 = _p11;
		return function (remainingItems) {
			return _elm_lang$core$Result$Ok(
				A2(_mordrax$cotwelm$Shops$Store, remainingItems, _p12._1));
		}(
			A3(_mordrax$cotwelm$Utils_Misc$removeFirst, item, _mordrax$cotwelm$Item$equals, _p12._0));
	});
var _mordrax$cotwelm$Shops$sellToHero = F3(
	function (item, purse, _p13) {
		var _p14 = _p13;
		var itemsWithout = function (item) {
			return A3(_mordrax$cotwelm$Utils_Misc$removeFirst, item, _mordrax$cotwelm$Item$equals, _p14._0);
		};
		var storeWithout = function (item) {
			return A2(
				_mordrax$cotwelm$Shops$Store,
				itemsWithout(item),
				_p14._1);
		};
		var itemCost = A2(
			_elm_lang$core$Debug$log,
			'Shop sell price:',
			_mordrax$cotwelm$Item$markupValue(item));
		return A2(
			_elm_lang$core$Result$map,
			function (purse_) {
				return {
					ctor: '_Tuple2',
					_0: storeWithout(item),
					_1: purse_
				};
			},
			A2(_mordrax$cotwelm$Item_Purse$remove, itemCost, purse));
	});
var _mordrax$cotwelm$Shops$buyFromHero = F3(
	function (item, purse, _p15) {
		var _p16 = _p15;
		var cost = A2(
			_elm_lang$core$Debug$log,
			'Shop buy price:',
			_mordrax$cotwelm$Item$baseValue(item));
		return {
			ctor: '_Tuple2',
			_0: A2(
				_mordrax$cotwelm$Shops$Store,
				{ctor: '::', _0: item, _1: _p16._0},
				_p16._1),
			_1: A2(_mordrax$cotwelm$Item_Purse$add, cost, purse)
		};
	});

var _mordrax$cotwelm$Building$isBuildingAtPosition = F2(
	function (pos, model) {
		var bottomLeft = A2(
			_mordrax$cotwelm$Utils_Vector$sub,
			A2(_mordrax$cotwelm$Utils_Vector$add, model.position, model.size),
			{ctor: '_Tuple2', _0: 1, _1: 1});
		return A2(
			_mordrax$cotwelm$Utils_Vector$boxIntersectVector,
			pos,
			{ctor: '_Tuple2', _0: model.position, _1: bottomLeft});
	});
var _mordrax$cotwelm$Building$view = function (model) {
	var tileCss = A2(
		_elm_lang$core$String$dropLeft,
		1,
		_elm_community$string_extra$String_Extra$dasherize(
			_elm_lang$core$Basics$toString(model.tile)));
	var pointEventStyle = {
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'pointer-events', _1: 'none'},
		_1: {ctor: '[]'}
	};
	var posStyle = _mordrax$cotwelm$Utils_Misc$vectorToHtmlStyle(model.position);
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class(
				A2(_elm_lang$core$Basics_ops['++'], 'tile ', tileCss)),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					A2(_elm_lang$core$Basics_ops['++'], posStyle, pointEventStyle)),
				_1: {ctor: '[]'}
			}
		},
		{ctor: '[]'});
};
var _mordrax$cotwelm$Building$byType = F2(
	function (buildingType, buildings) {
		return A2(
			_elm_lang$core$List$filter,
			function (_p0) {
				return A2(
					F2(
						function (x, y) {
							return _elm_lang$core$Native_Utils.eq(x, y);
						}),
					buildingType,
					function (_) {
						return _.buildingType;
					}(_p0));
			},
			buildings);
	});
var _mordrax$cotwelm$Building$Building = F6(
	function (a, b, c, d, e, f) {
		return {tile: a, entry: b, position: c, name: d, size: e, buildingType: f};
	});
var _mordrax$cotwelm$Building$new = F4(
	function (buildingTile, pos, name, buildingType) {
		var newBuilding = F2(
			function (entry, size) {
				return A6(_mordrax$cotwelm$Building$Building, buildingTile, entry, pos, name, size, buildingType);
			});
		var _p1 = buildingTile;
		switch (_p1.ctor) {
			case 'Gate':
				return A2(
					newBuilding,
					{ctor: '_Tuple2', _0: 1, _1: 0},
					{ctor: '_Tuple2', _0: 3, _1: 1});
			case 'Hut':
				return A2(
					newBuilding,
					{ctor: '_Tuple2', _0: 0, _1: 1},
					{ctor: '_Tuple2', _0: 2, _1: 2});
			case 'StrawHouseEast':
				return A2(
					newBuilding,
					{ctor: '_Tuple2', _0: 2, _1: 1},
					{ctor: '_Tuple2', _0: 3, _1: 3});
			case 'StrawHouseWest':
				return A2(
					newBuilding,
					{ctor: '_Tuple2', _0: 0, _1: 1},
					{ctor: '_Tuple2', _0: 3, _1: 3});
			case 'BurntStrawHouseWest':
				return A2(
					newBuilding,
					{ctor: '_Tuple2', _0: 0, _1: 1},
					{ctor: '_Tuple2', _0: 3, _1: 3});
			case 'HutTemple':
				return A2(
					newBuilding,
					{ctor: '_Tuple2', _0: 2, _1: 0},
					{ctor: '_Tuple2', _0: 5, _1: 6});
			case 'MineEntrance':
				return A2(
					newBuilding,
					{ctor: '_Tuple2', _0: 0, _1: 0},
					{ctor: '_Tuple2', _0: 1, _1: 1});
			case 'Well':
				return A2(
					newBuilding,
					{ctor: '_Tuple2', _0: 0, _1: 0},
					{ctor: '_Tuple2', _0: 1, _1: 1});
			case 'StairsDown':
				return A2(
					newBuilding,
					{ctor: '_Tuple2', _0: 0, _1: 0},
					{ctor: '_Tuple2', _0: 1, _1: 1});
			default:
				return A2(
					newBuilding,
					{ctor: '_Tuple2', _0: 0, _1: 0},
					{ctor: '_Tuple2', _0: 1, _1: 1});
		}
	});
var _mordrax$cotwelm$Building$Link = F2(
	function (a, b) {
		return {area: a, position: b};
	});
var _mordrax$cotwelm$Building$Ordinary = {ctor: 'Ordinary'};
var _mordrax$cotwelm$Building$Shop = function (a) {
	return {ctor: 'Shop', _0: a};
};
var _mordrax$cotwelm$Building$StairDown = {ctor: 'StairDown'};
var _mordrax$cotwelm$Building$StairUp = {ctor: 'StairUp'};
var _mordrax$cotwelm$Building$Linked = function (a) {
	return {ctor: 'Linked', _0: a};
};
var _mordrax$cotwelm$Building$newLink = F2(
	function (area, pos) {
		return _mordrax$cotwelm$Building$Linked(
			A2(_mordrax$cotwelm$Building$Link, area, pos));
	});
var _mordrax$cotwelm$Building$StairsUp = {ctor: 'StairsUp'};
var _mordrax$cotwelm$Building$StairsDown = {ctor: 'StairsDown'};
var _mordrax$cotwelm$Building$Well = {ctor: 'Well'};
var _mordrax$cotwelm$Building$MineEntrance = {ctor: 'MineEntrance'};
var _mordrax$cotwelm$Building$HutTemple = {ctor: 'HutTemple'};
var _mordrax$cotwelm$Building$BurntStrawHouseWest = {ctor: 'BurntStrawHouseWest'};
var _mordrax$cotwelm$Building$StrawHouseWest = {ctor: 'StrawHouseWest'};
var _mordrax$cotwelm$Building$StrawHouseEast = {ctor: 'StrawHouseEast'};
var _mordrax$cotwelm$Building$Hut = {ctor: 'Hut'};
var _mordrax$cotwelm$Building$Gate = {ctor: 'Gate'};

var _mordrax$cotwelm$CharCreation$info = function (charCreation) {
	return {ctor: '_Tuple4', _0: charCreation.name, _1: charCreation.gender, _2: charCreation.difficulty, _3: charCreation.attributes};
};
var _mordrax$cotwelm$CharCreation$update = F2(
	function (msg, charCreation) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'Name':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						charCreation,
						{name: _p0._0}),
					_1: false
				};
			case 'Gender':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						charCreation,
						{gender: _p0._0}),
					_1: false
				};
			case 'Difficulty':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						charCreation,
						{difficulty: _p0._0}),
					_1: false
				};
			case 'Attribute':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						charCreation,
						{
							attributes: A2(_mordrax$cotwelm$Attributes$update, _p0._0, charCreation.attributes)
						}),
					_1: false
				};
			default:
				return {ctor: '_Tuple2', _0: charCreation, _1: true};
		}
	});
var _mordrax$cotwelm$CharCreation$CharCreation = F4(
	function (a, b, c, d) {
		return {name: a, attributes: b, gender: c, difficulty: d};
	});
var _mordrax$cotwelm$CharCreation$StartGame = {ctor: 'StartGame'};
var _mordrax$cotwelm$CharCreation$Attribute = function (a) {
	return {ctor: 'Attribute', _0: a};
};
var _mordrax$cotwelm$CharCreation$init = function () {
	var _p1 = _mordrax$cotwelm$Attributes$init;
	var attributes = _p1._0;
	var attrCmds = _p1._1;
	return {
		ctor: '_Tuple2',
		_0: {name: 'Conan the destroyer', attributes: attributes, gender: _mordrax$cotwelm$Types$Female, difficulty: _mordrax$cotwelm$Types$Hard},
		_1: A2(_elm_lang$core$Platform_Cmd$map, _mordrax$cotwelm$CharCreation$Attribute, attrCmds)
	};
}();
var _mordrax$cotwelm$CharCreation$Difficulty = function (a) {
	return {ctor: 'Difficulty', _0: a};
};
var _mordrax$cotwelm$CharCreation$Gender = function (a) {
	return {ctor: 'Gender', _0: a};
};
var _mordrax$cotwelm$CharCreation$Name = function (a) {
	return {ctor: 'Name', _0: a};
};

var _mordrax$cotwelm$Message$tick = function (_p0) {
	var _p1 = _p0;
	var _p4 = _p1;
	var _p3 = _p1.messages;
	var _p2 = _p3;
	if (_p2.ctor === '[]') {
		return _p4;
	} else {
		if (_p2._0.ctor === '[]') {
			return _p4;
		} else {
			return _elm_lang$core$Native_Utils.update(
				_p4,
				{
					messages: {
						ctor: '::',
						_0: {ctor: '[]'},
						_1: _p3
					}
				});
		}
	}
};
var _mordrax$cotwelm$Message$add = F2(
	function (message, _p5) {
		var _p6 = _p5;
		var _p8 = _p6;
		var _p7 = _p6.messages;
		if (_p7.ctor === '[]') {
			return _elm_lang$core$Native_Utils.update(
				_p8,
				{
					messages: {
						ctor: '::',
						_0: {
							ctor: '::',
							_0: message,
							_1: {ctor: '[]'}
						},
						_1: {ctor: '[]'}
					}
				});
		} else {
			return _elm_lang$core$Native_Utils.update(
				_p8,
				{
					messages: {
						ctor: '::',
						_0: {ctor: '::', _0: message, _1: _p7._0},
						_1: _p7._1
					}
				});
		}
	});
var _mordrax$cotwelm$Message$pp = function (_p9) {
	var _p10 = _p9;
	return _p10._1;
};
var _mordrax$cotwelm$Message$all = function (_p11) {
	var _p12 = _p11;
	return A2(
		_elm_lang$core$List$map,
		_elm_lang$core$List$map(_mordrax$cotwelm$Message$pp),
		_p12.messages);
};
var _mordrax$cotwelm$Message$last = function (_p13) {
	return A2(
		_elm_lang$core$List$map,
		_mordrax$cotwelm$Message$pp,
		A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			_elm_lang$core$List$head(
				function (_) {
					return _.messages;
				}(_p13))));
};
var _mordrax$cotwelm$Message$combatMessage = F3(
	function (combatOutcome, heroName, monsterName) {
		var _p14 = combatOutcome;
		if (_p14.ctor === 'HeroSuccess') {
			return _mgold$elm_random_pcg$Random_Pcg$constant(
				_elm_lang$html$Html$text('boo!'));
		} else {
			return _mgold$elm_random_pcg$Random_Pcg$constant(
				_elm_lang$html$Html$text('boo!'));
		}
	});
var _mordrax$cotwelm$Message$init = {
	messages: {ctor: '[]'}
};
var _mordrax$cotwelm$Message$plain = _elm_lang$html$Html$text;
var _mordrax$cotwelm$Message$Messages = function (a) {
	return {messages: a};
};
var _mordrax$cotwelm$Message$Combat = function (a) {
	return {ctor: 'Combat', _0: a};
};
var _mordrax$cotwelm$Message$Message = F2(
	function (a, b) {
		return {ctor: 'Message', _0: a, _1: b};
	});
var _mordrax$cotwelm$Message$Neutral = {ctor: 'Neutral'};
var _mordrax$cotwelm$Message$neutral = function (a) {
	return A2(_mordrax$cotwelm$Message$Message, _mordrax$cotwelm$Message$Neutral, a);
};
var _mordrax$cotwelm$Message$addNeutral = F2(
	function (msg, messages) {
		return A3(
			_elm_lang$core$Basics$flip,
			_mordrax$cotwelm$Message$add,
			messages,
			_mordrax$cotwelm$Message$neutral(msg));
	});
var _mordrax$cotwelm$Message$Bad = {ctor: 'Bad'};
var _mordrax$cotwelm$Message$bad = function (a) {
	return A2(_mordrax$cotwelm$Message$Message, _mordrax$cotwelm$Message$Bad, a);
};
var _mordrax$cotwelm$Message$Good = {ctor: 'Good'};
var _mordrax$cotwelm$Message$good = function (a) {
	return A2(_mordrax$cotwelm$Message$Message, _mordrax$cotwelm$Message$Good, a);
};
var _mordrax$cotwelm$Message$Monster = {ctor: 'Monster'};
var _mordrax$cotwelm$Message$HeroFail = {ctor: 'HeroFail'};
var _mordrax$cotwelm$Message$HeroSuccess = {ctor: 'HeroSuccess'};

var _mordrax$cotwelm$Comms$map = F2(
	function (mapper, comms) {
		return _elm_lang$core$Native_Utils.update(
			comms,
			{
				cmd: A2(_elm_lang$core$Platform_Cmd$map, mapper, comms.cmd)
			});
	});
var _mordrax$cotwelm$Comms$addCmd = F2(
	function (cmd, comms) {
		return _elm_lang$core$Native_Utils.update(
			comms,
			{
				cmd: _elm_lang$core$Platform_Cmd$batch(
					{
						ctor: '::',
						_0: cmd,
						_1: {
							ctor: '::',
							_0: comms.cmd,
							_1: {ctor: '[]'}
						}
					})
			});
	});
var _mordrax$cotwelm$Comms$add = F2(
	function (left, right) {
		return {
			cmd: _elm_lang$core$Platform_Cmd$batch(
				{
					ctor: '::',
					_0: left.cmd,
					_1: {
						ctor: '::',
						_0: right.cmd,
						_1: {ctor: '[]'}
					}
				}),
			messages: A2(_elm_lang$core$Basics_ops['++'], left.messages, right.messages)
		};
	});
var _mordrax$cotwelm$Comms$addMessage = F2(
	function (message, comms) {
		return _elm_lang$core$Native_Utils.update(
			comms,
			{
				messages: {ctor: '::', _0: message, _1: comms.messages}
			});
	});
var _mordrax$cotwelm$Comms$attempt = function (_p0) {
	var _p1 = _p0;
	return _p1.cmd;
};
var _mordrax$cotwelm$Comms$init = {
	cmd: _elm_lang$core$Platform_Cmd$none,
	messages: {ctor: '[]'}
};
var _mordrax$cotwelm$Comms$Comms = F2(
	function (a, b) {
		return {cmd: a, messages: b};
	});

var _mordrax$cotwelm$Tile$rotateHalfTiles = F3(
	function (_p1, _p0, neighbours) {
		var _p2 = _p1;
		var _p3 = _p0;
		var _p13 = _p3._1;
		var checkDownRight = F2(
			function (maybeDown, maybeRight) {
				var _p4 = {ctor: '_Tuple2', _0: maybeDown, _1: maybeRight};
				if (((_p4.ctor === '_Tuple2') && (_p4._0.ctor === 'Just')) && (_p4._1.ctor === 'Just')) {
					var _p5 = _p4._0._0;
					return (_elm_lang$core$Native_Utils.eq(_p5.type_, _p4._1._0.type_) && _elm_lang$core$Native_Utils.eq(_p5.type_, _p13)) ? -90 : 0;
				} else {
					return 0;
				}
			});
		var checkUpRight = F2(
			function (maybeUp, maybeRight) {
				var _p6 = {ctor: '_Tuple2', _0: maybeUp, _1: maybeRight};
				if (((_p6.ctor === '_Tuple2') && (_p6._0.ctor === 'Just')) && (_p6._1.ctor === 'Just')) {
					var _p7 = _p6._0._0;
					return (_elm_lang$core$Native_Utils.eq(_p7.type_, _p6._1._0.type_) && _elm_lang$core$Native_Utils.eq(_p7.type_, _p13)) ? 180 : 0;
				} else {
					return 0;
				}
			});
		var checkUpLeft = F2(
			function (maybeUp, maybeLeft) {
				var _p8 = {ctor: '_Tuple2', _0: maybeUp, _1: maybeLeft};
				if (((_p8.ctor === '_Tuple2') && (_p8._0.ctor === 'Just')) && (_p8._1.ctor === 'Just')) {
					var _p9 = _p8._0._0;
					return (_elm_lang$core$Native_Utils.eq(_p9.type_, _p8._1._0.type_) && _elm_lang$core$Native_Utils.eq(_p9.type_, _p13)) ? 90 : 0;
				} else {
					return 0;
				}
			});
		var aOrb = F3(
			function (x, a, b) {
				return _elm_lang$core$Native_Utils.eq(x, a) || _elm_lang$core$Native_Utils.eq(x, b);
			});
		var _p10 = neighbours;
		if ((_p10._0.ctor === 'Nothing') && (_p10._2.ctor === 'Nothing')) {
			return 0;
		} else {
			if ((_p10._1.ctor === 'Nothing') && (_p10._3.ctor === 'Nothing')) {
				return 0;
			} else {
				var _p12 = _p10._0;
				var _p11 = _p10._1;
				return ((A2(checkUpLeft, _p12, _p10._3) + A2(checkUpRight, _p12, _p11)) + A2(checkDownRight, _p10._2, _p11)) + _p3._2;
			}
		}
	});
var _mordrax$cotwelm$Tile$styleTile = {
	ctor: '::',
	_0: _rtfeldman$elm_css$Css$width(
		_rtfeldman$elm_css$Css$px(32)),
	_1: {
		ctor: '::',
		_0: _rtfeldman$elm_css$Css$height(
			_rtfeldman$elm_css$Css$px(32)),
		_1: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$display(_rtfeldman$elm_css$Css$inlineBlock),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$position(_rtfeldman$elm_css$Css$absolute),
				_1: {ctor: '[]'}
			}
		}
	}
};
var _mordrax$cotwelm$Tile$styles = function (_p14) {
	return _elm_lang$html$Html_Attributes$style(
		_rtfeldman$elm_css$Css$asPairs(_p14));
};
var _mordrax$cotwelm$Tile$setDescription = F2(
	function (description, tile) {
		return _elm_lang$core$Native_Utils.update(
			tile,
			{description: description});
	});
var _mordrax$cotwelm$Tile$setVisibility = F2(
	function (visibility, tile) {
		return _elm_lang$core$Native_Utils.update(
			tile,
			{visible: visibility});
	});
var _mordrax$cotwelm$Tile$setPosition = F2(
	function (newPosition, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{position: newPosition});
	});
var _mordrax$cotwelm$Tile$updateGround = F2(
	function (items, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				ground: A2(_mordrax$cotwelm$Container$set, items, model.ground)
			});
	});
var _mordrax$cotwelm$Tile$pickup = function (_p15) {
	var _p16 = _p15;
	var _p17 = _p16.ground;
	return {
		ctor: '_Tuple2',
		_0: _mordrax$cotwelm$Container$list(_p17),
		_1: _elm_lang$core$Native_Utils.update(
			_p16,
			{
				ground: A2(
					_mordrax$cotwelm$Container$set,
					{ctor: '[]'},
					_p17)
			})
	};
};
var _mordrax$cotwelm$Tile$drop = F2(
	function (item, tile) {
		return A2(
			_elm_lang$core$Result$withDefault,
			tile,
			A2(
				_elm_lang$core$Result$map,
				function (itemOnGround) {
					return _elm_lang$core$Native_Utils.update(
						tile,
						{ground: itemOnGround});
				},
				A2(_mordrax$cotwelm$Container$add, item, tile.ground)));
	});
var _mordrax$cotwelm$Tile$Tile = F8(
	function (a, b, c, d, e, f, g, h) {
		return {type_: a, solid: b, occupant: c, position: d, ground: e, visible: f, isLit: g, description: h};
	});
var _mordrax$cotwelm$Tile$Empty = {ctor: 'Empty'};
var _mordrax$cotwelm$Tile$M = function (a) {
	return {ctor: 'M', _0: a};
};
var _mordrax$cotwelm$Tile$H = function (a) {
	return {ctor: 'H', _0: a};
};
var _mordrax$cotwelm$Tile$B = function (a) {
	return {ctor: 'B', _0: a};
};
var _mordrax$cotwelm$Tile$TreasurePile = {ctor: 'TreasurePile'};
var _mordrax$cotwelm$Tile$White90Cave10 = {ctor: 'White90Cave10'};
var _mordrax$cotwelm$Tile$White50Cave50 = {ctor: 'White50Cave50'};
var _mordrax$cotwelm$Tile$Grass10Cave90 = {ctor: 'Grass10Cave90'};
var _mordrax$cotwelm$Tile$Grass50Cave50 = {ctor: 'Grass50Cave50'};
var _mordrax$cotwelm$Tile$Pillar = {ctor: 'Pillar'};
var _mordrax$cotwelm$Tile$Cobweb = {ctor: 'Cobweb'};
var _mordrax$cotwelm$Tile$DoorBroken = {ctor: 'DoorBroken'};
var _mordrax$cotwelm$Tile$DoorOpen = {ctor: 'DoorOpen'};
var _mordrax$cotwelm$Tile$DoorClosed = {ctor: 'DoorClosed'};
var _mordrax$cotwelm$Tile$WallLitDgn = {ctor: 'WallLitDgn'};
var _mordrax$cotwelm$Tile$LitDgn = {ctor: 'LitDgn'};
var _mordrax$cotwelm$Tile$TownWall = {ctor: 'TownWall'};
var _mordrax$cotwelm$Tile$TownWallStop = {ctor: 'TownWallStop'};
var _mordrax$cotwelm$Tile$TownWallCorner = {ctor: 'TownWallCorner'};
var _mordrax$cotwelm$Tile$StairsDown = {ctor: 'StairsDown'};
var _mordrax$cotwelm$Tile$StairsUp = {ctor: 'StairsUp'};
var _mordrax$cotwelm$Tile$WaterPath = {ctor: 'WaterPath'};
var _mordrax$cotwelm$Tile$Path = {ctor: 'Path'};
var _mordrax$cotwelm$Tile$Throne = {ctor: 'Throne'};
var _mordrax$cotwelm$Tile$Status = {ctor: 'Status'};
var _mordrax$cotwelm$Tile$Altar = {ctor: 'Altar'};
var _mordrax$cotwelm$Tile$Fountain = {ctor: 'Fountain'};
var _mordrax$cotwelm$Tile$BlueSquare = {ctor: 'BlueSquare'};
var _mordrax$cotwelm$Tile$WaterGrass = {ctor: 'WaterGrass'};
var _mordrax$cotwelm$Tile$Water = {ctor: 'Water'};
var _mordrax$cotwelm$Tile$Ashes = {ctor: 'Ashes'};
var _mordrax$cotwelm$Tile$GreenWell = {ctor: 'GreenWell'};
var _mordrax$cotwelm$Tile$CastleParapet = {ctor: 'CastleParapet'};
var _mordrax$cotwelm$Tile$CastleWall = {ctor: 'CastleWall'};
var _mordrax$cotwelm$Tile$CastleCornerParapet = {ctor: 'CastleCornerParapet'};
var _mordrax$cotwelm$Tile$WallDarkDgn = {ctor: 'WallDarkDgn'};
var _mordrax$cotwelm$Tile$DarkDgn = {ctor: 'DarkDgn'};
var _mordrax$cotwelm$Tile$Wagon = {ctor: 'Wagon'};
var _mordrax$cotwelm$Tile$Well = {ctor: 'Well'};
var _mordrax$cotwelm$Tile$VegePatch = {ctor: 'VegePatch'};
var _mordrax$cotwelm$Tile$DestoyedVegePatch = {ctor: 'DestoyedVegePatch'};
var _mordrax$cotwelm$Tile$Crop = {ctor: 'Crop'};
var _mordrax$cotwelm$Tile$PathGrass = {ctor: 'PathGrass'};
var _mordrax$cotwelm$Tile$Grass = {ctor: 'Grass'};
var _mordrax$cotwelm$Tile$Favicon = {ctor: 'Favicon'};
var _mordrax$cotwelm$Tile$Sign = {ctor: 'Sign'};
var _mordrax$cotwelm$Tile$PortcullisOpen = {ctor: 'PortcullisOpen'};
var _mordrax$cotwelm$Tile$PortcullisClosed = {ctor: 'PortcullisClosed'};
var _mordrax$cotwelm$Tile$MineEntrance = {ctor: 'MineEntrance'};
var _mordrax$cotwelm$Tile$PathRock = {ctor: 'PathRock'};
var _mordrax$cotwelm$Tile$halfTiles = {
	ctor: '::',
	_0: {ctor: '_Tuple3', _0: _mordrax$cotwelm$Tile$PathRock, _1: _mordrax$cotwelm$Tile$Path, _2: 0},
	_1: {
		ctor: '::',
		_0: {ctor: '_Tuple3', _0: _mordrax$cotwelm$Tile$PathGrass, _1: _mordrax$cotwelm$Tile$Path, _2: 0},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple3', _0: _mordrax$cotwelm$Tile$WaterGrass, _1: _mordrax$cotwelm$Tile$Water, _2: 0},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple3', _0: _mordrax$cotwelm$Tile$WaterPath, _1: _mordrax$cotwelm$Tile$Path, _2: 180},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple3', _0: _mordrax$cotwelm$Tile$WallDarkDgn, _1: _mordrax$cotwelm$Tile$DarkDgn, _2: 180},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple3', _0: _mordrax$cotwelm$Tile$WallLitDgn, _1: _mordrax$cotwelm$Tile$LitDgn, _2: 180},
						_1: {ctor: '[]'}
					}
				}
			}
		}
	}
};
var _mordrax$cotwelm$Tile$view_ = F5(
	function (scaleTile, withTooltip, neighbours, onClick, _p18) {
		var _p19 = _p18;
		var _p26 = _p19.type_;
		var _p25 = _p19.position;
		var clickAttribute = function (position) {
			return _elm_lang$html$Html_Events$onClick(
				onClick(position));
		};
		var itemsOnGround = _mordrax$cotwelm$Container$list(_p19.ground);
		var toolTipAttribute = withTooltip ? _elm_lang$html$Html_Attributes$class('tooltip') : _elm_lang$html$Html_Attributes$class('');
		var tooltipDiv = A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: toolTipAttribute,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Tile$styles(
						{
							ctor: '::',
							_0: _rtfeldman$elm_css$Css$width(
								_rtfeldman$elm_css$Css$pct(100)),
							_1: {
								ctor: '::',
								_0: _rtfeldman$elm_css$Css$height(
									_rtfeldman$elm_css$Css$pct(100)),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: _mordrax$cotwelm$Tile$styles(
							{
								ctor: '::',
								_0: _rtfeldman$elm_css$Css$transforms(
									{
										ctor: '::',
										_0: _rtfeldman$elm_css$Css$scale(scaleTile),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _rtfeldman$elm_css$Css$position(_rtfeldman$elm_css$Css$absolute),
									_1: {
										ctor: '::',
										_0: _rtfeldman$elm_css$Css$width(
											_rtfeldman$elm_css$Css$px(32)),
										_1: {
											ctor: '::',
											_0: _rtfeldman$elm_css$Css$height(
												_rtfeldman$elm_css$Css$px(32)),
											_1: {
												ctor: '::',
												_0: _rtfeldman$elm_css$Css$zIndex(
													_rtfeldman$elm_css$Css$int(1)),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(_mordrax$cotwelm$Utils_Misc$toScaledTilePosition, _p25, scaleTile),
							_1: {ctor: '[]'}
						}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$span,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('tooltiptext'),
						_1: {
							ctor: '::',
							_0: _mordrax$cotwelm$Tile$styles(
								{
									ctor: '::',
									_0: _rtfeldman$elm_css$Css$bottom(
										_rtfeldman$elm_css$Css$px(-32)),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('abc'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
		var tileToCss = function (_p20) {
			return A2(
				_elm_lang$core$String$dropLeft,
				1,
				_elm_community$string_extra$String_Extra$dasherize(
					_elm_lang$core$Basics$toString(_p20)));
		};
		var rotation = function () {
			var _p23 = A2(
				_elm_community$list_extra$List_Extra$find,
				function (_p21) {
					var _p22 = _p21;
					return _elm_lang$core$Native_Utils.eq(_p26, _p22._0);
				},
				_mordrax$cotwelm$Tile$halfTiles);
			if (_p23.ctor === 'Nothing') {
				return 0;
			} else {
				return A3(_mordrax$cotwelm$Tile$rotateHalfTiles, _p19, _p23._0, neighbours);
			}
		}();
		var tileDiv = function (css) {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class(
						_elm_lang$core$Basics$toString(_p25)),
					_1: {
						ctor: '::',
						_0: _mordrax$cotwelm$Tile$styles(
							{
								ctor: '::',
								_0: _rtfeldman$elm_css$Css$transforms(
									{
										ctor: '::',
										_0: _rtfeldman$elm_css$Css$scale(scaleTile),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _rtfeldman$elm_css$Css$position(_rtfeldman$elm_css$Css$absolute),
									_1: {
										ctor: '::',
										_0: _rtfeldman$elm_css$Css$width(
											_rtfeldman$elm_css$Css$px(32)),
										_1: {
											ctor: '::',
											_0: _rtfeldman$elm_css$Css$height(
												_rtfeldman$elm_css$Css$px(32)),
											_1: {ctor: '[]'}
										}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(_mordrax$cotwelm$Utils_Misc$toScaledTilePosition, _p25, scaleTile),
							_1: {
								ctor: '::',
								_0: clickAttribute(_p25),
								_1: {ctor: '[]'}
							}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class(
								A2(_elm_lang$core$Basics_ops['++'], 'tile ', css)),
							_1: {
								ctor: '::',
								_0: _mordrax$cotwelm$Tile$styles(
									{
										ctor: '::',
										_0: _rtfeldman$elm_css$Css$transforms(
											{
												ctor: '::',
												_0: _rtfeldman$elm_css$Css$rotate(
													_rtfeldman$elm_css$Css$deg(rotation)),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				});
		};
		var baseTile = tileDiv(
			tileToCss(_p26));
		var itemDiv = function (item) {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'tile cotw-item ',
							_mordrax$cotwelm$Item$css(item))),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'pointer-events', _1: 'none'},
								_1: _rtfeldman$elm_css$Css$asPairs(
									{
										ctor: '::',
										_0: _rtfeldman$elm_css$Css$transforms(
											{
												ctor: '::',
												_0: _rtfeldman$elm_css$Css$rotate(
													_rtfeldman$elm_css$Css$deg(rotation)),
												_1: {
													ctor: '::',
													_0: _rtfeldman$elm_css$Css$scale(scaleTile),
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									})
							}),
						_1: {
							ctor: '::',
							_0: A2(_mordrax$cotwelm$Utils_Misc$toScaledTilePosition, _p25, scaleTile),
							_1: {ctor: '[]'}
						}
					}
				},
				{ctor: '[]'});
		};
		var _p24 = {ctor: '_Tuple2', _0: itemsOnGround, _1: _p19.visible};
		_v10_3:
		do {
			_v10_0:
			do {
				if (_p24.ctor === '_Tuple2') {
					if (_p24._0.ctor === '::') {
						if (_p24._0._1.ctor === '[]') {
							if (_p24._1.ctor === 'Hidden') {
								break _v10_0;
							} else {
								return {
									ctor: '::',
									_0: tooltipDiv,
									_1: {
										ctor: '::',
										_0: baseTile,
										_1: {
											ctor: '::',
											_0: itemDiv(_p24._0._0),
											_1: {ctor: '[]'}
										}
									}
								};
							}
						} else {
							if (_p24._1.ctor === 'Hidden') {
								break _v10_0;
							} else {
								return {
									ctor: '::',
									_0: tooltipDiv,
									_1: {
										ctor: '::',
										_0: baseTile,
										_1: {
											ctor: '::',
											_0: tileDiv(
												tileToCss(_mordrax$cotwelm$Tile$TreasurePile)),
											_1: {ctor: '[]'}
										}
									}
								};
							}
						}
					} else {
						if (_p24._1.ctor === 'Hidden') {
							break _v10_0;
						} else {
							break _v10_3;
						}
					}
				} else {
					break _v10_3;
				}
			} while(false);
			return {ctor: '[]'};
		} while(false);
		return {
			ctor: '::',
			_0: tooltipDiv,
			_1: {
				ctor: '::',
				_0: baseTile,
				_1: {ctor: '[]'}
			}
		};
	});
var _mordrax$cotwelm$Tile$viewScaled = function (scale) {
	return A2(_mordrax$cotwelm$Tile$view_, scale, false);
};
var _mordrax$cotwelm$Tile$viewWithTooltip = A2(_mordrax$cotwelm$Tile$view_, 1.0, true);
var _mordrax$cotwelm$Tile$view = A2(_mordrax$cotwelm$Tile$view_, 1.0, false);
var _mordrax$cotwelm$Tile$Rock = {ctor: 'Rock'};
var _mordrax$cotwelm$Tile$asciiTileMap = _elm_lang$core$Dict$fromList(
	{
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.chr('^'),
			_1: _mordrax$cotwelm$Tile$Rock
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.chr(','),
				_1: _mordrax$cotwelm$Tile$Grass
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.chr('o'),
					_1: _mordrax$cotwelm$Tile$DarkDgn
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.chr('~'),
						_1: _mordrax$cotwelm$Tile$Water
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.chr('.'),
							_1: _mordrax$cotwelm$Tile$Path
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.chr('O'),
								_1: _mordrax$cotwelm$Tile$LitDgn
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.chr('_'),
									_1: _mordrax$cotwelm$Tile$PathRock
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: _elm_lang$core$Native_Utils.chr(';'),
										_1: _mordrax$cotwelm$Tile$PathGrass
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: _elm_lang$core$Native_Utils.chr('d'),
											_1: _mordrax$cotwelm$Tile$WallDarkDgn
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: _elm_lang$core$Native_Utils.chr('w'),
												_1: _mordrax$cotwelm$Tile$WaterGrass
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: _elm_lang$core$Native_Utils.chr('W'),
													_1: _mordrax$cotwelm$Tile$WaterPath
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: _elm_lang$core$Native_Utils.chr('D'),
														_1: _mordrax$cotwelm$Tile$WallLitDgn
													},
													_1: {
														ctor: '::',
														_0: {
															ctor: '_Tuple2',
															_0: _elm_lang$core$Native_Utils.chr('g'),
															_1: _mordrax$cotwelm$Tile$Grass50Cave50
														},
														_1: {
															ctor: '::',
															_0: {
																ctor: '_Tuple2',
																_0: _elm_lang$core$Native_Utils.chr('G'),
																_1: _mordrax$cotwelm$Tile$Grass10Cave90
															},
															_1: {
																ctor: '::',
																_0: {
																	ctor: '_Tuple2',
																	_0: _elm_lang$core$Native_Utils.chr('c'),
																	_1: _mordrax$cotwelm$Tile$White50Cave50
																},
																_1: {
																	ctor: '::',
																	_0: {
																		ctor: '_Tuple2',
																		_0: _elm_lang$core$Native_Utils.chr('C'),
																		_1: _mordrax$cotwelm$Tile$White90Cave10
																	},
																	_1: {
																		ctor: '::',
																		_0: {
																			ctor: '_Tuple2',
																			_0: _elm_lang$core$Native_Utils.chr('='),
																			_1: _mordrax$cotwelm$Tile$Crop
																		},
																		_1: {
																			ctor: '::',
																			_0: {
																				ctor: '_Tuple2',
																				_0: _elm_lang$core$Native_Utils.chr('e'),
																				_1: _mordrax$cotwelm$Tile$Well
																			},
																			_1: {
																				ctor: '::',
																				_0: {
																					ctor: '_Tuple2',
																					_0: _elm_lang$core$Native_Utils.chr('>'),
																					_1: _mordrax$cotwelm$Tile$StairsDown
																				},
																				_1: {
																					ctor: '::',
																					_0: {
																						ctor: '_Tuple2',
																						_0: _elm_lang$core$Native_Utils.chr('!'),
																						_1: _mordrax$cotwelm$Tile$Sign
																					},
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _mordrax$cotwelm$Tile$asciiToTileType = function ($char) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		_mordrax$cotwelm$Tile$Grass,
		A2(_elm_lang$core$Dict$get, $char, _mordrax$cotwelm$Tile$asciiTileMap));
};
var _mordrax$cotwelm$Tile$solidTiles = {
	ctor: '::',
	_0: _mordrax$cotwelm$Tile$Rock,
	_1: {
		ctor: '::',
		_0: _mordrax$cotwelm$Tile$Grass10Cave90,
		_1: {
			ctor: '::',
			_0: _mordrax$cotwelm$Tile$White50Cave50,
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$Tile$Crop,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Tile$Well,
					_1: {
						ctor: '::',
						_0: _mordrax$cotwelm$Tile$PathRock,
						_1: {
							ctor: '::',
							_0: _mordrax$cotwelm$Tile$WallDarkDgn,
							_1: {
								ctor: '::',
								_0: _mordrax$cotwelm$Tile$WallLitDgn,
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	}
};
var _mordrax$cotwelm$Tile$toTile = F2(
	function (_p27, tileType) {
		var _p28 = _p27;
		var container = _mordrax$cotwelm$Item$containerBuilder(
			A2(_mordrax$cotwelm$Utils_Mass$Capacity, _mgold$elm_random_pcg$Random_Pcg$maxInt, _mgold$elm_random_pcg$Random_Pcg$maxInt));
		var solid = A2(_elm_lang$core$List$member, tileType, _mordrax$cotwelm$Tile$solidTiles);
		return A8(
			_mordrax$cotwelm$Tile$Tile,
			tileType,
			solid,
			_mordrax$cotwelm$Tile$Empty,
			{ctor: '_Tuple2', _0: _p28._0, _1: _p28._1},
			container,
			_mordrax$cotwelm$Types$Hidden,
			false,
			'');
	});
var _mordrax$cotwelm$Tile$mapToTiles = function (_p29) {
	var _p30 = _p29;
	var updateTileDescription = F2(
		function (_p31, dict) {
			var _p32 = _p31;
			var _p33 = _p32._0;
			return A2(
				_elm_lang$core$Maybe$withDefault,
				dict,
				A2(
					_elm_lang$core$Maybe$map,
					function (v) {
						return A3(_elm_lang$core$Dict$insert, _p33, v, dict);
					},
					A2(
						_elm_lang$core$Maybe$map,
						_mordrax$cotwelm$Tile$setDescription(_p32._1),
						A2(_elm_lang$core$Dict$get, _p33, dict))));
		});
	var rowToTiles = F2(
		function (y, asciiRow) {
			return A2(
				_elm_lang$core$List$indexedMap,
				F2(
					function (x, $char) {
						return A2(
							_mordrax$cotwelm$Tile$toTile,
							{ctor: '_Tuple2', _0: x, _1: y},
							_mordrax$cotwelm$Tile$asciiToTileType($char));
					}),
				_elm_lang$core$String$toList(asciiRow));
		});
	var tilesDict = _elm_lang$core$Dict$fromList(
		A2(
			_elm_lang$core$List$map,
			function (tile) {
				return {ctor: '_Tuple2', _0: tile.position, _1: tile};
			},
			_elm_lang$core$List$concat(
				A2(_elm_lang$core$List$indexedMap, rowToTiles, _p30._0))));
	return A3(_elm_lang$core$List$foldl, updateTileDescription, tilesDict, _p30._1);
};

var _mordrax$cotwelm$Dungeon_Corridor$paths = function (points) {
	var _p0 = points;
	if (_p0.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		if (_p0._1.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p1 = _p0._1._0;
			return A2(
				_elm_lang$core$Basics_ops['++'],
				A2(_mordrax$cotwelm$Utils_Vector$path, _p0._0, _p1),
				_mordrax$cotwelm$Dungeon_Corridor$paths(
					{ctor: '::', _0: _p1, _1: _p0._1._1}));
		}
	}
};
var _mordrax$cotwelm$Dungeon_Corridor$adjacent = function (startingVectors) {
	var lessStartingVectors = function (set) {
		return A2(
			_elm_lang$core$Set$diff,
			set,
			_elm_lang$core$Set$fromList(startingVectors));
	};
	return _elm_lang$core$Set$toList(
		lessStartingVectors(
			_elm_lang$core$Set$fromList(
				_elm_lang$core$List$concat(
					A2(_elm_lang$core$List$map, _mordrax$cotwelm$Utils_Vector$neighbours, startingVectors)))));
};
var _mordrax$cotwelm$Dungeon_Corridor$init = function (pathPoints) {
	var headAsList = function (list) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			A2(
				_elm_lang$core$Maybe$map,
				function (x) {
					return {
						ctor: '::',
						_0: x,
						_1: {ctor: '[]'}
					};
				},
				_elm_lang$core$List$head(list)));
	};
	var path = _mordrax$cotwelm$Dungeon_Corridor$paths(
		A2(_elm_lang$core$Debug$log, 'corridor', pathPoints));
	var floorTiles = A2(
		_elm_lang$core$List$map,
		A2(_elm_lang$core$Basics$flip, _mordrax$cotwelm$Tile$toTile, _mordrax$cotwelm$Tile$DarkDgn),
		path);
	var walls = _mordrax$cotwelm$Dungeon_Corridor$adjacent(path);
	var wallTiles = A2(
		_elm_lang$core$List$map,
		A2(_elm_lang$core$Basics$flip, _mordrax$cotwelm$Tile$toTile, _mordrax$cotwelm$Tile$Rock),
		walls);
	var tiles = _elm_lang$core$Dict$fromList(
		A2(
			_elm_lang$core$List$map,
			function (tile) {
				return {ctor: '_Tuple2', _0: tile.position, _1: tile};
			},
			A2(_elm_lang$core$Basics_ops['++'], floorTiles, wallTiles)));
	return {path: path, walls: walls, lightSource: _mordrax$cotwelm$Types$Artificial, tiles: tiles};
};
var _mordrax$cotwelm$Dungeon_Corridor$Corridor = F4(
	function (a, b, c, d) {
		return {path: a, lightSource: b, walls: c, tiles: d};
	});

var _mordrax$cotwelm$Dungeon_Entrance$equal = F2(
	function (e1, e2) {
		return _elm_lang$core$Native_Utils.eq(e1.position, e2.position);
	});
var _mordrax$cotwelm$Dungeon_Entrance$toTile = function (_p0) {
	var _p1 = _p0;
	var tileType = function () {
		var _p2 = _p1.entranceType;
		if (_p2.ctor === 'Door') {
			return _mordrax$cotwelm$Tile$DoorClosed;
		} else {
			return _mordrax$cotwelm$Tile$DarkDgn;
		}
	}();
	return A2(_mordrax$cotwelm$Tile$toTile, _p1.position, tileType);
};
var _mordrax$cotwelm$Dungeon_Entrance$position = function (_p3) {
	var _p4 = _p3;
	return _p4.position;
};
var _mordrax$cotwelm$Dungeon_Entrance$Entrance = F2(
	function (a, b) {
		return {entranceType: a, position: b};
	});
var _mordrax$cotwelm$Dungeon_Entrance$init = _mordrax$cotwelm$Dungeon_Entrance$Entrance;
var _mordrax$cotwelm$Dungeon_Entrance$NoDoor = {ctor: 'NoDoor'};
var _mordrax$cotwelm$Dungeon_Entrance$Door = {ctor: 'Door'};

var _mordrax$cotwelm$Dungeon_Rooms_Type$localToWorld = F2(
	function (worldVector, _p0) {
		var _p1 = _p0;
		return A2(_mordrax$cotwelm$Utils_Vector$add, _p1._0, worldVector);
	});
var _mordrax$cotwelm$Dungeon_Rooms_Type$toWorldVectors = function (worldVector) {
	return _elm_lang$core$List$map(
		_mordrax$cotwelm$Dungeon_Rooms_Type$localToWorld(worldVector));
};
var _mordrax$cotwelm$Dungeon_Rooms_Type$RoomTemplate = F3(
	function (a, b, c) {
		return {makeWalls: a, makeCorners: b, makeFloors: c};
	});
var _mordrax$cotwelm$Dungeon_Rooms_Type$DeadEnd = {ctor: 'DeadEnd'};
var _mordrax$cotwelm$Dungeon_Rooms_Type$DiagonalSquares = {ctor: 'DiagonalSquares'};
var _mordrax$cotwelm$Dungeon_Rooms_Type$Circular = {ctor: 'Circular'};
var _mordrax$cotwelm$Dungeon_Rooms_Type$Potion = {ctor: 'Potion'};
var _mordrax$cotwelm$Dungeon_Rooms_Type$Diamond = {ctor: 'Diamond'};
var _mordrax$cotwelm$Dungeon_Rooms_Type$Cross = {ctor: 'Cross'};
var _mordrax$cotwelm$Dungeon_Rooms_Type$Rectangular = {ctor: 'Rectangular'};
var _mordrax$cotwelm$Dungeon_Rooms_Type$Local = function (a) {
	return {ctor: 'Local', _0: a};
};

var _mordrax$cotwelm$Dungeon_Rooms_Circular$walls = function (dimension) {
	return {ctor: '[]'};
};
var _mordrax$cotwelm$Dungeon_Rooms_Circular$floors = function (_p0) {
	var _p1 = _p0;
	var _p2 = _p1._0;
	var withinRadius = function (point) {
		return _elm_lang$core$Native_Utils.cmp(
			A2(
				_mordrax$cotwelm$Utils_Vector$distance,
				{ctor: '_Tuple2', _0: _p2 + 1, _1: _p2 + 1},
				point),
			_elm_lang$core$Basics$toFloat(_p2) + 0.5) < 1;
	};
	var gridRange = A2(_elm_lang$core$List$range, 1, (_p2 * 2) + 3);
	var gridCoords = A3(
		_elm_community$list_extra$List_Extra$lift2,
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		gridRange,
		gridRange);
	return A2(
		_elm_lang$core$List$map,
		_mordrax$cotwelm$Dungeon_Rooms_Type$Local,
		A2(_elm_lang$core$List$filter, withinRadius, gridCoords));
};
var _mordrax$cotwelm$Dungeon_Rooms_Circular$corners = function (dimension) {
	return {ctor: '[]'};
};
var _mordrax$cotwelm$Dungeon_Rooms_Circular$template = {makeWalls: _mordrax$cotwelm$Dungeon_Rooms_Circular$walls, makeCorners: _mordrax$cotwelm$Dungeon_Rooms_Circular$corners, makeFloors: _mordrax$cotwelm$Dungeon_Rooms_Circular$floors};

var _mordrax$cotwelm$Dungeon_Rooms_Config$withinDungeonBounds = F2(
	function (_p1, _p0) {
		var _p2 = _p1;
		var _p6 = _p2._1;
		var _p5 = _p2._0;
		var _p3 = _p0;
		var _p4 = _p3.dungeonSize;
		return (_elm_lang$core$Native_Utils.cmp(_p5, 0) > -1) && ((_elm_lang$core$Native_Utils.cmp(_p6, 0) > -1) && ((_elm_lang$core$Native_Utils.cmp(_p5, _p4) < 1) && (_elm_lang$core$Native_Utils.cmp(_p6, _p4) < 1)));
	});
var _mordrax$cotwelm$Dungeon_Rooms_Config$wallToEntrance = function (wallGen) {
	return A2(
		_mgold$elm_random_pcg$Random_Pcg$map,
		_mordrax$cotwelm$Dungeon_Entrance$init(_mordrax$cotwelm$Dungeon_Entrance$Door),
		wallGen);
};
var _mordrax$cotwelm$Dungeon_Rooms_Config$wallSampler = function (walls) {
	var _p7 = walls;
	if (_p7.ctor === '[]') {
		return _mgold$elm_random_pcg$Random_Pcg$constant(
			{ctor: '_Tuple2', _0: 0, _1: 0});
	} else {
		return A2(
			_mgold$elm_random_pcg$Random_Pcg$map,
			_elm_lang$core$Maybe$withDefault(_p7._0),
			_mgold$elm_random_pcg$Random_Pcg$sample(walls));
	}
};
var _mordrax$cotwelm$Dungeon_Rooms_Config$addEntrances = F2(
	function (nEntrances, _p8) {
		var _p9 = _p8;
		var _p14 = _p9._0;
		var _p13 = _p9._1;
		var _p12 = _p9._2;
		var createGenerator = _mgold$elm_random_pcg$Random_Pcg$constant(
			{
				ctor: '_Tuple2',
				_0: A2(_elm_lang$core$Basics_ops['++'], _p14, _p13),
				_1: _p12
			});
		var _p10 = {ctor: '_Tuple2', _0: nEntrances, _1: _p14};
		_v4_0:
		do {
			if (_p10._1.ctor === '[]') {
				if (_p10._0 === 0) {
					break _v4_0;
				} else {
					return createGenerator;
				}
			} else {
				if (_p10._0 === 0) {
					break _v4_0;
				} else {
					if (_p10._1._0.ctor === '[]') {
						return createGenerator;
					} else {
						var _p11 = _p10._1._0;
						var wallWithoutEntrance = function (entrance) {
							return A2(
								_elm_lang$core$List$filter,
								F2(
									function (x, y) {
										return !_elm_lang$core$Native_Utils.eq(x, y);
									})(
									_mordrax$cotwelm$Dungeon_Entrance$position(entrance)),
								_p11);
						};
						var recurse = function (entrance) {
							return A2(
								_mordrax$cotwelm$Dungeon_Rooms_Config$addEntrances,
								_p10._0 - 1,
								{
									ctor: '_Tuple3',
									_0: A2(
										_elm_lang$core$Basics_ops['++'],
										_p10._1._1,
										{
											ctor: '::',
											_0: wallWithoutEntrance(entrance),
											_1: {ctor: '[]'}
										}),
									_1: _p13,
									_2: {ctor: '::', _0: entrance, _1: _p12}
								});
						};
						var generateWall = _mordrax$cotwelm$Dungeon_Rooms_Config$wallSampler(_p11);
						return A2(
							_mgold$elm_random_pcg$Random_Pcg$andThen,
							recurse,
							_mordrax$cotwelm$Dungeon_Rooms_Config$wallToEntrance(generateWall));
					}
				}
			}
		} while(false);
		return createGenerator;
	});
var _mordrax$cotwelm$Dungeon_Rooms_Config$roomTypeGenerator = function (_p15) {
	var _p16 = _p15;
	var _p17 = _p16.roomsConfig;
	return _mgold$elm_random_pcg$Random_Pcg$frequency(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Basics$toFloat(_p17.rectangular.frequency),
				_1: _mgold$elm_random_pcg$Random_Pcg$constant(_mordrax$cotwelm$Dungeon_Rooms_Type$Rectangular)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Basics$toFloat(_p17.cross.frequency),
					_1: _mgold$elm_random_pcg$Random_Pcg$constant(_mordrax$cotwelm$Dungeon_Rooms_Type$Cross)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Basics$toFloat(_p17.diamond.frequency),
						_1: _mgold$elm_random_pcg$Random_Pcg$constant(_mordrax$cotwelm$Dungeon_Rooms_Type$Diamond)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Basics$toFloat(_p17.potion.frequency),
							_1: _mgold$elm_random_pcg$Random_Pcg$constant(_mordrax$cotwelm$Dungeon_Rooms_Type$Potion)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Basics$toFloat(_p17.circular.frequency),
								_1: _mgold$elm_random_pcg$Random_Pcg$constant(_mordrax$cotwelm$Dungeon_Rooms_Type$Circular)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Basics$toFloat(_p17.diagonalSquares.frequency),
									_1: _mgold$elm_random_pcg$Random_Pcg$constant(_mordrax$cotwelm$Dungeon_Rooms_Type$DiagonalSquares)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: _elm_lang$core$Basics$toFloat(_p17.deadEnd.frequency),
										_1: _mgold$elm_random_pcg$Random_Pcg$constant(_mordrax$cotwelm$Dungeon_Rooms_Type$DeadEnd)
									},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		});
};
var _mordrax$cotwelm$Dungeon_Rooms_Config$sizeRange = F2(
	function (roomType, roomsConfig) {
		var _p18 = roomType;
		switch (_p18.ctor) {
			case 'Rectangular':
				return roomsConfig.rectangular.sizeRange;
			case 'Cross':
				return roomsConfig.cross.sizeRange;
			case 'Diamond':
				return roomsConfig.diamond.sizeRange;
			case 'Potion':
				return roomsConfig.potion.sizeRange;
			case 'Circular':
				return roomsConfig.circular.sizeRange;
			case 'DiagonalSquares':
				return roomsConfig.diagonalSquares.sizeRange;
			default:
				return roomsConfig.deadEnd.sizeRange;
		}
	});
var _mordrax$cotwelm$Dungeon_Rooms_Config$roomSizeGenerator = F2(
	function (_p19, roomType) {
		var _p20 = _p19;
		var _p21 = A2(_mordrax$cotwelm$Dungeon_Rooms_Config$sizeRange, roomType, _p20.roomsConfig);
		var minRoomSize = _p21._0;
		var maxRoomSize = _p21._1;
		var sizeGen = A2(_mgold$elm_random_pcg$Random_Pcg$int, minRoomSize, maxRoomSize);
		return A3(
			_mgold$elm_random_pcg$Random_Pcg$map2,
			F2(
				function (x, y) {
					return {ctor: '_Tuple2', _0: x, _1: y};
				}),
			sizeGen,
			sizeGen);
	});
var _mordrax$cotwelm$Dungeon_Rooms_Config$updateRoomsConfig = F3(
	function (roomType, updater, roomsConfig) {
		var _p22 = roomType;
		switch (_p22.ctor) {
			case 'Rectangular':
				return _elm_lang$core$Native_Utils.update(
					roomsConfig,
					{
						rectangular: updater(roomsConfig.rectangular)
					});
			case 'Cross':
				return _elm_lang$core$Native_Utils.update(
					roomsConfig,
					{
						cross: updater(roomsConfig.cross)
					});
			case 'Diamond':
				return _elm_lang$core$Native_Utils.update(
					roomsConfig,
					{
						diamond: updater(roomsConfig.diamond)
					});
			case 'Potion':
				return _elm_lang$core$Native_Utils.update(
					roomsConfig,
					{
						potion: updater(roomsConfig.potion)
					});
			case 'Circular':
				return _elm_lang$core$Native_Utils.update(
					roomsConfig,
					{
						circular: updater(roomsConfig.circular)
					});
			case 'DiagonalSquares':
				return _elm_lang$core$Native_Utils.update(
					roomsConfig,
					{
						diagonalSquares: updater(roomsConfig.diagonalSquares)
					});
			default:
				return _elm_lang$core$Native_Utils.update(
					roomsConfig,
					{
						deadEnd: updater(roomsConfig.deadEnd)
					});
		}
	});
var _mordrax$cotwelm$Dungeon_Rooms_Config$update = F2(
	function (msg, model) {
		var _p23 = A2(_elm_lang$core$Debug$log, 'Config.update', msg);
		var _p24 = msg;
		switch (_p24.ctor) {
			case 'DungeonSize':
				return _elm_lang$core$Native_Utils.update(
					model,
					{dungeonSize: _p24._0});
			case 'RoomSize':
				var updateSizeRange = F2(
					function (sizeRange_, config) {
						return _elm_lang$core$Native_Utils.update(
							config,
							{sizeRange: sizeRange_});
					});
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						roomsConfig: A3(
							_mordrax$cotwelm$Dungeon_Rooms_Config$updateRoomsConfig,
							_p24._0,
							updateSizeRange(_p24._1),
							model.roomsConfig)
					});
			case 'ChangeFrequency':
				var updateFrequency = F2(
					function (freq, config) {
						return _elm_lang$core$Native_Utils.update(
							config,
							{frequency: freq});
					});
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						roomsConfig: A3(
							_mordrax$cotwelm$Dungeon_Rooms_Config$updateRoomsConfig,
							_p24._0,
							updateFrequency(_p24._1),
							model.roomsConfig)
					});
			case 'MapScale':
				return _elm_lang$core$Native_Utils.update(
					model,
					{mapScale: _p24._0});
			case 'NumberOfRooms':
				return _elm_lang$core$Native_Utils.update(
					model,
					{nAttemptsAtRoomGen: _p24._0});
			default:
				return _elm_lang$core$Native_Utils.update(
					model,
					{nAttemptsAtRoomConnection: _p24._0});
		}
	});
var _mordrax$cotwelm$Dungeon_Rooms_Config$maxRoomSize = function (_p25) {
	var _p26 = _p25;
	var _p31 = _p26.roomsConfig;
	var keepLargest = F2(
		function (_p28, _p27) {
			var _p29 = _p28;
			var _p30 = _p27;
			return {
				ctor: '_Tuple2',
				_0: A2(_elm_lang$core$Basics$max, _p29._0, _p30._0),
				_1: A2(_elm_lang$core$Basics$max, _p29._1, _p30._1)
			};
		});
	return A3(
		_elm_lang$core$List$foldl,
		keepLargest,
		{ctor: '_Tuple2', _0: 0, _1: 0},
		A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.sizeRange;
			},
			{
				ctor: '::',
				_0: _p31.rectangular,
				_1: {
					ctor: '::',
					_0: _p31.cross,
					_1: {
						ctor: '::',
						_0: _p31.diamond,
						_1: {
							ctor: '::',
							_0: _p31.potion,
							_1: {
								ctor: '::',
								_0: _p31.circular,
								_1: {
									ctor: '::',
									_0: _p31.diagonalSquares,
									_1: {
										ctor: '::',
										_0: _p31.deadEnd,
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}));
};
var _mordrax$cotwelm$Dungeon_Rooms_Config$Config = F7(
	function (a, b, c, d, e, f, g) {
		return {dungeonSize: a, roomsConfig: b, mapScale: c, maxEntrances: d, corridor: e, nAttemptsAtRoomGen: f, nAttemptsAtRoomConnection: g};
	});
var _mordrax$cotwelm$Dungeon_Rooms_Config$CorridorConfig = F2(
	function (a, b) {
		return {minLength: a, maxLength: b};
	});
var _mordrax$cotwelm$Dungeon_Rooms_Config$RoomsConfig = F7(
	function (a, b, c, d, e, f, g) {
		return {rectangular: a, cross: b, diamond: c, potion: d, circular: e, diagonalSquares: f, deadEnd: g};
	});
var _mordrax$cotwelm$Dungeon_Rooms_Config$RoomConfig = F2(
	function (a, b) {
		return {sizeRange: a, frequency: b};
	});
var _mordrax$cotwelm$Dungeon_Rooms_Config$init = {
	dungeonSize: 100,
	corridor: {minLength: 10, maxLength: 20},
	roomsConfig: {
		rectangular: A2(
			_mordrax$cotwelm$Dungeon_Rooms_Config$RoomConfig,
			{ctor: '_Tuple2', _0: 6, _1: 12},
			1),
		cross: A2(
			_mordrax$cotwelm$Dungeon_Rooms_Config$RoomConfig,
			{ctor: '_Tuple2', _0: 2, _1: 4},
			1),
		diamond: A2(
			_mordrax$cotwelm$Dungeon_Rooms_Config$RoomConfig,
			{ctor: '_Tuple2', _0: 2, _1: 4},
			1),
		potion: A2(
			_mordrax$cotwelm$Dungeon_Rooms_Config$RoomConfig,
			{ctor: '_Tuple2', _0: 4, _1: 10},
			0),
		circular: A2(
			_mordrax$cotwelm$Dungeon_Rooms_Config$RoomConfig,
			{ctor: '_Tuple2', _0: 4, _1: 10},
			1),
		diagonalSquares: A2(
			_mordrax$cotwelm$Dungeon_Rooms_Config$RoomConfig,
			{ctor: '_Tuple2', _0: 4, _1: 10},
			0),
		deadEnd: A2(
			_mordrax$cotwelm$Dungeon_Rooms_Config$RoomConfig,
			{ctor: '_Tuple2', _0: 1, _1: 1},
			0)
	},
	nAttemptsAtRoomGen: 15,
	nAttemptsAtRoomConnection: 20,
	mapScale: 0.2,
	maxEntrances: 4
};
var _mordrax$cotwelm$Dungeon_Rooms_Config$NumberOfConnections = function (a) {
	return {ctor: 'NumberOfConnections', _0: a};
};
var _mordrax$cotwelm$Dungeon_Rooms_Config$NumberOfRooms = function (a) {
	return {ctor: 'NumberOfRooms', _0: a};
};
var _mordrax$cotwelm$Dungeon_Rooms_Config$MapScale = function (a) {
	return {ctor: 'MapScale', _0: a};
};
var _mordrax$cotwelm$Dungeon_Rooms_Config$ChangeFrequency = F2(
	function (a, b) {
		return {ctor: 'ChangeFrequency', _0: a, _1: b};
	});
var _mordrax$cotwelm$Dungeon_Rooms_Config$roomFrequencyView = F2(
	function (roomType, freq) {
		return A3(
			_mordrax$cotwelm$View_UI$labeledNumber,
			'Freq',
			freq,
			_mordrax$cotwelm$Dungeon_Rooms_Config$ChangeFrequency(roomType));
	});
var _mordrax$cotwelm$Dungeon_Rooms_Config$RoomSize = F2(
	function (a, b) {
		return {ctor: 'RoomSize', _0: a, _1: b};
	});
var _mordrax$cotwelm$Dungeon_Rooms_Config$roomSizeView = F2(
	function (roomType, _p32) {
		var _p33 = _p32;
		var _p35 = _p33._0;
		var _p34 = _p33._1;
		var lbl = A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(roomType),
			' size: ');
		return A4(
			_mordrax$cotwelm$View_UI$labeled2TupleNumber,
			lbl,
			{ctor: '_Tuple2', _0: _p35, _1: _p34},
			function (min_) {
				return A2(
					_mordrax$cotwelm$Dungeon_Rooms_Config$RoomSize,
					roomType,
					{ctor: '_Tuple2', _0: min_, _1: _p34});
			},
			function (max_) {
				return A2(
					_mordrax$cotwelm$Dungeon_Rooms_Config$RoomSize,
					roomType,
					{ctor: '_Tuple2', _0: _p35, _1: max_});
			});
	});
var _mordrax$cotwelm$Dungeon_Rooms_Config$roomsConfigView = function (model) {
	var rooms = {
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Dungeon_Rooms_Type$Rectangular, _1: model.roomsConfig.rectangular},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Dungeon_Rooms_Type$Cross, _1: model.roomsConfig.cross},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Dungeon_Rooms_Type$Diamond, _1: model.roomsConfig.diamond},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Dungeon_Rooms_Type$Potion, _1: model.roomsConfig.potion},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Dungeon_Rooms_Type$Circular, _1: model.roomsConfig.circular},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: _mordrax$cotwelm$Dungeon_Rooms_Type$DiagonalSquares, _1: model.roomsConfig.diagonalSquares},
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	};
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		_elm_lang$core$List$concat(
			A2(
				_elm_lang$core$List$map,
				function (_p36) {
					var _p37 = _p36;
					var _p39 = _p37._0;
					var _p38 = _p37._1;
					return {
						ctor: '::',
						_0: A2(_mordrax$cotwelm$Dungeon_Rooms_Config$roomSizeView, _p39, _p38.sizeRange),
						_1: {
							ctor: '::',
							_0: A2(_mordrax$cotwelm$Dungeon_Rooms_Config$roomFrequencyView, _p39, _p38.frequency),
							_1: {ctor: '[]'}
						}
					};
				},
				rooms)));
};
var _mordrax$cotwelm$Dungeon_Rooms_Config$DungeonSize = function (a) {
	return {ctor: 'DungeonSize', _0: a};
};
var _mordrax$cotwelm$Dungeon_Rooms_Config$dungeonSizeView = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A3(_mordrax$cotwelm$View_UI$labeledNumber, 'Dungeon size', model.dungeonSize, _mordrax$cotwelm$Dungeon_Rooms_Config$DungeonSize),
			_1: {
				ctor: '::',
				_0: A3(_mordrax$cotwelm$View_UI$labeledFloat, 'Map scale', model.mapScale, _mordrax$cotwelm$Dungeon_Rooms_Config$MapScale),
				_1: {
					ctor: '::',
					_0: A3(_mordrax$cotwelm$View_UI$labeledNumber, 'Attempts at room gen', model.nAttemptsAtRoomGen, _mordrax$cotwelm$Dungeon_Rooms_Config$NumberOfRooms),
					_1: {
						ctor: '::',
						_0: A3(_mordrax$cotwelm$View_UI$labeledNumber, 'Attempts at room connections', model.nAttemptsAtRoomConnection, _mordrax$cotwelm$Dungeon_Rooms_Config$NumberOfConnections),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};

var _mordrax$cotwelm$Dungeon_Rooms_Cross$dot = F2(
	function (wallSize, axis) {
		return (wallSize + 1) * axis;
	});
var _mordrax$cotwelm$Dungeon_Rooms_Cross$floors = function (_p0) {
	var _p1 = _p0;
	var axis = _mordrax$cotwelm$Dungeon_Rooms_Cross$dot(_p1._0);
	var floorMiddles = A2(
		_elm_lang$core$List$range,
		axis(1) + 1,
		axis(2) - 1);
	var vertical = A3(
		_elm_community$list_extra$List_Extra$lift2,
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		floorMiddles,
		A2(
			_elm_lang$core$List$range,
			axis(0) + 1,
			axis(3) - 1));
	var horizontal = A3(
		_elm_community$list_extra$List_Extra$lift2,
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		A2(
			_elm_lang$core$List$range,
			axis(0) + 1,
			axis(3) - 1),
		floorMiddles);
	return A2(
		_elm_lang$core$List$map,
		_mordrax$cotwelm$Dungeon_Rooms_Type$Local,
		_elm_lang$core$Set$toList(
			_elm_lang$core$Set$fromList(
				A2(_elm_lang$core$Basics_ops['++'], vertical, horizontal))));
};
var _mordrax$cotwelm$Dungeon_Rooms_Cross$template = {
	makeWalls: function (_p2) {
		return {ctor: '[]'};
	},
	makeCorners: function (_p3) {
		return {ctor: '[]'};
	},
	makeFloors: _mordrax$cotwelm$Dungeon_Rooms_Cross$floors
};

var _mordrax$cotwelm$Dungeon_Rooms_DeadEnd$walls = function (dimension) {
	return {ctor: '[]'};
};
var _mordrax$cotwelm$Dungeon_Rooms_DeadEnd$floors = function (dimension) {
	return {ctor: '[]'};
};
var _mordrax$cotwelm$Dungeon_Rooms_DeadEnd$corners = function (dimension) {
	return {ctor: '[]'};
};
var _mordrax$cotwelm$Dungeon_Rooms_DeadEnd$template = {makeWalls: _mordrax$cotwelm$Dungeon_Rooms_DeadEnd$walls, makeCorners: _mordrax$cotwelm$Dungeon_Rooms_DeadEnd$corners, makeFloors: _mordrax$cotwelm$Dungeon_Rooms_DeadEnd$floors};

var _mordrax$cotwelm$Dungeon_Rooms_DiagonalSquares$walls = function (dimension) {
	return {ctor: '[]'};
};
var _mordrax$cotwelm$Dungeon_Rooms_DiagonalSquares$floors = function (dimension) {
	return {ctor: '[]'};
};
var _mordrax$cotwelm$Dungeon_Rooms_DiagonalSquares$corners = function (dimension) {
	return {ctor: '[]'};
};
var _mordrax$cotwelm$Dungeon_Rooms_DiagonalSquares$template = {makeWalls: _mordrax$cotwelm$Dungeon_Rooms_DiagonalSquares$walls, makeCorners: _mordrax$cotwelm$Dungeon_Rooms_DiagonalSquares$corners, makeFloors: _mordrax$cotwelm$Dungeon_Rooms_DiagonalSquares$floors};

var _mordrax$cotwelm$Dungeon_Rooms_Diamond$floors_ = F2(
	function (growth, currentFloors) {
		floors_:
		while (true) {
			var _p0 = growth;
			if (_p0 === 0) {
				return currentFloors;
			} else {
				var _v1 = _p0 - 1,
					_v2 = A2(
					_elm_lang$core$Set$union,
					currentFloors,
					_elm_lang$core$Set$fromList(
						A2(
							_elm_lang$core$List$concatMap,
							_mordrax$cotwelm$Utils_Vector$cardinalNeighbours,
							_elm_lang$core$Set$toList(currentFloors))));
				growth = _v1;
				currentFloors = _v2;
				continue floors_;
			}
		}
	});
var _mordrax$cotwelm$Dungeon_Rooms_Diamond$floors = function (_p1) {
	var _p2 = _p1;
	var _p3 = _p2._0;
	return A2(
		_elm_lang$core$List$map,
		_mordrax$cotwelm$Dungeon_Rooms_Type$Local,
		_elm_lang$core$Set$toList(
			A2(
				_mordrax$cotwelm$Dungeon_Rooms_Diamond$floors_,
				_p3,
				_elm_lang$core$Set$singleton(
					{ctor: '_Tuple2', _0: _p3 + 1, _1: _p3 + 1}))));
};
var _mordrax$cotwelm$Dungeon_Rooms_Diamond$template = {
	makeWalls: function (_p4) {
		return {ctor: '[]'};
	},
	makeCorners: function (_p5) {
		return {ctor: '[]'};
	},
	makeFloors: _mordrax$cotwelm$Dungeon_Rooms_Diamond$floors
};

var _mordrax$cotwelm$Dungeon_Rooms_Potion$walls = function (dimension) {
	return {ctor: '[]'};
};
var _mordrax$cotwelm$Dungeon_Rooms_Potion$floors = function (dimension) {
	return {ctor: '[]'};
};
var _mordrax$cotwelm$Dungeon_Rooms_Potion$corners = function (dimension) {
	return {ctor: '[]'};
};
var _mordrax$cotwelm$Dungeon_Rooms_Potion$template = {makeWalls: _mordrax$cotwelm$Dungeon_Rooms_Potion$walls, makeCorners: _mordrax$cotwelm$Dungeon_Rooms_Potion$corners, makeFloors: _mordrax$cotwelm$Dungeon_Rooms_Potion$floors};

var _mordrax$cotwelm$Dungeon_Rooms_Rectangular$floors = function (_p0) {
	var _p1 = _p0;
	var _p2 = {ctor: '_Tuple2', _0: _p1._0 - 1, _1: _p1._1 - 1};
	var xMax = _p2._0;
	var yMax = _p2._1;
	return A2(
		_elm_lang$core$List$map,
		_mordrax$cotwelm$Dungeon_Rooms_Type$Local,
		A3(
			_elm_community$list_extra$List_Extra$lift2,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			A2(_elm_lang$core$List$range, 1, xMax - 1),
			A2(_elm_lang$core$List$range, 1, yMax - 1)));
};
var _mordrax$cotwelm$Dungeon_Rooms_Rectangular$corners = function (_p3) {
	var _p4 = _p3;
	var _p5 = {ctor: '_Tuple2', _0: _p4._0 - 1, _1: _p4._1 - 1};
	var xMax = _p5._0;
	var yMax = _p5._1;
	return A2(
		_elm_lang$core$List$map,
		_mordrax$cotwelm$Dungeon_Rooms_Type$Local,
		{
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 0, _1: 0},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: xMax, _1: 0},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 0, _1: yMax},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: xMax, _1: yMax},
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _mordrax$cotwelm$Dungeon_Rooms_Rectangular$template = {
	makeWalls: function (_p6) {
		return {ctor: '[]'};
	},
	makeCorners: _mordrax$cotwelm$Dungeon_Rooms_Rectangular$corners,
	makeFloors: _mordrax$cotwelm$Dungeon_Rooms_Rectangular$floors
};

var _mordrax$cotwelm$Dungeon_Room$setLightSource = F2(
	function (val, room) {
		return _elm_lang$core$Native_Utils.update(
			room,
			{lightSource: val});
	});
var _mordrax$cotwelm$Dungeon_Room$setWorldPos = F2(
	function (val, room) {
		return _elm_lang$core$Native_Utils.update(
			room,
			{worldPos: val});
	});
var _mordrax$cotwelm$Dungeon_Room$setDimension = F2(
	function (val, room) {
		return _elm_lang$core$Native_Utils.update(
			room,
			{dimension: val});
	});
var _mordrax$cotwelm$Dungeon_Room$setRoomType = F2(
	function (val, room) {
		return _elm_lang$core$Native_Utils.update(
			room,
			{roomType: val});
	});
var _mordrax$cotwelm$Dungeon_Room$setFloors = F2(
	function (val, room) {
		return _elm_lang$core$Native_Utils.update(
			room,
			{floors: val});
	});
var _mordrax$cotwelm$Dungeon_Room$setEntrances = F2(
	function (val, room) {
		return _elm_lang$core$Native_Utils.update(
			room,
			{entrances: val});
	});
var _mordrax$cotwelm$Dungeon_Room$adjacent_ = F2(
	function (adjacencyFn, startingVectors) {
		var lessStartingVectors = function (set) {
			return A2(
				_elm_lang$core$Set$diff,
				set,
				_elm_lang$core$Set$fromList(startingVectors));
		};
		return _elm_lang$core$Set$toList(
			lessStartingVectors(
				_elm_lang$core$Set$fromList(
					_elm_lang$core$List$concat(
						A2(_elm_lang$core$List$map, adjacencyFn, startingVectors)))));
	});
var _mordrax$cotwelm$Dungeon_Room$cardinallyAdjacent = _mordrax$cotwelm$Dungeon_Room$adjacent_(_mordrax$cotwelm$Utils_Vector$cardinalNeighbours);
var _mordrax$cotwelm$Dungeon_Room$adjacent = _mordrax$cotwelm$Dungeon_Room$adjacent_(_mordrax$cotwelm$Utils_Vector$neighbours);
var _mordrax$cotwelm$Dungeon_Room$centre = function (_p0) {
	var _p1 = _p0;
	var halfDimension = A2(_mordrax$cotwelm$Utils_Vector$scale, 0.5, _p1.dimension);
	return A2(_mordrax$cotwelm$Utils_Vector$add, _p1.worldPos, halfDimension);
};
var _mordrax$cotwelm$Dungeon_Room$vectorBox = function (_p2) {
	var _p3 = _p2;
	return function (topLeft) {
		return {
			ctor: '_Tuple2',
			_0: topLeft,
			_1: A2(_mordrax$cotwelm$Utils_Vector$add, topLeft, _p3.dimension)
		};
	}(_p3.worldPos);
};
var _mordrax$cotwelm$Dungeon_Room$templates = function (roomType) {
	var _p4 = roomType;
	switch (_p4.ctor) {
		case 'Rectangular':
			return _mordrax$cotwelm$Dungeon_Rooms_Rectangular$template;
		case 'Cross':
			return _mordrax$cotwelm$Dungeon_Rooms_Cross$template;
		case 'Diamond':
			return _mordrax$cotwelm$Dungeon_Rooms_Diamond$template;
		case 'Potion':
			return _mordrax$cotwelm$Dungeon_Rooms_Potion$template;
		case 'Circular':
			return _mordrax$cotwelm$Dungeon_Rooms_Circular$template;
		case 'DiagonalSquares':
			return _mordrax$cotwelm$Dungeon_Rooms_DiagonalSquares$template;
		default:
			return _mordrax$cotwelm$Dungeon_Rooms_DeadEnd$template;
	}
};
var _mordrax$cotwelm$Dungeon_Room$calculateFloors = F2(
	function (roomType, dimension) {
		return _mordrax$cotwelm$Dungeon_Room$templates(roomType).makeFloors(dimension);
	});
var _mordrax$cotwelm$Dungeon_Room$positionGenerator = function (_p5) {
	var _p6 = _p5;
	var _p9 = _p6.dungeonSize;
	var _p7 = _mordrax$cotwelm$Dungeon_Rooms_Config$maxRoomSize(_p6);
	var dimX = _p7._0;
	var dimY = _p7._1;
	var _p8 = A2(
		_mordrax$cotwelm$Utils_Vector$map,
		_elm_lang$core$Basics$max(0),
		{ctor: '_Tuple2', _0: _p9 - dimX, _1: _p9 - dimY});
	var maxX = _p8._0;
	var maxY = _p8._1;
	return A2(_mordrax$cotwelm$Dice$d2d, maxX, maxY);
};
var _mordrax$cotwelm$Dungeon_Room$lightSourceGenerator = A2(
	_mgold$elm_random_pcg$Random_Pcg$map,
	_elm_lang$core$Maybe$withDefault(_mordrax$cotwelm$Types$Artificial),
	_mgold$elm_random_pcg$Random_Pcg$sample(
		{
			ctor: '::',
			_0: _mordrax$cotwelm$Types$Artificial,
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$Types$Artificial,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Types$Artificial,
					_1: {
						ctor: '::',
						_0: _mordrax$cotwelm$Types$Artificial,
						_1: {
							ctor: '::',
							_0: _mordrax$cotwelm$Types$Dark,
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}));
var _mordrax$cotwelm$Dungeon_Room$facesPoint = F2(
	function (_p11, _p10) {
		var _p12 = _p11;
		var _p17 = _p12._1;
		var _p16 = _p12._0;
		var _p13 = _p10;
		var _p14 = _p13.worldPos;
		var minX = _p14._0;
		var minY = _p14._1;
		var _p15 = A2(
			_mordrax$cotwelm$Utils_Vector$add,
			{ctor: '_Tuple2', _0: minX, _1: minY},
			_p13.dimension);
		var maxX = _p15._0;
		var maxY = _p15._1;
		return A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Tuple$second,
			A2(
				_elm_lang$core$List$filter,
				_elm_lang$core$Tuple$first,
				{
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.cmp(_p16, minX) < 0,
						_1: _mordrax$cotwelm$Utils_Direction$W
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.cmp(_p16, maxX) > 0,
							_1: _mordrax$cotwelm$Utils_Direction$E
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.cmp(_p17, minY) < 0,
								_1: _mordrax$cotwelm$Utils_Direction$S
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.cmp(_p17, maxY) > 0,
									_1: _mordrax$cotwelm$Utils_Direction$N
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: (_elm_lang$core$Native_Utils.cmp(_p16, minX) < 0) && (_elm_lang$core$Native_Utils.cmp(_p17, minY) < 0),
										_1: _mordrax$cotwelm$Utils_Direction$SW
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: (_elm_lang$core$Native_Utils.cmp(_p16, minX) < 0) && (_elm_lang$core$Native_Utils.cmp(_p17, maxY) > 0),
											_1: _mordrax$cotwelm$Utils_Direction$NW
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: (_elm_lang$core$Native_Utils.cmp(_p16, maxX) > 0) && (_elm_lang$core$Native_Utils.cmp(_p17, minY) < 0),
												_1: _mordrax$cotwelm$Utils_Direction$SE
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: (_elm_lang$core$Native_Utils.cmp(_p16, maxX) > 0) && (_elm_lang$core$Native_Utils.cmp(_p17, maxY) > 0),
													_1: _mordrax$cotwelm$Utils_Direction$NE
												},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}));
	});
var _mordrax$cotwelm$Dungeon_Room$faceOff = F2(
	function (a, b) {
		return {
			ctor: '_Tuple2',
			_0: A2(
				_mordrax$cotwelm$Dungeon_Room$facesPoint,
				_mordrax$cotwelm$Dungeon_Room$centre(b),
				a),
			_1: A2(
				_mordrax$cotwelm$Dungeon_Room$facesPoint,
				_mordrax$cotwelm$Dungeon_Room$centre(a),
				b)
		};
	});
var _mordrax$cotwelm$Dungeon_Room$hit = F2(
	function (v, room) {
		return A2(
			_mordrax$cotwelm$Utils_Vector$boxIntersectVector,
			v,
			_mordrax$cotwelm$Dungeon_Room$vectorBox(room));
	});
var _mordrax$cotwelm$Dungeon_Room$overlap = F2(
	function (a, b) {
		return A2(
			_elm_lang$core$List$any,
			function (cornerOfB) {
				return A2(_mordrax$cotwelm$Dungeon_Room$hit, cornerOfB, a);
			},
			b.corners) || (A2(
			_elm_lang$core$List$any,
			function (cornerOfA) {
				return A2(_mordrax$cotwelm$Dungeon_Room$hit, cornerOfA, b);
			},
			a.corners) || (A2(
			_mordrax$cotwelm$Dungeon_Room$hit,
			_mordrax$cotwelm$Dungeon_Room$centre(a),
			b) || A2(
			_mordrax$cotwelm$Dungeon_Room$hit,
			_mordrax$cotwelm$Dungeon_Room$centre(b),
			a)));
	});
var _mordrax$cotwelm$Dungeon_Room$entrancesFromFaces = F2(
	function (room, faces) {
		var addEntrances = F3(
			function (dict, face, entrances) {
				return A2(
					F2(
						function (x, y) {
							return A2(_elm_lang$core$Basics_ops['++'], x, y);
						}),
					entrances,
					A2(
						_elm_lang$core$Maybe$withDefault,
						{ctor: '[]'},
						A2(_eeue56$elm_all_dict$EveryDict$get, face, dict)));
			});
		return A3(
			_elm_lang$core$List$foldl,
			addEntrances(room.candidateEntrancesByDirection),
			{ctor: '[]'},
			faces);
	});
var _mordrax$cotwelm$Dungeon_Room$new = F4(
	function (roomType, _p19, lightSource, _p18) {
		var _p20 = _p19;
		var _p41 = _p20._0;
		var _p40 = _p20;
		var _p21 = _p18;
		var _p39 = _p21;
		var _p38 = _p21._1;
		var _p37 = _p21._0;
		var addWallTile = F2(
			function (_p22, dict) {
				var _p23 = _p22;
				return A3(
					_elm_lang$core$Dict$insert,
					_p23,
					A2(_mordrax$cotwelm$Tile$toTile, _p23, _mordrax$cotwelm$Tile$Rock),
					dict);
			});
		var floorType = function () {
			var _p24 = lightSource;
			if (_p24.ctor === 'Dark') {
				return _mordrax$cotwelm$Tile$DarkDgn;
			} else {
				return _mordrax$cotwelm$Tile$LitDgn;
			}
		}();
		var addFloorTile = F2(
			function (_p25, dict) {
				var _p26 = _p25;
				return A3(
					_elm_lang$core$Dict$insert,
					_p26,
					A2(_mordrax$cotwelm$Tile$toTile, _p26, floorType),
					dict);
			});
		var floors = A2(
			_mordrax$cotwelm$Dungeon_Rooms_Type$toWorldVectors,
			_p39,
			A2(_mordrax$cotwelm$Dungeon_Room$calculateFloors, roomType, _p40));
		var walls = _mordrax$cotwelm$Dungeon_Room$adjacent(floors);
		var entranceWalls = _mordrax$cotwelm$Dungeon_Room$cardinallyAdjacent(floors);
		var tiles = function (dict) {
			return A3(_elm_lang$core$List$foldl, addWallTile, dict, walls);
		}(
			A3(_elm_lang$core$List$foldl, addFloorTile, _elm_lang$core$Dict$empty, floors));
		var _p27 = function () {
			var _p28 = roomType;
			switch (_p28.ctor) {
				case 'Rectangular':
					return _p40;
				case 'Cross':
					return {ctor: '_Tuple2', _0: (3 * _p41) + 4, _1: (3 * _p41) + 4};
				case 'Diamond':
					return {ctor: '_Tuple2', _0: (_p41 * 2) + 3, _1: (_p41 * 2) + 3};
				case 'Circular':
					return {ctor: '_Tuple2', _0: (_p41 * 2) + 3, _1: (_p41 * 2) + 3};
				default:
					return _p40;
			}
		}();
		var dimension = _p27;
		var width = _p27._0;
		var height = _p27._1;
		var maxX = (_p37 + width) - 1;
		var maxY = (_p38 + height) - 1;
		var candidateEntrancesByDirection = _eeue56$elm_all_dict$EveryDict$fromList(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: _mordrax$cotwelm$Utils_Direction$N,
					_1: A2(
						_elm_lang$core$List$map,
						_mordrax$cotwelm$Utils_Vector$toDirected(_mordrax$cotwelm$Utils_Direction$N),
						A2(
							_elm_lang$core$List$filter,
							function (_p29) {
								var _p30 = _p29;
								return _elm_lang$core$Native_Utils.eq(_p30._1, maxY);
							},
							entranceWalls))
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: _mordrax$cotwelm$Utils_Direction$S,
						_1: A2(
							_elm_lang$core$List$map,
							_mordrax$cotwelm$Utils_Vector$toDirected(_mordrax$cotwelm$Utils_Direction$S),
							A2(
								_elm_lang$core$List$filter,
								function (_p31) {
									var _p32 = _p31;
									return _elm_lang$core$Native_Utils.eq(_p32._1, _p38);
								},
								entranceWalls))
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: _mordrax$cotwelm$Utils_Direction$E,
							_1: A2(
								_elm_lang$core$List$map,
								_mordrax$cotwelm$Utils_Vector$toDirected(_mordrax$cotwelm$Utils_Direction$E),
								A2(
									_elm_lang$core$List$filter,
									function (_p33) {
										var _p34 = _p33;
										return _elm_lang$core$Native_Utils.eq(_p34._0, maxX);
									},
									entranceWalls))
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: _mordrax$cotwelm$Utils_Direction$W,
								_1: A2(
									_elm_lang$core$List$map,
									_mordrax$cotwelm$Utils_Vector$toDirected(_mordrax$cotwelm$Utils_Direction$W),
									A2(
										_elm_lang$core$List$filter,
										function (_p35) {
											var _p36 = _p35;
											return _elm_lang$core$Native_Utils.eq(_p36._0, _p37);
										},
										entranceWalls))
							},
							_1: {ctor: '[]'}
						}
					}
				}
			});
		var corners = {
			ctor: '::',
			_0: _p39,
			_1: {
				ctor: '::',
				_0: A2(
					_mordrax$cotwelm$Utils_Vector$add,
					_p39,
					{ctor: '_Tuple2', _0: width, _1: 0}),
				_1: {
					ctor: '::',
					_0: A2(
						_mordrax$cotwelm$Utils_Vector$add,
						_p39,
						{ctor: '_Tuple2', _0: 0, _1: height}),
					_1: {
						ctor: '::',
						_0: A2(_mordrax$cotwelm$Utils_Vector$add, _p39, dimension),
						_1: {ctor: '[]'}
					}
				}
			}
		};
		return {
			entrances: {ctor: '[]'},
			floors: floors,
			roomType: roomType,
			dimension: dimension,
			worldPos: _p39,
			lightSource: lightSource,
			walls: walls,
			candidateEntrancesByDirection: candidateEntrancesByDirection,
			corners: corners,
			tiles: tiles
		};
	});
var _mordrax$cotwelm$Dungeon_Room$newDeadEnd = function (roomPosition) {
	return A2(
		_mordrax$cotwelm$Dungeon_Room$setEntrances,
		{
			ctor: '::',
			_0: A2(_mordrax$cotwelm$Dungeon_Entrance$init, _mordrax$cotwelm$Dungeon_Entrance$Door, roomPosition),
			_1: {ctor: '[]'}
		},
		A4(
			_mordrax$cotwelm$Dungeon_Room$new,
			_mordrax$cotwelm$Dungeon_Rooms_Type$DeadEnd,
			{ctor: '_Tuple2', _0: 1, _1: 1},
			_mordrax$cotwelm$Types$Artificial,
			roomPosition));
};
var _mordrax$cotwelm$Dungeon_Room$generate = function (config) {
	return A2(
		_mgold$elm_random_pcg$Random_Pcg$andThen,
		function (roomType) {
			return A4(
				_mgold$elm_random_pcg$Random_Pcg$map3,
				_mordrax$cotwelm$Dungeon_Room$new(roomType),
				A2(_mordrax$cotwelm$Dungeon_Rooms_Config$roomSizeGenerator, config, roomType),
				_mordrax$cotwelm$Dungeon_Room$lightSourceGenerator,
				_mordrax$cotwelm$Dungeon_Room$positionGenerator(config));
		},
		_mordrax$cotwelm$Dungeon_Rooms_Config$roomTypeGenerator(config));
};
var _mordrax$cotwelm$Dungeon_Room$addToDictOfList = F3(
	function (key, value, dict) {
		return function (v) {
			return A3(_eeue56$elm_all_dict$EveryDict$insert, key, v, dict);
		}(
			A2(
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					}),
				value,
				A2(
					_elm_lang$core$Maybe$withDefault,
					{ctor: '[]'},
					A2(_eeue56$elm_all_dict$EveryDict$get, key, dict))));
	});
var _mordrax$cotwelm$Dungeon_Room$makeDoor = F2(
	function (room, position) {
		var removeCandidateEntrance = function (position) {
			return A3(
				_elm_lang$core$List$foldl,
				F2(
					function (_p42, dict) {
						var _p43 = _p42;
						var _p44 = _p43._1;
						return A3(
							_mordrax$cotwelm$Dungeon_Room$addToDictOfList,
							_p44,
							{ctor: '_Tuple2', _0: _p43._0, _1: _p44},
							dict);
					}),
				_eeue56$elm_all_dict$EveryDict$empty,
				A2(
					_elm_lang$core$List$filter,
					function (_p45) {
						return A2(
							F2(
								function (x, y) {
									return !_elm_lang$core$Native_Utils.eq(x, y);
								}),
							position,
							_elm_lang$core$Tuple$first(_p45));
					},
					_elm_lang$core$List$concat(
						_eeue56$elm_all_dict$EveryDict$values(room.candidateEntrancesByDirection))));
		};
		var setDoor = function (doorType) {
			return _elm_lang$core$Native_Utils.update(
				room,
				{
					entrances: {
						ctor: '::',
						_0: A2(_mordrax$cotwelm$Dungeon_Entrance$init, _mordrax$cotwelm$Dungeon_Entrance$Door, position),
						_1: room.entrances
					},
					walls: A2(
						_elm_lang$core$List$filter,
						F2(
							function (x, y) {
								return !_elm_lang$core$Native_Utils.eq(x, y);
							})(position),
						room.walls),
					candidateEntrancesByDirection: removeCandidateEntrance(position),
					tiles: A3(
						_elm_lang$core$Dict$insert,
						position,
						A2(_mordrax$cotwelm$Tile$toTile, position, doorType),
						room.tiles)
				});
		};
		var doorTypeGen = _mgold$elm_random_pcg$Random_Pcg$frequency(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 0.9,
					_1: _mgold$elm_random_pcg$Random_Pcg$constant(_mordrax$cotwelm$Tile$DoorClosed)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 0.1,
						_1: _mgold$elm_random_pcg$Random_Pcg$constant(_mordrax$cotwelm$Tile$DoorBroken)
					},
					_1: {ctor: '[]'}
				}
			});
		return A2(_elm_lang$core$List$member, position, room.walls) ? A2(_mgold$elm_random_pcg$Random_Pcg$map, setDoor, doorTypeGen) : _mgold$elm_random_pcg$Random_Pcg$constant(room);
	});
var _mordrax$cotwelm$Dungeon_Room$Room = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {entrances: a, floors: b, roomType: c, dimension: d, worldPos: e, lightSource: f, walls: g, candidateEntrancesByDirection: h, corners: i, tiles: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};

var _mordrax$cotwelm$Game_Loot$armourLoot = A2(
	_mgold$elm_random_pcg$Random_Pcg$map,
	_mordrax$cotwelm$Item$new,
	A2(
		_mgold$elm_random_pcg$Random_Pcg$map,
		_mordrax$cotwelm$Item_Data$ItemTypeArmour,
		A2(
			_mgold$elm_random_pcg$Random_Pcg$map,
			_elm_lang$core$Maybe$withDefault(_mordrax$cotwelm$Item_Data$LeatherArmour),
			_mgold$elm_random_pcg$Random_Pcg$sample(_mordrax$cotwelm$Item_Wearable$armourTypes))));
var _mordrax$cotwelm$Game_Loot$weaponLoot = A2(
	_mgold$elm_random_pcg$Random_Pcg$map,
	_mordrax$cotwelm$Item$new,
	A2(
		_mgold$elm_random_pcg$Random_Pcg$map,
		_mordrax$cotwelm$Item_Data$ItemTypeWeapon,
		A2(
			_mgold$elm_random_pcg$Random_Pcg$map,
			_elm_lang$core$Maybe$withDefault(_mordrax$cotwelm$Item_Data$Dagger),
			_mgold$elm_random_pcg$Random_Pcg$sample(_mordrax$cotwelm$Item_Weapon$usableWeapons))));
var _mordrax$cotwelm$Game_Loot$coinLoot = F2(
	function (average, range) {
		var makeCoins = F2(
			function (coinType, coinQuantity) {
				return _mordrax$cotwelm$Item$new(
					coinType(coinQuantity));
			});
		var _p0 = {
			ctor: '_Tuple2',
			_0: A2(_elm_lang$core$Basics$max, 0, average - range),
			_1: average + range
		};
		var minCoins = _p0._0;
		var maxCoins = _p0._1;
		var coinQuantityGenerator = A2(_mgold$elm_random_pcg$Random_Pcg$int, minCoins, maxCoins);
		var coinTypeGenerator = A2(
			_mgold$elm_random_pcg$Random_Pcg$map,
			_elm_lang$core$Maybe$withDefault(_mordrax$cotwelm$Item_Data$ItemTypeCopper),
			_mgold$elm_random_pcg$Random_Pcg$sample(
				{
					ctor: '::',
					_0: _mordrax$cotwelm$Item_Data$ItemTypeCopper,
					_1: {
						ctor: '::',
						_0: _mordrax$cotwelm$Item_Data$ItemTypeSilver,
						_1: {
							ctor: '::',
							_0: _mordrax$cotwelm$Item_Data$ItemTypeGold,
							_1: {
								ctor: '::',
								_0: _mordrax$cotwelm$Item_Data$ItemTypePlatinum,
								_1: {ctor: '[]'}
							}
						}
					}
				}));
		return A3(_mgold$elm_random_pcg$Random_Pcg$map2, makeCoins, coinTypeGenerator, coinQuantityGenerator);
	});
var _mordrax$cotwelm$Game_Loot$generate = _mgold$elm_random_pcg$Random_Pcg$frequency(
	{
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 1,
			_1: A2(_mordrax$cotwelm$Game_Loot$coinLoot, 30, 20)
		},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 1, _1: _mordrax$cotwelm$Game_Loot$weaponLoot},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 1, _1: _mordrax$cotwelm$Game_Loot$armourLoot},
				_1: {ctor: '[]'}
			}
		}
	});
var _mordrax$cotwelm$Game_Loot$generateMonsterDrop = _mgold$elm_random_pcg$Random_Pcg$frequency(
	{
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 15,
			_1: A2(
				_mgold$elm_random_pcg$Random_Pcg$map,
				function (x) {
					return {
						ctor: '::',
						_0: x,
						_1: {ctor: '[]'}
					};
				},
				_mordrax$cotwelm$Game_Loot$generate)
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 85,
				_1: _mgold$elm_random_pcg$Random_Pcg$constant(
					{ctor: '[]'})
			},
			_1: {ctor: '[]'}
		}
	});
var _mordrax$cotwelm$Game_Loot$makeRandomLoot = function (lootLevel) {
	return _mordrax$cotwelm$Game_Loot$generate;
};

var _mordrax$cotwelm$Utils_BresenhamLine$vline = F3(
	function (x, y0, y1) {
		return (_elm_lang$core$Native_Utils.cmp(y1, y0) < 0) ? _elm_lang$core$List$reverse(
			A3(_mordrax$cotwelm$Utils_BresenhamLine$vline, x, y1, y0)) : A2(
			_elm_lang$core$List$map,
			function (y) {
				return {ctor: '_Tuple2', _0: x, _1: y};
			},
			A2(_elm_lang$core$List$range, y0, y1));
	});
var _mordrax$cotwelm$Utils_BresenhamLine$hline = F3(
	function (y, x0, x1) {
		return (_elm_lang$core$Native_Utils.cmp(x1, x0) < 0) ? _elm_lang$core$List$reverse(
			A3(_mordrax$cotwelm$Utils_BresenhamLine$hline, y, x1, x0)) : A2(
			_elm_lang$core$List$map,
			function (x) {
				return {ctor: '_Tuple2', _0: x, _1: y};
			},
			A2(_elm_lang$core$List$range, x0, x1));
	});
var _mordrax$cotwelm$Utils_BresenhamLine$line_ = F2(
	function (_p1, _p0) {
		var _p2 = _p1;
		var _p7 = _p2._1;
		var _p6 = _p2._0;
		var _p3 = _p0;
		var _p5 = _p3._1;
		var _p4 = _p3._0;
		var dx = _elm_lang$core$Basics$toFloat(_p4 - _p6);
		var dy = _elm_lang$core$Basics$toFloat(_p5 - _p7);
		if (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$Basics$abs(dx),
			_elm_lang$core$Basics$abs(dy)) > 0) {
			var slope = dy / dx;
			var f = function (x) {
				return slope * _elm_lang$core$Basics$toFloat(x - _p6);
			};
			return (_elm_lang$core$Native_Utils.cmp(_p6, _p4) > 0) ? _elm_lang$core$List$reverse(
				A2(
					_mordrax$cotwelm$Utils_BresenhamLine$line_,
					{ctor: '_Tuple2', _0: _p4, _1: _p5},
					{ctor: '_Tuple2', _0: _p6, _1: _p7})) : A2(
				_elm_lang$core$List$map,
				function (x) {
					return {
						ctor: '_Tuple2',
						_0: x,
						_1: _elm_lang$core$Basics$round(
							f(x)) + _p7
					};
				},
				A2(_elm_lang$core$List$range, _p6, _p4));
		} else {
			var slope = dx / dy;
			var f = function (y) {
				return slope * _elm_lang$core$Basics$toFloat(y - _p7);
			};
			return (_elm_lang$core$Native_Utils.cmp(_p7, _p5) > 0) ? _elm_lang$core$List$reverse(
				A2(
					_mordrax$cotwelm$Utils_BresenhamLine$line_,
					{ctor: '_Tuple2', _0: _p4, _1: _p5},
					{ctor: '_Tuple2', _0: _p6, _1: _p7})) : A2(
				_elm_lang$core$List$map,
				function (y) {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Basics$round(
							f(y)) + _p6,
						_1: y
					};
				},
				A2(_elm_lang$core$List$range, _p7, _p5));
		}
	});
var _mordrax$cotwelm$Utils_BresenhamLine$line = F2(
	function (_p9, _p8) {
		var _p10 = _p9;
		var _p15 = _p10._1;
		var _p14 = _p10._0;
		var _p11 = _p8;
		var _p13 = _p11._1;
		var _p12 = _p11._0;
		return _elm_lang$core$Native_Utils.eq(_p14, _p12) ? A3(_mordrax$cotwelm$Utils_BresenhamLine$vline, _p14, _p15, _p13) : (_elm_lang$core$Native_Utils.eq(_p15, _p13) ? A3(_mordrax$cotwelm$Utils_BresenhamLine$hline, _p15, _p14, _p12) : A2(
			_mordrax$cotwelm$Utils_BresenhamLine$line_,
			{ctor: '_Tuple2', _0: _p14, _1: _p15},
			{ctor: '_Tuple2', _0: _p12, _1: _p13}));
	});

var _mordrax$cotwelm$Utils_FieldOfView$losWithLine = F3(
	function (a, b, isSeeThrough) {
		var line = A2(_mordrax$cotwelm$Utils_BresenhamLine$line, a, b);
		var isSeeThroughOrEitherEndpoints = function (point) {
			return isSeeThrough(point) || (_elm_lang$core$Native_Utils.eq(point, a) || (_elm_lang$core$Native_Utils.eq(point, b) || A2(_mordrax$cotwelm$Utils_Vector$adjacent, a, b)));
		};
		return {
			ctor: '_Tuple2',
			_0: A2(_elm_lang$core$List$all, isSeeThroughOrEitherEndpoints, line),
			_1: line
		};
	});
var _mordrax$cotwelm$Utils_FieldOfView$los = F3(
	function (a, b, isSeeThrough) {
		return _elm_lang$core$Tuple$first(
			A3(_mordrax$cotwelm$Utils_FieldOfView$losWithLine, a, b, isSeeThrough));
	});
var _mordrax$cotwelm$Utils_FieldOfView$find_ = F2(
	function (source, _p0) {
		find_:
		while (true) {
			var _p1 = _p0;
			var _p6 = _p1;
			var _p5 = _p1.explored;
			var addNeighbours = F2(
				function (x, fov) {
					var neighbours = _p1.getNeighbours(x);
					return _elm_lang$core$Native_Utils.update(
						fov,
						{
							unexplored: A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Set$toList(
									A2(_elm_lang$core$Set$diff, neighbours, fov.explored)),
								fov.unexplored)
						});
				});
			var _p2 = _p1.unexplored;
			if (_p2.ctor === '[]') {
				return _p6;
			} else {
				var _p4 = _p2._1;
				var _p3 = _p2._0;
				if ((!_p1.isExplored(_p3)) && A3(_mordrax$cotwelm$Utils_FieldOfView$los, source, _p3, _p1.isSeeThrough)) {
					var _v2 = source,
						_v3 = A2(
						addNeighbours,
						_p3,
						_elm_lang$core$Native_Utils.update(
							_p6,
							{
								unexplored: _p4,
								explored: A2(_elm_lang$core$Set$insert, _p3, _p5),
								visible: A2(_elm_lang$core$Set$insert, _p3, _p1.visible)
							}));
					source = _v2;
					_p0 = _v3;
					continue find_;
				} else {
					var _v4 = source,
						_v5 = _elm_lang$core$Native_Utils.update(
						_p6,
						{
							unexplored: _p4,
							explored: A2(_elm_lang$core$Set$insert, _p3, _p5)
						});
					source = _v4;
					_p0 = _v5;
					continue find_;
				}
			}
		}
	});
var _mordrax$cotwelm$Utils_FieldOfView$FieldOfView = F6(
	function (a, b, c, d, e, f) {
		return {unexplored: a, explored: b, visible: c, isSeeThrough: d, getNeighbours: e, isExplored: f};
	});
var _mordrax$cotwelm$Utils_FieldOfView$find = F4(
	function (source, isSeeThrough, neighbours, isExplored) {
		var initialSources = neighbours(source);
		var fov = A6(
			_mordrax$cotwelm$Utils_FieldOfView$FieldOfView,
			_elm_lang$core$Set$toList(initialSources),
			_elm_lang$core$Set$empty,
			_elm_lang$core$Set$empty,
			isSeeThrough,
			neighbours,
			isExplored);
		return function (_) {
			return _.visible;
		}(
			A2(_mordrax$cotwelm$Utils_FieldOfView$find_, source, fov));
	});

var _mordrax$cotwelm$Game_Level$cardinalTileNeighbours = F2(
	function (map, center) {
		var addTilePosition = _mordrax$cotwelm$Utils_Vector$add(center);
		var getNeighbour = function (_p0) {
			return A3(
				_elm_lang$core$Basics$flip,
				_elm_lang$core$Dict$get,
				map,
				addTilePosition(_p0));
		};
		return {
			ctor: '_Tuple4',
			_0: getNeighbour(
				{ctor: '_Tuple2', _0: 0, _1: -1}),
			_1: getNeighbour(
				{ctor: '_Tuple2', _0: 1, _1: 0}),
			_2: getNeighbour(
				{ctor: '_Tuple2', _0: 0, _1: 1}),
			_3: getNeighbour(
				{ctor: '_Tuple2', _0: -1, _1: 0})
		};
	});
var _mordrax$cotwelm$Game_Level$getTile = F2(
	function (position, _p1) {
		var _p2 = _p1;
		return A2(_elm_lang$core$Dict$get, position, _p2.map);
	});
var _mordrax$cotwelm$Game_Level$markTilesVisible = F2(
	function (tilePositions, _p3) {
		var _p4 = _p3;
		var _p5 = _p4;
		var markTileVisible = F2(
			function (tilePosition, map) {
				return A2(
					_elm_lang$core$Maybe$withDefault,
					map,
					A2(
						_elm_lang$core$Maybe$map,
						function (x) {
							return A3(_elm_lang$core$Dict$insert, x.position, x, map);
						},
						A2(
							_elm_lang$core$Maybe$map,
							_mordrax$cotwelm$Tile$setVisibility(_mordrax$cotwelm$Types$Known),
							A2(_mordrax$cotwelm$Game_Level$getTile, tilePosition, _p5))));
			});
		return _elm_lang$core$Native_Utils.update(
			_p5,
			{
				map: A3(_elm_lang$core$List$foldl, markTileVisible, _p4.map, tilePositions)
			});
	});
var _mordrax$cotwelm$Game_Level$drawForEditor = F4(
	function (viewport, map, scale, onClick) {
		var withinViewport = function (tile) {
			return A3(
				_elm_lang$core$Basics$flip,
				_mordrax$cotwelm$Utils_Vector$boxIntersectVector,
				{
					ctor: '_Tuple2',
					_0: viewport.start,
					_1: A2(_mordrax$cotwelm$Utils_Vector$add, viewport.start, viewport.size)
				},
				tile.position);
		};
		var toHtml = function (tile) {
			return A4(
				_mordrax$cotwelm$Tile$viewScaled,
				scale,
				A2(_mordrax$cotwelm$Game_Level$cardinalTileNeighbours, map, tile.position),
				onClick,
				A2(_mordrax$cotwelm$Tile$setVisibility, _mordrax$cotwelm$Types$LineOfSight, tile));
		};
		var mapTiles = A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Tuple$second,
			_elm_lang$core$Dict$toList(map));
		return _elm_lang$core$List$concat(
			A2(
				_elm_lang$core$List$map,
				toHtml,
				A2(_elm_lang$core$List$filter, withinViewport, mapTiles)));
	});
var _mordrax$cotwelm$Game_Level$draw = F3(
	function (viewport, map, onClick) {
		var withinViewport = function (tile) {
			return A3(
				_elm_lang$core$Basics$flip,
				_mordrax$cotwelm$Utils_Vector$boxIntersectVector,
				{
					ctor: '_Tuple2',
					_0: viewport.start,
					_1: A2(_mordrax$cotwelm$Utils_Vector$add, viewport.start, viewport.size)
				},
				tile.position);
		};
		var toHtml = function (tile) {
			return A3(
				_mordrax$cotwelm$Tile$viewWithTooltip,
				A2(_mordrax$cotwelm$Game_Level$cardinalTileNeighbours, map, tile.position),
				onClick,
				tile);
		};
		var mapTiles = A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Tuple$second,
			_elm_lang$core$Dict$toList(map));
		return _elm_lang$core$List$concat(
			A2(
				_elm_lang$core$List$map,
				toHtml,
				A2(_elm_lang$core$List$filter, withinViewport, mapTiles)));
	});
var _mordrax$cotwelm$Game_Level$view = F3(
	function (_p6, onClick, level) {
		var _p7 = _p6;
		var onVisibleTile = function (building) {
			return A2(
				F2(
					function (x, y) {
						return !_elm_lang$core$Native_Utils.eq(x, y);
					}),
				_mordrax$cotwelm$Types$Hidden,
				A2(
					_elm_lang$core$Maybe$withDefault,
					_mordrax$cotwelm$Types$Hidden,
					A2(
						_elm_lang$core$Maybe$map,
						function (_) {
							return _.visible;
						},
						A2(_mordrax$cotwelm$Game_Level$getTile, building.position, level))));
		};
		var buildingsHtml = A2(
			_elm_lang$core$List$map,
			_mordrax$cotwelm$Building$view,
			A2(_elm_lang$core$List$filter, onVisibleTile, level.buildings));
		var viewport = {start: _p7._0, size: _p7._1};
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			A2(
				_elm_lang$core$Basics_ops['++'],
				A3(_mordrax$cotwelm$Game_Level$draw, viewport, level.map, onClick),
				buildingsHtml));
	});
var _mordrax$cotwelm$Game_Level$floors = function (_p8) {
	var _p9 = _p8;
	return A2(
		_elm_lang$core$List$map,
		function (_) {
			return _.position;
		},
		A2(
			_elm_lang$core$List$filter,
			function (_p10) {
				return !function (_) {
					return _.solid;
				}(_p10);
			},
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Tuple$second,
				_elm_lang$core$Dict$toList(_p9.map))));
};
var _mordrax$cotwelm$Game_Level$ground = F2(
	function (position, _p11) {
		var _p12 = _p11;
		return A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			A2(
				_elm_lang$core$Maybe$map,
				function (_p13) {
					return _mordrax$cotwelm$Container$list(
						function (_) {
							return _.ground;
						}(_p13));
				},
				A2(_elm_lang$core$Dict$get, position, _p12.map)));
	});
var _mordrax$cotwelm$Game_Level$updateGround = F3(
	function (pos, payload, model) {
		var maybeTile = A2(
			_elm_lang$core$Maybe$map,
			_mordrax$cotwelm$Tile$updateGround(payload),
			A2(_elm_lang$core$Dict$get, pos, model.map));
		var _p14 = maybeTile;
		if (_p14.ctor === 'Nothing') {
			return model;
		} else {
			return _elm_lang$core$Native_Utils.update(
				model,
				{
					map: A3(_elm_lang$core$Dict$insert, pos, _p14._0, model.map)
				});
		}
	});
var _mordrax$cotwelm$Game_Level$toScreenCoords = F2(
	function (map, mapSize) {
		var invertY = function (_p15) {
			var _p16 = _p15;
			var _p18 = _p16._0._1;
			var _p17 = _p16._0._0;
			return {
				ctor: '_Tuple2',
				_0: {ctor: '_Tuple2', _0: _p17, _1: mapSize - _p18},
				_1: A2(
					_mordrax$cotwelm$Tile$setPosition,
					{ctor: '_Tuple2', _0: _p17, _1: mapSize - _p18},
					_p16._1)
			};
		};
		return _elm_lang$core$Dict$fromList(
			A2(
				_elm_lang$core$List$map,
				invertY,
				_elm_lang$core$Dict$toList(map)));
	});
var _mordrax$cotwelm$Game_Level$buildingAtPosition = F2(
	function (pos, buildings) {
		var buildingsAtTile = A2(
			_elm_lang$core$List$filter,
			_mordrax$cotwelm$Building$isBuildingAtPosition(pos),
			buildings);
		var _p19 = buildingsAtTile;
		if (_p19.ctor === '::') {
			return _elm_lang$core$Maybe$Just(_p19._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _mordrax$cotwelm$Game_Level$queryPosition = F2(
	function (position, _p20) {
		var _p21 = _p20;
		var tile = A2(_mordrax$cotwelm$Game_Level$getTile, position, _p21);
		var maybeMonster = _elm_lang$core$List$head(
			A2(
				_elm_lang$core$List$filter,
				function (_p22) {
					return A2(
						F2(
							function (x, y) {
								return _elm_lang$core$Native_Utils.eq(x, y);
							}),
						position,
						function (_) {
							return _.position;
						}(_p22));
				},
				_p21.monsters));
		var maybeBuilding = A2(_mordrax$cotwelm$Game_Level$buildingAtPosition, position, _p21.buildings);
		return {
			ctor: '_Tuple4',
			_0: tile,
			_1: A2(
				_elm_lang$core$Maybe$withDefault,
				true,
				A2(
					_elm_lang$core$Maybe$map,
					function (_) {
						return _.solid;
					},
					tile)),
			_2: maybeBuilding,
			_3: maybeMonster
		};
	});
var _mordrax$cotwelm$Game_Level$obstructed = F2(
	function (position, level) {
		var _p23 = A2(_mordrax$cotwelm$Game_Level$queryPosition, position, level);
		if ((((_p23.ctor === '_Tuple4') && (_p23._1 === false)) && (_p23._2.ctor === 'Nothing')) && (_p23._3.ctor === 'Nothing')) {
			return false;
		} else {
			return true;
		}
	});
var _mordrax$cotwelm$Game_Level$roomAtPosition = F2(
	function (position, rooms) {
		return A2(
			_elm_community$list_extra$List_Extra$find,
			_mordrax$cotwelm$Dungeon_Room$hit(position),
			rooms);
	});
var _mordrax$cotwelm$Game_Level$isDarkRoom = F2(
	function (rooms, position) {
		return A2(
			F2(
				function (x, y) {
					return _elm_lang$core$Native_Utils.eq(x, y);
				}),
			_mordrax$cotwelm$Types$Dark,
			A2(
				_elm_lang$core$Maybe$withDefault,
				_mordrax$cotwelm$Types$Dark,
				A2(
					_elm_lang$core$Maybe$map,
					function (_) {
						return _.lightSource;
					},
					A2(_mordrax$cotwelm$Game_Level$roomAtPosition, position, rooms))));
	});
var _mordrax$cotwelm$Game_Level$isSeeThrough = F2(
	function (_p24, position) {
		var _p25 = _p24;
		var notDarkRoom = function (_p26) {
			return !A2(_mordrax$cotwelm$Game_Level$isDarkRoom, _p25.rooms, _p26);
		};
		var notClosedDoor = function (_p27) {
			return A2(
				F2(
					function (x, y) {
						return !_elm_lang$core$Native_Utils.eq(x, y);
					}),
				_mordrax$cotwelm$Tile$DoorClosed,
				function (_) {
					return _.type_;
				}(_p27));
		};
		var notSolid = function (_p28) {
			return !function (_) {
				return _.solid;
			}(_p28);
		};
		return A2(
			_elm_lang$core$Maybe$withDefault,
			false,
			A2(
				_elm_lang$core$Maybe$map,
				function (tile) {
					return notSolid(tile) && (notClosedDoor(tile) && notDarkRoom(position));
				},
				A2(_mordrax$cotwelm$Game_Level$getTile, position, _p25)));
	});
var _mordrax$cotwelm$Game_Level$calculateMonsterVisibility = F3(
	function (monster, heroPosition, _p29) {
		var _p30 = _p29;
		var isInLOS = A3(
			_mordrax$cotwelm$Utils_FieldOfView$los,
			monster.position,
			heroPosition,
			_mordrax$cotwelm$Game_Level$isSeeThrough(_p30));
		return isInLOS ? _elm_lang$core$Native_Utils.update(
			monster,
			{visible: _mordrax$cotwelm$Types$LineOfSight}) : ((!_elm_lang$core$Native_Utils.eq(monster.visible, _mordrax$cotwelm$Types$Hidden)) ? _elm_lang$core$Native_Utils.update(
			monster,
			{visible: _mordrax$cotwelm$Types$Known}) : monster);
	});
var _mordrax$cotwelm$Game_Level$exploreUnlitTiles = F2(
	function (heroPosition, _p31) {
		var _p32 = _p31;
		var _p35 = _p32;
		var isTileVisible = function (position) {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				true,
				A2(
					_elm_lang$core$Maybe$map,
					function (_p33) {
						return A2(
							F2(
								function (x, y) {
									return _elm_lang$core$Native_Utils.eq(x, y);
								}),
							_mordrax$cotwelm$Types$Known,
							function (_) {
								return _.visible;
							}(_p33));
					},
					A2(_mordrax$cotwelm$Game_Level$getTile, position, _p35)));
		};
		return A3(
			_elm_lang$core$Basics$flip,
			_mordrax$cotwelm$Game_Level$markTilesVisible,
			_p35,
			_elm_lang$core$Set$toList(
				A4(
					_mordrax$cotwelm$Utils_FieldOfView$find,
					heroPosition,
					_mordrax$cotwelm$Game_Level$isSeeThrough(_p35),
					function (_p34) {
						return _elm_lang$core$Set$fromList(
							_mordrax$cotwelm$Utils_Vector$neighbours(_p34));
					},
					isTileVisible)));
	});
var _mordrax$cotwelm$Game_Level$exploreRooms = F2(
	function (position, _p36) {
		var _p37 = _p36;
		var _p40 = _p37;
		var _p38 = A2(_mordrax$cotwelm$Game_Level$roomAtPosition, position, _p37.rooms);
		if (_p38.ctor === 'Just') {
			var _p39 = _p38._0;
			return (!_elm_lang$core$Native_Utils.eq(_p39.lightSource, _mordrax$cotwelm$Types$Dark)) ? A3(
				_elm_lang$core$Basics$flip,
				_mordrax$cotwelm$Game_Level$markTilesVisible,
				_p40,
				_elm_lang$core$Dict$keys(_p39.tiles)) : _p40;
		} else {
			return _p40;
		}
	});
var _mordrax$cotwelm$Game_Level$size = function (_p41) {
	var _p42 = _p41;
	var positions = _elm_lang$core$Dict$keys(_p42.map);
	var _p43 = A3(
		_elm_lang$core$List$foldr,
		F2(
			function (_p45, _p44) {
				var _p46 = _p45;
				var _p47 = _p44;
				return {
					ctor: '_Tuple2',
					_0: A2(_elm_lang$core$Basics$max, _p46._0, _p47._0),
					_1: A2(_elm_lang$core$Basics$max, _p46._1, _p47._1)
				};
			}),
		{ctor: '_Tuple2', _0: 0, _1: 0},
		positions);
	var maxX = _p43._0;
	var maxY = _p43._1;
	return {ctor: '_Tuple2', _0: maxX + 1, _1: maxY + 1};
};
var _mordrax$cotwelm$Game_Level$downstairs = function (model) {
	return _elm_lang$core$List$head(
		A2(_mordrax$cotwelm$Building$byType, _mordrax$cotwelm$Building$StairDown, model.buildings));
};
var _mordrax$cotwelm$Game_Level$upstairs = function (model) {
	return _elm_lang$core$List$head(
		A2(_mordrax$cotwelm$Building$byType, _mordrax$cotwelm$Building$StairUp, model.buildings));
};
var _mordrax$cotwelm$Game_Level$fromTiles = function (tiles) {
	var toKVPair = function (tile) {
		return {ctor: '_Tuple2', _0: tile.position, _1: tile};
	};
	return _elm_lang$core$Dict$fromList(
		A2(_elm_lang$core$List$map, toKVPair, tiles));
};
var _mordrax$cotwelm$Game_Level$generateMonsters = F2(
	function (dungeonLevel, level) {
		return A2(
			_mgold$elm_random_pcg$Random_Pcg$map,
			function (monsters) {
				return _elm_lang$core$Native_Utils.update(
					level,
					{monsters: monsters});
			},
			A2(
				_mgold$elm_random_pcg$Random_Pcg$andThen,
				_mordrax$cotwelm$Monster$makeRandomMonsters((dungeonLevel + 1) * 5),
				A2(
					_mgold$elm_random_pcg$Random_Pcg$map,
					_elm_lang$core$List$take(15),
					_mordrax$cotwelm$Utils_Misc$shuffle(
						_mordrax$cotwelm$Game_Level$floors(level)))));
	});
var _mordrax$cotwelm$Game_Level$initNonDungeon = F3(
	function (tiles, buildings, monsters) {
		return {
			map: tiles,
			buildings: buildings,
			monsters: monsters,
			rooms: {ctor: '[]'},
			corridors: {ctor: '[]'},
			paths: _elm_lang$core$Dict$empty
		};
	});
var _mordrax$cotwelm$Game_Level$setMonsters = F2(
	function (monsters, level) {
		return _elm_lang$core$Native_Utils.update(
			level,
			{monsters: monsters});
	});
var _mordrax$cotwelm$Game_Level$tick = function (_p48) {
	var _p49 = _p48;
	return A3(
		_elm_lang$core$Basics$flip,
		_mordrax$cotwelm$Game_Level$setMonsters,
		_p49,
		A2(_elm_lang$core$List$map, _mordrax$cotwelm$Monster$tick, _p49.monsters));
};
var _mordrax$cotwelm$Game_Level$losToMonsters = F2(
	function (heroPosition, _p50) {
		var _p51 = _p50;
		var _p52 = _p51;
		return A3(
			_elm_lang$core$Basics$flip,
			_mordrax$cotwelm$Game_Level$setMonsters,
			_p52,
			A2(
				_elm_lang$core$List$map,
				function (monster) {
					return A3(_mordrax$cotwelm$Game_Level$calculateMonsterVisibility, monster, heroPosition, _p52);
				},
				_p51.monsters));
	});
var _mordrax$cotwelm$Game_Level$updateFOV = F2(
	function (heroPosition, _p53) {
		var _p54 = _p53;
		return A2(
			_mordrax$cotwelm$Game_Level$losToMonsters,
			heroPosition,
			A2(
				_mordrax$cotwelm$Game_Level$exploreUnlitTiles,
				heroPosition,
				A2(_mordrax$cotwelm$Game_Level$exploreRooms, heroPosition, _p54)));
	});
var _mordrax$cotwelm$Game_Level$setTile = F2(
	function (_p55, tile) {
		var _p56 = _p55;
		return _elm_lang$core$Native_Utils.update(
			_p56,
			{
				map: A3(_elm_lang$core$Dict$insert, tile.position, tile, _p56.map)
			});
	});
var _mordrax$cotwelm$Game_Level$pickup = F2(
	function (position, level) {
		var levelWithClearedTile = function (_p57) {
			var _p58 = _p57;
			return {
				ctor: '_Tuple2',
				_0: A2(_mordrax$cotwelm$Game_Level$setTile, level, _p58._1),
				_1: _p58._0
			};
		};
		return A2(
			_elm_lang$core$Maybe$withDefault,
			{
				ctor: '_Tuple2',
				_0: level,
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$Maybe$map,
				levelWithClearedTile,
				A2(
					_elm_lang$core$Maybe$map,
					_mordrax$cotwelm$Tile$pickup,
					A2(_mordrax$cotwelm$Game_Level$getTile, position, level))));
	});
var _mordrax$cotwelm$Game_Level$drop = F2(
	function (_p60, _p59) {
		var _p61 = _p60;
		var _p62 = _p59;
		var _p64 = _p62;
		return A2(
			_elm_lang$core$Maybe$withDefault,
			_p64,
			A2(
				_elm_lang$core$Maybe$map,
				function (_p63) {
					return A2(
						_mordrax$cotwelm$Game_Level$setTile,
						_p64,
						A2(_mordrax$cotwelm$Tile$drop, _p61._1, _p63));
				},
				A2(_mordrax$cotwelm$Game_Level$getTile, _p61._0, _p64)));
	});
var _mordrax$cotwelm$Game_Level$generateLoot = F2(
	function (dungeonLevel, level) {
		var addToLevel = F3(
			function (positions, loot, level) {
				addToLevel:
				while (true) {
					var _p65 = {ctor: '_Tuple2', _0: positions, _1: loot};
					if (((_p65.ctor === '_Tuple2') && (_p65._0.ctor === '::')) && (_p65._1.ctor === '::')) {
						var _v26 = _p65._0._1,
							_v27 = _p65._1._1,
							_v28 = A2(
							_mordrax$cotwelm$Game_Level$drop,
							{ctor: '_Tuple2', _0: _p65._0._0, _1: _p65._1._0},
							level);
						positions = _v26;
						loot = _v27;
						level = _v28;
						continue addToLevel;
					} else {
						return level;
					}
				}
			});
		var randomLootToMake = 15;
		var randomTiles = A2(
			_mgold$elm_random_pcg$Random_Pcg$map,
			_elm_lang$core$List$take(randomLootToMake),
			_mordrax$cotwelm$Utils_Misc$shuffle(
				_mordrax$cotwelm$Game_Level$floors(level)));
		var randomLoot = A2(
			_mgold$elm_random_pcg$Random_Pcg$list,
			randomLootToMake,
			_mordrax$cotwelm$Game_Loot$makeRandomLoot(dungeonLevel));
		return A3(
			_mgold$elm_random_pcg$Random_Pcg$map2,
			F2(
				function (positions, loot) {
					return A3(addToLevel, positions, loot, level);
				}),
			randomTiles,
			randomLoot);
	});
var _mordrax$cotwelm$Game_Level$drops = F2(
	function (_p66, level) {
		var _p67 = _p66;
		return A3(
			_elm_lang$core$List$foldl,
			_mordrax$cotwelm$Game_Level$drop,
			level,
			A3(
				_elm_community$list_extra$List_Extra$lift2,
				F2(
					function (v0, v1) {
						return {ctor: '_Tuple2', _0: v0, _1: v1};
					}),
				{
					ctor: '::',
					_0: _p67._0,
					_1: {ctor: '[]'}
				},
				_p67._1));
	});
var _mordrax$cotwelm$Game_Level$openDoor = F2(
	function (pos, level) {
		var ifDoorThenOpen = function (tile) {
			return _elm_lang$core$Native_Utils.eq(tile.type_, _mordrax$cotwelm$Tile$DoorClosed) ? _elm_lang$core$Native_Utils.update(
				tile,
				{type_: _mordrax$cotwelm$Tile$DoorOpen}) : tile;
		};
		return A2(
			_elm_lang$core$Maybe$withDefault,
			level,
			A2(
				_elm_lang$core$Maybe$map,
				_mordrax$cotwelm$Game_Level$setTile(level),
				A2(
					_elm_lang$core$Maybe$map,
					ifDoorThenOpen,
					A2(_elm_lang$core$Dict$get, pos, level.map))));
	});
var _mordrax$cotwelm$Game_Level$getPath = F3(
	function (from, to, _p68) {
		var _p69 = _p68;
		return A2(
			_elm_lang$core$Dict$get,
			{ctor: '_Tuple2', _0: from, _1: to},
			_p69.paths);
	});
var _mordrax$cotwelm$Game_Level$insertPath = F4(
	function (from, to, path, _p70) {
		var _p71 = _p70;
		return function (newPaths) {
			return _elm_lang$core$Native_Utils.update(
				_p71,
				{paths: newPaths});
		}(
			A3(
				_elm_lang$core$Dict$insert,
				{ctor: '_Tuple2', _0: to, _1: from},
				_elm_lang$core$List$reverse(path),
				A3(
					_elm_lang$core$Dict$insert,
					{ctor: '_Tuple2', _0: from, _1: to},
					path,
					_p71.paths)));
	});
var _mordrax$cotwelm$Game_Level$Level = F6(
	function (a, b, c, d, e, f) {
		return {map: a, buildings: b, monsters: c, rooms: d, corridors: e, paths: f};
	});
var _mordrax$cotwelm$Game_Level$NoOp = {ctor: 'NoOp'};

var _mordrax$cotwelm$Utils_AStarCustom$reconstructPath = F2(
	function (cameFrom, goal) {
		var _p0 = A2(_eeue56$elm_all_dict$AllDict$get, goal, cameFrom);
		if (_p0.ctor === 'Nothing') {
			return _elm_lang$core$Array$empty;
		} else {
			return A2(
				_elm_lang$core$Array$push,
				goal,
				A2(_mordrax$cotwelm$Utils_AStarCustom$reconstructPath, cameFrom, _p0._0));
		}
	});
var _mordrax$cotwelm$Utils_AStarCustom$updateCost = F3(
	function (current, neighbour, model) {
		var newCameFrom = A3(_eeue56$elm_all_dict$AllDict$insert, neighbour, current, model.cameFrom);
		var distanceTo = _elm_lang$core$Basics$toFloat(
			_elm_lang$core$Array$length(
				A2(_mordrax$cotwelm$Utils_AStarCustom$reconstructPath, newCameFrom, neighbour)));
		var newCosts = A3(_eeue56$elm_all_dict$AllDict$insert, neighbour, distanceTo, model.costs);
		var newModel = _elm_lang$core$Native_Utils.update(
			model,
			{costs: newCosts, cameFrom: newCameFrom});
		var _p1 = A2(_eeue56$elm_all_dict$AllDict$get, neighbour, model.costs);
		if (_p1.ctor === 'Nothing') {
			return newModel;
		} else {
			return (_elm_lang$core$Native_Utils.cmp(distanceTo, _p1._0) < 0) ? newModel : model;
		}
	});
var _mordrax$cotwelm$Utils_AStarCustom$cheapestOpen = F2(
	function (costFn, model) {
		return A2(
			_elm_lang$core$Maybe$map,
			_elm_lang$core$Tuple$first,
			_elm_lang$core$List$head(
				A2(
					_elm_lang$core$List$sortBy,
					_elm_lang$core$Tuple$second,
					A2(
						_elm_lang$core$List$filterMap,
						function (position) {
							var _p2 = A2(_eeue56$elm_all_dict$AllDict$get, position, model.costs);
							if (_p2.ctor === 'Nothing') {
								return _elm_lang$core$Maybe$Nothing;
							} else {
								return _elm_lang$core$Maybe$Just(
									{
										ctor: '_Tuple2',
										_0: position,
										_1: _p2._0 + costFn(position)
									});
							}
						},
						_Gizra$elm_all_set$EverySet$toList(model.openSet)))));
	});
var _mordrax$cotwelm$Utils_AStarCustom$astar = F5(
	function (costFn, moveFn, hashFn, goal, model) {
		astar:
		while (true) {
			var _p3 = A2(
				_mordrax$cotwelm$Utils_AStarCustom$cheapestOpen,
				costFn(goal),
				model);
			if (_p3.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p4 = _p3._0;
				if (_elm_lang$core$Native_Utils.eq(
					hashFn(_p4),
					hashFn(goal))) {
					return _elm_lang$core$Maybe$Just(
						A2(_mordrax$cotwelm$Utils_AStarCustom$reconstructPath, model.cameFrom, goal));
				} else {
					var neighbours = moveFn(_p4);
					var modelPopped = _elm_lang$core$Native_Utils.update(
						model,
						{
							openSet: A2(_Gizra$elm_all_set$EverySet$remove, _p4, model.openSet),
							evaluated: A2(_Gizra$elm_all_set$EverySet$insert, _p4, model.evaluated)
						});
					var newNeighbours = A2(_Gizra$elm_all_set$EverySet$diff, neighbours, modelPopped.evaluated);
					var modelWithNeighbours = _elm_lang$core$Native_Utils.update(
						modelPopped,
						{
							openSet: A2(_Gizra$elm_all_set$EverySet$union, modelPopped.openSet, newNeighbours)
						});
					var modelWithCosts = A3(
						_Gizra$elm_all_set$EverySet$foldl,
						_mordrax$cotwelm$Utils_AStarCustom$updateCost(_p4),
						modelWithNeighbours,
						newNeighbours);
					var _v4 = costFn,
						_v5 = moveFn,
						_v6 = hashFn,
						_v7 = goal,
						_v8 = modelWithCosts;
					costFn = _v4;
					moveFn = _v5;
					hashFn = _v6;
					goal = _v7;
					model = _v8;
					continue astar;
				}
			}
		}
	});
var _mordrax$cotwelm$Utils_AStarCustom$initialModel = F2(
	function (hashFn, start) {
		return {
			evaluated: _Gizra$elm_all_set$EverySet$empty,
			openSet: _Gizra$elm_all_set$EverySet$singleton(start),
			costs: A3(_eeue56$elm_all_dict$AllDict$singleton, hashFn, start, 0),
			cameFrom: _eeue56$elm_all_dict$AllDict$empty(hashFn)
		};
	});
var _mordrax$cotwelm$Utils_AStarCustom$findPath = F5(
	function (costFn, moveFn, hashFn, start, end) {
		return A2(
			_elm_lang$core$Maybe$map,
			_elm_lang$core$Array$toList,
			A5(
				_mordrax$cotwelm$Utils_AStarCustom$astar,
				costFn,
				moveFn,
				hashFn,
				end,
				A2(_mordrax$cotwelm$Utils_AStarCustom$initialModel, hashFn, start)));
	});
var _mordrax$cotwelm$Utils_AStarCustom$Model = F4(
	function (a, b, c, d) {
		return {evaluated: a, openSet: b, costs: c, cameFrom: d};
	});

var _mordrax$cotwelm$Dungeon_DungeonGenerator$neighbours = F2(
	function (position, map) {
		var getTile = function (direction) {
			return A3(
				_elm_lang$core$Basics$flip,
				_elm_lang$core$Dict$get,
				map,
				A2(
					_mordrax$cotwelm$Utils_Vector$add,
					position,
					_mordrax$cotwelm$Utils_Vector$fromDirection(direction)));
		};
		return {
			ctor: '_Tuple4',
			_0: getTile(_mordrax$cotwelm$Utils_Direction$N),
			_1: getTile(_mordrax$cotwelm$Utils_Direction$E),
			_2: getTile(_mordrax$cotwelm$Utils_Direction$S),
			_3: getTile(_mordrax$cotwelm$Utils_Direction$W)
		};
	});
var _mordrax$cotwelm$Dungeon_DungeonGenerator$allDirectionsAreFloors = F3(
	function (neighbourDirections, position, map) {
		var isFloorTiles = function (maybeTiles) {
			return A2(
				_elm_lang$core$List$all,
				F2(
					function (x, y) {
						return !_elm_lang$core$Native_Utils.eq(x, y);
					})(_elm_lang$core$Maybe$Nothing),
				A2(
					_elm_lang$core$List$map,
					_elm_community$maybe_extra$Maybe_Extra$filter(
						function (x) {
							return _elm_lang$core$Native_Utils.eq(x.type_, _mordrax$cotwelm$Tile$DarkDgn);
						}),
					maybeTiles));
		};
		var toNeighbours = function (directions) {
			return A2(
				_elm_lang$core$List$map,
				A2(_elm_lang$core$Basics$flip, _elm_lang$core$Dict$get, map),
				A2(
					_elm_lang$core$List$map,
					_mordrax$cotwelm$Utils_Vector$add(position),
					A2(_elm_lang$core$List$map, _mordrax$cotwelm$Utils_Vector$fromDirection, directions)));
		};
		return A2(
			_elm_lang$core$List$any,
			isFloorTiles,
			A2(_elm_lang$core$List$map, toNeighbours, neighbourDirections));
	});
var _mordrax$cotwelm$Dungeon_DungeonGenerator$adjacentNeighbourTriplets = {
	ctor: '::',
	_0: {
		ctor: '::',
		_0: _mordrax$cotwelm$Utils_Direction$N,
		_1: {
			ctor: '::',
			_0: _mordrax$cotwelm$Utils_Direction$E,
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$Utils_Direction$S,
				_1: {ctor: '[]'}
			}
		}
	},
	_1: {
		ctor: '::',
		_0: {
			ctor: '::',
			_0: _mordrax$cotwelm$Utils_Direction$E,
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$Utils_Direction$S,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Utils_Direction$W,
					_1: {ctor: '[]'}
				}
			}
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '::',
				_0: _mordrax$cotwelm$Utils_Direction$S,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Utils_Direction$W,
					_1: {
						ctor: '::',
						_0: _mordrax$cotwelm$Utils_Direction$N,
						_1: {ctor: '[]'}
					}
				}
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '::',
					_0: _mordrax$cotwelm$Utils_Direction$W,
					_1: {
						ctor: '::',
						_0: _mordrax$cotwelm$Utils_Direction$N,
						_1: {
							ctor: '::',
							_0: _mordrax$cotwelm$Utils_Direction$E,
							_1: {ctor: '[]'}
						}
					}
				},
				_1: {ctor: '[]'}
			}
		}
	}
};
var _mordrax$cotwelm$Dungeon_DungeonGenerator$hasThreeOrMoreNeighbourFloors = F2(
	function (position, map) {
		return A3(_mordrax$cotwelm$Dungeon_DungeonGenerator$allDirectionsAreFloors, _mordrax$cotwelm$Dungeon_DungeonGenerator$adjacentNeighbourTriplets, position, map);
	});
var _mordrax$cotwelm$Dungeon_DungeonGenerator$adjacentNeighbourPairs = {
	ctor: '::',
	_0: {
		ctor: '::',
		_0: _mordrax$cotwelm$Utils_Direction$N,
		_1: {
			ctor: '::',
			_0: _mordrax$cotwelm$Utils_Direction$E,
			_1: {ctor: '[]'}
		}
	},
	_1: {
		ctor: '::',
		_0: {
			ctor: '::',
			_0: _mordrax$cotwelm$Utils_Direction$E,
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$Utils_Direction$S,
				_1: {ctor: '[]'}
			}
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '::',
				_0: _mordrax$cotwelm$Utils_Direction$S,
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$Utils_Direction$W,
					_1: {ctor: '[]'}
				}
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '::',
					_0: _mordrax$cotwelm$Utils_Direction$W,
					_1: {
						ctor: '::',
						_0: _mordrax$cotwelm$Utils_Direction$N,
						_1: {ctor: '[]'}
					}
				},
				_1: {ctor: '[]'}
			}
		}
	}
};
var _mordrax$cotwelm$Dungeon_DungeonGenerator$hasAdjacentFloors = F2(
	function (position, map) {
		return A3(_mordrax$cotwelm$Dungeon_DungeonGenerator$allDirectionsAreFloors, _mordrax$cotwelm$Dungeon_DungeonGenerator$adjacentNeighbourPairs, position, map);
	});
var _mordrax$cotwelm$Dungeon_DungeonGenerator$calculateTypeOfWall = F2(
	function (map, position) {
		var _p0 = {
			ctor: '_Tuple2',
			_0: A2(_mordrax$cotwelm$Dungeon_DungeonGenerator$hasAdjacentFloors, position, map),
			_1: A2(_mordrax$cotwelm$Dungeon_DungeonGenerator$hasThreeOrMoreNeighbourFloors, position, map)
		};
		if ((_p0.ctor === '_Tuple2') && (_p0._0 === true)) {
			if (_p0._1 === true) {
				return A2(_mordrax$cotwelm$Tile$toTile, position, _mordrax$cotwelm$Tile$DarkDgn);
			} else {
				return A2(_mordrax$cotwelm$Tile$toTile, position, _mordrax$cotwelm$Tile$WallDarkDgn);
			}
		} else {
			return A2(_mordrax$cotwelm$Tile$toTile, position, _mordrax$cotwelm$Tile$Rock);
		}
	});
var _mordrax$cotwelm$Dungeon_DungeonGenerator$clean = function (dungeon) {
	var replaceTile = F2(
		function (tile, dict) {
			return function (newTile) {
				return A3(_elm_lang$core$Dict$insert, newTile.position, newTile, dict);
			}(
				A2(_mordrax$cotwelm$Dungeon_DungeonGenerator$calculateTypeOfWall, dungeon.map, tile.position));
		});
	return function (newMap) {
		return _elm_lang$core$Native_Utils.update(
			dungeon,
			{map: newMap});
	}(
		A3(
			_elm_lang$core$List$foldl,
			replaceTile,
			dungeon.map,
			A2(
				_elm_lang$core$List$filter,
				function (_p1) {
					return A2(
						F2(
							function (x, y) {
								return _elm_lang$core$Native_Utils.eq(x, y);
							}),
						_mordrax$cotwelm$Tile$Rock,
						function (_) {
							return _.type_;
						}(_p1));
				},
				_elm_lang$core$Dict$values(dungeon.map))));
};
var _mordrax$cotwelm$Dungeon_DungeonGenerator$possiblePaths = F3(
	function (validDirections, _p3, _p2) {
		var _p4 = _p3;
		var _p7 = _p4;
		var _p5 = _p2;
		var _p6 = {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Basics$abs(_p5._0 - _p4._0),
			_1: _elm_lang$core$Basics$abs(_p5._1 - _p4._1)
		};
		var d_vector = _p6;
		var d_x = _p6._0;
		var d_y = _p6._1;
		var pathInDirection = function (direction) {
			var diagonal = A2(
				_mordrax$cotwelm$Utils_Vector$add,
				_p7,
				A2(
					_mordrax$cotwelm$Utils_Vector$scaleInt,
					A2(_elm_lang$core$Basics$min, d_x, d_y),
					_mordrax$cotwelm$Utils_Vector$fromDirection(direction)));
			var diagonalToB = A2(
				_mordrax$cotwelm$Utils_Vector$add,
				_p7,
				A2(_mordrax$cotwelm$Utils_Vector$sub, _p5, diagonal));
			var alongAxis = A2(
				_mordrax$cotwelm$Utils_Vector$add,
				_p7,
				A2(
					_mordrax$cotwelm$Utils_Vector$mul,
					_mordrax$cotwelm$Utils_Vector$fromDirection(direction),
					d_vector));
			return _mordrax$cotwelm$Utils_Direction$isCardinal(direction) ? {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: alongAxis, _1: direction},
				_1: {ctor: '[]'}
			} : {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: diagonal, _1: direction},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: diagonalToB, _1: direction},
					_1: {ctor: '[]'}
				}
			};
		};
		return A2(_elm_lang$core$List$concatMap, pathInDirection, validDirections);
	});
var _mordrax$cotwelm$Dungeon_DungeonGenerator$addCorridor = F2(
	function (corridor, dungeon) {
		return _elm_lang$core$Native_Utils.update(
			dungeon,
			{
				corridors: {ctor: '::', _0: corridor, _1: dungeon.corridors},
				map: A2(_elm_lang$core$Dict$union, dungeon.map, corridor.tiles)
			});
	});
var _mordrax$cotwelm$Dungeon_DungeonGenerator$addRoom = F2(
	function (room, dungeon) {
		var overlapping = A2(
			_elm_lang$core$List$any,
			_mordrax$cotwelm$Dungeon_Room$overlap(room),
			_elm_lang$core$Dict$values(dungeon.rooms));
		var withinDungeonBounds = A2(
			_elm_lang$core$List$all,
			function (x) {
				return A2(_mordrax$cotwelm$Dungeon_Rooms_Config$withinDungeonBounds, x, dungeon.config);
			},
			room.corners);
		return (withinDungeonBounds && (!overlapping)) ? _elm_lang$core$Native_Utils.update(
			dungeon,
			{
				rooms: A3(
					_elm_lang$core$Dict$insert,
					A2(
						_elm_lang$core$Debug$log,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'adding room of size ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(room.dimension),
								' at ')),
						room.worldPos),
					room,
					dungeon.rooms),
				map: A2(_elm_lang$core$Dict$union, room.tiles, dungeon.map)
			}) : dungeon;
	});
var _mordrax$cotwelm$Dungeon_DungeonGenerator$obstructed = F2(
	function (dungeon, position) {
		return A2(_elm_lang$core$Dict$member, position, dungeon.map);
	});
var _mordrax$cotwelm$Dungeon_DungeonGenerator$toLastUnobstructedTile = F2(
	function (dungeon, path) {
		toLastUnobstructedTile:
		while (true) {
			var _p8 = path;
			if (_p8.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				if (_p8._1.ctor === '[]') {
					var _p9 = _p8._0;
					return A2(_mordrax$cotwelm$Dungeon_DungeonGenerator$obstructed, dungeon, _p9) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(_p9);
				} else {
					var _p10 = _p8._1._0;
					if (A2(_mordrax$cotwelm$Dungeon_DungeonGenerator$obstructed, dungeon, _p10)) {
						return _elm_lang$core$Maybe$Just(_p8._0);
					} else {
						var _v4 = dungeon,
							_v5 = {ctor: '::', _0: _p10, _1: _p8._1._1};
						dungeon = _v4;
						path = _v5;
						continue toLastUnobstructedTile;
					}
				}
			}
		}
	});
var _mordrax$cotwelm$Dungeon_DungeonGenerator$moveFn = F2(
	function (dungeon, _p11) {
		var _p12 = _p11;
		var _p19 = _p12.currentPosition;
		var toPathData = function (_p13) {
			var _p14 = _p13;
			return _elm_lang$core$Native_Utils.update(
				_p12,
				{currentPosition: _p14._0});
		};
		var nextPositions = A2(
			_elm_lang$core$List$filterMap,
			function (_p15) {
				var _p16 = _p15;
				return A2(
					_elm_lang$core$Maybe$map,
					function (p) {
						return {ctor: '_Tuple2', _0: p, _1: _p16._1};
					},
					A2(
						_mordrax$cotwelm$Dungeon_DungeonGenerator$toLastUnobstructedTile,
						dungeon,
						A2(_mordrax$cotwelm$Utils_Vector$path, _p19, _p16._0)));
			},
			A2(
				_elm_lang$core$List$filter,
				function (_p17) {
					var _p18 = _p17;
					return A2(_mordrax$cotwelm$Dungeon_Rooms_Config$withinDungeonBounds, _p18._0, dungeon.config);
				},
				A3(_mordrax$cotwelm$Dungeon_DungeonGenerator$possiblePaths, _p12.validDirections, _p19, _p12.goal)));
		return _Gizra$elm_all_set$EverySet$fromList(
			A2(_elm_lang$core$List$map, toPathData, nextPositions));
	});
var _mordrax$cotwelm$Dungeon_DungeonGenerator$costFn = F2(
	function (a, b) {
		return 1 / A2(_mordrax$cotwelm$Utils_Vector$distance, a.currentPosition, b.currentPosition);
	});
var _mordrax$cotwelm$Dungeon_DungeonGenerator$addConnectedRoom = F2(
	function (room, dungeon) {
		return _elm_lang$core$Native_Utils.update(
			dungeon,
			{
				map: A2(_elm_lang$core$Dict$union, room.tiles, dungeon.map),
				rooms: A2(_elm_lang$core$Dict$remove, room.worldPos, dungeon.rooms),
				connectedRooms: A3(_elm_lang$core$Dict$insert, room.worldPos, room, dungeon.connectedRooms)
			});
	});
var _mordrax$cotwelm$Dungeon_DungeonGenerator$connectPoints = F5(
	function (dungeon, faces, _p20, start, end) {
		var _p21 = _p20;
		var addRooms = F3(
			function (r1, r2, dungeon) {
				return A2(
					_mordrax$cotwelm$Dungeon_DungeonGenerator$addConnectedRoom,
					r2,
					A2(_mordrax$cotwelm$Dungeon_DungeonGenerator$addConnectedRoom, r1, dungeon));
			});
		var hashFn = function (_p22) {
			var _p23 = _p22;
			return _p23.currentPosition;
		};
		var endVector = _mordrax$cotwelm$Utils_Vector$advance(end);
		var goalData = {
			currentPosition: endVector,
			goal: endVector,
			validDirections: {ctor: '[]'},
			directionChanges: 0
		};
		var startVector = _mordrax$cotwelm$Utils_Vector$advance(start);
		var pathData = {currentPosition: startVector, goal: endVector, validDirections: faces, directionChanges: 0};
		var room2WithDoor = A2(
			_mordrax$cotwelm$Dungeon_Room$makeDoor,
			_p21._1,
			_elm_lang$core$Tuple$first(end));
		var room1WithDoor = A2(
			_mordrax$cotwelm$Dungeon_Room$makeDoor,
			_p21._0,
			_elm_lang$core$Tuple$first(start));
		var generateAndAddRooms = function (dungeon) {
			return A2(
				_mgold$elm_random_pcg$Random_Pcg$map,
				function (_p24) {
					var _p25 = _p24;
					return A3(addRooms, _p25._0, _p25._1, dungeon);
				},
				A3(
					_mgold$elm_random_pcg$Random_Pcg$map2,
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						}),
					room1WithDoor,
					room2WithDoor));
		};
		return A2(
			_elm_lang$core$Maybe$withDefault,
			_mgold$elm_random_pcg$Random_Pcg$constant(dungeon),
			A2(
				_elm_lang$core$Maybe$map,
				function (_p26) {
					return generateAndAddRooms(
						A3(
							_elm_lang$core$Basics$flip,
							_mordrax$cotwelm$Dungeon_DungeonGenerator$addCorridor,
							dungeon,
							_mordrax$cotwelm$Dungeon_Corridor$init(
								A2(
									F2(
										function (x, y) {
											return {ctor: '::', _0: x, _1: y};
										}),
									startVector,
									A2(_elm_lang$core$List$map, hashFn, _p26)))));
				},
				A5(
					_mordrax$cotwelm$Utils_AStarCustom$findPath,
					_mordrax$cotwelm$Dungeon_DungeonGenerator$costFn,
					_mordrax$cotwelm$Dungeon_DungeonGenerator$moveFn(dungeon),
					hashFn,
					pathData,
					goalData)));
	});
var _mordrax$cotwelm$Dungeon_DungeonGenerator$possibleMoves = function (faces) {
	var _p27 = faces;
	if (_p27.ctor === '[]') {
		return A2(
			_elm_lang$core$Debug$log,
			'No faces',
			{ctor: '[]'});
	} else {
		if (_p27._1.ctor === '[]') {
			var _p28 = _p27._0;
			return A2(
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					}),
				_mordrax$cotwelm$Utils_Vector$fromDirection(_p28),
				A2(
					_elm_lang$core$List$map,
					_mordrax$cotwelm$Utils_Vector$fromDirection,
					_mordrax$cotwelm$Utils_Direction$adjacent(_p28)));
		} else {
			if (_p27._1._1.ctor === '[]') {
				var _p30 = _p27._1._0;
				var _p29 = _p27._0;
				return {
					ctor: '::',
					_0: _mordrax$cotwelm$Utils_Vector$fromDirection(_p29),
					_1: {
						ctor: '::',
						_0: _mordrax$cotwelm$Utils_Vector$fromDirection(_p30),
						_1: {
							ctor: '::',
							_0: A2(
								_mordrax$cotwelm$Utils_Vector$add,
								_mordrax$cotwelm$Utils_Vector$fromDirection(_p29),
								_mordrax$cotwelm$Utils_Vector$fromDirection(_p30)),
							_1: {ctor: '[]'}
						}
					}
				};
			} else {
				return A2(
					_elm_lang$core$List$map,
					_mordrax$cotwelm$Utils_Vector$fromDirection,
					A2(_elm_lang$core$Debug$log, 'Too many faces!!!', _p27));
			}
		}
	}
};
var _mordrax$cotwelm$Dungeon_DungeonGenerator$samplerWithDefault = F2(
	function ($default, list) {
		return A2(
			_mgold$elm_random_pcg$Random_Pcg$map,
			_elm_lang$core$Maybe$withDefault($default),
			_mgold$elm_random_pcg$Random_Pcg$sample(
				{ctor: '::', _0: $default, _1: list}));
	});
var _mordrax$cotwelm$Dungeon_DungeonGenerator$connectTwoRooms = F2(
	function (dungeon, _p31) {
		var _p32 = _p31;
		var _p36 = _p32._1;
		var _p35 = _p32._0;
		var entrancesFacingPoint = F2(
			function (room, point) {
				return A2(
					_mordrax$cotwelm$Dungeon_Room$entrancesFromFaces,
					room,
					A2(_mordrax$cotwelm$Dungeon_Room$facesPoint, point, room));
			});
		var sampleRoomB = function (roomPoints) {
			return A2(
				_mgold$elm_random_pcg$Random_Pcg$map,
				function (maybeEntrance) {
					return _elm_lang$core$Native_Utils.update(
						roomPoints,
						{b: maybeEntrance});
				},
				_mgold$elm_random_pcg$Random_Pcg$sample(
					A2(
						_elm_lang$core$Maybe$withDefault,
						{ctor: '[]'},
						A2(
							_elm_lang$core$Maybe$map,
							function (_p33) {
								return A2(
									entrancesFacingPoint,
									_p36,
									_elm_lang$core$Tuple$first(_p33));
							},
							roomPoints.a))));
		};
		var sampleRoomA = F2(
			function (faces, roomPoints) {
				return A2(
					_mgold$elm_random_pcg$Random_Pcg$map,
					function (maybeEntrance) {
						return _elm_lang$core$Native_Utils.update(
							roomPoints,
							{a: maybeEntrance});
					},
					_mgold$elm_random_pcg$Random_Pcg$sample(
						A2(_mordrax$cotwelm$Dungeon_Room$entrancesFromFaces, _p35, faces)));
			});
		var roomPoints = {a: _elm_lang$core$Maybe$Nothing, b: _elm_lang$core$Maybe$Nothing};
		var _p34 = A2(_mordrax$cotwelm$Dungeon_Room$faceOff, _p35, _p36);
		var aFaces = _p34._0;
		var bFaces = _p34._1;
		var connectIfValid = function (roomPoints) {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				_mgold$elm_random_pcg$Random_Pcg$constant(dungeon),
				A3(
					_elm_lang$core$Maybe$map2,
					A3(
						_mordrax$cotwelm$Dungeon_DungeonGenerator$connectPoints,
						dungeon,
						aFaces,
						{ctor: '_Tuple2', _0: _p35, _1: _p36}),
					roomPoints.a,
					roomPoints.b));
		};
		return A2(
			_mgold$elm_random_pcg$Random_Pcg$andThen,
			connectIfValid,
			A2(
				_mgold$elm_random_pcg$Random_Pcg$andThen,
				sampleRoomB,
				A2(sampleRoomA, aFaces, roomPoints)));
	});
var _mordrax$cotwelm$Dungeon_DungeonGenerator$selectTwoRooms = function (dungeon) {
	var _p37 = {
		ctor: '_Tuple2',
		_0: _elm_lang$core$Dict$values(dungeon.rooms),
		_1: _elm_lang$core$Dict$values(dungeon.connectedRooms)
	};
	_v15_3:
	do {
		if (_p37.ctor === '_Tuple2') {
			if (_p37._0.ctor === '::') {
				if (_p37._1.ctor === '::') {
					return _elm_lang$core$Maybe$Just(
						A3(
							_mgold$elm_random_pcg$Random_Pcg$map2,
							F2(
								function (v0, v1) {
									return {ctor: '_Tuple2', _0: v0, _1: v1};
								}),
							A2(_mordrax$cotwelm$Dungeon_DungeonGenerator$samplerWithDefault, _p37._0._0, _p37._0._1),
							A2(_mordrax$cotwelm$Dungeon_DungeonGenerator$samplerWithDefault, _p37._1._0, _p37._1._1)));
				} else {
					if (_p37._0._1.ctor === '::') {
						return _elm_lang$core$Maybe$Just(
							_mgold$elm_random_pcg$Random_Pcg$constant(
								{ctor: '_Tuple2', _0: _p37._0._0, _1: _p37._0._1._0}));
					} else {
						break _v15_3;
					}
				}
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		} else {
			break _v15_3;
		}
	} while(false);
	return _elm_lang$core$Maybe$Nothing;
};
var _mordrax$cotwelm$Dungeon_DungeonGenerator$connectRooms = F2(
	function (nTries, dungeon) {
		var _p38 = nTries;
		if (_p38 === 0) {
			return _mgold$elm_random_pcg$Random_Pcg$constant(dungeon);
		} else {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				_mgold$elm_random_pcg$Random_Pcg$constant(dungeon),
				A2(
					_elm_lang$core$Maybe$map,
					_mgold$elm_random_pcg$Random_Pcg$andThen(
						function (_p39) {
							return A2(
								_mgold$elm_random_pcg$Random_Pcg$andThen,
								_mordrax$cotwelm$Dungeon_DungeonGenerator$connectRooms(_p38 - 1),
								A2(_mordrax$cotwelm$Dungeon_DungeonGenerator$connectTwoRooms, dungeon, _p39));
						}),
					_mordrax$cotwelm$Dungeon_DungeonGenerator$selectTwoRooms(dungeon)));
		}
	});
var _mordrax$cotwelm$Dungeon_DungeonGenerator$toTiles = function (dungeon) {
	return _elm_lang$core$Dict$values(dungeon.map);
};
var _mordrax$cotwelm$Dungeon_DungeonGenerator$addBuilding = F2(
	function (building, dungeon) {
		var tileType = _elm_lang$core$Native_Utils.eq(building.buildingType, _mordrax$cotwelm$Building$StairUp) ? _mordrax$cotwelm$Tile$StairsUp : _mordrax$cotwelm$Tile$StairsDown;
		return _elm_lang$core$Native_Utils.update(
			dungeon,
			{
				buildings: {ctor: '::', _0: building, _1: dungeon.buildings},
				map: A3(
					_elm_lang$core$Dict$insert,
					building.position,
					A2(_mordrax$cotwelm$Tile$toTile, building.position, tileType),
					dungeon.map)
			});
	});
var _mordrax$cotwelm$Dungeon_DungeonGenerator$addStair = F2(
	function (stairsAt, dungeon) {
		var addStairAt = function (pos) {
			return A2(
				_mordrax$cotwelm$Dungeon_DungeonGenerator$addBuilding,
				stairsAt(pos),
				dungeon);
		};
		var addStairToRoom = function (room) {
			return A2(
				_mgold$elm_random_pcg$Random_Pcg$map,
				_elm_lang$core$Maybe$withDefault(dungeon),
				A2(
					_mgold$elm_random_pcg$Random_Pcg$map,
					_elm_lang$core$Maybe$map(addStairAt),
					_mgold$elm_random_pcg$Random_Pcg$sample(room.floors)));
		};
		return A2(
			_mgold$elm_random_pcg$Random_Pcg$andThen,
			function (_p40) {
				return A2(
					_elm_lang$core$Maybe$withDefault,
					_mgold$elm_random_pcg$Random_Pcg$constant(dungeon),
					A2(_elm_lang$core$Maybe$map, addStairToRoom, _p40));
			},
			_mgold$elm_random_pcg$Random_Pcg$sample(
				_elm_lang$core$Dict$values(dungeon.connectedRooms)));
	});
var _mordrax$cotwelm$Dungeon_DungeonGenerator$generateRooms = F3(
	function (tries, config, dungeonGen) {
		generateRooms:
		while (true) {
			var _p41 = tries;
			if (_p41 === 0) {
				return dungeonGen;
			} else {
				var _v18 = _p41 - 1,
					_v19 = config,
					_v20 = A3(
					_mgold$elm_random_pcg$Random_Pcg$map2,
					F2(
						function (dungeon, room) {
							return A2(_mordrax$cotwelm$Dungeon_DungeonGenerator$addRoom, room, dungeon);
						}),
					dungeonGen,
					_mordrax$cotwelm$Dungeon_Room$generate(config));
				tries = _v18;
				config = _v19;
				dungeonGen = _v20;
				continue generateRooms;
			}
		}
	});
var _mordrax$cotwelm$Dungeon_DungeonGenerator$steps = F3(
	function (n, config, dungeon) {
		return _elm_lang$core$Native_Utils.eq(
			A2(_elm_lang$core$Debug$log, 'last step', n),
			0) ? _mgold$elm_random_pcg$Random_Pcg$constant(dungeon) : ((_elm_lang$core$Dict$isEmpty(dungeon.rooms) && _elm_lang$core$Dict$isEmpty(dungeon.connectedRooms)) ? A2(
			_mgold$elm_random_pcg$Random_Pcg$andThen,
			A2(_mordrax$cotwelm$Dungeon_DungeonGenerator$steps, n - 1, config),
			A3(
				_mordrax$cotwelm$Dungeon_DungeonGenerator$generateRooms,
				config.nAttemptsAtRoomGen,
				config,
				_mgold$elm_random_pcg$Random_Pcg$constant(dungeon))) : A2(
			_mgold$elm_random_pcg$Random_Pcg$andThen,
			A2(_mordrax$cotwelm$Dungeon_DungeonGenerator$steps, n - 1, config),
			A2(_mordrax$cotwelm$Dungeon_DungeonGenerator$connectRooms, config.nAttemptsAtRoomConnection, dungeon)));
	});
var _mordrax$cotwelm$Dungeon_DungeonGenerator$toLevel = function (dungeon) {
	return A6(
		_mordrax$cotwelm$Game_Level$Level,
		dungeon.map,
		dungeon.buildings,
		{ctor: '[]'},
		_elm_lang$core$Dict$values(dungeon.connectedRooms),
		dungeon.corridors,
		_elm_lang$core$Dict$empty);
};
var _mordrax$cotwelm$Dungeon_DungeonGenerator$init = function (_p42) {
	return {
		rooms: _elm_lang$core$Dict$empty,
		connectedRooms: _elm_lang$core$Dict$empty,
		config: _mordrax$cotwelm$Dungeon_Rooms_Config$init,
		corridors: {ctor: '[]'},
		map: _elm_lang$core$Dict$empty,
		buildings: {ctor: '[]'}
	};
};
var _mordrax$cotwelm$Dungeon_DungeonGenerator$candidate = F2(
	function (config, dungeon) {
		var connections = function (_p43) {
			return A3(
				_elm_lang$core$Basics$flip,
				F2(
					function (x, y) {
						return _elm_lang$core$Native_Utils.cmp(x, y) < 0;
					}),
				6,
				_elm_lang$core$List$length(
					_elm_lang$core$Dict$keys(
						function (_) {
							return _.connectedRooms;
						}(_p43))));
		};
		var stairs = function (_p44) {
			return A3(
				_elm_lang$core$Basics$flip,
				F2(
					function (x, y) {
						return _elm_lang$core$Native_Utils.cmp(x, y) < 0;
					}),
				2,
				_elm_lang$core$List$length(
					function (_) {
						return _.buildings;
					}(_p44)));
		};
		var regenOnAnyCheckFail = function (dungeon) {
			return A2(
				_elm_lang$core$List$any,
				function (checkFn) {
					return checkFn(dungeon);
				},
				{
					ctor: '::',
					_0: connections,
					_1: {
						ctor: '::',
						_0: stairs,
						_1: {ctor: '[]'}
					}
				}) ? A2(
				_mordrax$cotwelm$Dungeon_DungeonGenerator$candidate,
				config,
				_mordrax$cotwelm$Dungeon_DungeonGenerator$init(config)) : _mgold$elm_random_pcg$Random_Pcg$constant(dungeon);
		};
		return A2(
			_mgold$elm_random_pcg$Random_Pcg$map,
			_mordrax$cotwelm$Dungeon_DungeonGenerator$clean,
			A2(
				_mgold$elm_random_pcg$Random_Pcg$andThen,
				regenOnAnyCheckFail,
				A2(
					_mgold$elm_random_pcg$Random_Pcg$andThen,
					_mordrax$cotwelm$Dungeon_DungeonGenerator$addStair(
						function (pos) {
							return A4(
								_mordrax$cotwelm$Building$new,
								_mordrax$cotwelm$Building$StairsDown,
								A2(_elm_lang$core$Debug$log, 'downstairs at: ', pos),
								'DownStairs',
								_mordrax$cotwelm$Building$StairDown);
						}),
					A2(
						_mgold$elm_random_pcg$Random_Pcg$andThen,
						_mordrax$cotwelm$Dungeon_DungeonGenerator$addStair(
							function (pos) {
								return A4(
									_mordrax$cotwelm$Building$new,
									_mordrax$cotwelm$Building$StairsUp,
									A2(_elm_lang$core$Debug$log, 'upstairs at: ', pos),
									'UpStairs',
									_mordrax$cotwelm$Building$StairUp);
							}),
						A2(
							_mgold$elm_random_pcg$Random_Pcg$andThen,
							_mordrax$cotwelm$Dungeon_DungeonGenerator$connectRooms(config.nAttemptsAtRoomConnection),
							A3(
								_mordrax$cotwelm$Dungeon_DungeonGenerator$generateRooms,
								config.nAttemptsAtRoomGen,
								config,
								_mgold$elm_random_pcg$Random_Pcg$constant(dungeon)))))));
	});
var _mordrax$cotwelm$Dungeon_DungeonGenerator$generate = function (config) {
	return A2(
		_mgold$elm_random_pcg$Random_Pcg$map,
		_mordrax$cotwelm$Dungeon_DungeonGenerator$toLevel,
		A2(
			_mordrax$cotwelm$Dungeon_DungeonGenerator$candidate,
			config,
			_mordrax$cotwelm$Dungeon_DungeonGenerator$init(config)));
};
var _mordrax$cotwelm$Dungeon_DungeonGenerator$Dungeon = F6(
	function (a, b, c, d, e, f) {
		return {rooms: a, connectedRooms: b, config: c, corridors: d, map: e, buildings: f};
	});
var _mordrax$cotwelm$Dungeon_DungeonGenerator$PathData = F4(
	function (a, b, c, d) {
		return {currentPosition: a, goal: b, validDirections: c, directionChanges: d};
	});

var _mordrax$cotwelm$Dungeon_Editor$updateMap = function (dungeon) {
	return _mordrax$cotwelm$Game_Level$fromTiles(
		_mordrax$cotwelm$Dungeon_DungeonGenerator$toTiles(dungeon));
};
var _mordrax$cotwelm$Dungeon_Editor$generateCandidate = function (model) {
	return A2(
		_mgold$elm_random_pcg$Random_Pcg$andThen,
		function (dungeonModel) {
			return _mgold$elm_random_pcg$Random_Pcg$constant(dungeonModel);
		},
		A2(
			_mgold$elm_random_pcg$Random_Pcg$map,
			_mordrax$cotwelm$Dungeon_DungeonGenerator$clean,
			A2(
				_mordrax$cotwelm$Dungeon_DungeonGenerator$candidate,
				model.config,
				_mordrax$cotwelm$Dungeon_DungeonGenerator$init(model.config))));
};
var _mordrax$cotwelm$Dungeon_Editor$init = {
	map: _elm_lang$core$Dict$empty,
	config: _mordrax$cotwelm$Dungeon_Rooms_Config$init,
	dungeonSteps: {ctor: '[]'}
};
var _mordrax$cotwelm$Dungeon_Editor$Model = F3(
	function (a, b, c) {
		return {map: a, config: b, dungeonSteps: c};
	});
var _mordrax$cotwelm$Dungeon_Editor$Noop = {ctor: 'Noop'};
var _mordrax$cotwelm$Dungeon_Editor$NewCandidate = {ctor: 'NewCandidate'};
var _mordrax$cotwelm$Dungeon_Editor$Clean = {ctor: 'Clean'};
var _mordrax$cotwelm$Dungeon_Editor$ResetMap = {ctor: 'ResetMap'};
var _mordrax$cotwelm$Dungeon_Editor$ConfigMsg = function (a) {
	return {ctor: 'ConfigMsg', _0: a};
};
var _mordrax$cotwelm$Dungeon_Editor$mapSizeView = function (model) {
	return A2(
		_elm_lang$html$Html$p,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'width', _1: '300px'},
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$map,
				_mordrax$cotwelm$Dungeon_Editor$ConfigMsg,
				_mordrax$cotwelm$Dungeon_Rooms_Config$dungeonSizeView(model.config)),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$map,
					_mordrax$cotwelm$Dungeon_Editor$ConfigMsg,
					_mordrax$cotwelm$Dungeon_Rooms_Config$roomsConfigView(model.config)),
				_1: {ctor: '[]'}
			}
		});
};
var _mordrax$cotwelm$Dungeon_Editor$Dungeon = function (a) {
	return {ctor: 'Dungeon', _0: a};
};
var _mordrax$cotwelm$Dungeon_Editor$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'NewCandidate':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(
						_mgold$elm_random_pcg$Random_Pcg$generate,
						_mordrax$cotwelm$Dungeon_Editor$Dungeon,
						_mordrax$cotwelm$Dungeon_Editor$generateCandidate(model))
				};
			case 'Clean':
				var _p1 = _elm_lang$core$List$head(model.dungeonSteps);
				if (_p1.ctor === 'Just') {
					var cleanedModel = _mordrax$cotwelm$Dungeon_DungeonGenerator$clean(_p1._0);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								dungeonSteps: {ctor: '::', _0: cleanedModel, _1: model.dungeonSteps},
								map: _mordrax$cotwelm$Dungeon_Editor$updateMap(cleanedModel)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'GenerateMap':
				var dungeonModel = A2(
					_elm_lang$core$Maybe$withDefault,
					_mordrax$cotwelm$Dungeon_DungeonGenerator$init(model.config),
					_elm_lang$core$List$head(
						_elm_lang$core$List$reverse(model.dungeonSteps)));
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(
						_mgold$elm_random_pcg$Random_Pcg$generate,
						_mordrax$cotwelm$Dungeon_Editor$Dungeon,
						A3(_mordrax$cotwelm$Dungeon_DungeonGenerator$steps, _p0._0, model.config, dungeonModel))
				};
			case 'Dungeon':
				var _p2 = _p0._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							dungeonSteps: {
								ctor: '::',
								_0: _p2,
								_1: {ctor: '[]'}
							},
							map: _mordrax$cotwelm$Dungeon_Editor$updateMap(_p2)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ConfigMsg':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							config: A2(_mordrax$cotwelm$Dungeon_Rooms_Config$update, _p0._0, model.config)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ResetMap':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							map: _elm_lang$core$Dict$empty,
							dungeonSteps: {ctor: '[]'}
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _mordrax$cotwelm$Dungeon_Editor$GenerateMap = function (a) {
	return {ctor: 'GenerateMap', _0: a};
};
var _mordrax$cotwelm$Dungeon_Editor$view = function (model) {
	var clickTile = function (position) {
		return _mordrax$cotwelm$Dungeon_Editor$Noop;
	};
	var viewportSize = {ctor: '_Tuple2', _0: 200, _1: 200};
	var screenMap = A2(_mordrax$cotwelm$Game_Level$toScreenCoords, model.map, model.config.dungeonSize);
	var border = {ctor: '_Tuple2', _0: 'border', _1: '1px solid black'};
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'height', _1: '100%'},
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('ui button'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(
									_mordrax$cotwelm$Dungeon_Editor$GenerateMap(1)),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Step'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('ui button'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(
										_mordrax$cotwelm$Dungeon_Editor$GenerateMap(5)),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Step x5'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$button,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('ui button'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(
											_mordrax$cotwelm$Dungeon_Editor$GenerateMap(15)),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Step x15'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$button,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('ui button'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(_mordrax$cotwelm$Dungeon_Editor$Clean),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Clean'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$button,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('ui button'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(_mordrax$cotwelm$Dungeon_Editor$ResetMap),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Destroy!'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$button,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('ui button'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onClick(_mordrax$cotwelm$Dungeon_Editor$NewCandidate),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('NewCandidate'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: _mordrax$cotwelm$Dungeon_Editor$mapSizeView(model),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'left', _1: '300px'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'top', _1: '30px'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'height', _1: '100%'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					},
					A4(
						_mordrax$cotwelm$Game_Level$drawForEditor,
						{
							start: {ctor: '_Tuple2', _0: 0, _1: 0},
							size: viewportSize
						},
						screenMap,
						model.config.mapScale,
						clickTile)),
				_1: {ctor: '[]'}
			}
		});
};

var _mordrax$cotwelm$Game_Maps$buildingsOfArea = function (area) {
	var _p0 = area;
	switch (_p0.ctor) {
		case 'Village':
			var farmGate = A2(
				_mordrax$cotwelm$Building$newLink,
				_mordrax$cotwelm$Types$Farm,
				{ctor: '_Tuple2', _0: 11, _1: 31});
			return {
				ctor: '::',
				_0: A4(
					_mordrax$cotwelm$Building$new,
					_mordrax$cotwelm$Building$Gate,
					{ctor: '_Tuple2', _0: 10, _1: 0},
					'Village Gate',
					farmGate),
				_1: {
					ctor: '::',
					_0: A4(
						_mordrax$cotwelm$Building$new,
						_mordrax$cotwelm$Building$StrawHouseEast,
						{ctor: '_Tuple2', _0: 3, _1: 6},
						'Junk Shop',
						_mordrax$cotwelm$Building$Ordinary),
					_1: {
						ctor: '::',
						_0: A4(
							_mordrax$cotwelm$Building$new,
							_mordrax$cotwelm$Building$StrawHouseWest,
							{ctor: '_Tuple2', _0: 16, _1: 5},
							'Private House',
							_mordrax$cotwelm$Building$Ordinary),
						_1: {
							ctor: '::',
							_0: A4(
								_mordrax$cotwelm$Building$new,
								_mordrax$cotwelm$Building$Hut,
								{ctor: '_Tuple2', _0: 7, _1: 13},
								'Potion Store',
								_mordrax$cotwelm$Building$Shop(_mordrax$cotwelm$Shops$PotionStore)),
							_1: {
								ctor: '::',
								_0: A4(
									_mordrax$cotwelm$Building$new,
									_mordrax$cotwelm$Building$StrawHouseWest,
									{ctor: '_Tuple2', _0: 14, _1: 12},
									'Private House 2',
									_mordrax$cotwelm$Building$Ordinary),
								_1: {
									ctor: '::',
									_0: A4(
										_mordrax$cotwelm$Building$new,
										_mordrax$cotwelm$Building$StrawHouseEast,
										{ctor: '_Tuple2', _0: 6, _1: 17},
										'Weapon Shop',
										_mordrax$cotwelm$Building$Shop(_mordrax$cotwelm$Shops$WeaponSmith)),
									_1: {
										ctor: '::',
										_0: A4(
											_mordrax$cotwelm$Building$new,
											_mordrax$cotwelm$Building$StrawHouseWest,
											{ctor: '_Tuple2', _0: 14, _1: 17},
											'General Store',
											_mordrax$cotwelm$Building$Shop(_mordrax$cotwelm$Shops$GeneralStore)),
										_1: {
											ctor: '::',
											_0: A4(
												_mordrax$cotwelm$Building$new,
												_mordrax$cotwelm$Building$HutTemple,
												{ctor: '_Tuple2', _0: 9, _1: 22},
												'Odin\'s Temple',
												_mordrax$cotwelm$Building$Ordinary),
											_1: {
												ctor: '::',
												_0: A4(
													_mordrax$cotwelm$Building$new,
													_mordrax$cotwelm$Building$Well,
													{ctor: '_Tuple2', _0: 11, _1: 18},
													'Secret Entrance',
													A2(
														_mordrax$cotwelm$Building$newLink,
														_mordrax$cotwelm$Types$DungeonLevelOne,
														{ctor: '_Tuple2', _0: 25, _1: 3})),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'Farm':
			var mineExit = A2(
				_mordrax$cotwelm$Building$newLink,
				_mordrax$cotwelm$Types$DungeonLevelOne,
				{ctor: '_Tuple2', _0: 22, _1: 39});
			var villageGate = A2(
				_mordrax$cotwelm$Building$newLink,
				_mordrax$cotwelm$Types$Village,
				{ctor: '_Tuple2', _0: 11, _1: 1});
			return {
				ctor: '::',
				_0: A4(
					_mordrax$cotwelm$Building$new,
					_mordrax$cotwelm$Building$Gate,
					{ctor: '_Tuple2', _0: 10, _1: 32},
					'Farm Gate',
					villageGate),
				_1: {
					ctor: '::',
					_0: A4(
						_mordrax$cotwelm$Building$new,
						_mordrax$cotwelm$Building$StrawHouseWest,
						{ctor: '_Tuple2', _0: 43, _1: 23},
						'Adopted Parents House',
						_mordrax$cotwelm$Building$Ordinary),
					_1: {
						ctor: '::',
						_0: A4(
							_mordrax$cotwelm$Building$new,
							_mordrax$cotwelm$Building$MineEntrance,
							{ctor: '_Tuple2', _0: 24, _1: 1},
							'Mine Entrance',
							mineExit),
						_1: {ctor: '[]'}
					}
				}
			};
		case 'DungeonLevelOne':
			var mineEntrance = A2(
				_mordrax$cotwelm$Building$newLink,
				_mordrax$cotwelm$Types$Farm,
				{ctor: '_Tuple2', _0: 24, _1: 2});
			return {
				ctor: '::',
				_0: A4(
					_mordrax$cotwelm$Building$new,
					_mordrax$cotwelm$Building$MineEntrance,
					{ctor: '_Tuple2', _0: 22, _1: 40},
					'Mine Exit',
					mineEntrance),
				_1: {
					ctor: '::',
					_0: A4(
						_mordrax$cotwelm$Building$new,
						_mordrax$cotwelm$Building$StairsDown,
						{ctor: '_Tuple2', _0: 25, _1: 2},
						'Down stairs',
						_mordrax$cotwelm$Building$StairDown),
					_1: {ctor: '[]'}
				}
			};
		default:
			return {ctor: '[]'};
	}
};
var _mordrax$cotwelm$Game_Maps$getASCIIMap = function (area) {
	var _p1 = area;
	switch (_p1.ctor) {
		case 'Village':
			return _mordrax$cotwelm$ASCIIMaps$villageMap;
		case 'Farm':
			return _mordrax$cotwelm$ASCIIMaps$farmMap;
		case 'DungeonLevelOne':
			return _mordrax$cotwelm$ASCIIMaps$dungeonLevelOneMap;
		default:
			return {
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: {ctor: '[]'}
			};
	}
};
var _mordrax$cotwelm$Game_Maps$getCurrentLevel = function (model) {
	var _p2 = model.currentArea;
	switch (_p2.ctor) {
		case 'Village':
			return model.village;
		case 'Farm':
			return model.farm;
		case 'DungeonLevelOne':
			return model.abandonedMinesEntry;
		default:
			return A2(
				_elm_lang$core$Maybe$withDefault,
				model.abandonedMinesEntry,
				A2(_Skinney$elm_array_exploration$Array_Hamt$get, _p2._0, model.abandonedMines));
	}
};
var _mordrax$cotwelm$Game_Maps$setLevel = F2(
	function (level, model) {
		var _p3 = model.currentArea;
		switch (_p3.ctor) {
			case 'Village':
				return _elm_lang$core$Native_Utils.update(
					model,
					{village: level});
			case 'Farm':
				return _elm_lang$core$Native_Utils.update(
					model,
					{farm: level});
			case 'DungeonLevelOne':
				return _elm_lang$core$Native_Utils.update(
					model,
					{abandonedMinesEntry: level});
			default:
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						abandonedMines: A3(_Skinney$elm_array_exploration$Array_Hamt$set, _p3._0, level, model.abandonedMines)
					});
		}
	});
var _mordrax$cotwelm$Game_Maps$setCurrentArea = F2(
	function (currentArea, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{currentArea: currentArea});
	});
var _mordrax$cotwelm$Game_Maps$upstairs = F2(
	function (currentLevel, maps) {
		var newArea = function () {
			var _p4 = maps.currentArea;
			if (_p4.ctor === 'DungeonLevel') {
				if (_p4._0 === 0) {
					return _mordrax$cotwelm$Types$DungeonLevelOne;
				} else {
					return _mordrax$cotwelm$Types$DungeonLevel(_p4._0 - 1);
				}
			} else {
				return _mordrax$cotwelm$Types$Farm;
			}
		}();
		return function (newMaps) {
			return {
				ctor: '_Tuple2',
				_0: _mordrax$cotwelm$Game_Maps$getCurrentLevel(newMaps),
				_1: newMaps
			};
		}(
			A2(
				_mordrax$cotwelm$Game_Maps$setCurrentArea,
				newArea,
				A2(_mordrax$cotwelm$Game_Maps$setLevel, currentLevel, maps)));
	});
var _mordrax$cotwelm$Game_Maps$downstairs = F2(
	function (currentLevel, maps) {
		var mapsWithSavedCurrentLevel = A2(_mordrax$cotwelm$Game_Maps$setLevel, currentLevel, maps);
		var nextDungeonLevel = function () {
			var _p5 = maps.currentArea;
			if (_p5.ctor === 'DungeonLevel') {
				return _p5._0 + 1;
			} else {
				return 0;
			}
		}();
		var mapsSavedAndUpdated = A2(
			_mordrax$cotwelm$Game_Maps$setCurrentArea,
			_mordrax$cotwelm$Types$DungeonLevel(nextDungeonLevel),
			A2(_mordrax$cotwelm$Game_Maps$setLevel, currentLevel, maps));
		var _p6 = A2(_Skinney$elm_array_exploration$Array_Hamt$get, nextDungeonLevel, maps.abandonedMines);
		if (_p6.ctor === 'Just') {
			return _mgold$elm_random_pcg$Random_Pcg$constant(
				{ctor: '_Tuple2', _0: _p6._0, _1: mapsSavedAndUpdated});
		} else {
			return A2(
				_mgold$elm_random_pcg$Random_Pcg$map,
				function (newLevel) {
					return {
						ctor: '_Tuple2',
						_0: newLevel,
						_1: _elm_lang$core$Native_Utils.update(
							mapsSavedAndUpdated,
							{
								abandonedMines: A2(_Skinney$elm_array_exploration$Array_Hamt$push, newLevel, mapsWithSavedCurrentLevel.abandonedMines)
							})
					};
				},
				A2(
					_mgold$elm_random_pcg$Random_Pcg$andThen,
					_mordrax$cotwelm$Game_Level$generateLoot(nextDungeonLevel),
					A2(
						_mgold$elm_random_pcg$Random_Pcg$andThen,
						_mordrax$cotwelm$Game_Level$generateMonsters(nextDungeonLevel),
						_mordrax$cotwelm$Dungeon_DungeonGenerator$generate(_mordrax$cotwelm$Dungeon_Rooms_Config$init))));
		}
	});
var _mordrax$cotwelm$Game_Maps$saveLoadArea = F3(
	function (currentLevel, newArea, maps) {
		return function (newMaps) {
			return {
				ctor: '_Tuple2',
				_0: _mordrax$cotwelm$Game_Maps$getCurrentLevel(newMaps),
				_1: newMaps
			};
		}(
			A2(
				_mordrax$cotwelm$Game_Maps$setCurrentArea,
				newArea,
				A2(_mordrax$cotwelm$Game_Maps$setLevel, currentLevel, maps)));
	});
var _mordrax$cotwelm$Game_Maps$tick = function (_p7) {
	var _p8 = _p7;
	return function (newMines) {
		return _elm_lang$core$Native_Utils.update(
			_p8,
			{abandonedMines: newMines});
	}(
		A2(_Skinney$elm_array_exploration$Array_Hamt$map, _mordrax$cotwelm$Game_Level$tick, _p8.abandonedMines));
};
var _mordrax$cotwelm$Game_Maps$init = function (armour) {
	var makeVisible = function (_p9) {
		return _elm_lang$core$Dict$fromList(
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Tuple$mapSecond(
					_mordrax$cotwelm$Tile$setVisibility(_mordrax$cotwelm$Types$Known)),
				_elm_lang$core$Dict$toList(_p9)));
	};
	var levelOfArea = F2(
		function (area, tiles) {
			return A3(
				_mordrax$cotwelm$Game_Level$initNonDungeon,
				tiles,
				_mordrax$cotwelm$Game_Maps$buildingsOfArea(area),
				{ctor: '[]'});
		});
	var areaToTiles = function (_p10) {
		return _mordrax$cotwelm$Tile$mapToTiles(
			_mordrax$cotwelm$Game_Maps$getASCIIMap(_p10));
	};
	var mineEntryLevelWithArmour = A2(
		_mordrax$cotwelm$Game_Level$setMonsters,
		{
			ctor: '::',
			_0: A2(
				_mordrax$cotwelm$Monster$make,
				_mordrax$cotwelm$Monsters_Types$Goblin,
				{ctor: '_Tuple2', _0: 26, _1: 4}),
			_1: {
				ctor: '::',
				_0: A2(
					_mordrax$cotwelm$Monster$make,
					_mordrax$cotwelm$Monsters_Types$GiantRat,
					{ctor: '_Tuple2', _0: 34, _1: 23}),
				_1: {
					ctor: '::',
					_0: A2(
						_mordrax$cotwelm$Monster$make,
						_mordrax$cotwelm$Monsters_Types$Kobold,
						{ctor: '_Tuple2', _0: 14, _1: 19}),
					_1: {ctor: '[]'}
				}
			}
		},
		A2(
			_mordrax$cotwelm$Game_Level$drop,
			{
				ctor: '_Tuple2',
				_0: {ctor: '_Tuple2', _0: 13, _1: 19},
				_1: armour
			},
			A2(
				levelOfArea,
				_mordrax$cotwelm$Types$DungeonLevelOne,
				areaToTiles(_mordrax$cotwelm$Types$DungeonLevelOne))));
	return {
		currentArea: _mordrax$cotwelm$Types$Village,
		abandonedMines: _Skinney$elm_array_exploration$Array_Hamt$fromList(
			{ctor: '[]'}),
		village: A2(
			levelOfArea,
			_mordrax$cotwelm$Types$Village,
			makeVisible(
				areaToTiles(_mordrax$cotwelm$Types$Village))),
		farm: A2(
			levelOfArea,
			_mordrax$cotwelm$Types$Farm,
			makeVisible(
				areaToTiles(_mordrax$cotwelm$Types$Farm))),
		abandonedMinesEntry: mineEntryLevelWithArmour
	};
};
var _mordrax$cotwelm$Game_Maps$Maps = F5(
	function (a, b, c, d, e) {
		return {currentArea: a, village: b, farm: c, abandonedMinesEntry: d, abandonedMines: e};
	});

var _mordrax$cotwelm$Game_Types$CharacterInfoScreen = {ctor: 'CharacterInfoScreen'};
var _mordrax$cotwelm$Game_Types$RipScreen = {ctor: 'RipScreen'};
var _mordrax$cotwelm$Game_Types$BuildingScreen = function (a) {
	return {ctor: 'BuildingScreen', _0: a};
};
var _mordrax$cotwelm$Game_Types$InventoryScreen = {ctor: 'InventoryScreen'};
var _mordrax$cotwelm$Game_Types$MapScreen = {ctor: 'MapScreen'};
var _mordrax$cotwelm$Game_Types$Look = {ctor: 'Look'};
var _mordrax$cotwelm$Game_Types$GoToScreen = function (a) {
	return {ctor: 'GoToScreen', _0: a};
};
var _mordrax$cotwelm$Game_Types$KillHero = {ctor: 'KillHero'};
var _mordrax$cotwelm$Game_Types$WaitUntilHealed = {ctor: 'WaitUntilHealed'};
var _mordrax$cotwelm$Game_Types$WaitATurn = function (a) {
	return {ctor: 'WaitATurn', _0: a};
};
var _mordrax$cotwelm$Game_Types$Pickup = {ctor: 'Pickup'};
var _mordrax$cotwelm$Game_Types$GoDownstairs = {ctor: 'GoDownstairs'};
var _mordrax$cotwelm$Game_Types$GoUpstairs = {ctor: 'GoUpstairs'};
var _mordrax$cotwelm$Game_Types$OpenInventory = {ctor: 'OpenInventory'};
var _mordrax$cotwelm$Game_Types$Walk = function (a) {
	return {ctor: 'Walk', _0: a};
};
var _mordrax$cotwelm$Game_Types$Move = function (a) {
	return {ctor: 'Move', _0: a};
};

var _ohanhi$keyboard_extra$Keyboard_Arrows$boolToInt = function (bool) {
	return bool ? 1 : 0;
};
var _ohanhi$keyboard_extra$Keyboard_Arrows$determineArrows = function (keys) {
	var toInt = function (key) {
		return _ohanhi$keyboard_extra$Keyboard_Arrows$boolToInt(
			A2(_elm_lang$core$List$member, key, keys));
	};
	var x = toInt(39) - toInt(37);
	var y = toInt(38) - toInt(40);
	return {x: x, y: y};
};
var _ohanhi$keyboard_extra$Keyboard_Arrows$determineWasd = function (keys) {
	var toInt = function (key) {
		return _ohanhi$keyboard_extra$Keyboard_Arrows$boolToInt(
			A2(_elm_lang$core$List$member, key, keys));
	};
	var x = toInt(68) - toInt(65);
	var y = toInt(87) - toInt(83);
	return {x: x, y: y};
};
var _ohanhi$keyboard_extra$Keyboard_Arrows$init = {x: 0, y: 0};
var _ohanhi$keyboard_extra$Keyboard_Arrows$Arrows = F2(
	function (a, b) {
		return {x: a, y: b};
	});

var _ohanhi$keyboard_extra$Keyboard_Extra$wasd = function (_p0) {
	var _p1 = _p0;
	return _ohanhi$keyboard_extra$Keyboard_Arrows$determineWasd(_p1._0);
};
var _ohanhi$keyboard_extra$Keyboard_Extra$arrows = function (_p2) {
	var _p3 = _p2;
	return _ohanhi$keyboard_extra$Keyboard_Arrows$determineArrows(_p3._0);
};
var _ohanhi$keyboard_extra$Keyboard_Extra$remove = F2(
	function (code, list) {
		return A2(
			_elm_lang$core$List$filter,
			F2(
				function (x, y) {
					return !_elm_lang$core$Native_Utils.eq(x, y);
				})(code),
			list);
	});
var _ohanhi$keyboard_extra$Keyboard_Extra$insert = F2(
	function (code, list) {
		return A2(
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			code,
			A2(_ohanhi$keyboard_extra$Keyboard_Extra$remove, code, list));
	});
var _ohanhi$keyboard_extra$Keyboard_Extra$Up = function (a) {
	return {ctor: 'Up', _0: a};
};
var _ohanhi$keyboard_extra$Keyboard_Extra$Down = function (a) {
	return {ctor: 'Down', _0: a};
};
var _ohanhi$keyboard_extra$Keyboard_Extra$subscriptions = _elm_lang$core$Platform_Sub$batch(
	{
		ctor: '::',
		_0: _elm_lang$keyboard$Keyboard$downs(_ohanhi$keyboard_extra$Keyboard_Extra$Down),
		_1: {
			ctor: '::',
			_0: _elm_lang$keyboard$Keyboard$ups(_ohanhi$keyboard_extra$Keyboard_Extra$Up),
			_1: {ctor: '[]'}
		}
	});
var _ohanhi$keyboard_extra$Keyboard_Extra$State = function (a) {
	return {ctor: 'State', _0: a};
};
var _ohanhi$keyboard_extra$Keyboard_Extra$initialState = _ohanhi$keyboard_extra$Keyboard_Extra$State(
	{ctor: '[]'});
var _ohanhi$keyboard_extra$Keyboard_Extra$update = F2(
	function (msg, _p4) {
		var _p5 = _p4;
		var _p7 = _p5._0;
		var _p6 = msg;
		if (_p6.ctor === 'Down') {
			return _ohanhi$keyboard_extra$Keyboard_Extra$State(
				A2(_ohanhi$keyboard_extra$Keyboard_Extra$insert, _p6._0, _p7));
		} else {
			return _ohanhi$keyboard_extra$Keyboard_Extra$State(
				A2(_ohanhi$keyboard_extra$Keyboard_Extra$remove, _p6._0, _p7));
		}
	});
var _ohanhi$keyboard_extra$Keyboard_Extra$KeyUp = function (a) {
	return {ctor: 'KeyUp', _0: a};
};
var _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown = function (a) {
	return {ctor: 'KeyDown', _0: a};
};
var _ohanhi$keyboard_extra$Keyboard_Extra$NoDirection = {ctor: 'NoDirection'};
var _ohanhi$keyboard_extra$Keyboard_Extra$NorthWest = {ctor: 'NorthWest'};
var _ohanhi$keyboard_extra$Keyboard_Extra$West = {ctor: 'West'};
var _ohanhi$keyboard_extra$Keyboard_Extra$SouthWest = {ctor: 'SouthWest'};
var _ohanhi$keyboard_extra$Keyboard_Extra$South = {ctor: 'South'};
var _ohanhi$keyboard_extra$Keyboard_Extra$SouthEast = {ctor: 'SouthEast'};
var _ohanhi$keyboard_extra$Keyboard_Extra$East = {ctor: 'East'};
var _ohanhi$keyboard_extra$Keyboard_Extra$NorthEast = {ctor: 'NorthEast'};
var _ohanhi$keyboard_extra$Keyboard_Extra$North = {ctor: 'North'};
var _ohanhi$keyboard_extra$Keyboard_Extra$arrowsToDir = function (_p8) {
	var _p9 = _p8;
	var _p10 = {ctor: '_Tuple2', _0: _p9.x, _1: _p9.y};
	_v5_8:
	do {
		if (_p10.ctor === '_Tuple2') {
			switch (_p10._0) {
				case 1:
					switch (_p10._1) {
						case 1:
							return _ohanhi$keyboard_extra$Keyboard_Extra$NorthEast;
						case 0:
							return _ohanhi$keyboard_extra$Keyboard_Extra$East;
						case -1:
							return _ohanhi$keyboard_extra$Keyboard_Extra$SouthEast;
						default:
							break _v5_8;
					}
				case 0:
					switch (_p10._1) {
						case 1:
							return _ohanhi$keyboard_extra$Keyboard_Extra$North;
						case -1:
							return _ohanhi$keyboard_extra$Keyboard_Extra$South;
						default:
							break _v5_8;
					}
				case -1:
					switch (_p10._1) {
						case -1:
							return _ohanhi$keyboard_extra$Keyboard_Extra$SouthWest;
						case 0:
							return _ohanhi$keyboard_extra$Keyboard_Extra$West;
						case 1:
							return _ohanhi$keyboard_extra$Keyboard_Extra$NorthWest;
						default:
							break _v5_8;
					}
				default:
					break _v5_8;
			}
		} else {
			break _v5_8;
		}
	} while(false);
	return _ohanhi$keyboard_extra$Keyboard_Extra$NoDirection;
};
var _ohanhi$keyboard_extra$Keyboard_Extra$arrowsDirection = function (_p11) {
	return _ohanhi$keyboard_extra$Keyboard_Extra$arrowsToDir(
		_ohanhi$keyboard_extra$Keyboard_Extra$arrows(_p11));
};
var _ohanhi$keyboard_extra$Keyboard_Extra$wasdDirection = function (_p12) {
	return _ohanhi$keyboard_extra$Keyboard_Extra$arrowsToDir(
		_ohanhi$keyboard_extra$Keyboard_Extra$wasd(_p12));
};
var _ohanhi$keyboard_extra$Keyboard_Extra$Other = {ctor: 'Other'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Altgr = {ctor: 'Altgr'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Meta = {ctor: 'Meta'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Quote = {ctor: 'Quote'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CloseBracket = {ctor: 'CloseBracket'};
var _ohanhi$keyboard_extra$Keyboard_Extra$BackSlash = {ctor: 'BackSlash'};
var _ohanhi$keyboard_extra$Keyboard_Extra$OpenBracket = {ctor: 'OpenBracket'};
var _ohanhi$keyboard_extra$Keyboard_Extra$BackQuote = {ctor: 'BackQuote'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Slash = {ctor: 'Slash'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Period = {ctor: 'Period'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Minus = {ctor: 'Minus'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Comma = {ctor: 'Comma'};
var _ohanhi$keyboard_extra$Keyboard_Extra$VolumeUp = {ctor: 'VolumeUp'};
var _ohanhi$keyboard_extra$Keyboard_Extra$VolumeDown = {ctor: 'VolumeDown'};
var _ohanhi$keyboard_extra$Keyboard_Extra$VolumeMute = {ctor: 'VolumeMute'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Tilde = {ctor: 'Tilde'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CloseCurlyBracket = {ctor: 'CloseCurlyBracket'};
var _ohanhi$keyboard_extra$Keyboard_Extra$OpenCurlyBracket = {ctor: 'OpenCurlyBracket'};
var _ohanhi$keyboard_extra$Keyboard_Extra$HyphenMinus = {ctor: 'HyphenMinus'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Pipe = {ctor: 'Pipe'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Plus = {ctor: 'Plus'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Asterisk = {ctor: 'Asterisk'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CloseParen = {ctor: 'CloseParen'};
var _ohanhi$keyboard_extra$Keyboard_Extra$OpenParen = {ctor: 'OpenParen'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Underscore = {ctor: 'Underscore'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Ampersand = {ctor: 'Ampersand'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Percent = {ctor: 'Percent'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Dollar = {ctor: 'Dollar'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Hash = {ctor: 'Hash'};
var _ohanhi$keyboard_extra$Keyboard_Extra$DoubleQuote = {ctor: 'DoubleQuote'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Exclamation = {ctor: 'Exclamation'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Circumflex = {ctor: 'Circumflex'};
var _ohanhi$keyboard_extra$Keyboard_Extra$ScrollLock = {ctor: 'ScrollLock'};
var _ohanhi$keyboard_extra$Keyboard_Extra$NumLock = {ctor: 'NumLock'};
var _ohanhi$keyboard_extra$Keyboard_Extra$F24 = {ctor: 'F24'};
var _ohanhi$keyboard_extra$Keyboard_Extra$F23 = {ctor: 'F23'};
var _ohanhi$keyboard_extra$Keyboard_Extra$F22 = {ctor: 'F22'};
var _ohanhi$keyboard_extra$Keyboard_Extra$F21 = {ctor: 'F21'};
var _ohanhi$keyboard_extra$Keyboard_Extra$F20 = {ctor: 'F20'};
var _ohanhi$keyboard_extra$Keyboard_Extra$F19 = {ctor: 'F19'};
var _ohanhi$keyboard_extra$Keyboard_Extra$F18 = {ctor: 'F18'};
var _ohanhi$keyboard_extra$Keyboard_Extra$F17 = {ctor: 'F17'};
var _ohanhi$keyboard_extra$Keyboard_Extra$F16 = {ctor: 'F16'};
var _ohanhi$keyboard_extra$Keyboard_Extra$F15 = {ctor: 'F15'};
var _ohanhi$keyboard_extra$Keyboard_Extra$F14 = {ctor: 'F14'};
var _ohanhi$keyboard_extra$Keyboard_Extra$F13 = {ctor: 'F13'};
var _ohanhi$keyboard_extra$Keyboard_Extra$F12 = {ctor: 'F12'};
var _ohanhi$keyboard_extra$Keyboard_Extra$F11 = {ctor: 'F11'};
var _ohanhi$keyboard_extra$Keyboard_Extra$F10 = {ctor: 'F10'};
var _ohanhi$keyboard_extra$Keyboard_Extra$F9 = {ctor: 'F9'};
var _ohanhi$keyboard_extra$Keyboard_Extra$F8 = {ctor: 'F8'};
var _ohanhi$keyboard_extra$Keyboard_Extra$F7 = {ctor: 'F7'};
var _ohanhi$keyboard_extra$Keyboard_Extra$F6 = {ctor: 'F6'};
var _ohanhi$keyboard_extra$Keyboard_Extra$F5 = {ctor: 'F5'};
var _ohanhi$keyboard_extra$Keyboard_Extra$F4 = {ctor: 'F4'};
var _ohanhi$keyboard_extra$Keyboard_Extra$F3 = {ctor: 'F3'};
var _ohanhi$keyboard_extra$Keyboard_Extra$F2 = {ctor: 'F2'};
var _ohanhi$keyboard_extra$Keyboard_Extra$F1 = {ctor: 'F1'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Divide = {ctor: 'Divide'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Decimal = {ctor: 'Decimal'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Subtract = {ctor: 'Subtract'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Separator = {ctor: 'Separator'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Add = {ctor: 'Add'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Multiply = {ctor: 'Multiply'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Numpad9 = {ctor: 'Numpad9'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Numpad8 = {ctor: 'Numpad8'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Numpad7 = {ctor: 'Numpad7'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Numpad6 = {ctor: 'Numpad6'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Numpad5 = {ctor: 'Numpad5'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Numpad4 = {ctor: 'Numpad4'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Numpad3 = {ctor: 'Numpad3'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Numpad2 = {ctor: 'Numpad2'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Numpad1 = {ctor: 'Numpad1'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Numpad0 = {ctor: 'Numpad0'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Sleep = {ctor: 'Sleep'};
var _ohanhi$keyboard_extra$Keyboard_Extra$ContextMenu = {ctor: 'ContextMenu'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Super = {ctor: 'Super'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CharZ = {ctor: 'CharZ'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CharY = {ctor: 'CharY'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CharX = {ctor: 'CharX'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CharW = {ctor: 'CharW'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CharV = {ctor: 'CharV'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CharU = {ctor: 'CharU'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CharT = {ctor: 'CharT'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CharS = {ctor: 'CharS'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CharR = {ctor: 'CharR'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CharQ = {ctor: 'CharQ'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CharP = {ctor: 'CharP'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CharO = {ctor: 'CharO'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CharN = {ctor: 'CharN'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CharM = {ctor: 'CharM'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CharL = {ctor: 'CharL'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CharK = {ctor: 'CharK'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CharJ = {ctor: 'CharJ'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CharI = {ctor: 'CharI'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CharH = {ctor: 'CharH'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CharG = {ctor: 'CharG'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CharF = {ctor: 'CharF'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CharE = {ctor: 'CharE'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CharD = {ctor: 'CharD'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CharC = {ctor: 'CharC'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CharB = {ctor: 'CharB'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CharA = {ctor: 'CharA'};
var _ohanhi$keyboard_extra$Keyboard_Extra$At = {ctor: 'At'};
var _ohanhi$keyboard_extra$Keyboard_Extra$QuestionMark = {ctor: 'QuestionMark'};
var _ohanhi$keyboard_extra$Keyboard_Extra$GreaterThan = {ctor: 'GreaterThan'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Equals = {ctor: 'Equals'};
var _ohanhi$keyboard_extra$Keyboard_Extra$LessThan = {ctor: 'LessThan'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Semicolon = {ctor: 'Semicolon'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Colon = {ctor: 'Colon'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Number9 = {ctor: 'Number9'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Number8 = {ctor: 'Number8'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Number7 = {ctor: 'Number7'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Number6 = {ctor: 'Number6'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Number5 = {ctor: 'Number5'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Number4 = {ctor: 'Number4'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Number3 = {ctor: 'Number3'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Number2 = {ctor: 'Number2'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Number1 = {ctor: 'Number1'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Number0 = {ctor: 'Number0'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Delete = {ctor: 'Delete'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Insert = {ctor: 'Insert'};
var _ohanhi$keyboard_extra$Keyboard_Extra$PrintScreen = {ctor: 'PrintScreen'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Execute = {ctor: 'Execute'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Print = {ctor: 'Print'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Select = {ctor: 'Select'};
var _ohanhi$keyboard_extra$Keyboard_Extra$ArrowDown = {ctor: 'ArrowDown'};
var _ohanhi$keyboard_extra$Keyboard_Extra$ArrowRight = {ctor: 'ArrowRight'};
var _ohanhi$keyboard_extra$Keyboard_Extra$ArrowUp = {ctor: 'ArrowUp'};
var _ohanhi$keyboard_extra$Keyboard_Extra$ArrowLeft = {ctor: 'ArrowLeft'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Home = {ctor: 'Home'};
var _ohanhi$keyboard_extra$Keyboard_Extra$End = {ctor: 'End'};
var _ohanhi$keyboard_extra$Keyboard_Extra$PageDown = {ctor: 'PageDown'};
var _ohanhi$keyboard_extra$Keyboard_Extra$PageUp = {ctor: 'PageUp'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Space = {ctor: 'Space'};
var _ohanhi$keyboard_extra$Keyboard_Extra$ModeChange = {ctor: 'ModeChange'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Accept = {ctor: 'Accept'};
var _ohanhi$keyboard_extra$Keyboard_Extra$NonConvert = {ctor: 'NonConvert'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Convert = {ctor: 'Convert'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Escape = {ctor: 'Escape'};
var _ohanhi$keyboard_extra$Keyboard_Extra$CapsLock = {ctor: 'CapsLock'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Pause = {ctor: 'Pause'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Alt = {ctor: 'Alt'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Control = {ctor: 'Control'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Shift = {ctor: 'Shift'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Enter = {ctor: 'Enter'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Clear = {ctor: 'Clear'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Tab = {ctor: 'Tab'};
var _ohanhi$keyboard_extra$Keyboard_Extra$BackSpace = {ctor: 'BackSpace'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Help = {ctor: 'Help'};
var _ohanhi$keyboard_extra$Keyboard_Extra$Cancel = {ctor: 'Cancel'};
var _ohanhi$keyboard_extra$Keyboard_Extra$codeBook = {
	ctor: '::',
	_0: {ctor: '_Tuple2', _0: 3, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Cancel},
	_1: {
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 6, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Help},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 8, _1: _ohanhi$keyboard_extra$Keyboard_Extra$BackSpace},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 9, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Tab},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 12, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Clear},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 13, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Enter},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 16, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Shift},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 17, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Control},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 18, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Alt},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 19, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Pause},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 20, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CapsLock},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 27, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Escape},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 28, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Convert},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 29, _1: _ohanhi$keyboard_extra$Keyboard_Extra$NonConvert},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 30, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Accept},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 31, _1: _ohanhi$keyboard_extra$Keyboard_Extra$ModeChange},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 32, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Space},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 33, _1: _ohanhi$keyboard_extra$Keyboard_Extra$PageUp},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 34, _1: _ohanhi$keyboard_extra$Keyboard_Extra$PageDown},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 35, _1: _ohanhi$keyboard_extra$Keyboard_Extra$End},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 36, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Home},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 37, _1: _ohanhi$keyboard_extra$Keyboard_Extra$ArrowLeft},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 38, _1: _ohanhi$keyboard_extra$Keyboard_Extra$ArrowUp},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 39, _1: _ohanhi$keyboard_extra$Keyboard_Extra$ArrowRight},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 40, _1: _ohanhi$keyboard_extra$Keyboard_Extra$ArrowDown},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 41, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Select},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 42, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Print},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 43, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Execute},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 44, _1: _ohanhi$keyboard_extra$Keyboard_Extra$PrintScreen},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 45, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Insert},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 46, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Delete},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 48, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Number0},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 49, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Number1},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 50, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Number2},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 51, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Number3},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 52, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Number4},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: 53, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Number5},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: 54, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Number6},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: 55, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Number7},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: 56, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Number8},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: 57, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Number9},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: 58, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Colon},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: 59, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Semicolon},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: 60, _1: _ohanhi$keyboard_extra$Keyboard_Extra$LessThan},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: 61, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Equals},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: 62, _1: _ohanhi$keyboard_extra$Keyboard_Extra$GreaterThan},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: 63, _1: _ohanhi$keyboard_extra$Keyboard_Extra$QuestionMark},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: 64, _1: _ohanhi$keyboard_extra$Keyboard_Extra$At},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: 65, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CharA},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: 66, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CharB},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: 67, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CharC},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: 68, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CharD},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: 69, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CharE},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: 70, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CharF},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: 71, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CharG},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: 72, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CharH},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: 73, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CharI},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: 74, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CharJ},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: 75, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CharK},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: 76, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CharL},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: 77, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CharM},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: 78, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CharN},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: 79, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CharO},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: 80, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CharP},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: 81, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CharQ},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: 82, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CharR},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: 83, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CharS},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: 84, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CharT},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: 85, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CharU},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: 86, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CharV},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: 87, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CharW},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: 88, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CharX},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: 89, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CharY},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: 90, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CharZ},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: 91, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Super},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: 93, _1: _ohanhi$keyboard_extra$Keyboard_Extra$ContextMenu},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: 95, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Sleep},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: 96, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Numpad0},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: 97, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Numpad1},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: 98, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Numpad2},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: 99, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Numpad3},
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: {ctor: '_Tuple2', _0: 100, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Numpad4},
																																																																																		_1: {
																																																																																			ctor: '::',
																																																																																			_0: {ctor: '_Tuple2', _0: 101, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Numpad5},
																																																																																			_1: {
																																																																																				ctor: '::',
																																																																																				_0: {ctor: '_Tuple2', _0: 102, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Numpad6},
																																																																																				_1: {
																																																																																					ctor: '::',
																																																																																					_0: {ctor: '_Tuple2', _0: 103, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Numpad7},
																																																																																					_1: {
																																																																																						ctor: '::',
																																																																																						_0: {ctor: '_Tuple2', _0: 104, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Numpad8},
																																																																																						_1: {
																																																																																							ctor: '::',
																																																																																							_0: {ctor: '_Tuple2', _0: 105, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Numpad9},
																																																																																							_1: {
																																																																																								ctor: '::',
																																																																																								_0: {ctor: '_Tuple2', _0: 106, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Multiply},
																																																																																								_1: {
																																																																																									ctor: '::',
																																																																																									_0: {ctor: '_Tuple2', _0: 107, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Add},
																																																																																									_1: {
																																																																																										ctor: '::',
																																																																																										_0: {ctor: '_Tuple2', _0: 108, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Separator},
																																																																																										_1: {
																																																																																											ctor: '::',
																																																																																											_0: {ctor: '_Tuple2', _0: 109, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Subtract},
																																																																																											_1: {
																																																																																												ctor: '::',
																																																																																												_0: {ctor: '_Tuple2', _0: 110, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Decimal},
																																																																																												_1: {
																																																																																													ctor: '::',
																																																																																													_0: {ctor: '_Tuple2', _0: 111, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Divide},
																																																																																													_1: {
																																																																																														ctor: '::',
																																																																																														_0: {ctor: '_Tuple2', _0: 112, _1: _ohanhi$keyboard_extra$Keyboard_Extra$F1},
																																																																																														_1: {
																																																																																															ctor: '::',
																																																																																															_0: {ctor: '_Tuple2', _0: 113, _1: _ohanhi$keyboard_extra$Keyboard_Extra$F2},
																																																																																															_1: {
																																																																																																ctor: '::',
																																																																																																_0: {ctor: '_Tuple2', _0: 114, _1: _ohanhi$keyboard_extra$Keyboard_Extra$F3},
																																																																																																_1: {
																																																																																																	ctor: '::',
																																																																																																	_0: {ctor: '_Tuple2', _0: 115, _1: _ohanhi$keyboard_extra$Keyboard_Extra$F4},
																																																																																																	_1: {
																																																																																																		ctor: '::',
																																																																																																		_0: {ctor: '_Tuple2', _0: 116, _1: _ohanhi$keyboard_extra$Keyboard_Extra$F5},
																																																																																																		_1: {
																																																																																																			ctor: '::',
																																																																																																			_0: {ctor: '_Tuple2', _0: 117, _1: _ohanhi$keyboard_extra$Keyboard_Extra$F6},
																																																																																																			_1: {
																																																																																																				ctor: '::',
																																																																																																				_0: {ctor: '_Tuple2', _0: 118, _1: _ohanhi$keyboard_extra$Keyboard_Extra$F7},
																																																																																																				_1: {
																																																																																																					ctor: '::',
																																																																																																					_0: {ctor: '_Tuple2', _0: 119, _1: _ohanhi$keyboard_extra$Keyboard_Extra$F8},
																																																																																																					_1: {
																																																																																																						ctor: '::',
																																																																																																						_0: {ctor: '_Tuple2', _0: 120, _1: _ohanhi$keyboard_extra$Keyboard_Extra$F9},
																																																																																																						_1: {
																																																																																																							ctor: '::',
																																																																																																							_0: {ctor: '_Tuple2', _0: 121, _1: _ohanhi$keyboard_extra$Keyboard_Extra$F10},
																																																																																																							_1: {
																																																																																																								ctor: '::',
																																																																																																								_0: {ctor: '_Tuple2', _0: 122, _1: _ohanhi$keyboard_extra$Keyboard_Extra$F11},
																																																																																																								_1: {
																																																																																																									ctor: '::',
																																																																																																									_0: {ctor: '_Tuple2', _0: 123, _1: _ohanhi$keyboard_extra$Keyboard_Extra$F12},
																																																																																																									_1: {
																																																																																																										ctor: '::',
																																																																																																										_0: {ctor: '_Tuple2', _0: 124, _1: _ohanhi$keyboard_extra$Keyboard_Extra$F13},
																																																																																																										_1: {
																																																																																																											ctor: '::',
																																																																																																											_0: {ctor: '_Tuple2', _0: 125, _1: _ohanhi$keyboard_extra$Keyboard_Extra$F14},
																																																																																																											_1: {
																																																																																																												ctor: '::',
																																																																																																												_0: {ctor: '_Tuple2', _0: 126, _1: _ohanhi$keyboard_extra$Keyboard_Extra$F15},
																																																																																																												_1: {
																																																																																																													ctor: '::',
																																																																																																													_0: {ctor: '_Tuple2', _0: 127, _1: _ohanhi$keyboard_extra$Keyboard_Extra$F16},
																																																																																																													_1: {
																																																																																																														ctor: '::',
																																																																																																														_0: {ctor: '_Tuple2', _0: 128, _1: _ohanhi$keyboard_extra$Keyboard_Extra$F17},
																																																																																																														_1: {
																																																																																																															ctor: '::',
																																																																																																															_0: {ctor: '_Tuple2', _0: 129, _1: _ohanhi$keyboard_extra$Keyboard_Extra$F18},
																																																																																																															_1: {
																																																																																																																ctor: '::',
																																																																																																																_0: {ctor: '_Tuple2', _0: 130, _1: _ohanhi$keyboard_extra$Keyboard_Extra$F19},
																																																																																																																_1: {
																																																																																																																	ctor: '::',
																																																																																																																	_0: {ctor: '_Tuple2', _0: 131, _1: _ohanhi$keyboard_extra$Keyboard_Extra$F20},
																																																																																																																	_1: {
																																																																																																																		ctor: '::',
																																																																																																																		_0: {ctor: '_Tuple2', _0: 132, _1: _ohanhi$keyboard_extra$Keyboard_Extra$F21},
																																																																																																																		_1: {
																																																																																																																			ctor: '::',
																																																																																																																			_0: {ctor: '_Tuple2', _0: 133, _1: _ohanhi$keyboard_extra$Keyboard_Extra$F22},
																																																																																																																			_1: {
																																																																																																																				ctor: '::',
																																																																																																																				_0: {ctor: '_Tuple2', _0: 134, _1: _ohanhi$keyboard_extra$Keyboard_Extra$F23},
																																																																																																																				_1: {
																																																																																																																					ctor: '::',
																																																																																																																					_0: {ctor: '_Tuple2', _0: 135, _1: _ohanhi$keyboard_extra$Keyboard_Extra$F24},
																																																																																																																					_1: {
																																																																																																																						ctor: '::',
																																																																																																																						_0: {ctor: '_Tuple2', _0: 144, _1: _ohanhi$keyboard_extra$Keyboard_Extra$NumLock},
																																																																																																																						_1: {
																																																																																																																							ctor: '::',
																																																																																																																							_0: {ctor: '_Tuple2', _0: 145, _1: _ohanhi$keyboard_extra$Keyboard_Extra$ScrollLock},
																																																																																																																							_1: {
																																																																																																																								ctor: '::',
																																																																																																																								_0: {ctor: '_Tuple2', _0: 160, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Circumflex},
																																																																																																																								_1: {
																																																																																																																									ctor: '::',
																																																																																																																									_0: {ctor: '_Tuple2', _0: 161, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Exclamation},
																																																																																																																									_1: {
																																																																																																																										ctor: '::',
																																																																																																																										_0: {ctor: '_Tuple2', _0: 162, _1: _ohanhi$keyboard_extra$Keyboard_Extra$DoubleQuote},
																																																																																																																										_1: {
																																																																																																																											ctor: '::',
																																																																																																																											_0: {ctor: '_Tuple2', _0: 163, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Hash},
																																																																																																																											_1: {
																																																																																																																												ctor: '::',
																																																																																																																												_0: {ctor: '_Tuple2', _0: 164, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Dollar},
																																																																																																																												_1: {
																																																																																																																													ctor: '::',
																																																																																																																													_0: {ctor: '_Tuple2', _0: 165, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Percent},
																																																																																																																													_1: {
																																																																																																																														ctor: '::',
																																																																																																																														_0: {ctor: '_Tuple2', _0: 166, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Ampersand},
																																																																																																																														_1: {
																																																																																																																															ctor: '::',
																																																																																																																															_0: {ctor: '_Tuple2', _0: 167, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Underscore},
																																																																																																																															_1: {
																																																																																																																																ctor: '::',
																																																																																																																																_0: {ctor: '_Tuple2', _0: 168, _1: _ohanhi$keyboard_extra$Keyboard_Extra$OpenParen},
																																																																																																																																_1: {
																																																																																																																																	ctor: '::',
																																																																																																																																	_0: {ctor: '_Tuple2', _0: 169, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CloseParen},
																																																																																																																																	_1: {
																																																																																																																																		ctor: '::',
																																																																																																																																		_0: {ctor: '_Tuple2', _0: 170, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Asterisk},
																																																																																																																																		_1: {
																																																																																																																																			ctor: '::',
																																																																																																																																			_0: {ctor: '_Tuple2', _0: 171, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Plus},
																																																																																																																																			_1: {
																																																																																																																																				ctor: '::',
																																																																																																																																				_0: {ctor: '_Tuple2', _0: 172, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Pipe},
																																																																																																																																				_1: {
																																																																																																																																					ctor: '::',
																																																																																																																																					_0: {ctor: '_Tuple2', _0: 173, _1: _ohanhi$keyboard_extra$Keyboard_Extra$HyphenMinus},
																																																																																																																																					_1: {
																																																																																																																																						ctor: '::',
																																																																																																																																						_0: {ctor: '_Tuple2', _0: 174, _1: _ohanhi$keyboard_extra$Keyboard_Extra$OpenCurlyBracket},
																																																																																																																																						_1: {
																																																																																																																																							ctor: '::',
																																																																																																																																							_0: {ctor: '_Tuple2', _0: 175, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CloseCurlyBracket},
																																																																																																																																							_1: {
																																																																																																																																								ctor: '::',
																																																																																																																																								_0: {ctor: '_Tuple2', _0: 176, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Tilde},
																																																																																																																																								_1: {
																																																																																																																																									ctor: '::',
																																																																																																																																									_0: {ctor: '_Tuple2', _0: 181, _1: _ohanhi$keyboard_extra$Keyboard_Extra$VolumeMute},
																																																																																																																																									_1: {
																																																																																																																																										ctor: '::',
																																																																																																																																										_0: {ctor: '_Tuple2', _0: 182, _1: _ohanhi$keyboard_extra$Keyboard_Extra$VolumeDown},
																																																																																																																																										_1: {
																																																																																																																																											ctor: '::',
																																																																																																																																											_0: {ctor: '_Tuple2', _0: 183, _1: _ohanhi$keyboard_extra$Keyboard_Extra$VolumeUp},
																																																																																																																																											_1: {
																																																																																																																																												ctor: '::',
																																																																																																																																												_0: {ctor: '_Tuple2', _0: 186, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Semicolon},
																																																																																																																																												_1: {
																																																																																																																																													ctor: '::',
																																																																																																																																													_0: {ctor: '_Tuple2', _0: 187, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Equals},
																																																																																																																																													_1: {
																																																																																																																																														ctor: '::',
																																																																																																																																														_0: {ctor: '_Tuple2', _0: 188, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Comma},
																																																																																																																																														_1: {
																																																																																																																																															ctor: '::',
																																																																																																																																															_0: {ctor: '_Tuple2', _0: 189, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Minus},
																																																																																																																																															_1: {
																																																																																																																																																ctor: '::',
																																																																																																																																																_0: {ctor: '_Tuple2', _0: 190, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Period},
																																																																																																																																																_1: {
																																																																																																																																																	ctor: '::',
																																																																																																																																																	_0: {ctor: '_Tuple2', _0: 191, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Slash},
																																																																																																																																																	_1: {
																																																																																																																																																		ctor: '::',
																																																																																																																																																		_0: {ctor: '_Tuple2', _0: 192, _1: _ohanhi$keyboard_extra$Keyboard_Extra$BackQuote},
																																																																																																																																																		_1: {
																																																																																																																																																			ctor: '::',
																																																																																																																																																			_0: {ctor: '_Tuple2', _0: 219, _1: _ohanhi$keyboard_extra$Keyboard_Extra$OpenBracket},
																																																																																																																																																			_1: {
																																																																																																																																																				ctor: '::',
																																																																																																																																																				_0: {ctor: '_Tuple2', _0: 220, _1: _ohanhi$keyboard_extra$Keyboard_Extra$BackSlash},
																																																																																																																																																				_1: {
																																																																																																																																																					ctor: '::',
																																																																																																																																																					_0: {ctor: '_Tuple2', _0: 221, _1: _ohanhi$keyboard_extra$Keyboard_Extra$CloseBracket},
																																																																																																																																																					_1: {
																																																																																																																																																						ctor: '::',
																																																																																																																																																						_0: {ctor: '_Tuple2', _0: 222, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Quote},
																																																																																																																																																						_1: {
																																																																																																																																																							ctor: '::',
																																																																																																																																																							_0: {ctor: '_Tuple2', _0: 224, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Meta},
																																																																																																																																																							_1: {
																																																																																																																																																								ctor: '::',
																																																																																																																																																								_0: {ctor: '_Tuple2', _0: 225, _1: _ohanhi$keyboard_extra$Keyboard_Extra$Altgr},
																																																																																																																																																								_1: {ctor: '[]'}
																																																																																																																																																							}
																																																																																																																																																						}
																																																																																																																																																					}
																																																																																																																																																				}
																																																																																																																																																			}
																																																																																																																																																		}
																																																																																																																																																	}
																																																																																																																																																}
																																																																																																																																															}
																																																																																																																																														}
																																																																																																																																													}
																																																																																																																																												}
																																																																																																																																											}
																																																																																																																																										}
																																																																																																																																									}
																																																																																																																																								}
																																																																																																																																							}
																																																																																																																																						}
																																																																																																																																					}
																																																																																																																																				}
																																																																																																																																			}
																																																																																																																																		}
																																																																																																																																	}
																																																																																																																																}
																																																																																																																															}
																																																																																																																														}
																																																																																																																													}
																																																																																																																												}
																																																																																																																											}
																																																																																																																										}
																																																																																																																									}
																																																																																																																								}
																																																																																																																							}
																																																																																																																						}
																																																																																																																					}
																																																																																																																				}
																																																																																																																			}
																																																																																																																		}
																																																																																																																	}
																																																																																																																}
																																																																																																															}
																																																																																																														}
																																																																																																													}
																																																																																																												}
																																																																																																											}
																																																																																																										}
																																																																																																									}
																																																																																																								}
																																																																																																							}
																																																																																																						}
																																																																																																					}
																																																																																																				}
																																																																																																			}
																																																																																																		}
																																																																																																	}
																																																																																																}
																																																																																															}
																																																																																														}
																																																																																													}
																																																																																												}
																																																																																											}
																																																																																										}
																																																																																									}
																																																																																								}
																																																																																							}
																																																																																						}
																																																																																					}
																																																																																				}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _ohanhi$keyboard_extra$Keyboard_Extra$toCode = function (key) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		0,
		_elm_lang$core$List$head(
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Tuple$first,
				A2(
					_elm_lang$core$List$filter,
					function (_p13) {
						return A2(
							F2(
								function (x, y) {
									return _elm_lang$core$Native_Utils.eq(x, y);
								}),
							key,
							_elm_lang$core$Tuple$second(_p13));
					},
					_ohanhi$keyboard_extra$Keyboard_Extra$codeBook))));
};
var _ohanhi$keyboard_extra$Keyboard_Extra$forceRelease = F2(
	function (keyList, _p14) {
		var _p15 = _p14;
		return _ohanhi$keyboard_extra$Keyboard_Extra$State(
			A3(
				_elm_lang$core$List$foldl,
				F2(
					function (toRemove, pressed) {
						return A2(_ohanhi$keyboard_extra$Keyboard_Extra$remove, toRemove, pressed);
					}),
				_p15._0,
				A2(_elm_lang$core$List$map, _ohanhi$keyboard_extra$Keyboard_Extra$toCode, keyList)));
	});
var _ohanhi$keyboard_extra$Keyboard_Extra$isPressed = F2(
	function (key, _p16) {
		var _p17 = _p16;
		return A2(
			_elm_lang$core$List$member,
			_ohanhi$keyboard_extra$Keyboard_Extra$toCode(key),
			_p17._0);
	});
var _ohanhi$keyboard_extra$Keyboard_Extra$codeDict = _elm_lang$core$Dict$fromList(_ohanhi$keyboard_extra$Keyboard_Extra$codeBook);
var _ohanhi$keyboard_extra$Keyboard_Extra$fromCode = function (code) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		_ohanhi$keyboard_extra$Keyboard_Extra$Other,
		A2(_elm_lang$core$Dict$get, code, _ohanhi$keyboard_extra$Keyboard_Extra$codeDict));
};
var _ohanhi$keyboard_extra$Keyboard_Extra$downs = function (toMsg) {
	return _elm_lang$keyboard$Keyboard$downs(
		function (_p18) {
			return toMsg(
				_ohanhi$keyboard_extra$Keyboard_Extra$fromCode(_p18));
		});
};
var _ohanhi$keyboard_extra$Keyboard_Extra$ups = function (toMsg) {
	return _elm_lang$keyboard$Keyboard$ups(
		function (_p19) {
			return toMsg(
				_ohanhi$keyboard_extra$Keyboard_Extra$fromCode(_p19));
		});
};
var _ohanhi$keyboard_extra$Keyboard_Extra$updateWithKeyChange = F2(
	function (msg, _p20) {
		var _p21 = _p20;
		var _p25 = _p21._0;
		var _p22 = msg;
		if (_p22.ctor === 'Down') {
			var _p23 = _p22._0;
			var nextState = A2(_ohanhi$keyboard_extra$Keyboard_Extra$insert, _p23, _p25);
			var change = (!_elm_lang$core$Native_Utils.eq(
				_elm_lang$core$List$length(nextState),
				_elm_lang$core$List$length(_p25))) ? _elm_lang$core$Maybe$Just(
				_ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(
					_ohanhi$keyboard_extra$Keyboard_Extra$fromCode(_p23))) : _elm_lang$core$Maybe$Nothing;
			return {
				ctor: '_Tuple2',
				_0: _ohanhi$keyboard_extra$Keyboard_Extra$State(nextState),
				_1: change
			};
		} else {
			var _p24 = _p22._0;
			var nextState = A2(_ohanhi$keyboard_extra$Keyboard_Extra$remove, _p24, _p25);
			var change = (!_elm_lang$core$Native_Utils.eq(
				_elm_lang$core$List$length(nextState),
				_elm_lang$core$List$length(_p25))) ? _elm_lang$core$Maybe$Just(
				_ohanhi$keyboard_extra$Keyboard_Extra$KeyUp(
					_ohanhi$keyboard_extra$Keyboard_Extra$fromCode(_p24))) : _elm_lang$core$Maybe$Nothing;
			return {
				ctor: '_Tuple2',
				_0: _ohanhi$keyboard_extra$Keyboard_Extra$State(nextState),
				_1: change
			};
		}
	});
var _ohanhi$keyboard_extra$Keyboard_Extra$pressedDown = function (_p26) {
	var _p27 = _p26;
	return A2(_elm_lang$core$List$map, _ohanhi$keyboard_extra$Keyboard_Extra$fromCode, _p27._0);
};
var _ohanhi$keyboard_extra$Keyboard_Extra$targetKey = A2(
	_elm_lang$core$Json_Decode$map,
	_ohanhi$keyboard_extra$Keyboard_Extra$fromCode,
	A2(_elm_lang$core$Json_Decode$field, 'keyCode', _elm_lang$core$Json_Decode$int));

var _mordrax$cotwelm$Input$playerKeymap = function (screen) {
	var _p0 = screen;
	switch (_p0.ctor) {
		case 'MapScreen':
			return _eeue56$elm_all_dict$EveryDict$fromList(
				{
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: {
							ctor: '_Tuple2',
							_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$ArrowUp),
							_1: false
						},
						_1: _mordrax$cotwelm$Game_Types$Move(_mordrax$cotwelm$Utils_Direction$S)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: {
								ctor: '_Tuple2',
								_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$ArrowRight),
								_1: false
							},
							_1: _mordrax$cotwelm$Game_Types$Move(_mordrax$cotwelm$Utils_Direction$E)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: {
									ctor: '_Tuple2',
									_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$ArrowDown),
									_1: false
								},
								_1: _mordrax$cotwelm$Game_Types$Move(_mordrax$cotwelm$Utils_Direction$N)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: {
										ctor: '_Tuple2',
										_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$ArrowLeft),
										_1: false
									},
									_1: _mordrax$cotwelm$Game_Types$Move(_mordrax$cotwelm$Utils_Direction$W)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: {
											ctor: '_Tuple2',
											_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$Numpad1),
											_1: false
										},
										_1: _mordrax$cotwelm$Game_Types$Move(_mordrax$cotwelm$Utils_Direction$NW)
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: {
												ctor: '_Tuple2',
												_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$End),
												_1: false
											},
											_1: _mordrax$cotwelm$Game_Types$Move(_mordrax$cotwelm$Utils_Direction$NW)
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: {
													ctor: '_Tuple2',
													_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$Numpad2),
													_1: false
												},
												_1: _mordrax$cotwelm$Game_Types$Move(_mordrax$cotwelm$Utils_Direction$N)
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: {
														ctor: '_Tuple2',
														_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$Numpad3),
														_1: false
													},
													_1: _mordrax$cotwelm$Game_Types$Move(_mordrax$cotwelm$Utils_Direction$NE)
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: {
															ctor: '_Tuple2',
															_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$PageDown),
															_1: false
														},
														_1: _mordrax$cotwelm$Game_Types$Move(_mordrax$cotwelm$Utils_Direction$NE)
													},
													_1: {
														ctor: '::',
														_0: {
															ctor: '_Tuple2',
															_0: {
																ctor: '_Tuple2',
																_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$Numpad4),
																_1: false
															},
															_1: _mordrax$cotwelm$Game_Types$Move(_mordrax$cotwelm$Utils_Direction$W)
														},
														_1: {
															ctor: '::',
															_0: {
																ctor: '_Tuple2',
																_0: {
																	ctor: '_Tuple2',
																	_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$Numpad5),
																	_1: false
																},
																_1: _mordrax$cotwelm$Game_Types$WaitATurn(false)
															},
															_1: {
																ctor: '::',
																_0: {
																	ctor: '_Tuple2',
																	_0: {
																		ctor: '_Tuple2',
																		_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$Numpad6),
																		_1: false
																	},
																	_1: _mordrax$cotwelm$Game_Types$Move(_mordrax$cotwelm$Utils_Direction$E)
																},
																_1: {
																	ctor: '::',
																	_0: {
																		ctor: '_Tuple2',
																		_0: {
																			ctor: '_Tuple2',
																			_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$Numpad7),
																			_1: false
																		},
																		_1: _mordrax$cotwelm$Game_Types$Move(_mordrax$cotwelm$Utils_Direction$SW)
																	},
																	_1: {
																		ctor: '::',
																		_0: {
																			ctor: '_Tuple2',
																			_0: {
																				ctor: '_Tuple2',
																				_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$Home),
																				_1: false
																			},
																			_1: _mordrax$cotwelm$Game_Types$Move(_mordrax$cotwelm$Utils_Direction$SW)
																		},
																		_1: {
																			ctor: '::',
																			_0: {
																				ctor: '_Tuple2',
																				_0: {
																					ctor: '_Tuple2',
																					_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$Numpad8),
																					_1: false
																				},
																				_1: _mordrax$cotwelm$Game_Types$Move(_mordrax$cotwelm$Utils_Direction$S)
																			},
																			_1: {
																				ctor: '::',
																				_0: {
																					ctor: '_Tuple2',
																					_0: {
																						ctor: '_Tuple2',
																						_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$Numpad9),
																						_1: false
																					},
																					_1: _mordrax$cotwelm$Game_Types$Move(_mordrax$cotwelm$Utils_Direction$SE)
																				},
																				_1: {
																					ctor: '::',
																					_0: {
																						ctor: '_Tuple2',
																						_0: {
																							ctor: '_Tuple2',
																							_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$PageUp),
																							_1: false
																						},
																						_1: _mordrax$cotwelm$Game_Types$Move(_mordrax$cotwelm$Utils_Direction$SE)
																					},
																					_1: {
																						ctor: '::',
																						_0: {
																							ctor: '_Tuple2',
																							_0: {
																								ctor: '_Tuple2',
																								_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$ArrowUp),
																								_1: true
																							},
																							_1: _mordrax$cotwelm$Game_Types$Walk(_mordrax$cotwelm$Utils_Direction$S)
																						},
																						_1: {
																							ctor: '::',
																							_0: {
																								ctor: '_Tuple2',
																								_0: {
																									ctor: '_Tuple2',
																									_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$ArrowRight),
																									_1: true
																								},
																								_1: _mordrax$cotwelm$Game_Types$Walk(_mordrax$cotwelm$Utils_Direction$E)
																							},
																							_1: {
																								ctor: '::',
																								_0: {
																									ctor: '_Tuple2',
																									_0: {
																										ctor: '_Tuple2',
																										_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$ArrowDown),
																										_1: true
																									},
																									_1: _mordrax$cotwelm$Game_Types$Walk(_mordrax$cotwelm$Utils_Direction$N)
																								},
																								_1: {
																									ctor: '::',
																									_0: {
																										ctor: '_Tuple2',
																										_0: {
																											ctor: '_Tuple2',
																											_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$ArrowLeft),
																											_1: true
																										},
																										_1: _mordrax$cotwelm$Game_Types$Walk(_mordrax$cotwelm$Utils_Direction$W)
																									},
																									_1: {
																										ctor: '::',
																										_0: {
																											ctor: '_Tuple2',
																											_0: {
																												ctor: '_Tuple2',
																												_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$Numpad1),
																												_1: true
																											},
																											_1: _mordrax$cotwelm$Game_Types$Walk(_mordrax$cotwelm$Utils_Direction$NW)
																										},
																										_1: {
																											ctor: '::',
																											_0: {
																												ctor: '_Tuple2',
																												_0: {
																													ctor: '_Tuple2',
																													_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$End),
																													_1: true
																												},
																												_1: _mordrax$cotwelm$Game_Types$Walk(_mordrax$cotwelm$Utils_Direction$NW)
																											},
																											_1: {
																												ctor: '::',
																												_0: {
																													ctor: '_Tuple2',
																													_0: {
																														ctor: '_Tuple2',
																														_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$Numpad2),
																														_1: true
																													},
																													_1: _mordrax$cotwelm$Game_Types$Walk(_mordrax$cotwelm$Utils_Direction$N)
																												},
																												_1: {
																													ctor: '::',
																													_0: {
																														ctor: '_Tuple2',
																														_0: {
																															ctor: '_Tuple2',
																															_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$Numpad3),
																															_1: true
																														},
																														_1: _mordrax$cotwelm$Game_Types$Walk(_mordrax$cotwelm$Utils_Direction$NE)
																													},
																													_1: {
																														ctor: '::',
																														_0: {
																															ctor: '_Tuple2',
																															_0: {
																																ctor: '_Tuple2',
																																_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$PageDown),
																																_1: true
																															},
																															_1: _mordrax$cotwelm$Game_Types$Walk(_mordrax$cotwelm$Utils_Direction$NE)
																														},
																														_1: {
																															ctor: '::',
																															_0: {
																																ctor: '_Tuple2',
																																_0: {
																																	ctor: '_Tuple2',
																																	_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$Numpad4),
																																	_1: true
																																},
																																_1: _mordrax$cotwelm$Game_Types$Walk(_mordrax$cotwelm$Utils_Direction$W)
																															},
																															_1: {
																																ctor: '::',
																																_0: {
																																	ctor: '_Tuple2',
																																	_0: {
																																		ctor: '_Tuple2',
																																		_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$Numpad5),
																																		_1: true
																																	},
																																	_1: _mordrax$cotwelm$Game_Types$WaitATurn(true)
																																},
																																_1: {
																																	ctor: '::',
																																	_0: {
																																		ctor: '_Tuple2',
																																		_0: {
																																			ctor: '_Tuple2',
																																			_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$Numpad6),
																																			_1: true
																																		},
																																		_1: _mordrax$cotwelm$Game_Types$Walk(_mordrax$cotwelm$Utils_Direction$E)
																																	},
																																	_1: {
																																		ctor: '::',
																																		_0: {
																																			ctor: '_Tuple2',
																																			_0: {
																																				ctor: '_Tuple2',
																																				_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$Numpad7),
																																				_1: true
																																			},
																																			_1: _mordrax$cotwelm$Game_Types$Walk(_mordrax$cotwelm$Utils_Direction$SW)
																																		},
																																		_1: {
																																			ctor: '::',
																																			_0: {
																																				ctor: '_Tuple2',
																																				_0: {
																																					ctor: '_Tuple2',
																																					_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$Home),
																																					_1: true
																																				},
																																				_1: _mordrax$cotwelm$Game_Types$Walk(_mordrax$cotwelm$Utils_Direction$SW)
																																			},
																																			_1: {
																																				ctor: '::',
																																				_0: {
																																					ctor: '_Tuple2',
																																					_0: {
																																						ctor: '_Tuple2',
																																						_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$Numpad8),
																																						_1: true
																																					},
																																					_1: _mordrax$cotwelm$Game_Types$Walk(_mordrax$cotwelm$Utils_Direction$S)
																																				},
																																				_1: {
																																					ctor: '::',
																																					_0: {
																																						ctor: '_Tuple2',
																																						_0: {
																																							ctor: '_Tuple2',
																																							_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$Numpad9),
																																							_1: true
																																						},
																																						_1: _mordrax$cotwelm$Game_Types$Walk(_mordrax$cotwelm$Utils_Direction$SE)
																																					},
																																					_1: {
																																						ctor: '::',
																																						_0: {
																																							ctor: '_Tuple2',
																																							_0: {
																																								ctor: '_Tuple2',
																																								_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$PageUp),
																																								_1: true
																																							},
																																							_1: _mordrax$cotwelm$Game_Types$Walk(_mordrax$cotwelm$Utils_Direction$SE)
																																						},
																																						_1: {
																																							ctor: '::',
																																							_0: {
																																								ctor: '_Tuple2',
																																								_0: {
																																									ctor: '_Tuple2',
																																									_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyUp(_ohanhi$keyboard_extra$Keyboard_Extra$Escape),
																																									_1: false
																																								},
																																								_1: _mordrax$cotwelm$Game_Types$GoToScreen(_mordrax$cotwelm$Game_Types$MapScreen)
																																							},
																																							_1: {
																																								ctor: '::',
																																								_0: {
																																									ctor: '_Tuple2',
																																									_0: {
																																										ctor: '_Tuple2',
																																										_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyUp(_ohanhi$keyboard_extra$Keyboard_Extra$CharI),
																																										_1: false
																																									},
																																									_1: _mordrax$cotwelm$Game_Types$OpenInventory
																																								},
																																								_1: {
																																									ctor: '::',
																																									_0: {
																																										ctor: '_Tuple2',
																																										_0: {
																																											ctor: '_Tuple2',
																																											_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$Period),
																																											_1: true
																																										},
																																										_1: _mordrax$cotwelm$Game_Types$GoDownstairs
																																									},
																																									_1: {
																																										ctor: '::',
																																										_0: {
																																											ctor: '_Tuple2',
																																											_0: {
																																												ctor: '_Tuple2',
																																												_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$Comma),
																																												_1: true
																																											},
																																											_1: _mordrax$cotwelm$Game_Types$GoUpstairs
																																										},
																																										_1: {
																																											ctor: '::',
																																											_0: {
																																												ctor: '_Tuple2',
																																												_0: {
																																													ctor: '_Tuple2',
																																													_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$CharG),
																																													_1: false
																																												},
																																												_1: _mordrax$cotwelm$Game_Types$Pickup
																																											},
																																											_1: {
																																												ctor: '::',
																																												_0: {
																																													ctor: '_Tuple2',
																																													_0: {
																																														ctor: '_Tuple2',
																																														_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$Period),
																																														_1: false
																																													},
																																													_1: _mordrax$cotwelm$Game_Types$WaitATurn(false)
																																												},
																																												_1: {
																																													ctor: '::',
																																													_0: {
																																														ctor: '_Tuple2',
																																														_0: {
																																															ctor: '_Tuple2',
																																															_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$CharC),
																																															_1: false
																																														},
																																														_1: _mordrax$cotwelm$Game_Types$GoToScreen(_mordrax$cotwelm$Game_Types$CharacterInfoScreen)
																																													},
																																													_1: {
																																														ctor: '::',
																																														_0: {
																																															ctor: '_Tuple2',
																																															_0: {
																																																ctor: '_Tuple2',
																																																_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyDown(_ohanhi$keyboard_extra$Keyboard_Extra$CharL),
																																																_1: false
																																															},
																																															_1: _mordrax$cotwelm$Game_Types$Look
																																														},
																																														_1: {ctor: '[]'}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				});
		case 'InventoryScreen':
			return _eeue56$elm_all_dict$EveryDict$fromList(
				{
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: {
							ctor: '_Tuple2',
							_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyUp(_ohanhi$keyboard_extra$Keyboard_Extra$Escape),
							_1: false
						},
						_1: _mordrax$cotwelm$Game_Types$GoToScreen(_mordrax$cotwelm$Game_Types$MapScreen)
					},
					_1: {ctor: '[]'}
				});
		case 'BuildingScreen':
			return _eeue56$elm_all_dict$EveryDict$fromList(
				{
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: {
							ctor: '_Tuple2',
							_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyUp(_ohanhi$keyboard_extra$Keyboard_Extra$Escape),
							_1: false
						},
						_1: _mordrax$cotwelm$Game_Types$GoToScreen(_mordrax$cotwelm$Game_Types$MapScreen)
					},
					_1: {ctor: '[]'}
				});
		case 'RipScreen':
			return _eeue56$elm_all_dict$EveryDict$fromList(
				{
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: {
							ctor: '_Tuple2',
							_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyUp(_ohanhi$keyboard_extra$Keyboard_Extra$Escape),
							_1: false
						},
						_1: _mordrax$cotwelm$Game_Types$GoToScreen(_mordrax$cotwelm$Game_Types$MapScreen)
					},
					_1: {ctor: '[]'}
				});
		default:
			return _eeue56$elm_all_dict$EveryDict$fromList(
				{
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: {
							ctor: '_Tuple2',
							_0: _ohanhi$keyboard_extra$Keyboard_Extra$KeyUp(_ohanhi$keyboard_extra$Keyboard_Extra$Escape),
							_1: false
						},
						_1: _mordrax$cotwelm$Game_Types$GoToScreen(_mordrax$cotwelm$Game_Types$MapScreen)
					},
					_1: {ctor: '[]'}
				});
	}
};
var _mordrax$cotwelm$Input$mapKeyboardEventToAction = F3(
	function (screen, state, keyChange) {
		var isShiftPressed = A2(_ohanhi$keyboard_extra$Keyboard_Extra$isPressed, _ohanhi$keyboard_extra$Keyboard_Extra$Shift, state);
		return A2(
			_eeue56$elm_all_dict$EveryDict$get,
			A2(
				_elm_lang$core$Debug$log,
				'Keypress: ',
				{ctor: '_Tuple2', _0: keyChange, _1: isShiftPressed}),
			_mordrax$cotwelm$Input$playerKeymap(screen));
	});
var _mordrax$cotwelm$Input$update = F3(
	function (msg, input, screen) {
		var _p1 = msg;
		var _p2 = A2(_ohanhi$keyboard_extra$Keyboard_Extra$updateWithKeyChange, _p1._0, input.keyboardState);
		var keyboardXState_ = _p2._0;
		var maybeKeyChange = _p2._1;
		var gameAction = A2(
			_elm_lang$core$Maybe$andThen,
			A2(_mordrax$cotwelm$Input$mapKeyboardEventToAction, screen, keyboardXState_),
			maybeKeyChange);
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				input,
				{keyboardState: keyboardXState_}),
			_1: gameAction
		};
	});
var _mordrax$cotwelm$Input$init = {keyboardState: _ohanhi$keyboard_extra$Keyboard_Extra$initialState};
var _mordrax$cotwelm$Input$Input = function (a) {
	return {keyboardState: a};
};
var _mordrax$cotwelm$Input$KeyboardExtraMsg = function (a) {
	return {ctor: 'KeyboardExtraMsg', _0: a};
};
var _mordrax$cotwelm$Input$subscription = A2(_elm_lang$core$Platform_Sub$map, _mordrax$cotwelm$Input$KeyboardExtraMsg, _ohanhi$keyboard_extra$Keyboard_Extra$subscriptions);

var _mordrax$cotwelm$Utils_DragDrop$getDisplacement = function (_p0) {
	var _p1 = _p0;
	var _p5 = _p1.position;
	var _p2 = _p1.dragging;
	if (_p2.ctor === 'Nothing') {
		return _p5;
	} else {
		var _p4 = _p2._0.start;
		var _p3 = _p2._0.current;
		return A2(_elm_lang$mouse$Mouse$Position, (_p5.x + _p3.x) - _p4.x, (_p5.y + _p3.y) - _p4.y);
	}
};
var _mordrax$cotwelm$Utils_DragDrop$view = function (_p6) {
	var _p7 = _p6;
	var _p10 = _p7._0;
	var pointerEventStyle = _elm_lang$html$Html_Attributes$style(
		{
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'pointer-events', _1: 'none'},
			_1: {ctor: '[]'}
		});
	var _p8 = function (pos) {
		return {ctor: '_Tuple2', _0: pos.x - 40, _1: pos.y - 40};
	}(
		_mordrax$cotwelm$Utils_DragDrop$getDisplacement(_p10));
	var newX = _p8._0;
	var newY = _p8._1;
	var px = function (x) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(x),
			'px');
	};
	var positionStyle = _elm_lang$html$Html_Attributes$style(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'top',
				_1: px(newY)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'left',
					_1: px(newX)
				},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'cursor', _1: 'move'},
						_1: {ctor: '[]'}
					}
				}
			}
		});
	var _p9 = _p10.dragging;
	if (_p9.ctor === 'Just') {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: positionStyle,
				_1: {
					ctor: '::',
					_0: pointerEventStyle,
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('draggable'),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: _p9._0.html,
				_1: {ctor: '[]'}
			});
	} else {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{ctor: '[]'});
	}
};
var _mordrax$cotwelm$Utils_DragDrop$target = function (_p11) {
	var _p12 = _p11;
	return _p12._0.target;
};
var _mordrax$cotwelm$Utils_DragDrop$source = function (_p13) {
	var _p14 = _p13;
	return _p14._0.source;
};
var _mordrax$cotwelm$Utils_DragDrop$Model = F4(
	function (a, b, c, d) {
		return {source: a, target: b, position: c, dragging: d};
	});
var _mordrax$cotwelm$Utils_DragDrop$Dragging = F3(
	function (a, b, c) {
		return {start: a, current: b, html: c};
	});
var _mordrax$cotwelm$Utils_DragDrop$A = function (a) {
	return {ctor: 'A', _0: a};
};
var _mordrax$cotwelm$Utils_DragDrop$init = _mordrax$cotwelm$Utils_DragDrop$A(
	{
		source: _elm_lang$core$Maybe$Nothing,
		target: _elm_lang$core$Maybe$Nothing,
		position: A2(_elm_lang$mouse$Mouse$Position, 0, 0),
		dragging: _elm_lang$core$Maybe$Nothing
	});
var _mordrax$cotwelm$Utils_DragDrop$update = F2(
	function (msg, _p15) {
		var _p16 = _p15;
		var _p20 = _p16._0;
		var atDrag = F3(
			function (source, html, pos) {
				return A4(
					_mordrax$cotwelm$Utils_DragDrop$Model,
					source,
					_p20.target,
					_p20.position,
					A2(
						_elm_lang$core$Maybe$map,
						function (_p17) {
							var _p18 = _p17;
							return A3(_mordrax$cotwelm$Utils_DragDrop$Dragging, _p18.start, pos, html);
						},
						_p20.dragging));
			});
		var startDrag = F3(
			function (source, html, pos) {
				return A4(
					_mordrax$cotwelm$Utils_DragDrop$Model,
					source,
					_p20.target,
					pos,
					_elm_lang$core$Maybe$Just(
						A3(_mordrax$cotwelm$Utils_DragDrop$Dragging, pos, pos, html)));
			});
		var _p19 = msg;
		switch (_p19.ctor) {
			case 'Start':
				return {
					ctor: '_Tuple2',
					_0: _mordrax$cotwelm$Utils_DragDrop$A(
						A3(startDrag, _p19._0, _p19._1, _p19._2)),
					_1: _elm_lang$core$Maybe$Nothing
				};
			case 'At':
				return {
					ctor: '_Tuple2',
					_0: _mordrax$cotwelm$Utils_DragDrop$A(
						A3(atDrag, _p19._0, _p19._1, _p19._2)),
					_1: _elm_lang$core$Maybe$Nothing
				};
			case 'End':
				return {
					ctor: '_Tuple2',
					_0: _mordrax$cotwelm$Utils_DragDrop$A(_p20),
					_1: _elm_lang$core$Maybe$Just(
						{ctor: '_Tuple2', _0: _p19._0, _1: _p19._1})
				};
			case 'MouseOver':
				return {
					ctor: '_Tuple2',
					_0: _mordrax$cotwelm$Utils_DragDrop$A(
						_elm_lang$core$Native_Utils.update(
							_p20,
							{target: _p19._0})),
					_1: _elm_lang$core$Maybe$Nothing
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _mordrax$cotwelm$Utils_DragDrop$A(
						_elm_lang$core$Native_Utils.update(
							_p20,
							{target: _elm_lang$core$Maybe$Nothing})),
					_1: _elm_lang$core$Maybe$Nothing
				};
		}
	});
var _mordrax$cotwelm$Utils_DragDrop$MouseLeave = {ctor: 'MouseLeave'};
var _mordrax$cotwelm$Utils_DragDrop$MouseOver = function (a) {
	return {ctor: 'MouseOver', _0: a};
};
var _mordrax$cotwelm$Utils_DragDrop$droppable = F3(
	function (dropTarget, _p21, html) {
		var _p22 = _p21;
		var _p23 = _p22._0;
		var dragDropClass = _elm_lang$html$Html_Attributes$class('dragdrop-droppable');
		var target = _elm_lang$core$Maybe$Just(dropTarget);
		var borderStyle = (_elm_lang$core$Native_Utils.eq(_p23.target, target) && (!_elm_lang$core$Native_Utils.eq(_p23.source, _elm_lang$core$Maybe$Nothing))) ? _elm_lang$html$Html_Attributes$style(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'lightblue'},
				_1: {ctor: '[]'}
			}) : _elm_lang$html$Html_Attributes$style(
			{ctor: '[]'});
		var mouseEvents = {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html_Events$on,
				'mouseover',
				_elm_lang$core$Json_Decode$succeed(
					_mordrax$cotwelm$Utils_DragDrop$MouseOver(target))),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onMouseLeave(_mordrax$cotwelm$Utils_DragDrop$MouseLeave),
				_1: {ctor: '[]'}
			}
		};
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: borderStyle,
				_1: {ctor: '::', _0: dragDropClass, _1: mouseEvents}
			},
			{
				ctor: '::',
				_0: html,
				_1: {ctor: '[]'}
			});
	});
var _mordrax$cotwelm$Utils_DragDrop$End = F3(
	function (a, b, c) {
		return {ctor: 'End', _0: a, _1: b, _2: c};
	});
var _mordrax$cotwelm$Utils_DragDrop$At = F3(
	function (a, b, c) {
		return {ctor: 'At', _0: a, _1: b, _2: c};
	});
var _mordrax$cotwelm$Utils_DragDrop$subscription = function (_p24) {
	var _p25 = _p24;
	var _p28 = _p25._0;
	var _p26 = _p28.source;
	if (_p26.ctor === 'Nothing') {
		return _elm_lang$core$Platform_Sub$none;
	} else {
		var _p27 = _p28.dragging;
		if (_p27.ctor === 'Just') {
			return _elm_lang$core$Platform_Sub$batch(
				{
					ctor: '::',
					_0: _elm_lang$mouse$Mouse$moves(
						A2(_mordrax$cotwelm$Utils_DragDrop$At, _p26, _p27._0.html)),
					_1: {
						ctor: '::',
						_0: _elm_lang$mouse$Mouse$ups(
							A2(_mordrax$cotwelm$Utils_DragDrop$End, _p28.source, _p28.target)),
						_1: {ctor: '[]'}
					}
				});
		} else {
			return _elm_lang$core$Platform_Sub$none;
		}
	}
};
var _mordrax$cotwelm$Utils_DragDrop$Start = F3(
	function (a, b, c) {
		return {ctor: 'Start', _0: a, _1: b, _2: c};
	});
var _mordrax$cotwelm$Utils_DragDrop$draggable = F3(
	function (draggableHtml, source, _p29) {
		var _p30 = _p29;
		var pointerEventStyle = function () {
			var _p31 = _p30._0.dragging;
			if (_p31.ctor === 'Just') {
				return _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'pointer-events', _1: 'none'},
						_1: {ctor: '[]'}
					});
			} else {
				return _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'pointer-events', _1: 'inherit'},
						_1: {ctor: '[]'}
					});
			}
		}();
		var onMouseDown = A3(
			_elm_lang$html$Html_Events$onWithOptions,
			'mousedown',
			{stopPropagation: true, preventDefault: true},
			A2(
				_elm_lang$core$Json_Decode$map,
				A2(
					_mordrax$cotwelm$Utils_DragDrop$Start,
					_elm_lang$core$Maybe$Just(source),
					draggableHtml),
				_elm_lang$mouse$Mouse$position));
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: onMouseDown,
				_1: {
					ctor: '::',
					_0: pointerEventStyle,
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: draggableHtml,
				_1: {ctor: '[]'}
			});
	});

var _mordrax$cotwelm$Inventory$dragSourceSameAsDropTarget = F2(
	function (dragSource, dropTarget) {
		var _p0 = {ctor: '_Tuple2', _0: dragSource, _1: dropTarget};
		_v0_3:
		do {
			if (_p0.ctor === '_Tuple2') {
				switch (_p0._0.ctor) {
					case 'DragSlot':
						if (_p0._1.ctor === 'DropEquipment') {
							return _elm_lang$core$Native_Utils.eq(_p0._0._1, _p0._1._0);
						} else {
							break _v0_3;
						}
					case 'DragPack':
						if (_p0._1.ctor === 'DropPack') {
							return true;
						} else {
							break _v0_3;
						}
					default:
						if (_p0._1.ctor === 'DropMerchant') {
							return true;
						} else {
							break _v0_3;
						}
				}
			} else {
				break _v0_3;
			}
		} while(false);
		return false;
	});
var _mordrax$cotwelm$Inventory$exit = function (inventory) {
	return {ctor: '_Tuple3', _0: inventory, _1: inventory.equipment, _2: inventory.merchant};
};
var _mordrax$cotwelm$Inventory$init = F2(
	function (merchant, equipment) {
		return {dnd: _mordrax$cotwelm$Utils_DragDrop$init, merchant: merchant, equipment: equipment};
	});
var _mordrax$cotwelm$Inventory$Inventory = F3(
	function (a, b, c) {
		return {dnd: a, merchant: b, equipment: c};
	});
var _mordrax$cotwelm$Inventory$Ground = function (a) {
	return {ctor: 'Ground', _0: a};
};
var _mordrax$cotwelm$Inventory$Shop = function (a) {
	return {ctor: 'Shop', _0: a};
};
var _mordrax$cotwelm$Inventory$transactWithMerchant = F2(
	function (item, _p1) {
		var _p2 = _p1;
		var _p5 = _p2;
		var _p4 = _p2.equipment;
		var updateModelFromPurchase = F2(
			function (shop, purse) {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						_p5,
						{
							merchant: _mordrax$cotwelm$Inventory$Shop(shop),
							equipment: A2(_mordrax$cotwelm$Equipment$setPurse, purse, _p4)
						}),
					_1: item
				};
			});
		var _p3 = _p2.merchant;
		if (_p3.ctor === 'Shop') {
			return A3(
				_elm_lang$core$Result$map2,
				updateModelFromPurchase,
				A2(_mordrax$cotwelm$Shops$remove, item, _p3._0),
				A2(
					_elm_lang$core$Result$andThen,
					_mordrax$cotwelm$Item_Purse$remove(
						_mordrax$cotwelm$Item$markupValue(item)),
					A2(
						_elm_lang$core$Result$fromMaybe,
						'Where is your purse? It doesn\'t look like you have one, or if you did... perhaps some shady fellow helped themselves to it.',
						_mordrax$cotwelm$Equipment$getPurse(_p4))));
		} else {
			var itemsWithoutItem = A3(_mordrax$cotwelm$Utils_Misc$removeFirst, item, _mordrax$cotwelm$Item$equals, _p3._0);
			return _elm_lang$core$Result$Ok(
				{
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						_p5,
						{
							merchant: _mordrax$cotwelm$Inventory$Ground(itemsWithoutItem)
						}),
					_1: item
				});
		}
	});
var _mordrax$cotwelm$Inventory$handleDrag = F2(
	function (draggable, model) {
		var _p6 = draggable;
		switch (_p6.ctor) {
			case 'DragSlot':
				var unequipRes = A2(_mordrax$cotwelm$Equipment$unequip, _p6._1, model.equipment);
				var _p7 = unequipRes;
				if (_p7.ctor === 'Ok') {
					return _elm_lang$core$Result$Ok(
						{
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{equipment: _p7._0._0}),
							_1: _p6._0
						});
				} else {
					return _elm_lang$core$Result$Err(
						_elm_lang$core$Basics$toString(_p7._0));
				}
			case 'DragPack':
				var _p9 = _p6._0;
				var _p8 = A2(_elm_lang$core$Debug$log, 'TODO: Remove item from the pack.container and return just the item', 1);
				var modelItemRemoved = _elm_lang$core$Native_Utils.update(
					model,
					{
						equipment: A2(_mordrax$cotwelm$Equipment$removeFromPack, _p9, model.equipment)
					});
				return _elm_lang$core$Result$Ok(
					{ctor: '_Tuple2', _0: modelItemRemoved, _1: _p9});
			default:
				return A2(_mordrax$cotwelm$Inventory$transactWithMerchant, _p6._0, model);
		}
	});
var _mordrax$cotwelm$Inventory$handleDrop = F3(
	function (droppable, item, inventory) {
		var resultToReturn = F2(
			function (originalInv, res) {
				var _p10 = res;
				if (_p10.ctor === 'Ok') {
					return {ctor: '_Tuple2', _0: _p10._0, _1: _mordrax$cotwelm$Comms$init};
				} else {
					return {ctor: '_Tuple2', _0: originalInv, _1: _p10._0};
				}
			});
		var _p11 = droppable;
		switch (_p11.ctor) {
			case 'DropPack':
				return A2(
					_elm_lang$core$Result$map,
					function (eq) {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								inventory,
								{equipment: eq}),
							_1: _mordrax$cotwelm$Comms$init
						};
					},
					A2(_mordrax$cotwelm$Equipment$putInPack, item, inventory.equipment));
			case 'DropEquipment':
				return A2(
					_elm_lang$core$Result$map,
					function (_p12) {
						var _p13 = _p12;
						var _p14 = _p13._1;
						if (_p14.ctor === 'Nothing') {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									inventory,
									{equipment: _p13._0}),
								_1: A2(
									_mordrax$cotwelm$Comms$addMessage,
									_mordrax$cotwelm$Message$good(_p13._2),
									_mordrax$cotwelm$Comms$init)
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: inventory,
								_1: A2(
									_mordrax$cotwelm$Comms$addMessage,
									_mordrax$cotwelm$Message$bad('The slot is not empty!'),
									_mordrax$cotwelm$Comms$init)
							};
						}
					},
					A2(
						_mordrax$cotwelm$Equipment$equip,
						{ctor: '_Tuple2', _0: _p11._0, _1: item},
						inventory.equipment));
			default:
				var sellTo = F2(
					function (shop, purse) {
						var _p15 = A3(_mordrax$cotwelm$Shops$buyFromHero, item, purse, shop);
						var shopAfterBought = _p15._0;
						var purseAfterPaid = _p15._1;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								inventory,
								{
									merchant: _mordrax$cotwelm$Inventory$Shop(shopAfterBought),
									equipment: A2(_mordrax$cotwelm$Equipment$setPurse, purseAfterPaid, inventory.equipment)
								}),
							_1: _mordrax$cotwelm$Comms$init
						};
					});
				var _p16 = _p11._0;
				if (_p16.ctor === 'Shop') {
					return A2(
						_elm_lang$core$Result$fromMaybe,
						'No purse to hold coins!',
						A2(
							_elm_lang$core$Maybe$map,
							sellTo(_p16._0),
							_mordrax$cotwelm$Equipment$getPurse(inventory.equipment)));
				} else {
					return _elm_lang$core$Result$Ok(
						{
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								inventory,
								{
									merchant: _mordrax$cotwelm$Inventory$Ground(
										{ctor: '::', _0: item, _1: _p16._0})
								}),
							_1: _mordrax$cotwelm$Comms$init
						});
				}
		}
	});
var _mordrax$cotwelm$Inventory$handleDragDrop = F3(
	function (dragSource, dropTarget, inventory) {
		var resolveDragDropResult = function (res) {
			var _p17 = res;
			if (_p17.ctor === 'Ok') {
				return _p17._0;
			} else {
				return {
					ctor: '_Tuple2',
					_0: inventory,
					_1: A2(
						_mordrax$cotwelm$Comms$addMessage,
						_mordrax$cotwelm$Message$bad(_p17._0),
						_mordrax$cotwelm$Comms$init)
				};
			}
		};
		return A2(_mordrax$cotwelm$Inventory$dragSourceSameAsDropTarget, dragSource, dropTarget) ? {ctor: '_Tuple2', _0: inventory, _1: _mordrax$cotwelm$Comms$init} : resolveDragDropResult(
			A2(
				_elm_lang$core$Result$andThen,
				function (_p18) {
					var _p19 = _p18;
					return A3(_mordrax$cotwelm$Inventory$handleDrop, dropTarget, _p19._1, _p19._0);
				},
				A2(_mordrax$cotwelm$Inventory$handleDrag, dragSource, inventory)));
	});
var _mordrax$cotwelm$Inventory$update = F2(
	function (msg, _p20) {
		var _p21 = _p20;
		var _p25 = _p21;
		var _p22 = msg;
		var modelNewDnD = _elm_lang$core$Native_Utils.update(
			_p25,
			{dnd: _mordrax$cotwelm$Utils_DragDrop$init});
		var _p23 = A2(_mordrax$cotwelm$Utils_DragDrop$update, _p22._0, _p25.dnd);
		var dnd_ = _p23._0;
		var end = _p23._1;
		var _p24 = end;
		if (_p24.ctor === 'Nothing') {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					_p25,
					{dnd: dnd_}),
				_1: _mordrax$cotwelm$Comms$init
			};
		} else {
			if (_p24._0._0.ctor === 'Nothing') {
				return {ctor: '_Tuple2', _0: modelNewDnD, _1: _mordrax$cotwelm$Comms$init};
			} else {
				if (_p24._0._1.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: modelNewDnD, _1: _mordrax$cotwelm$Comms$init};
				} else {
					return A3(_mordrax$cotwelm$Inventory$handleDragDrop, _p24._0._0._0, _p24._0._1._0, modelNewDnD);
				}
			}
		}
	});
var _mordrax$cotwelm$Inventory$DragMerchant = F2(
	function (a, b) {
		return {ctor: 'DragMerchant', _0: a, _1: b};
	});
var _mordrax$cotwelm$Inventory$DragPack = F2(
	function (a, b) {
		return {ctor: 'DragPack', _0: a, _1: b};
	});
var _mordrax$cotwelm$Inventory$DragSlot = F2(
	function (a, b) {
		return {ctor: 'DragSlot', _0: a, _1: b};
	});
var _mordrax$cotwelm$Inventory$DropMerchant = function (a) {
	return {ctor: 'DropMerchant', _0: a};
};
var _mordrax$cotwelm$Inventory$DropEquipment = function (a) {
	return {ctor: 'DropEquipment', _0: a};
};
var _mordrax$cotwelm$Inventory$DropPack = function (a) {
	return {ctor: 'DropPack', _0: a};
};
var _mordrax$cotwelm$Inventory$DnDMsg = function (a) {
	return {ctor: 'DnDMsg', _0: a};
};
var _mordrax$cotwelm$Inventory$subscription = function (_p26) {
	var _p27 = _p26;
	return A2(
		_elm_lang$core$Platform_Sub$map,
		_mordrax$cotwelm$Inventory$DnDMsg,
		_mordrax$cotwelm$Utils_DragDrop$subscription(_p27.dnd));
};

var _mordrax$cotwelm$Game_Model$initTurn = 0;
var _mordrax$cotwelm$Game_Model$setTurn = F2(
	function (turn, game) {
		return _elm_lang$core$Native_Utils.update(
			game,
			{turn: turn});
	});
var _mordrax$cotwelm$Game_Model$setInventory = F2(
	function (inventory, game) {
		return _elm_lang$core$Native_Utils.update(
			game,
			{inventory: inventory});
	});
var _mordrax$cotwelm$Game_Model$setDifficulty = F2(
	function (difficulty, game) {
		return _elm_lang$core$Native_Utils.update(
			game,
			{difficulty: difficulty});
	});
var _mordrax$cotwelm$Game_Model$setViewport = F2(
	function (viewport, game) {
		return _elm_lang$core$Native_Utils.update(
			game,
			{viewport: viewport});
	});
var _mordrax$cotwelm$Game_Model$setMessages = F2(
	function (messages, game) {
		return _elm_lang$core$Native_Utils.update(
			game,
			{messages: messages});
	});
var _mordrax$cotwelm$Game_Model$setWindowSize = F2(
	function (windowSize, game) {
		return _elm_lang$core$Native_Utils.update(
			game,
			{windowSize: windowSize});
	});
var _mordrax$cotwelm$Game_Model$setSeed = F2(
	function (seed, game) {
		return _elm_lang$core$Native_Utils.update(
			game,
			{seed: seed});
	});
var _mordrax$cotwelm$Game_Model$setShops = F2(
	function (shops, game) {
		return _elm_lang$core$Native_Utils.update(
			game,
			{shops: shops});
	});
var _mordrax$cotwelm$Game_Model$setCurrentScreen = F2(
	function (currentScreen, game) {
		return _elm_lang$core$Native_Utils.update(
			game,
			{currentScreen: currentScreen});
	});
var _mordrax$cotwelm$Game_Model$setLevel = F2(
	function (level, game) {
		return _elm_lang$core$Native_Utils.update(
			game,
			{level: level});
	});
var _mordrax$cotwelm$Game_Model$setMaps = F2(
	function (maps, game) {
		return _elm_lang$core$Native_Utils.update(
			game,
			{maps: maps});
	});
var _mordrax$cotwelm$Game_Model$setHero = F2(
	function (hero, game) {
		return _elm_lang$core$Native_Utils.update(
			game,
			{hero: hero});
	});
var _mordrax$cotwelm$Game_Model$setName = F2(
	function (name, game) {
		return _elm_lang$core$Native_Utils.update(
			game,
			{name: name});
	});
var _mordrax$cotwelm$Game_Model$Game = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return {name: a, hero: b, maps: c, level: d, currentScreen: e, shops: f, seed: g, windowSize: h, messages: i, viewport: j, difficulty: k, inventory: l, turn: m, input: n, lastMonsterToAttackHero: o, looking: p};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _mordrax$cotwelm$Game_Model$NoOp = {ctor: 'NoOp'};
var _mordrax$cotwelm$Game_Model$Died = {ctor: 'Died'};
var _mordrax$cotwelm$Game_Model$GameAction = function (a) {
	return {ctor: 'GameAction', _0: a};
};
var _mordrax$cotwelm$Game_Model$PathTo = F2(
	function (a, b) {
		return {ctor: 'PathTo', _0: a, _1: b};
	});
var _mordrax$cotwelm$Game_Model$ClickPosition = function (a) {
	return {ctor: 'ClickPosition', _0: a};
};
var _mordrax$cotwelm$Game_Model$WindowSize = function (a) {
	return {ctor: 'WindowSize', _0: a};
};
var _mordrax$cotwelm$Game_Model$InventoryMsg = function (a) {
	return {ctor: 'InventoryMsg', _0: a};
};
var _mordrax$cotwelm$Game_Model$InputMsg = function (a) {
	return {ctor: 'InputMsg', _0: a};
};
var _mordrax$cotwelm$Game_Model$State = function (a) {
	return {ctor: 'State', _0: a};
};
var _mordrax$cotwelm$Game_Model$Empty = {ctor: 'Empty'};

var _mordrax$cotwelm$Game_Pathfinding$memoisePath = F4(
	function (from, to, level, astar) {
		var newPath = A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			A2(astar, from, to));
		return {
			ctor: '_Tuple2',
			_0: A4(_mordrax$cotwelm$Game_Level$insertPath, from, to, newPath, level),
			_1: newPath
		};
	});
var _mordrax$cotwelm$Game_Pathfinding$obstructionFilter = F2(
	function (level, position) {
		var _p0 = A2(_mordrax$cotwelm$Game_Level$queryPosition, position, level);
		if ((((_p0.ctor === '_Tuple4') && (_p0._1 === false)) && (_p0._2.ctor === 'Nothing')) && (_p0._3.ctor === 'Nothing')) {
			return true;
		} else {
			return false;
		}
	});
var _mordrax$cotwelm$Game_Pathfinding$buildingAndCreaturesAllowedFilter = F2(
	function (level, position) {
		var _p1 = A2(_mordrax$cotwelm$Game_Level$queryPosition, position, level);
		if ((_p1.ctor === '_Tuple4') && (_p1._1 === false)) {
			return true;
		} else {
			return false;
		}
	});
var _mordrax$cotwelm$Game_Pathfinding$neighbours = F3(
	function (level, filter, position) {
		return _elm_lang$core$Set$fromList(
			A2(
				_elm_lang$core$List$filter,
				filter(level),
				_mordrax$cotwelm$Utils_Vector$neighbours(position)));
	});
var _mordrax$cotwelm$Game_Pathfinding$heuristic = F2(
	function (start, end) {
		var _p2 = A2(_mordrax$cotwelm$Utils_Vector$sub, start, end);
		var dx = _p2._0;
		var dy = _p2._1;
		return _elm_lang$core$Basics$sqrt(
			_elm_lang$core$Basics$toFloat(
				Math.pow(dx, 2) + Math.pow(dy, 2)));
	});
var _mordrax$cotwelm$Game_Pathfinding$findPathForClickNavigation = F3(
	function (from, to, level) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			A4(
				_krisajenkins$elm_astar$AStar$findPath,
				_mordrax$cotwelm$Game_Pathfinding$heuristic,
				A2(_mordrax$cotwelm$Game_Pathfinding$neighbours, level, _mordrax$cotwelm$Game_Pathfinding$buildingAndCreaturesAllowedFilter),
				from,
				to));
	});
var _mordrax$cotwelm$Game_Pathfinding$findPath = F3(
	function (from, to, level) {
		var astar = A2(
			_krisajenkins$elm_astar$AStar$findPath,
			_mordrax$cotwelm$Game_Pathfinding$heuristic,
			A2(_mordrax$cotwelm$Game_Pathfinding$neighbours, level, _mordrax$cotwelm$Game_Pathfinding$obstructionFilter));
		var _p3 = A3(_mordrax$cotwelm$Game_Level$getPath, from, to, level);
		if (_p3.ctor === 'Just') {
			return {
				ctor: '_Tuple2',
				_0: level,
				_1: A2(_elm_lang$core$Debug$log, 'using existing path', _p3._0)
			};
		} else {
			return A4(_mordrax$cotwelm$Game_Pathfinding$memoisePath, from, to, level, astar);
		}
	});

var _mordrax$cotwelm$Game_Collision$tileEffect = F2(
	function (tile, game) {
		return _elm_lang$core$Native_Utils.eq(tile.type_, _mordrax$cotwelm$Tile$Sign) ? _elm_lang$core$Native_Utils.update(
			game,
			{
				messages: A2(
					_mordrax$cotwelm$Message$addNeutral,
					A2(_elm_lang$core$Debug$log, 'tile description: ', tile).description,
					game.messages)
			}) : game;
	});
var _mordrax$cotwelm$Game_Collision$triggerTileEffects = function (_p0) {
	var _p1 = _p0;
	var _p3 = _p1;
	var _p2 = A2(_mordrax$cotwelm$Game_Level$queryPosition, _p1.hero.position, _p1.level);
	var maybeTile = _p2._0;
	return A2(
		_elm_lang$core$Maybe$withDefault,
		_p3,
		A2(
			_elm_lang$core$Maybe$map,
			A2(_elm_lang$core$Basics$flip, _mordrax$cotwelm$Game_Collision$tileEffect, _p3),
			maybeTile));
};
var _mordrax$cotwelm$Game_Collision$attackHero = F2(
	function (monster, _p4) {
		var _p5 = _p4;
		var _p6 = A2(
			_mgold$elm_random_pcg$Random_Pcg$step,
			A2(_mordrax$cotwelm$Game_Combat$attack, monster, _p5.hero),
			_p5.seed);
		var msg = _p6._0._0;
		var heroAfterHit = _p6._0._1;
		var seed_ = _p6._1;
		return _elm_lang$core$Native_Utils.update(
			_p5,
			{
				messages: A2(_mordrax$cotwelm$Message$addNeutral, msg, _p5.messages),
				hero: heroAfterHit,
				seed: seed_,
				lastMonsterToAttackHero: _elm_lang$core$Maybe$Just(monster)
			});
	});
var _mordrax$cotwelm$Game_Collision$pathMonster = F3(
	function (monster, hero, level) {
		var monsterFollowPath = F2(
			function (m, path) {
				return A2(
					_elm_lang$core$Maybe$withDefault,
					m,
					A2(
						_elm_lang$core$Maybe$map,
						function (step) {
							return _elm_lang$core$Native_Utils.update(
								monster,
								{position: step});
						},
						_elm_lang$core$List$head(path)));
			});
		return function (_p7) {
			var _p8 = _p7;
			return {
				ctor: '_Tuple2',
				_0: _p8._0,
				_1: A2(monsterFollowPath, monster, _p8._1)
			};
		}(
			A3(_mordrax$cotwelm$Game_Pathfinding$findPath, monster.position, hero.position, level));
	});
var _mordrax$cotwelm$Game_Collision$moveMonster = F2(
	function (monster, _p9) {
		var _p10 = _p9;
		var _p14 = _p10.hero;
		var _p13 = _p10;
		var _p11 = A3(_mordrax$cotwelm$Game_Collision$pathMonster, monster, _p14, _p13.level);
		var newLevel = _p11._0;
		var movedMonster = _p11._1;
		var obstructed = function (monster) {
			return A2(_mordrax$cotwelm$Game_Level$queryPosition, movedMonster.position, newLevel);
		};
		if (A2(_mordrax$cotwelm$Utils_Vector$adjacent, monster.position, _p14.position)) {
			return A2(_mordrax$cotwelm$Game_Collision$attackHero, monster, _p13);
		} else {
			var _p12 = obstructed(monster);
			_v4_3:
			do {
				if (_p12.ctor === '_Tuple4') {
					if (_p12._1 === true) {
						return _p13;
					} else {
						if (_p12._2.ctor === 'Just') {
							return _p13;
						} else {
							if (_p12._3.ctor === 'Just') {
								return _p13;
							} else {
								break _v4_3;
							}
						}
					}
				} else {
					break _v4_3;
				}
			} while(false);
			return A3(
				_elm_lang$core$Basics$flip,
				_mordrax$cotwelm$Game_Model$setLevel,
				_p13,
				A3(
					_elm_lang$core$Basics$flip,
					_mordrax$cotwelm$Game_Level$setMonsters,
					newLevel,
					A3(_mordrax$cotwelm$Monster$replaceMoved, monster, movedMonster, newLevel.monsters)));
		}
	});
var _mordrax$cotwelm$Game_Collision$moveMonsters = function (_p15) {
	var _p16 = _p15;
	var _p17 = _p16.hero;
	var detectionDistance = 10;
	var distance = F2(
		function (a, b) {
			return A2(_mordrax$cotwelm$Game_Pathfinding$heuristic, a.position, b.position);
		});
	var distanceToHero = F2(
		function (m1, m2) {
			return (_elm_lang$core$Native_Utils.cmp(
				A2(distance, m1, _p17),
				A2(distance, m2, _p17)) > 0) ? _elm_lang$core$Basics$GT : _elm_lang$core$Basics$LT;
		});
	var sortByDistance = function (monsters) {
		return A2(_elm_lang$core$List$sortWith, distanceToHero, monsters);
	};
	return A3(
		_elm_lang$core$List$foldl,
		_mordrax$cotwelm$Game_Collision$moveMonster,
		_p16,
		A2(
			_elm_lang$core$List$filter,
			function (monster) {
				return _elm_lang$core$Native_Utils.cmp(
					A2(distance, monster, _p17),
					detectionDistance) < 1;
			},
			sortByDistance(
				A2(
					_elm_lang$core$List$filter,
					function (monster) {
						return !_elm_lang$core$Native_Utils.eq(monster.visible, _mordrax$cotwelm$Types$Hidden);
					},
					_p16.level.monsters))));
};
var _mordrax$cotwelm$Game_Collision$enterBuilding = F2(
	function (building, _p18) {
		var _p19 = _p18;
		var _p25 = _p19.hero;
		var _p24 = _p19;
		var teleportHero = F2(
			function (position, model) {
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						hero: A2(_mordrax$cotwelm$Hero$setPosition, position, _p25)
					});
			});
		var _p20 = building.buildingType;
		switch (_p20.ctor) {
			case 'Linked':
				var _p23 = _p20._0;
				return function (_p21) {
					var _p22 = _p21;
					return _elm_lang$core$Native_Utils.update(
						_p24,
						{
							level: _p22._0,
							maps: _p22._1,
							hero: A2(_mordrax$cotwelm$Hero$setPosition, _p23.position, _p25)
						});
				}(
					A3(_mordrax$cotwelm$Game_Maps$saveLoadArea, _p19.level, _p23.area, _p19.maps));
			case 'Shop':
				return _elm_lang$core$Native_Utils.update(
					_p24,
					{
						currentScreen: _mordrax$cotwelm$Game_Types$BuildingScreen(building),
						inventory: A2(
							_mordrax$cotwelm$Inventory$init,
							_mordrax$cotwelm$Inventory$Shop(
								A2(_mordrax$cotwelm$Shops$shop, _p20._0, _p24.shops)),
							_p25.equipment)
					});
			case 'Ordinary':
				return _elm_lang$core$Native_Utils.update(
					_p24,
					{
						currentScreen: _mordrax$cotwelm$Game_Types$BuildingScreen(building)
					});
			case 'StairUp':
				return A2(teleportHero, building.position, _p24);
			default:
				return A2(teleportHero, building.position, _p24);
		}
	});
var _mordrax$cotwelm$Game_Collision$addLoot = F2(
	function (monster, _p26) {
		var _p27 = _p26;
		var dropAtPosition = F2(
			function (loot, level) {
				return A2(
					_mordrax$cotwelm$Game_Level$drop,
					{ctor: '_Tuple2', _0: monster.position, _1: loot},
					level);
			});
		var _p28 = A2(_mgold$elm_random_pcg$Random_Pcg$step, _mordrax$cotwelm$Game_Loot$generateMonsterDrop, _p27.seed);
		var loot = _p28._0;
		var seed_ = _p28._1;
		return _elm_lang$core$Native_Utils.update(
			_p27,
			{
				seed: seed_,
				level: A3(_elm_lang$core$List$foldl, dropAtPosition, _p27.level, loot)
			});
	});
var _mordrax$cotwelm$Game_Collision$addExperience = F2(
	function (monster, _p29) {
		var _p30 = _p29;
		var _p32 = _p30.hero;
		var _p31 = _p30;
		var hero_ = A2(_mordrax$cotwelm$Hero$addExperience, monster.expLevel * 15, _p32);
		var messages_ = _elm_lang$core$Native_Utils.eq(hero_.expLevel, _p32.expLevel) ? _p31.messages : A2(_mordrax$cotwelm$Message$addNeutral, 'You feel... Stronger!', _p31.messages);
		return _elm_lang$core$Native_Utils.update(
			_p31,
			{hero: hero_, messages: messages_});
	});
var _mordrax$cotwelm$Game_Collision$resolveCombat = F3(
	function (hero, monster, seed) {
		var _p33 = A2(
			_mgold$elm_random_pcg$Random_Pcg$step,
			A2(_mordrax$cotwelm$Game_Combat$attack, hero, monster),
			seed);
		var combatMsg = _p33._0._0;
		var monsterAfterBeingHit = _p33._0._1;
		var seed_ = _p33._1;
		return _mordrax$cotwelm$Stats$isDead(monster.stats) ? {ctor: '_Tuple3', _0: _elm_lang$core$Maybe$Nothing, _1: seed_, _2: combatMsg} : {
			ctor: '_Tuple3',
			_0: _elm_lang$core$Maybe$Just(monsterAfterBeingHit),
			_1: seed_,
			_2: combatMsg
		};
	});
var _mordrax$cotwelm$Game_Collision$attack = F2(
	function (monster, _p34) {
		var _p35 = _p34;
		var _p38 = _p35.level;
		var _p36 = A3(_mordrax$cotwelm$Game_Collision$resolveCombat, _p35.hero, monster, _p35.seed);
		var resolvedMonster = _p36._0;
		var seed_ = _p36._1;
		var combatMsg = _p36._2;
		var monsters_ = A2(
			_elm_lang$core$Maybe$withDefault,
			A2(_mordrax$cotwelm$Monster$remove, monster, _p38.monsters),
			A2(
				_elm_lang$core$Maybe$map,
				A2(_elm_lang$core$Basics$flip, _mordrax$cotwelm$Monster$replace, _p38.monsters),
				resolvedMonster));
		var modelAfterCombat = _elm_lang$core$Native_Utils.update(
			_p35,
			{
				seed: seed_,
				level: A2(_mordrax$cotwelm$Game_Level$setMonsters, monsters_, _p38),
				messages: A2(_mordrax$cotwelm$Message$addNeutral, combatMsg, _p35.messages)
			});
		var _p37 = resolvedMonster;
		if (_p37.ctor === 'Just') {
			return modelAfterCombat;
		} else {
			return A2(
				_mordrax$cotwelm$Game_Collision$addExperience,
				monster,
				A2(_mordrax$cotwelm$Game_Collision$addLoot, monster, modelAfterCombat));
		}
	});
var _mordrax$cotwelm$Game_Collision$autoOpenAnyDoorHeroIsOn = function (game) {
	return _elm_lang$core$Native_Utils.update(
		game,
		{
			level: A2(_mordrax$cotwelm$Game_Level$openDoor, game.hero.position, game.level)
		});
};
var _mordrax$cotwelm$Game_Collision$move = F2(
	function (dir, _p39) {
		var _p40 = _p39;
		var _p42 = _p40;
		var heroMoved = A2(_mordrax$cotwelm$Hero$move, dir, _p42.hero);
		var _p41 = A2(_mordrax$cotwelm$Game_Level$queryPosition, heroMoved.position, _p40.level);
		_v14_1:
		do {
			_v14_0:
			do {
				if (_p41._1 === true) {
					if (_p41._3.ctor === 'Just') {
						break _v14_0;
					} else {
						if (_p41._2.ctor === 'Just') {
							break _v14_1;
						} else {
							return _p42;
						}
					}
				} else {
					if (_p41._3.ctor === 'Just') {
						break _v14_0;
					} else {
						if (_p41._2.ctor === 'Just') {
							break _v14_1;
						} else {
							return _elm_lang$core$Native_Utils.update(
								_p42,
								{hero: heroMoved});
						}
					}
				}
			} while(false);
			return A2(_mordrax$cotwelm$Game_Collision$attack, _p41._3._0, _p42);
		} while(false);
		return A2(_mordrax$cotwelm$Game_Collision$enterBuilding, _p41._2._0, _p42);
	});

var _mordrax$cotwelm$Game$subscription = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _elm_lang$window$Window$resizes(
				function (x) {
					return _mordrax$cotwelm$Game_Model$WindowSize(x);
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$core$Platform_Sub$map,
					_mordrax$cotwelm$Game_Model$InventoryMsg,
					_mordrax$cotwelm$Inventory$subscription(model.inventory)),
				_1: {
					ctor: '::',
					_0: A2(_elm_lang$core$Platform_Sub$map, _mordrax$cotwelm$Game_Model$InputMsg, _mordrax$cotwelm$Input$subscription),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _mordrax$cotwelm$Game$screenWidth = function (windowSize) {
	return A2(_elm_lang$core$Basics$min, windowSize.width, 768);
};
var _mordrax$cotwelm$Game$viewport = function (_p0) {
	var _p1 = _p0;
	var _p6 = _p1.windowSize;
	var _p5 = _p1.viewport;
	var _p2 = _mordrax$cotwelm$Game_Level$size(_p1.level);
	var mapWidth = _p2._0;
	var mapHeight = _p2._1;
	var width = _mordrax$cotwelm$Game$screenWidth(_p6);
	var _p3 = {ctor: '_Tuple2', _0: (width / 2) | 0, _1: (_p6.height / 2) | 0};
	var xOff = _p3._0;
	var yOff = _p3._1;
	var tileSize = 32;
	var _p4 = A2(_mordrax$cotwelm$Utils_Vector$scale, tileSize, _p1.hero.position);
	var curX = _p4._0;
	var curY = _p4._1;
	var tolerance = tileSize * 4;
	var scroll = {
		up: _elm_lang$core$Native_Utils.cmp(_p5.y + curY, tolerance) < 1,
		down: _elm_lang$core$Native_Utils.cmp(_p5.y + curY, (((_p6.height * 4) / 5) | 0) - tolerance) > -1,
		left: _elm_lang$core$Native_Utils.cmp(_p5.x + curX, tolerance) < 1,
		right: _elm_lang$core$Native_Utils.cmp(_p5.x + curX, width - tolerance) > -1
	};
	var newX = (scroll.left || scroll.right) ? A3(_elm_lang$core$Basics$clamp, width - (mapWidth * tileSize), 0, xOff - curX) : _p5.x;
	var newY = (scroll.up || scroll.down) ? A3(_elm_lang$core$Basics$clamp, (((_p6.height * 4) / 5) | 0) - (mapHeight * tileSize), 0, yOff - curY) : _p5.y;
	return _elm_lang$core$Native_Utils.update(
		_p1,
		{
			viewport: {x: newX, y: newY}
		});
};
var _mordrax$cotwelm$Game$monstersInSight = function (_p7) {
	var _p8 = _p7;
	var inLineOfSight = F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.eq(x, y);
		})(_mordrax$cotwelm$Types$LineOfSight);
	return A2(
		_elm_lang$core$List$any,
		function (_p9) {
			return inLineOfSight(
				function (_) {
					return _.visible;
				}(_p9));
		},
		_p8.level.monsters);
};
var _mordrax$cotwelm$Game$tileHasLoot = function (_p10) {
	var _p11 = _p10;
	return A2(
		_elm_lang$core$Maybe$withDefault,
		false,
		A2(
			_elm_lang$core$Maybe$map,
			function (_p12) {
				return function (x) {
					return _elm_lang$core$Native_Utils.cmp(x, 0) > 0;
				}(
					_elm_lang$core$List$length(
						_mordrax$cotwelm$Container$list(
							function (_) {
								return _.ground;
							}(_p12))));
			},
			A2(_mordrax$cotwelm$Game_Level$getTile, _p11.hero.position, _p11.level)));
};
var _mordrax$cotwelm$Game$heroInterrupted = F2(
	function (game, direction) {
		var nextPosition = A2(
			_mordrax$cotwelm$Utils_Vector$add,
			game.hero.position,
			_mordrax$cotwelm$Utils_Vector$fromDirection(direction));
		return _mordrax$cotwelm$Game$tileHasLoot(game) || (_mordrax$cotwelm$Game$monstersInSight(game) || A2(_mordrax$cotwelm$Game_Level$obstructed, nextPosition, game.level));
	});
var _mordrax$cotwelm$Game$updateEquipmentAndMerchant = F2(
	function (_p14, _p13) {
		var _p15 = _p14;
		var _p16 = _p13;
		var _p19 = _p16.hero;
		var _p18 = _p16;
		var updateShop = function (shop) {
			return A2(_mordrax$cotwelm$Shops$updateShop, shop, _p18.shops);
		};
		var updateLevel = function (items) {
			return A3(_mordrax$cotwelm$Game_Level$updateGround, _p19.position, items, _p16.level);
		};
		var game_ = _elm_lang$core$Native_Utils.update(
			_p18,
			{
				hero: A2(_mordrax$cotwelm$Hero$setEquipment, _p15._0, _p19)
			});
		var _p17 = _p15._1;
		if (_p17.ctor === 'Ground') {
			return A2(
				_mordrax$cotwelm$Game_Model$setLevel,
				updateLevel(_p17._0),
				game_);
		} else {
			return A2(
				_mordrax$cotwelm$Game_Model$setShops,
				updateShop(_p17._0),
				game_);
		}
	});
var _mordrax$cotwelm$Game$tick = function (_p20) {
	var _p21 = _p20;
	var _p23 = _p21;
	var _p22 = A2(
		_mgold$elm_random_pcg$Random_Pcg$step,
		_mordrax$cotwelm$Shops$tick(_p21.shops),
		_p21.seed);
	var shops_ = _p22._0;
	var seed_ = _p22._1;
	return _elm_lang$core$Native_Utils.update(
		_p23,
		{
			maps: _mordrax$cotwelm$Game_Maps$tick(_p21.maps),
			shops: shops_,
			hero: _mordrax$cotwelm$Hero$tick(_p21.hero),
			seed: seed_,
			messages: _mordrax$cotwelm$Message$tick(_p23.messages),
			turn: _p23.turn + 1
		});
};
var _mordrax$cotwelm$Game$updateFOV = function (_p24) {
	var _p25 = _p24;
	return A3(
		_elm_lang$core$Basics$flip,
		_mordrax$cotwelm$Game_Model$setLevel,
		_p25,
		A2(_mordrax$cotwelm$Game_Level$updateFOV, _p25.hero.position, _p25.level));
};
var _mordrax$cotwelm$Game$checkHeroAlive = function (_p26) {
	var _p27 = _p26;
	var _p28 = _p27;
	return _mordrax$cotwelm$Stats$isDead(_p27.hero.stats) ? _elm_lang$core$Native_Utils.update(
		_p28,
		{currentScreen: _mordrax$cotwelm$Game_Types$RipScreen}) : _p28;
};
var _mordrax$cotwelm$Game$actionPickup = function (_p29) {
	var _p30 = _p29;
	var _p34 = _p30.hero;
	var _p33 = _p30;
	var _p31 = A2(_mordrax$cotwelm$Game_Level$pickup, _p34.position, _p30.level);
	var levelAfterPickup = _p31._0;
	var items = _p31._1;
	var _p32 = A2(_mordrax$cotwelm$Hero$pickup, items, _p34);
	var heroWithItems = _p32._0;
	var leftOverItems = _p32._1;
	var pickMsgs = _p32._2;
	var levelWithLeftOvers = A2(
		_mordrax$cotwelm$Game_Level$drops,
		{ctor: '_Tuple2', _0: _p34.position, _1: leftOverItems},
		levelAfterPickup);
	return _elm_lang$core$Native_Utils.update(
		_p33,
		{
			level: levelWithLeftOvers,
			hero: heroWithItems,
			messages: A3(_elm_lang$core$List$foldl, _mordrax$cotwelm$Message$addNeutral, _p33.messages, pickMsgs)
		});
};
var _mordrax$cotwelm$Game$isOnStairs = F3(
	function (upOrDownStairs, position, level) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			false,
			A2(
				_elm_lang$core$Maybe$map,
				function (_p35) {
					return A2(
						F2(
							function (x, y) {
								return _elm_lang$core$Native_Utils.eq(x, y);
							}),
						position,
						function (_) {
							return _.position;
						}(_p35));
				},
				upOrDownStairs(level)));
	});
var _mordrax$cotwelm$Game$actionTakeStairs = function (_p36) {
	var _p37 = _p36;
	var _p43 = _p37.level;
	var _p42 = _p37.hero;
	var _p41 = _p37;
	var heroTakeStairs = function (stairTile) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			_p42,
			A2(
				_elm_lang$core$Maybe$map,
				function (_p38) {
					return A3(
						_elm_lang$core$Basics$flip,
						_mordrax$cotwelm$Hero$setPosition,
						_p42,
						function (_) {
							return _.position;
						}(_p38));
				},
				stairTile));
	};
	if (A3(_mordrax$cotwelm$Game$isOnStairs, _mordrax$cotwelm$Game_Level$upstairs, _p42.position, _p41.level)) {
		var _p39 = A2(_mordrax$cotwelm$Game_Maps$upstairs, _p43, _p37.maps);
		var newLevel = _p39._0;
		var newMaps = _p39._1;
		return _elm_lang$core$Native_Utils.update(
			_p41,
			{
				maps: newMaps,
				level: newLevel,
				hero: heroTakeStairs(
					_mordrax$cotwelm$Game_Level$downstairs(newLevel)),
				messages: A2(_mordrax$cotwelm$Message$addNeutral, 'You climb back up the stairs', _p41.messages)
			});
	} else {
		if (A3(_mordrax$cotwelm$Game$isOnStairs, _mordrax$cotwelm$Game_Level$downstairs, _p42.position, _p41.level)) {
			var _p40 = A2(
				_mgold$elm_random_pcg$Random_Pcg$step,
				A2(_mordrax$cotwelm$Game_Maps$downstairs, _p43, _p41.maps),
				_p41.seed);
			var newLevel = _p40._0._0;
			var newMaps = _p40._0._1;
			var seed_ = _p40._1;
			return _elm_lang$core$Native_Utils.update(
				_p41,
				{
					maps: newMaps,
					level: newLevel,
					hero: heroTakeStairs(
						_mordrax$cotwelm$Game_Level$upstairs(newLevel)),
					seed: seed_,
					messages: A2(_mordrax$cotwelm$Message$addNeutral, 'You go downstairs', _p41.messages)
				});
		} else {
			return _elm_lang$core$Native_Utils.update(
				_p41,
				{
					messages: A2(_mordrax$cotwelm$Message$addNeutral, 'You need to be on some stairs!', _p41.messages)
				});
		}
	}
};
var _mordrax$cotwelm$Game$update = F2(
	function (msg, _p44) {
		update:
		while (true) {
			var _p45 = _p44;
			var _p62 = _p45.level;
			var _p61 = _p45.hero;
			var _p60 = _p45;
			var endTurn = _mordrax$cotwelm$Game$checkHeroAlive;
			var startTurn = _mordrax$cotwelm$Game$tick;
			var refreshScreen = function (_p46) {
				return _mordrax$cotwelm$Game$viewport(
					_mordrax$cotwelm$Game$updateFOV(_p46));
			};
			var move = function (dir) {
				return function (_p47) {
					return _mordrax$cotwelm$Game_Collision$moveMonsters(
						_mordrax$cotwelm$Game_Collision$triggerTileEffects(
							_mordrax$cotwelm$Game_Collision$autoOpenAnyDoorHeroIsOn(
								A2(_mordrax$cotwelm$Game_Collision$move, dir, _p47))));
				};
			};
			var withComms = F2(
				function (comms, game) {
					return {
						ctor: '_Tuple3',
						_0: game,
						_1: _mordrax$cotwelm$Comms$attempt(comms),
						_2: false
					};
				});
			var noCmd = function (game) {
				return {ctor: '_Tuple3', _0: game, _1: _elm_lang$core$Platform_Cmd$none, _2: false};
			};
			var _p48 = msg;
			_v12_17:
			do {
				switch (_p48.ctor) {
					case 'InputMsg':
						var _p49 = A3(_mordrax$cotwelm$Input$update, _p48._0, _p60.input, _p60.currentScreen);
						var input = _p49._0;
						var maybeAction = _p49._1;
						var game_ = _elm_lang$core$Native_Utils.update(
							_p60,
							{input: input});
						var _p50 = maybeAction;
						if (_p50.ctor === 'Just') {
							var _v14 = _mordrax$cotwelm$Game_Model$GameAction(_p50._0),
								_v15 = game_;
							msg = _v14;
							_p44 = _v15;
							continue update;
						} else {
							return noCmd(game_);
						}
					case 'InventoryMsg':
						var _p55 = A2(_mordrax$cotwelm$Inventory$update, _p48._0, _p60.inventory);
						var inventory_ = _p55._0;
						var comms = _p55._1;
						return A2(
							withComms,
							A2(_mordrax$cotwelm$Comms$map, _mordrax$cotwelm$Game_Model$InventoryMsg, comms),
							_elm_lang$core$Native_Utils.update(
								_p60,
								{
									inventory: inventory_,
									messages: A3(_elm_lang$core$List$foldl, _mordrax$cotwelm$Message$add, _p60.messages, comms.messages)
								}));
					case 'WindowSize':
						return noCmd(
							_elm_lang$core$Native_Utils.update(
								_p60,
								{windowSize: _p48._0}));
					case 'ClickPosition':
						var _p56 = _p48._0;
						var isClickStairs = A3(_mordrax$cotwelm$Game$isOnStairs, _mordrax$cotwelm$Game_Level$upstairs, _p56, _p60.level) || A3(_mordrax$cotwelm$Game$isOnStairs, _mordrax$cotwelm$Game_Level$downstairs, _p56, _p60.level);
						var path = A2(
							_elm_lang$core$Debug$log,
							'Path: ',
							A3(_mordrax$cotwelm$Game_Pathfinding$findPathForClickNavigation, _p61.position, _p56, _p62));
						var _v16 = A2(_mordrax$cotwelm$Game_Model$PathTo, path, isClickStairs),
							_v17 = _p60;
						msg = _v16;
						_p44 = _v17;
						continue update;
					case 'PathTo':
						if (_p48._0.ctor === '[]') {
							return noCmd(_p60);
						} else {
							var _p58 = _p48._1;
							var dir = _mordrax$cotwelm$Utils_Vector$toDirection(
								A2(_mordrax$cotwelm$Utils_Vector$sub, _p48._0._0, _p60.hero.position));
							var _p57 = A2(
								_mordrax$cotwelm$Game$update,
								_mordrax$cotwelm$Game_Model$GameAction(
									_mordrax$cotwelm$Game_Types$Move(dir)),
								_p60);
							var modelAfterMovement = _p57._0;
							var cmdsAfterMovement = _p57._1;
							var isOnUpstairs = A3(_mordrax$cotwelm$Game$isOnStairs, _mordrax$cotwelm$Game_Level$upstairs, modelAfterMovement.hero.position, modelAfterMovement.level);
							var isGoingUpstairs = _p58 && isOnUpstairs;
							var isOnDownstairs = A3(_mordrax$cotwelm$Game$isOnStairs, _mordrax$cotwelm$Game_Level$downstairs, modelAfterMovement.hero.position, modelAfterMovement.level);
							var isGoingDownstairs = _p58 && isOnDownstairs;
							if (isGoingUpstairs) {
								var _v18 = _mordrax$cotwelm$Game_Model$GameAction(_mordrax$cotwelm$Game_Types$GoUpstairs),
									_v19 = modelAfterMovement;
								msg = _v18;
								_p44 = _v19;
								continue update;
							} else {
								if (isGoingDownstairs) {
									var _v20 = _mordrax$cotwelm$Game_Model$GameAction(_mordrax$cotwelm$Game_Types$GoDownstairs),
										_v21 = modelAfterMovement;
									msg = _v20;
									_p44 = _v21;
									continue update;
								} else {
									var _v22 = A2(_mordrax$cotwelm$Game_Model$PathTo, _p48._0._1, _p58),
										_v23 = modelAfterMovement;
									msg = _v22;
									_p44 = _v23;
									continue update;
								}
							}
						}
					case 'Died':
						return noCmd(
							_elm_lang$core$Native_Utils.update(
								_p60,
								{currentScreen: _mordrax$cotwelm$Game_Types$RipScreen}));
					case 'GameAction':
						switch (_p48._0.ctor) {
							case 'Move':
								return noCmd(
									endTurn(
										refreshScreen(
											A2(
												move,
												_p48._0._0,
												startTurn(_p60)))));
							case 'WaitATurn':
								var heroAlive = !_mordrax$cotwelm$Stats$isDead(_p60.hero.stats);
								var waitCmd = (_p48._0._0 && (_mordrax$cotwelm$Hero$injured(_p60.hero) && heroAlive)) ? A2(
									_elm_lang$core$Task$perform,
									_mordrax$cotwelm$Game_Model$GameAction,
									_elm_lang$core$Task$succeed(
										_mordrax$cotwelm$Game_Types$WaitATurn(true))) : _elm_lang$core$Platform_Cmd$none;
								return function (game_) {
									return {ctor: '_Tuple3', _0: game_, _1: waitCmd, _2: false};
								}(
									endTurn(
										refreshScreen(
											_mordrax$cotwelm$Game_Collision$moveMonsters(
												startTurn(_p60)))));
							case 'Walk':
								var _p51 = _p48._0._0;
								var nextStep = endTurn(
									A2(
										move,
										_p51,
										startTurn(_p60)));
								var cmd = A2(_mordrax$cotwelm$Game$heroInterrupted, nextStep, _p51) ? _elm_lang$core$Platform_Cmd$none : A2(
									_elm_lang$core$Task$perform,
									_mordrax$cotwelm$Game_Model$GameAction,
									_elm_lang$core$Task$succeed(
										_mordrax$cotwelm$Game_Types$Walk(_p51)));
								return {ctor: '_Tuple3', _0: nextStep, _1: cmd, _2: false};
							case 'Look':
								return noCmd(
									_elm_lang$core$Native_Utils.update(
										_p60,
										{looking: !_p60.looking}));
							case 'OpenInventory':
								var newInventory = _mordrax$cotwelm$Inventory$Ground(
									A2(_mordrax$cotwelm$Game_Level$ground, _p61.position, _p62));
								return noCmd(
									A2(
										_mordrax$cotwelm$Game_Model$setInventory,
										A2(_mordrax$cotwelm$Inventory$init, newInventory, _p61.equipment),
										A2(_mordrax$cotwelm$Game_Model$setCurrentScreen, _mordrax$cotwelm$Game_Types$InventoryScreen, _p60)));
							case 'GoUpstairs':
								return noCmd(
									endTurn(
										refreshScreen(
											_mordrax$cotwelm$Game_Collision$moveMonsters(
												_mordrax$cotwelm$Game$actionTakeStairs(
													startTurn(_p60))))));
							case 'GoDownstairs':
								return noCmd(
									endTurn(
										refreshScreen(
											_mordrax$cotwelm$Game_Collision$moveMonsters(
												_mordrax$cotwelm$Game$actionTakeStairs(
													startTurn(_p60))))));
							case 'Pickup':
								return noCmd(
									endTurn(
										_mordrax$cotwelm$Game_Collision$moveMonsters(
											_mordrax$cotwelm$Game$actionPickup(
												startTurn(_p60)))));
							case 'GoToScreen':
								switch (_p48._0._0.ctor) {
									case 'MapScreen':
										var backToMapScreen = function (model) {
											return noCmd(
												_elm_lang$core$Native_Utils.update(
													model,
													{currentScreen: _mordrax$cotwelm$Game_Types$MapScreen}));
										};
										var updatedGameFromInventory = function (inventory) {
											return function (_p52) {
												var _p53 = _p52;
												return A2(
													_mordrax$cotwelm$Game$updateEquipmentAndMerchant,
													{ctor: '_Tuple2', _0: _p53._1, _1: _p53._2},
													A2(_mordrax$cotwelm$Game_Model$setInventory, _p53._0, _p60));
											}(
												_mordrax$cotwelm$Inventory$exit(inventory));
										};
										var _p54 = _p60.currentScreen;
										switch (_p54.ctor) {
											case 'MapScreen':
												return backToMapScreen(_p60);
											case 'BuildingScreen':
												return backToMapScreen(
													updatedGameFromInventory(_p60.inventory));
											case 'InventoryScreen':
												return backToMapScreen(
													updatedGameFromInventory(_p60.inventory));
											case 'RipScreen':
												return {ctor: '_Tuple3', _0: _p60, _1: _elm_lang$core$Platform_Cmd$none, _2: true};
											default:
												return backToMapScreen(_p60);
										}
									case 'CharacterInfoScreen':
										return noCmd(
											_elm_lang$core$Native_Utils.update(
												_p60,
												{currentScreen: _mordrax$cotwelm$Game_Types$CharacterInfoScreen}));
									default:
										break _v12_17;
								}
							default:
								break _v12_17;
						}
					default:
						break _v12_17;
				}
			} while(false);
			var _p59 = A2(_elm_lang$core$Debug$log, 'This combo of screen and msg has no effect', _p48);
			return noCmd(_p60);
		}
	});
var _mordrax$cotwelm$Game$donDefaultGarb = function (hero) {
	var defaultEquipment = A2(
		_mordrax$cotwelm$Equipment$setMany_,
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: _mordrax$cotwelm$Equipment$WeaponSlot,
				_1: _mordrax$cotwelm$Item$new(
					_mordrax$cotwelm$Item_Data$ItemTypeWeapon(_mordrax$cotwelm$Item_Data$Dagger))
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: _mordrax$cotwelm$Equipment$ArmourSlot,
					_1: _mordrax$cotwelm$Item$new(
						_mordrax$cotwelm$Item_Data$ItemTypeArmour(_mordrax$cotwelm$Item_Data$ScaleMail))
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: _mordrax$cotwelm$Equipment$ShieldSlot,
						_1: _mordrax$cotwelm$Item$new(
							_mordrax$cotwelm$Item_Data$ItemTypeShield(_mordrax$cotwelm$Item_Data$LargeIronShield))
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: _mordrax$cotwelm$Equipment$HelmetSlot,
							_1: _mordrax$cotwelm$Item$new(
								_mordrax$cotwelm$Item_Data$ItemTypeHelmet(_mordrax$cotwelm$Item_Data$LeatherHelmet))
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: _mordrax$cotwelm$Equipment$GauntletsSlot,
								_1: _mordrax$cotwelm$Item$new(
									_mordrax$cotwelm$Item_Data$ItemTypeGauntlets(_mordrax$cotwelm$Item_Data$NormalGauntlets))
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: _mordrax$cotwelm$Equipment$BeltSlot,
									_1: _mordrax$cotwelm$Item$new(
										_mordrax$cotwelm$Item_Data$ItemTypeBelt(_mordrax$cotwelm$Item_Data$ThreeSlotBelt))
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: _mordrax$cotwelm$Equipment$PurseSlot,
										_1: _mordrax$cotwelm$Item$new(_mordrax$cotwelm$Item_Data$ItemTypePurse)
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: _mordrax$cotwelm$Equipment$PackSlot,
											_1: _mordrax$cotwelm$Item$new(
												_mordrax$cotwelm$Item_Data$ItemTypePack(_mordrax$cotwelm$Item_Data$MediumPack))
										},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		},
		_mordrax$cotwelm$Equipment$init);
	return _elm_lang$core$Native_Utils.update(
		hero,
		{equipment: defaultEquipment});
};
var _mordrax$cotwelm$Game$init = F3(
	function (seed, hero, difficulty) {
		var cmd = A2(
			_elm_lang$core$Task$perform,
			function (x) {
				return _mordrax$cotwelm$Game_Model$WindowSize(x);
			},
			_elm_lang$window$Window$size);
		var leatherArmour = _mordrax$cotwelm$Item$new(
			_mordrax$cotwelm$Item_Data$ItemTypeArmour(_mordrax$cotwelm$Item_Data$LeatherArmour));
		var maps = _mordrax$cotwelm$Game_Maps$init(leatherArmour);
		var level = _mordrax$cotwelm$Game_Maps$getCurrentLevel(maps);
		var _p63 = A2(_mgold$elm_random_pcg$Random_Pcg$step, _mordrax$cotwelm$Shops$init, seed);
		var shops = _p63._0;
		var seed_ = _p63._1;
		var heroWithDefaultEquipment = _mordrax$cotwelm$Game$donDefaultGarb(hero);
		return {
			ctor: '_Tuple2',
			_0: {
				name: 'A new game',
				hero: heroWithDefaultEquipment,
				maps: maps,
				currentScreen: _mordrax$cotwelm$Game_Types$MapScreen,
				shops: shops,
				level: level,
				inventory: A2(
					_mordrax$cotwelm$Inventory$init,
					_mordrax$cotwelm$Inventory$Ground(
						{ctor: '[]'}),
					_mordrax$cotwelm$Equipment$init),
				seed: seed_,
				messages: A2(_mordrax$cotwelm$Message$addNeutral, 'Welcome to castle of the winds!', _mordrax$cotwelm$Message$init),
				difficulty: difficulty,
				windowSize: {width: 640, height: 640},
				viewport: {x: 0, y: 0},
				turn: _mordrax$cotwelm$Game_Model$initTurn,
				input: _mordrax$cotwelm$Input$init,
				lastMonsterToAttackHero: _elm_lang$core$Maybe$Nothing,
				looking: false
			},
			_1: cmd
		};
	});

var _mordrax$cotwelm$SplashView$cotwSubtitleImg = A2(
	_elm_lang$html$Html$img,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$src('/assets/landing_cotw2.jpg'),
		_1: {ctor: '[]'}
	},
	{ctor: '[]'});
var _mordrax$cotwelm$SplashView$cotwTitleImg = A2(
	_elm_lang$html$Html$img,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$src('/assets/landing_cotw1.jpg'),
		_1: {ctor: '[]'}
	},
	{ctor: '[]'});
var _mordrax$cotwelm$SplashView$addStyle = F2(
	function (currentStyles, style) {
		return _elm_lang$html$Html_Attributes$style(
			_rtfeldman$elm_css$Css$asPairs(
				{ctor: '::', _0: style, _1: currentStyles}));
	});
var _mordrax$cotwelm$SplashView$styles = function (_p0) {
	return _elm_lang$html$Html_Attributes$style(
		_rtfeldman$elm_css$Css$asPairs(_p0));
};
var _mordrax$cotwelm$SplashView$Overview = {ctor: 'Overview'};
var _mordrax$cotwelm$SplashView$LoadGame = {ctor: 'LoadGame'};
var _mordrax$cotwelm$SplashView$NewGame = {ctor: 'NewGame'};
var _mordrax$cotwelm$SplashView$newLoadOverview = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _mordrax$cotwelm$SplashView$styles(
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$position(_rtfeldman$elm_css$Css$absolute),
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$bottom(
						_rtfeldman$elm_css$Css$px(15)),
					_1: {
						ctor: '::',
						_0: A2(_rtfeldman$elm_css$Css$margin2, _rtfeldman$elm_css$Css$zero, _rtfeldman$elm_css$Css$auto),
						_1: {
							ctor: '::',
							_0: _rtfeldman$elm_css$Css$width(
								_rtfeldman$elm_css$Css$pct(70)),
							_1: {
								ctor: '::',
								_0: _rtfeldman$elm_css$Css$displayFlex,
								_1: {
									ctor: '::',
									_0: _rtfeldman$elm_css$Css$justifyContent(_rtfeldman$elm_css$Css$spaceBetween),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}),
		_1: {
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('splash-screen-buttons'),
			_1: {ctor: '[]'}
		}
	},
	{
		ctor: '::',
		_0: A2(_mordrax$cotwelm$View_UI$btn, 'Start New Game', _mordrax$cotwelm$SplashView$NewGame),
		_1: {
			ctor: '::',
			_0: A2(_mordrax$cotwelm$View_UI$btn, 'Load Saved Game', _mordrax$cotwelm$SplashView$LoadGame),
			_1: {
				ctor: '::',
				_0: A2(_mordrax$cotwelm$View_UI$btn, 'Overview', _mordrax$cotwelm$SplashView$Overview),
				_1: {ctor: '[]'}
			}
		}
	});
var _mordrax$cotwelm$SplashView$view = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _mordrax$cotwelm$SplashView$styles(
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$displayFlex,
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$alignItems(_rtfeldman$elm_css$Css$center),
					_1: {
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$justifyContent(_rtfeldman$elm_css$Css$center),
						_1: {
							ctor: '::',
							_0: _rtfeldman$elm_css$Css$flexDirection(_rtfeldman$elm_css$Css$column),
							_1: {
								ctor: '::',
								_0: _rtfeldman$elm_css$Css$height(
									_rtfeldman$elm_css$Css$pct(100)),
								_1: {
									ctor: '::',
									_0: _rtfeldman$elm_css$Css$backgroundColor(
										A3(_rtfeldman$elm_css$Css$rgb, 0, 0, 0)),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: _mordrax$cotwelm$SplashView$cotwTitleImg,
		_1: {
			ctor: '::',
			_0: _mordrax$cotwelm$SplashView$cotwSubtitleImg,
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$SplashView$newLoadOverview,
				_1: {ctor: '[]'}
			}
		}
	});

var _mordrax$cotwelm$View_Difficulty$impossible = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('difficulty__impossible-outer'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$span,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('difficulty__impossible-inner'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$span,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('difficulty__impossible-inner-inner'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('!'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {ctor: '[]'}
	});
var _mordrax$cotwelm$View_Difficulty$hard = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('difficulty__hard-outer'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$i,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('difficulty__hard-inner'),
				_1: {ctor: '[]'}
			},
			{ctor: '[]'}),
		_1: {ctor: '[]'}
	});
var _mordrax$cotwelm$View_Difficulty$intermediate = A2(
	_elm_lang$html$Html$i,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('difficulty__intermediate'),
		_1: {ctor: '[]'}
	},
	{ctor: '[]'});
var _mordrax$cotwelm$View_Difficulty$easy = A2(
	_elm_lang$html$Html$i,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('difficulty__easy'),
		_1: {ctor: '[]'}
	},
	{ctor: '[]'});

var _mordrax$cotwelm$View_CharCreation$viewCustomAvatar = A2(
	_elm_lang$html$Html$div,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: _elm_lang$html$Html$text('No custom avatar'),
		_1: {ctor: '[]'}
	});
var _mordrax$cotwelm$View_CharCreation$viewNameInput = function (playerName) {
	return A2(
		_elm_lang$html$Html$input,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$name('name'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$placeholder('What word did your mother utter as you came kicking and screaming into this world?'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onInput(_mordrax$cotwelm$CharCreation$Name),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$value(playerName),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('name__input'),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		},
		{ctor: '[]'});
};
var _mordrax$cotwelm$View_CharCreation$viewName = function (playerName) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('name'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$span,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('name__label'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Character',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_mordrax$cotwelm$View_UI$nbsp,
								A2(_elm_lang$core$Basics_ops['++'], 'name:', _mordrax$cotwelm$View_UI$nbsp)))),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$View_CharCreation$viewNameInput(playerName),
				_1: {ctor: '[]'}
			}
		});
};
var _mordrax$cotwelm$View_CharCreation$styles = function (_p0) {
	return _elm_lang$html$Html_Attributes$style(
		_rtfeldman$elm_css$Css$asPairs(_p0));
};
var _mordrax$cotwelm$View_CharCreation$viewAvatar = function (gender) {
	var heroBackgroundPosition = _elm_lang$core$Native_Utils.eq(gender, _mordrax$cotwelm$Types$Male) ? A2(_rtfeldman$elm_css$Css$backgroundPosition2, _rtfeldman$elm_css$Css$zero, _rtfeldman$elm_css$Css$zero) : A2(
		_rtfeldman$elm_css$Css$backgroundPosition2,
		_rtfeldman$elm_css$Css$px(-32),
		_rtfeldman$elm_css$Css$zero);
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('avatar'),
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$View_CharCreation$styles(
					{
						ctor: '::',
						_0: heroBackgroundPosition,
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		},
		{ctor: '[]'});
};
var _mordrax$cotwelm$View_CharCreation$viewGender = function (gender) {
	return A2(
		_mordrax$cotwelm$View_UI$labeledBox,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'Character',
			A2(_elm_lang$core$Basics_ops['++'], _mordrax$cotwelm$View_UI$nbsp, 'Gender')),
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _mordrax$cotwelm$View_CharCreation$styles(
						{
							ctor: '::',
							_0: _rtfeldman$elm_css$Css$marginRight(
								_rtfeldman$elm_css$Css$px(15)),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A3(
						_mordrax$cotwelm$View_UI$radioBtn,
						'gender',
						_elm_lang$core$Native_Utils.eq(_mordrax$cotwelm$Types$Male, gender),
						_mordrax$cotwelm$CharCreation$Gender(_mordrax$cotwelm$Types$Male)),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html$text('Male'),
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A3(
							_mordrax$cotwelm$View_UI$radioBtn,
							'gender',
							_elm_lang$core$Native_Utils.eq(_mordrax$cotwelm$Types$Female, gender),
							_mordrax$cotwelm$CharCreation$Gender(_mordrax$cotwelm$Types$Female)),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Female'),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _mordrax$cotwelm$View_CharCreation$viewGenderAndAvatar = function (gender) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('gender-avatar'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _mordrax$cotwelm$View_CharCreation$viewGender(gender),
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$View_CharCreation$viewAvatar(gender),
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$View_CharCreation$viewCustomAvatar,
					_1: {ctor: '[]'}
				}
			}
		});
};
var _mordrax$cotwelm$View_CharCreation$viewDifficulty = function (difficulty) {
	var spacing = function (children) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _mordrax$cotwelm$View_CharCreation$styles(
					{
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$marginTop(
							_rtfeldman$elm_css$Css$px(10)),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			children);
	};
	var easy = A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _mordrax$cotwelm$View_Difficulty$easy,
			_1: {
				ctor: '::',
				_0: spacing(
					{
						ctor: '::',
						_0: A3(
							_mordrax$cotwelm$View_UI$radioBtn,
							'difficulty',
							_elm_lang$core$Native_Utils.eq(difficulty, _mordrax$cotwelm$Types$Easy),
							_mordrax$cotwelm$CharCreation$Difficulty(_mordrax$cotwelm$Types$Easy)),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								A2(_elm_lang$core$Basics_ops['++'], _mordrax$cotwelm$View_UI$nbsp, 'Easy')),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
	var intermediate = A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _mordrax$cotwelm$View_Difficulty$intermediate,
			_1: {
				ctor: '::',
				_0: spacing(
					{
						ctor: '::',
						_0: A3(
							_mordrax$cotwelm$View_UI$radioBtn,
							'difficulty',
							_elm_lang$core$Native_Utils.eq(difficulty, _mordrax$cotwelm$Types$Intermediate),
							_mordrax$cotwelm$CharCreation$Difficulty(_mordrax$cotwelm$Types$Intermediate)),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Intermediate'),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
	var hard = A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _mordrax$cotwelm$View_Difficulty$hard,
			_1: {
				ctor: '::',
				_0: spacing(
					{
						ctor: '::',
						_0: A3(
							_mordrax$cotwelm$View_UI$radioBtn,
							'difficulty',
							_elm_lang$core$Native_Utils.eq(difficulty, _mordrax$cotwelm$Types$Hard),
							_mordrax$cotwelm$CharCreation$Difficulty(_mordrax$cotwelm$Types$Hard)),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Difficult'),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
	var impossible = A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _mordrax$cotwelm$View_Difficulty$impossible,
			_1: {
				ctor: '::',
				_0: spacing(
					{
						ctor: '::',
						_0: A3(
							_mordrax$cotwelm$View_UI$radioBtn,
							'difficulty',
							_elm_lang$core$Native_Utils.eq(difficulty, _mordrax$cotwelm$Types$Impossible),
							_mordrax$cotwelm$CharCreation$Difficulty(_mordrax$cotwelm$Types$Impossible)),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Impossible'),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
	return A2(
		_mordrax$cotwelm$View_UI$labeledBox,
		'Game Difficulty',
		{
			ctor: '::',
			_0: easy,
			_1: {
				ctor: '::',
				_0: intermediate,
				_1: {
					ctor: '::',
					_0: hard,
					_1: {
						ctor: '::',
						_0: impossible,
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _mordrax$cotwelm$View_CharCreation$viewButtons = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _mordrax$cotwelm$View_CharCreation$styles(
			{
				ctor: '::',
				_0: A2(
					_rtfeldman$elm_css$Css$margin2,
					_rtfeldman$elm_css$Css$px(20),
					_rtfeldman$elm_css$Css$zero),
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$displayFlex,
					_1: {
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$justifyContent(_rtfeldman$elm_css$Css$spaceBetween),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('char-creation-buttons'),
			_1: {ctor: '[]'}
		}
	},
	{
		ctor: '::',
		_0: A2(_mordrax$cotwelm$View_UI$btn, 'OK', _mordrax$cotwelm$CharCreation$StartGame),
		_1: {
			ctor: '::',
			_0: A2(_mordrax$cotwelm$View_UI$btn, 'Cancel', _mordrax$cotwelm$CharCreation$StartGame),
			_1: {
				ctor: '::',
				_0: A2(_mordrax$cotwelm$View_UI$btn, 'View Icon', _mordrax$cotwelm$CharCreation$StartGame),
				_1: {
					ctor: '::',
					_0: A2(_mordrax$cotwelm$View_UI$btn, 'Help', _mordrax$cotwelm$CharCreation$StartGame),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _mordrax$cotwelm$View_CharCreation$view = function (charCreation) {
	var bgStyle = {
		ctor: '::',
		_0: _mordrax$cotwelm$View_CharCreation$styles(
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$backgroundColor(_mordrax$cotwelm$Colors$black),
				_1: {ctor: '[]'}
			}),
		_1: {ctor: '[]'}
	};
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('charCreation'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _mordrax$cotwelm$View_CharCreation$viewName(charCreation.name),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$map,
					_mordrax$cotwelm$CharCreation$Attribute,
					_mordrax$cotwelm$Attributes$view(charCreation.attributes)),
				_1: {
					ctor: '::',
					_0: _mordrax$cotwelm$View_CharCreation$viewGenderAndAvatar(charCreation.gender),
					_1: {
						ctor: '::',
						_0: _mordrax$cotwelm$View_CharCreation$viewDifficulty(charCreation.difficulty),
						_1: {
							ctor: '::',
							_0: _mordrax$cotwelm$View_CharCreation$viewButtons,
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};

var _mordrax$cotwelm$View_CharacterInfo$styles = function (_p0) {
	return _elm_lang$html$Html_Attributes$style(
		_rtfeldman$elm_css$Css$asPairs(_p0));
};
var _mordrax$cotwelm$View_CharacterInfo$view = function (_p1) {
	var _p2 = _p1;
	var _p7 = _p2.hero;
	var _p6 = _p2.difficulty;
	var icon = function () {
		var _p3 = _p6;
		switch (_p3.ctor) {
			case 'Easy':
				return _mordrax$cotwelm$View_Difficulty$easy;
			case 'Intermediate':
				return _mordrax$cotwelm$View_Difficulty$intermediate;
			case 'Hard':
				return _mordrax$cotwelm$View_Difficulty$hard;
			default:
				return _mordrax$cotwelm$View_Difficulty$impossible;
		}
	}();
	var _p4 = A2(
		_elm_lang$core$Maybe$withDefault,
		{weight: 0, bulk: 0},
		A2(
			_elm_lang$core$Maybe$map,
			function (_p5) {
				return _elm_lang$core$Tuple$first(
					_mordrax$cotwelm$Item_Pack$info(_p5));
			},
			_mordrax$cotwelm$Equipment$getPack(_p7.equipment)));
	var weight = _p4.weight;
	var bulk = _p4.bulk;
	var stats = F2(
		function (lbl, val) {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('row'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('block'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(lbl),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('block'),
								_1: {
									ctor: '::',
									_0: _mordrax$cotwelm$View_CharacterInfo$styles(
										{
											ctor: '::',
											_0: _rtfeldman$elm_css$Css$textAlign(_rtfeldman$elm_css$Css$right),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(val),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				});
		});
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class(' column'),
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$View_CharacterInfo$styles(
					{
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$maxWidth(
							_rtfeldman$elm_css$Css$px(640)),
						_1: {
							ctor: '::',
							_0: _rtfeldman$elm_css$Css$margin(_rtfeldman$elm_css$Css$auto),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('container'),
					_1: {
						ctor: '::',
						_0: _mordrax$cotwelm$View_CharacterInfo$styles(
							{
								ctor: '::',
								_0: _rtfeldman$elm_css$Css$backgroundColor(_mordrax$cotwelm$Colors$white),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('row'),
							_1: {
								ctor: '::',
								_0: _mordrax$cotwelm$View_CharacterInfo$styles(
									{
										ctor: '::',
										_0: A2(
											_rtfeldman$elm_css$Css$margin2,
											_rtfeldman$elm_css$Css$px(15),
											_rtfeldman$elm_css$Css$zero),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(_elm_lang$core$Basics_ops['++'], 'Character Name:', _mordrax$cotwelm$View_UI$nbsp)),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(_p7.name),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('row'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('column block--large'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('row'),
												_1: {
													ctor: '::',
													_0: _mordrax$cotwelm$View_CharacterInfo$styles(
														{
															ctor: '::',
															_0: _rtfeldman$elm_css$Css$justifyContent(_rtfeldman$elm_css$Css$spaceBetween),
															_1: {
																ctor: '::',
																_0: A2(
																	_rtfeldman$elm_css$Css$padding2,
																	_rtfeldman$elm_css$Css$zero,
																	_rtfeldman$elm_css$Css$px(10)),
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('column'),
														_1: {
															ctor: '::',
															_0: _mordrax$cotwelm$View_CharacterInfo$styles(
																{
																	ctor: '::',
																	_0: _rtfeldman$elm_css$Css$alignItems(_rtfeldman$elm_css$Css$center),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$div,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('row'),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _mordrax$cotwelm$View_UI$scaledBar(_p7.attributes.str),
																_1: {
																	ctor: '::',
																	_0: _mordrax$cotwelm$View_UI$greenScaledBar(_p7.attributes.str),
																	_1: {ctor: '[]'}
																}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$div,
																{
																	ctor: '::',
																	_0: _mordrax$cotwelm$View_CharacterInfo$styles(
																		{
																			ctor: '::',
																			_0: _rtfeldman$elm_css$Css$textAlign(_rtfeldman$elm_css$Css$center),
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Strength'),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$div,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('column'),
															_1: {
																ctor: '::',
																_0: _mordrax$cotwelm$View_CharacterInfo$styles(
																	{
																		ctor: '::',
																		_0: _rtfeldman$elm_css$Css$alignItems(_rtfeldman$elm_css$Css$center),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$div,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$class('row'),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _mordrax$cotwelm$View_UI$scaledBar(_p7.attributes.dex),
																	_1: {
																		ctor: '::',
																		_0: _mordrax$cotwelm$View_UI$greenScaledBar(_p7.attributes.dex),
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$div,
																	{
																		ctor: '::',
																		_0: _mordrax$cotwelm$View_CharacterInfo$styles(
																			{
																				ctor: '::',
																				_0: _rtfeldman$elm_css$Css$textAlign(_rtfeldman$elm_css$Css$center),
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Dexterity'),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$div,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('column'),
																_1: {
																	ctor: '::',
																	_0: _mordrax$cotwelm$View_CharacterInfo$styles(
																		{
																			ctor: '::',
																			_0: _rtfeldman$elm_css$Css$alignItems(_rtfeldman$elm_css$Css$center),
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}
															},
															{
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$div,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$class('row'),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: _mordrax$cotwelm$View_UI$scaledBar(_p7.attributes.$int),
																		_1: {
																			ctor: '::',
																			_0: _mordrax$cotwelm$View_UI$greenScaledBar(_p7.attributes.$int),
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$div,
																		{
																			ctor: '::',
																			_0: _mordrax$cotwelm$View_CharacterInfo$styles(
																				{
																					ctor: '::',
																					_0: _rtfeldman$elm_css$Css$textAlign(_rtfeldman$elm_css$Css$center),
																					_1: {ctor: '[]'}
																				}),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Intelligence'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$div,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$class('column'),
																	_1: {
																		ctor: '::',
																		_0: _mordrax$cotwelm$View_CharacterInfo$styles(
																			{
																				ctor: '::',
																				_0: _rtfeldman$elm_css$Css$alignItems(_rtfeldman$elm_css$Css$center),
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	}
																},
																{
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$div,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$class('row'),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: _mordrax$cotwelm$View_UI$scaledBar(_p7.attributes.con),
																			_1: {
																				ctor: '::',
																				_0: _mordrax$cotwelm$View_UI$greenScaledBar(_p7.attributes.con),
																				_1: {ctor: '[]'}
																			}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$div,
																			{
																				ctor: '::',
																				_0: _mordrax$cotwelm$View_CharacterInfo$styles(
																					{
																						ctor: '::',
																						_0: _rtfeldman$elm_css$Css$textAlign(_rtfeldman$elm_css$Css$center),
																						_1: {ctor: '[]'}
																					}),
																				_1: {ctor: '[]'}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Constitution'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('row'),
													_1: {
														ctor: '::',
														_0: _mordrax$cotwelm$View_CharacterInfo$styles(
															{
																ctor: '::',
																_0: _rtfeldman$elm_css$Css$marginTop(
																	_rtfeldman$elm_css$Css$px(20)),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$div,
														{
															ctor: '::',
															_0: _mordrax$cotwelm$View_CharacterInfo$styles(
																{
																	ctor: '::',
																	_0: _rtfeldman$elm_css$Css$flex(
																		_rtfeldman$elm_css$Css$int(2)),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: A2(
																_mordrax$cotwelm$View_UI$labeledBox,
																'Game Difficulty',
																{
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$div,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$class('row'),
																			_1: {
																				ctor: '::',
																				_0: _mordrax$cotwelm$View_CharacterInfo$styles(
																					{
																						ctor: '::',
																						_0: _rtfeldman$elm_css$Css$width(
																							_rtfeldman$elm_css$Css$pct(100)),
																						_1: {ctor: '[]'}
																					}),
																				_1: {ctor: '[]'}
																			}
																		},
																		{
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$div,
																				{
																					ctor: '::',
																					_0: _mordrax$cotwelm$View_CharacterInfo$styles(
																						{
																							ctor: '::',
																							_0: A2(
																								_rtfeldman$elm_css$Css$margin2,
																								_rtfeldman$elm_css$Css$auto,
																								_rtfeldman$elm_css$Css$px(15)),
																							_1: {ctor: '[]'}
																						}),
																					_1: {ctor: '[]'}
																				},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text(
																						_elm_lang$core$Basics$toString(_p6)),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: icon,
																				_1: {ctor: '[]'}
																			}
																		}),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$div,
															{
																ctor: '::',
																_0: _mordrax$cotwelm$View_CharacterInfo$styles(
																	{
																		ctor: '::',
																		_0: _rtfeldman$elm_css$Css$flex(
																			_rtfeldman$elm_css$Css$int(1)),
																		_1: {
																			ctor: '::',
																			_0: _rtfeldman$elm_css$Css$alignItems(_rtfeldman$elm_css$Css$center),
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {ctor: '[]'}
															},
															{ctor: '[]'}),
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('column block'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												stats,
												'Level:',
												_elm_lang$core$Basics$toString(_p7.expLevel)),
											_1: {
												ctor: '::',
												_0: A2(
													stats,
													'Experience:',
													_elm_lang$core$Basics$toString(_p7.expPoints)),
												_1: {
													ctor: '::',
													_0: A2(stats, 'Next Level:', '100'),
													_1: {
														ctor: '::',
														_0: A2(
															stats,
															'Weight:',
															_elm_lang$core$Basics$toString(weight)),
														_1: {
															ctor: '::',
															_0: A2(
																stats,
																'Bulk:',
																_elm_lang$core$Basics$toString(bulk)),
															_1: {
																ctor: '::',
																_0: A2(stats, 'Speed:', '1'),
																_1: {
																	ctor: '::',
																	_0: A2(
																		stats,
																		'Hit Points:',
																		_elm_lang$core$Basics$toString(_p7.stats.maxHP)),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			stats,
																			'Mana Points:',
																			_elm_lang$core$Basics$toString(_p7.stats.maxSP)),
																		_1: {
																			ctor: '::',
																			_0: A2(stats, 'Copper:', 'Lots!'),
																			_1: {
																				ctor: '::',
																				_0: A2(stats, 'Armour Value:', 'Vulnerable'),
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		});
};

var _mordrax$cotwelm$View_Hud$viewHUD = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('messages'),
			_1: {ctor: '[]'}
		});
};
var _mordrax$cotwelm$View_Hud$viewStat = F3(
	function (customAttributes, label, value) {
		var statValue = function (val) {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('stat__value'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(val),
					_1: {ctor: '[]'}
				});
		};
		var statLabel = function (lbl) {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('stat__label'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(lbl),
					_1: {ctor: '[]'}
				});
		};
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('game-bottom-hud__stat'),
				_1: customAttributes
			},
			{
				ctor: '::',
				_0: statLabel(label),
				_1: {
					ctor: '::',
					_0: statValue(value),
					_1: {ctor: '[]'}
				}
			});
	});
var _mordrax$cotwelm$View_Hud$viewMessages_ = F2(
	function (level, messages) {
		var viewMessage = function (msg) {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('messages__message'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'messages__message-level',
								_elm_lang$core$Basics$toString(level))),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(msg),
					_1: {ctor: '[]'}
				});
		};
		var _p0 = messages;
		if (_p0.ctor === '[]') {
			return {
				ctor: '::',
				_0: _elm_lang$html$Html$text(''),
				_1: {ctor: '[]'}
			};
		} else {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				A2(_elm_lang$core$List$map, viewMessage, _p0._0),
				A2(_mordrax$cotwelm$View_Hud$viewMessages_, level + 1, _p0._1));
		}
	});
var _mordrax$cotwelm$View_Hud$viewMessages = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('game-bottom-hud__messages'),
			_1: {ctor: '[]'}
		},
		A2(
			_mordrax$cotwelm$View_Hud$viewMessages_,
			1,
			_mordrax$cotwelm$Message$all(model.messages)));
};
var _mordrax$cotwelm$View_Hud$styles = function (_p1) {
	return _elm_lang$html$Html_Attributes$style(
		_rtfeldman$elm_css$Css$asPairs(_p1));
};
var _mordrax$cotwelm$View_Hud$viewStats = F3(
	function (expLevel, stats, turn) {
		var formattedTime = A2(
			_elm_lang$core$String$join,
			':',
			A2(
				_elm_lang$core$List$map,
				function (_p2) {
					return A3(
						_elm_lang$core$String$padLeft,
						2,
						_elm_lang$core$Native_Utils.chr('0'),
						_elm_lang$core$Basics$toString(_p2));
				},
				function (time) {
					return {
						ctor: '::',
						_0: _elm_community$elm_time$Time_DateTime$hour(time),
						_1: {
							ctor: '::',
							_0: _elm_community$elm_time$Time_DateTime$minute(time),
							_1: {
								ctor: '::',
								_0: _elm_community$elm_time$Time_DateTime$second(time),
								_1: {ctor: '[]'}
							}
						}
					};
				}(
					_elm_community$elm_time$Time_DateTime$fromTimestamp(
						_elm_lang$core$Basics$toFloat(turn) * 1000))));
		var _p3 = {
			ctor: '_Tuple2',
			_0: _mordrax$cotwelm$Stats$printHP(stats),
			_1: _mordrax$cotwelm$Stats$printSP(stats)
		};
		var ppHP = _p3._0;
		var ppSP = _p3._1;
		var spStyles = _mordrax$cotwelm$Stats$spLow(stats) ? {
			ctor: '::',
			_0: _mordrax$cotwelm$View_Hud$styles(
				{
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$color(
						A3(_rtfeldman$elm_css$Css$rgb, 255, 0, 0)),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		} : {ctor: '[]'};
		var hpStyles = _mordrax$cotwelm$Stats$hpLow(stats) ? {
			ctor: '::',
			_0: _mordrax$cotwelm$View_Hud$styles(
				{
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$color(
						A3(_rtfeldman$elm_css$Css$rgb, 255, 0, 0)),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		} : {ctor: '[]'};
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('game-bottom-hud__stats'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A3(
					_mordrax$cotwelm$View_Hud$viewStat,
					{ctor: '[]'},
					'Level',
					_elm_lang$core$Basics$toString(expLevel)),
				_1: {
					ctor: '::',
					_0: A3(_mordrax$cotwelm$View_Hud$viewStat, hpStyles, 'HP', ppHP),
					_1: {
						ctor: '::',
						_0: A3(_mordrax$cotwelm$View_Hud$viewStat, spStyles, 'Mana', ppSP),
						_1: {
							ctor: '::',
							_0: A3(
								_mordrax$cotwelm$View_Hud$viewStat,
								{ctor: '[]'},
								'Speed',
								'100% / 200%'),
							_1: {
								ctor: '::',
								_0: A3(
									_mordrax$cotwelm$View_Hud$viewStat,
									{ctor: '[]'},
									'Time',
									A2(_elm_lang$core$Basics_ops['++'], '0d, ', formattedTime)),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('A Tiny Hamlet'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			});
	});
var _mordrax$cotwelm$View_Hud$view = function (model) {
	var statsStyle = _mordrax$cotwelm$View_Hud$styles(
		{
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$height(
				_rtfeldman$elm_css$Css$px(100)),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$flexGrow(
					_rtfeldman$elm_css$Css$int(1)),
				_1: {
					ctor: '::',
					_0: A2(
						_rtfeldman$elm_css$Css$border2,
						_rtfeldman$elm_css$Css$px(1),
						_rtfeldman$elm_css$Css$solid),
					_1: {ctor: '[]'}
				}
			}
		});
	var messagesStyle = _mordrax$cotwelm$View_Hud$styles(
		{
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$height(
				_rtfeldman$elm_css$Css$px(100)),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$flexGrow(
					_rtfeldman$elm_css$Css$int(4)),
				_1: {
					ctor: '::',
					_0: A2(
						_rtfeldman$elm_css$Css$border2,
						_rtfeldman$elm_css$Css$px(1),
						_rtfeldman$elm_css$Css$solid),
					_1: {
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$overflowY(_rtfeldman$elm_css$Css$scroll),
						_1: {ctor: '[]'}
					}
				}
			}
		});
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('game-bottom-hud'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _mordrax$cotwelm$View_Hud$viewMessages(model),
			_1: {
				ctor: '::',
				_0: A3(_mordrax$cotwelm$View_Hud$viewStats, model.hero.expLevel, model.hero.stats, model.turn),
				_1: {ctor: '[]'}
			}
		});
};

var _mordrax$cotwelm$View_Inventory$viewSlot = F3(
	function (slot, dnd, equipment) {
		var draggableHtml = function (item) {
			return A2(
				_mordrax$cotwelm$Item$viewSlot,
				item,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Slot: ',
					_elm_lang$core$Basics$toString(slot)));
		};
		var drawItem = F2(
			function (item, slot) {
				return A2(
					_elm_lang$html$Html$map,
					_mordrax$cotwelm$Inventory$DnDMsg,
					A3(
						_mordrax$cotwelm$Utils_DragDrop$draggable,
						draggableHtml(item),
						A2(_mordrax$cotwelm$Inventory$DragSlot, item, slot),
						dnd));
			});
		var viewSlotName = A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('equipment__slot-name'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					_mordrax$cotwelm$Equipment$slotDisplayName(slot)),
				_1: {ctor: '[]'}
			});
		var _p0 = A2(_mordrax$cotwelm$Equipment$get, slot, equipment);
		if (_p0.ctor === 'Just') {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('equipment__slot'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(drawItem, _p0._0, slot),
					_1: {ctor: '[]'}
				});
		} else {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('equipment__slot'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$map,
						_mordrax$cotwelm$Inventory$DnDMsg,
						A3(
							_mordrax$cotwelm$Utils_DragDrop$droppable,
							_mordrax$cotwelm$Inventory$DropEquipment(slot),
							dnd,
							viewSlotName)),
					_1: {ctor: '[]'}
				});
		}
	});
var _mordrax$cotwelm$View_Inventory$viewEquipment = F2(
	function (equipment, dnd) {
		var viewEquipmentDude = A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('equipment-dude'),
				_1: {ctor: '[]'}
			},
			{ctor: '[]'});
		var viewPanel = _elm_lang$html$Html$div(
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('equipment-panel'),
				_1: {ctor: '[]'}
			});
		var viewBottomRow = _elm_lang$html$Html$div(
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('equipment__bottom-row'),
				_1: {ctor: '[]'}
			});
		var viewTopRow = _elm_lang$html$Html$div(
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('equipment__top-row'),
				_1: {ctor: '[]'}
			});
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('inventory__equipment'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: viewTopRow(
					{
						ctor: '::',
						_0: A3(_mordrax$cotwelm$View_Inventory$viewSlot, _mordrax$cotwelm$Equipment$ArmourSlot, dnd, equipment),
						_1: {
							ctor: '::',
							_0: A3(_mordrax$cotwelm$View_Inventory$viewSlot, _mordrax$cotwelm$Equipment$NeckwearSlot, dnd, equipment),
							_1: {
								ctor: '::',
								_0: A3(_mordrax$cotwelm$View_Inventory$viewSlot, _mordrax$cotwelm$Equipment$OvergarmentSlot, dnd, equipment),
								_1: {
									ctor: '::',
									_0: A3(_mordrax$cotwelm$View_Inventory$viewSlot, _mordrax$cotwelm$Equipment$HelmetSlot, dnd, equipment),
									_1: {
										ctor: '::',
										_0: A3(_mordrax$cotwelm$View_Inventory$viewSlot, _mordrax$cotwelm$Equipment$ShieldSlot, dnd, equipment),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: viewBottomRow(
						{
							ctor: '::',
							_0: viewPanel(
								{
									ctor: '::',
									_0: A3(_mordrax$cotwelm$View_Inventory$viewSlot, _mordrax$cotwelm$Equipment$BracersSlot, dnd, equipment),
									_1: {
										ctor: '::',
										_0: A3(_mordrax$cotwelm$View_Inventory$viewSlot, _mordrax$cotwelm$Equipment$WeaponSlot, dnd, equipment),
										_1: {
											ctor: '::',
											_0: A3(_mordrax$cotwelm$View_Inventory$viewSlot, _mordrax$cotwelm$Equipment$RightRingSlot, dnd, equipment),
											_1: {
												ctor: '::',
												_0: A3(_mordrax$cotwelm$View_Inventory$viewSlot, _mordrax$cotwelm$Equipment$BeltSlot, dnd, equipment),
												_1: {
													ctor: '::',
													_0: A3(_mordrax$cotwelm$View_Inventory$viewSlot, _mordrax$cotwelm$Equipment$PackSlot, dnd, equipment),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}),
							_1: {
								ctor: '::',
								_0: viewEquipmentDude,
								_1: {
									ctor: '::',
									_0: viewPanel(
										{
											ctor: '::',
											_0: A3(_mordrax$cotwelm$View_Inventory$viewSlot, _mordrax$cotwelm$Equipment$GauntletsSlot, dnd, equipment),
											_1: {
												ctor: '::',
												_0: A3(_mordrax$cotwelm$View_Inventory$viewSlot, _mordrax$cotwelm$Equipment$FreehandSlot, dnd, equipment),
												_1: {
													ctor: '::',
													_0: A3(_mordrax$cotwelm$View_Inventory$viewSlot, _mordrax$cotwelm$Equipment$LeftRingSlot, dnd, equipment),
													_1: {
														ctor: '::',
														_0: A3(_mordrax$cotwelm$View_Inventory$viewSlot, _mordrax$cotwelm$Equipment$BootsSlot, dnd, equipment),
														_1: {
															ctor: '::',
															_0: A3(_mordrax$cotwelm$View_Inventory$viewSlot, _mordrax$cotwelm$Equipment$PurseSlot, dnd, equipment),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _mordrax$cotwelm$View_Inventory$viewPackInfo = function (maybeItem) {
	var _p1 = maybeItem;
	if (_p1.ctor === 'Just') {
		var print = F3(
			function (name, a, b) {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					name,
					A2(
						_elm_lang$core$Basics_ops['++'],
						': ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(a),
							A2(
								_elm_lang$core$Basics_ops['++'],
								' / ',
								_elm_lang$core$Basics$toString(b)))));
			});
		var _p2 = _mordrax$cotwelm$Item_Pack$info(_p1._0);
		var cur = _p2._0;
		var cap = _p2._1;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			A3(print, 'Bulk', cur.bulk, cap.maxBulk),
			A2(
				_elm_lang$core$Basics_ops['++'],
				', ',
				A3(print, 'Weight', cur.weight, cap.maxWeight)));
	} else {
		return '';
	}
};
var _mordrax$cotwelm$View_Inventory$viewAsContainer_ = F3(
	function (name, attrs, children) {
		var childrenWithEmptyChild = function () {
			var _p3 = children;
			if (_p3.ctor === '[]') {
				return {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('container-group__empty-child'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Empty'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				};
			} else {
				return _p3;
			}
		}();
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('inventory__container-group'),
				_1: attrs
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('container-group__name'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(name),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('container-group__contents'),
							_1: {ctor: '[]'}
						},
						childrenWithEmptyChild),
					_1: {ctor: '[]'}
				}
			});
	});
var _mordrax$cotwelm$View_Inventory$viewAsPurse = A2(
	_mordrax$cotwelm$View_Inventory$viewAsContainer_,
	'Purse',
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('container__purse'),
		_1: {ctor: '[]'}
	});
var _mordrax$cotwelm$View_Inventory$viewPurse = function (_p4) {
	var _p5 = _p4;
	var viewCoinImg = function (coinAsString) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('coin__image'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$i,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'coins-',
								A2(_elm_lang$core$Basics_ops['++'], coinAsString, ' cotw-item'))),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			});
	};
	var viewCoinDescription = F2(
		function (coinAsString, value) {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('coin__description'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							value,
							A2(_elm_lang$core$Basics_ops['++'], ' pieces of ', coinAsString))),
					_1: {ctor: '[]'}
				});
		});
	var viewCoin = F2(
		function (coinAsString, value) {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('purse__coin'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: viewCoinImg(coinAsString),
					_1: {
						ctor: '::',
						_0: A2(
							viewCoinDescription,
							coinAsString,
							_elm_lang$core$Basics$toString(value)),
						_1: {ctor: '[]'}
					}
				});
		});
	var coinView = function (_p6) {
		var _p7 = _p6;
		return _mordrax$cotwelm$View_Inventory$viewAsPurse(
			{
				ctor: '::',
				_0: A2(viewCoin, 'copper', _p7.copper),
				_1: {
					ctor: '::',
					_0: A2(viewCoin, 'silver', _p7.silver),
					_1: {
						ctor: '::',
						_0: A2(viewCoin, 'gold', _p7.gold),
						_1: {
							ctor: '::',
							_0: A2(viewCoin, 'platinum', _p7.platinum),
							_1: {ctor: '[]'}
						}
					}
				}
			});
	};
	return A2(
		_elm_lang$core$Maybe$withDefault,
		A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{ctor: '[]'}),
		A2(
			_elm_lang$core$Maybe$map,
			coinView,
			A2(
				_elm_lang$core$Maybe$map,
				function (_) {
					return _.coins;
				},
				A2(
					_elm_lang$core$Maybe$map,
					_mordrax$cotwelm$Item$detail,
					_mordrax$cotwelm$Equipment$getPurse(_p5.equipment)))));
};
var _mordrax$cotwelm$View_Inventory$viewAsContainer = F2(
	function (name, children) {
		return A3(
			_mordrax$cotwelm$View_Inventory$viewAsContainer_,
			name,
			{ctor: '[]'},
			children);
	});
var _mordrax$cotwelm$View_Inventory$viewShop = F2(
	function (store, dnd) {
		var makeDraggable = function (item) {
			return A3(
				_mordrax$cotwelm$Utils_DragDrop$draggable,
				_mordrax$cotwelm$Item$view(item),
				A2(
					_mordrax$cotwelm$Inventory$DragMerchant,
					item,
					_mordrax$cotwelm$Inventory$Shop(store)),
				dnd);
		};
		var wares = _mordrax$cotwelm$Shops$wares(store);
		var shopDiv = A2(
			_mordrax$cotwelm$View_Inventory$viewAsContainer,
			'Store',
			A2(_elm_lang$core$List$map, makeDraggable, wares));
		return A2(
			_elm_lang$html$Html$map,
			_mordrax$cotwelm$Inventory$DnDMsg,
			A3(
				_mordrax$cotwelm$Utils_DragDrop$droppable,
				_mordrax$cotwelm$Inventory$DropMerchant(
					_mordrax$cotwelm$Inventory$Shop(store)),
				dnd,
				shopDiv));
	});
var _mordrax$cotwelm$View_Inventory$viewContainer = F2(
	function (pack, _p8) {
		var _p9 = _p8;
		var makeDraggable = function (item) {
			return A3(
				_mordrax$cotwelm$Utils_DragDrop$draggable,
				_mordrax$cotwelm$Item$view(item),
				A2(_mordrax$cotwelm$Inventory$DragPack, item, pack),
				_p9.dnd);
		};
		var items = _mordrax$cotwelm$Equipment$getPackContent(_p9.equipment);
		return A2(
			_mordrax$cotwelm$View_Inventory$viewAsContainer,
			'Pack',
			A2(_elm_lang$core$List$map, makeDraggable, items));
	});
var _mordrax$cotwelm$View_Inventory$viewPack = F2(
	function (maybePack, _p10) {
		var _p11 = _p10;
		var _p15 = _p11.dnd;
		var isDraggingPack = function () {
			var _p12 = _mordrax$cotwelm$Utils_DragDrop$source(_p15);
			if (((_p12.ctor === 'Just') && (_p12._0.ctor === 'DragSlot')) && (_p12._0._1.ctor === 'PackSlot')) {
				return true;
			} else {
				return false;
			}
		}();
		var packDiv = function (pack) {
			return A2(_mordrax$cotwelm$View_Inventory$viewContainer, pack, _p11);
		};
		var _p13 = {ctor: '_Tuple2', _0: maybePack, _1: isDraggingPack};
		_v8_2:
		do {
			if (_p13.ctor === '_Tuple2') {
				if (_p13._1 === true) {
					return A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Pack being dragged.'),
							_1: {ctor: '[]'}
						});
				} else {
					if (_p13._0.ctor === 'Just') {
						var _p14 = _p13._0._0;
						return A2(
							_elm_lang$html$Html$map,
							_mordrax$cotwelm$Inventory$DnDMsg,
							A3(
								_mordrax$cotwelm$Utils_DragDrop$droppable,
								_mordrax$cotwelm$Inventory$DropPack(_p14),
								_p15,
								packDiv(_p14)));
					} else {
						break _v8_2;
					}
				}
			} else {
				break _v8_2;
			}
		} while(false);
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('You have no pack! Equip a pack to use this space.'),
				_1: {ctor: '[]'}
			});
	});
var _mordrax$cotwelm$View_Inventory$viewGround = F2(
	function (items, dnd) {
		var makeDraggable = F2(
			function (items, item) {
				return A3(
					_mordrax$cotwelm$Utils_DragDrop$draggable,
					_mordrax$cotwelm$Item$view(item),
					A2(
						_mordrax$cotwelm$Inventory$DragMerchant,
						item,
						_mordrax$cotwelm$Inventory$Ground(items)),
					dnd);
			});
		var droppableDiv = A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('droppable'),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$List$map,
				makeDraggable(items),
				items));
		var droppableGround = A2(
			_elm_lang$html$Html$map,
			_mordrax$cotwelm$Inventory$DnDMsg,
			A3(
				_mordrax$cotwelm$Utils_DragDrop$droppable,
				_mordrax$cotwelm$Inventory$DropMerchant(
					_mordrax$cotwelm$Inventory$Ground(items)),
				dnd,
				droppableDiv));
		return A2(
			_mordrax$cotwelm$View_Inventory$viewAsContainer,
			'Ground',
			{
				ctor: '::',
				_0: droppableGround,
				_1: {ctor: '[]'}
			});
	});
var _mordrax$cotwelm$View_Inventory$viewStoreMessages = function (dnd) {
	var markupPrice = function (_p16) {
		return _mordrax$cotwelm$Item_Purse$ppCoins(
			_mordrax$cotwelm$Item_Purse$toLeastCoins(
				_mordrax$cotwelm$Item$markupValue(_p16)));
	};
	var basePrice = function (_p17) {
		return _mordrax$cotwelm$Item_Purse$ppCoins(
			_mordrax$cotwelm$Item_Purse$toLeastCoins(
				_mordrax$cotwelm$Item$baseValue(_p17)));
	};
	var name = _mordrax$cotwelm$Item$name;
	var selling = function (item) {
		return _elm_lang$html$Html$text(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'This ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					name(item),
					A2(
						_elm_lang$core$Basics_ops['++'],
						' has seen better days, I\'ll need to put in alot of work to restore it. The most I can offer is ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							basePrice(item),
							'.')))));
	};
	var buying = function (item) {
		return _elm_lang$html$Html$text(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Ah yes, I can part with this fine ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					name(item),
					A2(
						_elm_lang$core$Basics_ops['++'],
						' for a measly sum of ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							markupPrice(item),
							'. A bargain!')))));
	};
	var _p18 = _mordrax$cotwelm$Utils_DragDrop$source(dnd);
	if (_p18.ctor === 'Just') {
		switch (_p18._0.ctor) {
			case 'DragSlot':
				return selling(_p18._0._0);
			case 'DragPack':
				return selling(_p18._0._0);
			default:
				return buying(_p18._0._0);
		}
	} else {
		return _elm_lang$html$Html$text('Welcome to my humble store. What would you like to purchase today?');
	}
};
var _mordrax$cotwelm$View_Inventory$viewMerchant = F2(
	function (merchant, dnd) {
		var _p19 = merchant;
		if (_p19.ctor === 'Shop') {
			return A2(_mordrax$cotwelm$View_Inventory$viewShop, _p19._0, dnd);
		} else {
			return A2(_mordrax$cotwelm$View_Inventory$viewGround, _p19._0, dnd);
		}
	});
var _mordrax$cotwelm$View_Inventory$viewShopPackPurse = function (_p20) {
	var _p21 = _p20;
	var _p25 = _p21.merchant;
	var _p24 = _p21;
	var _p23 = _p21.dnd;
	var storeMsgs = function () {
		var _p22 = _p25;
		if (_p22.ctor === 'Ground') {
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{ctor: '[]'});
		} else {
			return _mordrax$cotwelm$View_Inventory$viewStoreMessages(_p23);
		}
	}();
	var maybePack = _mordrax$cotwelm$Equipment$getPack(_p21.equipment);
	var viewAsContainers = _elm_lang$html$Html$div(
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('inventory__containers'),
			_1: {ctor: '[]'}
		});
	return viewAsContainers(
		{
			ctor: '::',
			_0: A2(_mordrax$cotwelm$View_Inventory$viewMerchant, _p25, _p23),
			_1: {
				ctor: '::',
				_0: storeMsgs,
				_1: {
					ctor: '::',
					_0: A2(_mordrax$cotwelm$View_Inventory$viewPack, maybePack, _p24),
					_1: {
						ctor: '::',
						_0: _mordrax$cotwelm$View_Inventory$viewPurse(_p24),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _mordrax$cotwelm$View_Inventory$view = function (_p26) {
	var _p27 = _p26;
	var _p28 = _p27.dnd;
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('inventory'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(_mordrax$cotwelm$View_Inventory$viewEquipment, _p27.equipment, _p28),
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$View_Inventory$viewShopPackPurse(_p27),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$map,
						_mordrax$cotwelm$Inventory$DnDMsg,
						_mordrax$cotwelm$Utils_DragDrop$view(_p28)),
					_1: {ctor: '[]'}
				}
			}
		});
};

var _mordrax$cotwelm$Monsters_View$monsterTypeToCSS = function (monsterType) {
	var _p0 = monsterType;
	switch (_p0.ctor) {
		case 'Kobold':
			return 'kobold';
		case 'GiantRat':
			return 'giant-rat';
		case 'LargeSnake':
			return 'large-snake';
		case 'GiantRedAnt':
			return 'giant-red-ant';
		case 'WildDog':
			return 'wild-dog';
		case 'Skeleton':
			return 'skeleton';
		case 'GiantTrapdoorSpider':
			return 'giant-trapdoor-spider';
		case 'GiantBat':
			return 'giant-bat';
		case 'CarrionCreeper':
			return 'carrion-creeper';
		case 'GiantScorpion':
			return 'giant-scorpion';
		case 'GreenSlime':
			return 'green-slime';
		case 'Viper':
			return 'viper';
		case 'HugeOgre':
			return 'huge-ogre';
		case 'WalkingCorpse':
			return 'walking-corpse';
		case 'HugeLizard':
			return 'huge-lizard';
		case 'Goblin':
			return 'goblin';
		case 'Hobgoblin':
			return 'hobgoblin';
		case 'Shadow':
			return 'shadow';
		case 'SmirkingSneakThief':
			return 'smirking-sneak-thief';
		case 'GrayWolf':
			return 'gray-wolf';
		case 'WhiteWolf':
			return 'white-wolf';
		case 'BrownBear':
			return 'brown-bear';
		case 'CaveBear':
			return 'cave-bear';
		case 'GelatinousGlob':
			return 'gelatinous-glob';
		case 'GruesomeTroll':
			return 'gruesome-troll';
		case 'Manticore':
			return 'manticore';
		case 'AnimatedBronzeStatue':
			return 'animated-bronze-statue';
		case 'AnimatedIronStatue':
			return 'animated-iron-statue';
		case 'AnimatedMarbleStatue':
			return 'animated-marble-statue';
		case 'AnimatedWoodenStatue':
			return 'animated-wooden-statue';
		case 'Bandit':
			return 'bandit';
		case 'EvilWarrior':
			return 'evil-warrior';
		case 'Wizard':
			return 'wizard';
		case 'Necromancer':
			return 'necromancer';
		case 'BarrowWight':
			return 'barrow-wight';
		case 'DarkWraith':
			return 'dark-wraith';
		case 'EerieGhost':
			return 'eerie-ghost';
		case 'Spectre':
			return 'spectre';
		case 'Vampire':
			return 'vampire';
		case 'IceDevil':
			return 'ice-devil';
		case 'RatMan':
			return 'rat-man';
		case 'WolfMan':
			return 'wolf-man';
		case 'BearMan':
			return 'bear-man';
		case 'BullMan':
			return 'bull-man';
		case 'SpikedDevil':
			return 'spiked-devil';
		case 'HornedDevil':
			return 'horned-devil';
		case 'AbyssFiend':
			return 'abyss-fiend';
		case 'WindElemental':
			return 'wind-elemental';
		case 'DustElemental':
			return 'dust-elemental';
		case 'FireElemental':
			return 'fire-elemental';
		case 'WaterElemental':
			return 'water-elemental';
		case 'MagmaElemental':
			return 'magma-elemental';
		case 'IceElemental':
			return 'ice-elemental';
		case 'EarthElemental':
			return 'earth-elemental';
		case 'HillGiant':
			return 'hill-giant';
		case 'TwoHeadedGiant':
			return 'two-headed-giant';
		case 'FrostGiant':
			return 'frost-giant';
		case 'StoneGiant':
			return 'stone-giant';
		case 'FireGiant':
			return 'fire-giant';
		case 'Surtur':
			return 'surtur';
		case 'FireGiantKing':
			return 'fire-giant-king';
		case 'FrostGiantKing':
			return 'frost-giant-king';
		case 'HillGiantKing':
			return 'hill-giant-king';
		case 'StoneGiantKing':
			return 'stone-giant-king';
		case 'RedDragon':
			return 'red-dragon';
		case 'BlueDragon':
			return 'blue-dragon';
		case 'WhiteDragon':
			return 'white-dragon';
		default:
			return 'green-dragon';
	}
};
var _mordrax$cotwelm$Monsters_View$px = function (a) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(a),
		'px');
};
var _mordrax$cotwelm$Monsters_View$vectorToHtmlStyle = function (_p1) {
	var _p2 = _p1;
	return {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'top',
			_1: _mordrax$cotwelm$Monsters_View$px(_p2._1 * 32)
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'left',
				_1: _mordrax$cotwelm$Monsters_View$px(_p2._0 * 32)
			},
			_1: {ctor: '[]'}
		}
	};
};
var _mordrax$cotwelm$Monsters_View$viewWithTooltip = function (_p3) {
	var _p4 = _p3;
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				_mordrax$cotwelm$Monsters_View$vectorToHtmlStyle(_p4.position)),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'tooltip tile monster ',
						_mordrax$cotwelm$Monsters_View$monsterTypeToCSS(_p4.monsterType))),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$span,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('tooltiptext'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'bottom', _1: '-35px'},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p4.name,
							A2(
								_elm_lang$core$Basics_ops['++'],
								' - ',
								_mordrax$cotwelm$Stats$healthDescription(_p4.stats)))),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _mordrax$cotwelm$Monsters_View$view = function (_p5) {
	var _p6 = _p5;
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				_mordrax$cotwelm$Monsters_View$vectorToHtmlStyle(_p6.position)),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'tile monster ',
						_mordrax$cotwelm$Monsters_View$monsterTypeToCSS(_p6.monsterType))),
				_1: {ctor: '[]'}
			}
		},
		{ctor: '[]'});
};

var _mordrax$cotwelm$View_Map$viewQuickMenu = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('game-top-hud__quick-menu'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('quick-menu__quick-buttons'),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$List$map,
				function (_p0) {
					var _p1 = _p0;
					return A2(_mordrax$cotwelm$View_UI$btn, _p1._0, _p1._1);
				},
				{
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'Get',
						_1: _mordrax$cotwelm$Game_Model$GameAction(_mordrax$cotwelm$Game_Types$Pickup)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: A2(
								_elm_lang$core$Basics_ops['++'],
								'Free',
								A2(_elm_lang$core$Basics_ops['++'], _mordrax$cotwelm$View_UI$nbsp, 'Hand')),
							_1: _mordrax$cotwelm$Game_Model$GameAction(_mordrax$cotwelm$Game_Types$Pickup)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'Search',
								_1: _mordrax$cotwelm$Game_Model$GameAction(_mordrax$cotwelm$Game_Types$Pickup)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'Disarm',
									_1: _mordrax$cotwelm$Game_Model$GameAction(_mordrax$cotwelm$Game_Types$Pickup)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'Rest',
										_1: _mordrax$cotwelm$Game_Model$GameAction(_mordrax$cotwelm$Game_Types$WaitUntilHealed)
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'Save',
											_1: _mordrax$cotwelm$Game_Model$GameAction(_mordrax$cotwelm$Game_Types$Pickup)
										},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				})),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('quick-menu__quick-spells'),
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$List$map,
					function (lbl) {
						return A2(_mordrax$cotwelm$View_UI$btn, lbl, _mordrax$cotwelm$Game_Model$Died);
					},
					{
						ctor: '::',
						_0: '',
						_1: {
							ctor: '::',
							_0: '',
							_1: {
								ctor: '::',
								_0: '',
								_1: {
									ctor: '::',
									_0: '',
									_1: {
										ctor: '::',
										_0: '',
										_1: {
											ctor: '::',
											_0: '',
											_1: {
												ctor: '::',
												_0: '',
												_1: {
													ctor: '::',
													_0: '',
													_1: {
														ctor: '::',
														_0: '',
														_1: {
															ctor: '::',
															_0: '',
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					})),
			_1: {ctor: '[]'}
		}
	});
var _mordrax$cotwelm$View_Map$viewMonsters = function (_p2) {
	var _p3 = _p2;
	var monsterView = function (monster) {
		return _p3.looking ? _mordrax$cotwelm$Monsters_View$viewWithTooltip(monster) : _mordrax$cotwelm$Monsters_View$view(monster);
	};
	var clickPosition = F2(
		function (position, body) {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(
						_mordrax$cotwelm$Game_Model$ClickPosition(position)),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: body,
					_1: {ctor: '[]'}
				});
		});
	return A2(
		_elm_lang$core$List$map,
		function (monster) {
			return A2(
				clickPosition,
				monster.position,
				monsterView(monster));
		},
		A2(
			_elm_lang$core$List$filter,
			function (_p4) {
				return A2(
					F2(
						function (x, y) {
							return _elm_lang$core$Native_Utils.eq(x, y);
						}),
					_mordrax$cotwelm$Types$LineOfSight,
					function (_) {
						return _.visible;
					}(_p4));
			},
			_p3.level.monsters));
};
var _mordrax$cotwelm$View_Map$screenWidth = function (windowSize) {
	return A2(_elm_lang$core$Basics$min, windowSize.width, 768);
};
var _mordrax$cotwelm$View_Map$styles = function (_p5) {
	return _elm_lang$html$Html_Attributes$style(
		_rtfeldman$elm_css$Css$asPairs(_p5));
};
var _mordrax$cotwelm$View_Map$view = function (_p6) {
	var _p7 = _p6;
	var _p12 = _p7.windowSize;
	var _p11 = _p7.viewport;
	var _p10 = _p7;
	var divideBy32 = function (x) {
		return (x / 32) | 0;
	};
	var tupleMap2 = F2(
		function (fn, _p8) {
			var _p9 = _p8;
			return {
				ctor: '_Tuple2',
				_0: fn(_p9._0),
				_1: fn(_p9._1)
			};
		});
	var viewStart = A2(
		tupleMap2,
		_elm_lang$core$Basics$abs,
		A2(
			tupleMap2,
			divideBy32,
			{ctor: '_Tuple2', _0: _p11.x, _1: _p11.y}));
	var actualWidth = _mordrax$cotwelm$View_Map$screenWidth(_p12);
	var adjustViewport = function (html) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _mordrax$cotwelm$View_Map$styles(
					{
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$position(_rtfeldman$elm_css$Css$relative),
						_1: {
							ctor: '::',
							_0: _rtfeldman$elm_css$Css$overflow(_rtfeldman$elm_css$Css$hidden),
							_1: {
								ctor: '::',
								_0: _rtfeldman$elm_css$Css$width(
									_rtfeldman$elm_css$Css$px(
										_elm_lang$core$Basics$toFloat(actualWidth))),
								_1: {
									ctor: '::',
									_0: _rtfeldman$elm_css$Css$height(
										_rtfeldman$elm_css$Css$px(
											_elm_lang$core$Basics$toFloat(((_p12.height * 4) / 5) | 0))),
									_1: {
										ctor: '::',
										_0: A3(
											_rtfeldman$elm_css$Css$borderTop3,
											_rtfeldman$elm_css$Css$px(2),
											_rtfeldman$elm_css$Css$solid,
											_mordrax$cotwelm$Colors$darkgray),
										_1: {
											ctor: '::',
											_0: A3(
												_rtfeldman$elm_css$Css$borderBottom3,
												_rtfeldman$elm_css$Css$px(2),
												_rtfeldman$elm_css$Css$solid,
												_mordrax$cotwelm$Colors$darkgray),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _mordrax$cotwelm$View_Map$styles(
							{
								ctor: '::',
								_0: _rtfeldman$elm_css$Css$position(_rtfeldman$elm_css$Css$relative),
								_1: {
									ctor: '::',
									_0: _rtfeldman$elm_css$Css$top(
										_rtfeldman$elm_css$Css$px(
											_elm_lang$core$Basics$toFloat(_p11.y))),
									_1: {
										ctor: '::',
										_0: _rtfeldman$elm_css$Css$left(
											_rtfeldman$elm_css$Css$px(
												_elm_lang$core$Basics$toFloat(_p11.x))),
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {ctor: '[]'}
					},
					html),
				_1: {ctor: '[]'}
			});
	};
	var viewSize = A2(
		tupleMap2,
		divideBy32,
		{ctor: '_Tuple2', _0: actualWidth, _1: _p12.height});
	var lazyLevelView = A4(
		_elm_lang$html$Html_Lazy$lazy3,
		_mordrax$cotwelm$Game_Level$view,
		{ctor: '_Tuple2', _0: viewStart, _1: viewSize},
		_mordrax$cotwelm$Game_Model$ClickPosition,
		_p10.level);
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _mordrax$cotwelm$View_Map$viewQuickMenu,
			_1: {
				ctor: '::',
				_0: adjustViewport(
					{
						ctor: '::',
						_0: lazyLevelView,
						_1: {
							ctor: '::',
							_0: _mordrax$cotwelm$Hero$view(_p10.hero),
							_1: _mordrax$cotwelm$View_Map$viewMonsters(_p10)
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};

var _mordrax$cotwelm$View_Rip$inscribeParagraph = function (paragraph) {
	return A2(
		_elm_lang$html$Html$p,
		{ctor: '[]'},
		A2(
			_elm_lang$core$List$intersperse,
			A2(
				_elm_lang$html$Html$br,
				{ctor: '[]'},
				{ctor: '[]'}),
			A2(_elm_lang$core$List$map, _elm_lang$html$Html$text, paragraph)));
};
var _mordrax$cotwelm$View_Rip$inscribeDeathMessage = function (_p0) {
	var _p1 = _p0;
	var inscribe = function (str) {
		return A2(
			_elm_lang$html$Html$span,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('inscription__text'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(str),
				_1: {ctor: '[]'}
			});
	};
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('inscription__message'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: inscribe(_p1.killedBy),
			_1: {
				ctor: '::',
				_0: _mordrax$cotwelm$View_Rip$inscribeParagraph(_p1.lastMessages),
				_1: {
					ctor: '::',
					_0: inscribe(_p1.turns),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _mordrax$cotwelm$View_Rip$inscribeName = function (name) {
	return A2(
		_elm_lang$html$Html$span,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('inscription__name'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(name),
			_1: {ctor: '[]'}
		});
};
var _mordrax$cotwelm$View_Rip$view = F3(
	function (lastMonster, lastMsgs, turn) {
		var monsterName = function (_p2) {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				'Foolishness',
				A2(
					_elm_lang$core$Maybe$map,
					function (_) {
						return _.name;
					},
					_p2));
		};
		var deathMessage = {
			killedBy: A2(
				_elm_lang$core$Basics_ops['++'],
				'Killed by: ',
				monsterName(lastMonster)),
			lastMessages: lastMsgs,
			turns: A2(
				_elm_lang$core$Basics_ops['++'],
				'He',
				A2(
					_elm_lang$core$Basics_ops['++'],
					' survived ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(turn),
						' turns.')))
		};
		var name = 'Conan the destroyer';
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('rip'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('rip__tombstone'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('tombstone__inscription'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _mordrax$cotwelm$View_Rip$inscribeName(name),
								_1: {
									ctor: '::',
									_0: _mordrax$cotwelm$View_Rip$inscribeDeathMessage(deathMessage),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _mordrax$cotwelm$View_Rip$DeathMessage = F3(
	function (a, b, c) {
		return {killedBy: a, lastMessages: b, turns: c};
	});

var _mordrax$cotwelm$View_Game$viewBuilding = function (building) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h1,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('TODO: Get the internal view of the building'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _mordrax$cotwelm$View_Game$view = function (model) {
	var mainMenu = {
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'File', _1: _mordrax$cotwelm$Game_Model$NoOp},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'Character!',
				_1: _mordrax$cotwelm$Game_Model$GameAction(
					_mordrax$cotwelm$Game_Types$GoToScreen(_mordrax$cotwelm$Game_Types$CharacterInfoScreen))
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'Inventory!',
					_1: _mordrax$cotwelm$Game_Model$GameAction(_mordrax$cotwelm$Game_Types$OpenInventory)
				},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'Map!', _1: _mordrax$cotwelm$Game_Model$NoOp},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'Spells', _1: _mordrax$cotwelm$Game_Model$NoOp},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'Activate', _1: _mordrax$cotwelm$Game_Model$NoOp},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'Verbs', _1: _mordrax$cotwelm$Game_Model$NoOp},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'Options', _1: _mordrax$cotwelm$Game_Model$NoOp},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'Window', _1: _mordrax$cotwelm$Game_Model$NoOp},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'Help', _1: _mordrax$cotwelm$Game_Model$NoOp},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	};
	var viewGame = F3(
		function (title, menu, child) {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('game'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('window__title'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(title),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _mordrax$cotwelm$View_UI$viewMenu(menu),
						_1: {
							ctor: '::',
							_0: child,
							_1: {
								ctor: '::',
								_0: _mordrax$cotwelm$View_Hud$view(model),
								_1: {ctor: '[]'}
							}
						}
					}
				});
		});
	var subMenu = {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'Exit!',
			_1: _mordrax$cotwelm$Game_Model$GameAction(
				_mordrax$cotwelm$Game_Types$GoToScreen(_mordrax$cotwelm$Game_Types$MapScreen))
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'Character!',
				_1: _mordrax$cotwelm$Game_Model$GameAction(
					_mordrax$cotwelm$Game_Types$GoToScreen(_mordrax$cotwelm$Game_Types$CharacterInfoScreen))
			},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'Sort Pack!', _1: _mordrax$cotwelm$Game_Model$NoOp},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'Name Object', _1: _mordrax$cotwelm$Game_Model$NoOp},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'Window', _1: _mordrax$cotwelm$Game_Model$NoOp},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'Activate', _1: _mordrax$cotwelm$Game_Model$NoOp},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'Help', _1: _mordrax$cotwelm$Game_Model$NoOp},
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	};
	var _p0 = model.currentScreen;
	switch (_p0.ctor) {
		case 'MapScreen':
			return A3(
				viewGame,
				'Castle of the Winds',
				mainMenu,
				_mordrax$cotwelm$View_Map$view(model));
		case 'BuildingScreen':
			var _p2 = _p0._0;
			var _p1 = _p2.buildingType;
			if (_p1.ctor === 'Shop') {
				return A3(
					viewGame,
					_elm_lang$core$Basics$toString(_p1._0),
					subMenu,
					A2(
						_elm_lang$html$Html$map,
						_mordrax$cotwelm$Game_Model$InventoryMsg,
						_mordrax$cotwelm$View_Inventory$view(model.inventory)));
			} else {
				return A3(
					viewGame,
					_p2.name,
					subMenu,
					_mordrax$cotwelm$View_Game$viewBuilding(_p2));
			}
		case 'InventoryScreen':
			return A3(
				viewGame,
				'Inventory',
				subMenu,
				A2(
					_elm_lang$html$Html$map,
					_mordrax$cotwelm$Game_Model$InventoryMsg,
					_mordrax$cotwelm$View_Inventory$view(model.inventory)));
		case 'RipScreen':
			return A3(
				viewGame,
				'Game Over!',
				{ctor: '[]'},
				A3(
					_mordrax$cotwelm$View_Rip$view,
					model.lastMonsterToAttackHero,
					_mordrax$cotwelm$Message$last(model.messages),
					model.turn));
		default:
			return A3(
				viewGame,
				'Character Info',
				subMenu,
				_mordrax$cotwelm$View_CharacterInfo$view(model));
	}
};
var _mordrax$cotwelm$View_Game$screenWidth = function (windowSize) {
	return A2(_elm_lang$core$Basics$min, windowSize.width, 768);
};
var _mordrax$cotwelm$View_Game$styles = function (_p3) {
	return _elm_lang$html$Html_Attributes$style(
		_rtfeldman$elm_css$Css$asPairs(_p3));
};

var _mordrax$cotwelm$Main$Model = F6(
	function (a, b, c, d, e, f) {
		return {currentPage: a, charCreation: b, game: c, editor: d, arena: e, pit: f};
	});
var _mordrax$cotwelm$Main$ChangePage = function (a) {
	return {ctor: 'ChangePage', _0: a};
};
var _mordrax$cotwelm$Main$PitMsg = function (a) {
	return {ctor: 'PitMsg', _0: a};
};
var _mordrax$cotwelm$Main$ArenaMsg = function (a) {
	return {ctor: 'ArenaMsg', _0: a};
};
var _mordrax$cotwelm$Main$EditorMsg = function (a) {
	return {ctor: 'EditorMsg', _0: a};
};
var _mordrax$cotwelm$Main$GenerateGame = F2(
	function (a, b) {
		return {ctor: 'GenerateGame', _0: a, _1: b};
	});
var _mordrax$cotwelm$Main$startNewGame = function (charCreation) {
	var success = function (timeNow) {
		return function (seed) {
			return A2(_mordrax$cotwelm$Main$GenerateGame, seed, charCreation);
		}(
			_mgold$elm_random_pcg$Random_Pcg$initialSeed(
				_elm_lang$core$Basics$round(
					_elm_lang$core$Time$inSeconds(timeNow))));
	};
	return A2(_elm_lang$core$Task$perform, success, _elm_lang$core$Time$now);
};
var _mordrax$cotwelm$Main$GameMsg = function (a) {
	return {ctor: 'GameMsg', _0: a};
};
var _mordrax$cotwelm$Main$subscriptions = function (model) {
	var gameSub = A2(
		_elm_lang$core$Maybe$withDefault,
		_elm_lang$core$Platform_Sub$none,
		A2(
			_elm_lang$core$Maybe$map,
			function (_p0) {
				return A2(
					_elm_lang$core$Platform_Sub$map,
					_mordrax$cotwelm$Main$GameMsg,
					_mordrax$cotwelm$Game$subscription(_p0));
			},
			model.game));
	var _p1 = model.currentPage;
	if (_p1.ctor === 'PitPage') {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			_elm_lang$core$Platform_Sub$none,
			A2(
				_elm_lang$core$Maybe$map,
				function (_p2) {
					return A2(
						_elm_lang$core$Platform_Sub$map,
						_mordrax$cotwelm$Main$PitMsg,
						_mordrax$cotwelm$Arena_MonsterArena$subs(_p2));
				},
				model.pit));
	} else {
		return gameSub;
	}
};
var _mordrax$cotwelm$Main$CharCreationMsg = function (a) {
	return {ctor: 'CharCreationMsg', _0: a};
};
var _mordrax$cotwelm$Main$SplashMsg = function (a) {
	return {ctor: 'SplashMsg', _0: a};
};
var _mordrax$cotwelm$Main$view = function (model) {
	var _p3 = model.currentPage;
	switch (_p3.ctor) {
		case 'CharCreationPage':
			return A2(
				_elm_lang$html$Html$map,
				_mordrax$cotwelm$Main$CharCreationMsg,
				_mordrax$cotwelm$View_CharCreation$view(model.charCreation));
		case 'SplashPage':
			return A2(_elm_lang$html$Html$map, _mordrax$cotwelm$Main$SplashMsg, _mordrax$cotwelm$SplashView$view);
		case 'GamePage':
			var _p4 = model.game;
			if (_p4.ctor === 'Nothing') {
				return A2(
					_elm_lang$html$Html$h1,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('There is no game state. A possible reason is that you have not created a character.'),
						_1: {ctor: '[]'}
					});
			} else {
				return A2(
					_elm_lang$html$Html$map,
					_mordrax$cotwelm$Main$GameMsg,
					_mordrax$cotwelm$View_Game$view(_p4._0));
			}
		case 'InventoryPage':
			var _p5 = model.game;
			if (_p5.ctor === 'Nothing') {
				return A2(
					_elm_lang$html$Html$h1,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('There is no game state. A possible reason is that you have not created a character.'),
						_1: {ctor: '[]'}
					});
			} else {
				return function (game) {
					return A2(
						_elm_lang$html$Html$map,
						_mordrax$cotwelm$Main$GameMsg,
						_mordrax$cotwelm$View_Game$view(game));
				}(
					function (game) {
						return _elm_lang$core$Native_Utils.update(
							game,
							{currentScreen: _mordrax$cotwelm$Game_Types$InventoryScreen});
					}(_p5._0));
			}
		case 'EditorPage':
			return A2(
				_elm_lang$html$Html$map,
				_mordrax$cotwelm$Main$EditorMsg,
				_mordrax$cotwelm$Dungeon_Editor$view(model.editor));
		case 'ArenaPage':
			var _p6 = model.arena;
			if (_p6.ctor === 'Nothing') {
				return A2(
					_elm_lang$html$Html$map,
					_mordrax$cotwelm$Main$ArenaMsg,
					_mordrax$cotwelm$Arena_PlayerArena$view(_mordrax$cotwelm$Arena_PlayerArena$init));
			} else {
				return A2(
					_elm_lang$html$Html$map,
					_mordrax$cotwelm$Main$ArenaMsg,
					_mordrax$cotwelm$Arena_PlayerArena$view(_p6._0));
			}
		case 'PitPage':
			var _p7 = model.pit;
			if (_p7.ctor === 'Nothing') {
				return A2(
					_elm_lang$html$Html$map,
					_mordrax$cotwelm$Main$PitMsg,
					_mordrax$cotwelm$Arena_MonsterArena$view(_mordrax$cotwelm$Arena_MonsterArena$init));
			} else {
				return A2(
					_elm_lang$html$Html$map,
					_mordrax$cotwelm$Main$PitMsg,
					_mordrax$cotwelm$Arena_MonsterArena$view(_p7._0));
			}
		default:
			return A2(
				_elm_lang$html$Html$h1,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Page not implemented!'),
					_1: {ctor: '[]'}
				});
	}
};
var _mordrax$cotwelm$Main$InventoryPage = {ctor: 'InventoryPage'};
var _mordrax$cotwelm$Main$NotImplementedPage = {ctor: 'NotImplementedPage'};
var _mordrax$cotwelm$Main$PitPage = {ctor: 'PitPage'};
var _mordrax$cotwelm$Main$ArenaPage = {ctor: 'ArenaPage'};
var _mordrax$cotwelm$Main$EditorPage = {ctor: 'EditorPage'};
var _mordrax$cotwelm$Main$DungeonPage = {ctor: 'DungeonPage'};
var _mordrax$cotwelm$Main$ShopPage = {ctor: 'ShopPage'};
var _mordrax$cotwelm$Main$GamePage = {ctor: 'GamePage'};
var _mordrax$cotwelm$Main$CharCreationPage = {ctor: 'CharCreationPage'};
var _mordrax$cotwelm$Main$SplashPage = {ctor: 'SplashPage'};
var _mordrax$cotwelm$Main$update = F2(
	function (msg, model) {
		var _p8 = msg;
		switch (_p8.ctor) {
			case 'SplashMsg':
				if (_p8._0.ctor === 'NewGame') {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: _elm_lang$navigation$Navigation$newUrl('#/charCreation')
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{currentPage: _mordrax$cotwelm$Main$NotImplementedPage}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'CharCreationMsg':
				var _p9 = A2(_mordrax$cotwelm$CharCreation$update, _p8._0, model.charCreation);
				var charCreation_ = _p9._0;
				var isComplete = _p9._1;
				var _p10 = isComplete;
				if (_p10 === false) {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{charCreation: charCreation_}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{charCreation: charCreation_}),
						_1: _elm_lang$core$Platform_Cmd$batch(
							{
								ctor: '::',
								_0: _elm_lang$navigation$Navigation$newUrl('#/game'),
								_1: {
									ctor: '::',
									_0: _mordrax$cotwelm$Main$startNewGame(charCreation_),
									_1: {ctor: '[]'}
								}
							})
					};
				}
			case 'GameMsg':
				var _p11 = model.game;
				if (_p11.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					var _p12 = A2(_mordrax$cotwelm$Game$update, _p8._0, _p11._0);
					var game_ = _p12._0;
					var cmd = _p12._1;
					var isQuit = _p12._2;
					var _p13 = isQuit;
					if (_p13 === false) {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									game: _elm_lang$core$Maybe$Just(game_)
								}),
							_1: A2(_elm_lang$core$Platform_Cmd$map, _mordrax$cotwelm$Main$GameMsg, cmd)
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{currentPage: _mordrax$cotwelm$Main$SplashPage}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				}
			case 'EditorMsg':
				var _p14 = A2(_mordrax$cotwelm$Dungeon_Editor$update, _p8._0, model.editor);
				var editor_ = _p14._0;
				var cmds = _p14._1;
				var gameCmds = A2(_elm_lang$core$Platform_Cmd$map, _mordrax$cotwelm$Main$EditorMsg, cmds);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{editor: editor_}),
					_1: gameCmds
				};
			case 'ArenaMsg':
				var _p15 = A2(
					_elm_lang$core$Maybe$withDefault,
					{ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _elm_lang$core$Platform_Cmd$none},
					A2(
						_elm_lang$core$Maybe$map,
						function (_p16) {
							var _p17 = _p16;
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Maybe$Just(_p17._0),
								_1: _p17._1
							};
						},
						A2(
							_elm_lang$core$Maybe$map,
							_mordrax$cotwelm$Arena_PlayerArena$update(_p8._0),
							model.arena)));
				var arena_ = _p15._0;
				var cmds = _p15._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{arena: arena_}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _mordrax$cotwelm$Main$ArenaMsg, cmds)
				};
			case 'PitMsg':
				var _p18 = model.pit;
				if (_p18.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					var _p19 = A2(_mordrax$cotwelm$Arena_MonsterArena$update, _p8._0, _p18._0);
					var pit_ = _p19._0;
					var cmds = _p19._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								pit: _elm_lang$core$Maybe$Just(pit_)
							}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _mordrax$cotwelm$Main$PitMsg, cmds)
					};
				}
			case 'GenerateGame':
				var _p20 = _mordrax$cotwelm$CharCreation$info(_p8._1);
				var name = _p20._0;
				var gender = _p20._1;
				var difficulty = _p20._2;
				var attributes = _p20._3;
				var hero = A3(_mordrax$cotwelm$Hero$init, name, attributes, gender);
				var _p21 = A3(_mordrax$cotwelm$Game$init, _p8._0, hero, difficulty);
				var game = _p21._0;
				var gameCmds = _p21._1;
				var mainCmds = A2(_elm_lang$core$Platform_Cmd$map, _mordrax$cotwelm$Main$GameMsg, gameCmds);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							game: _elm_lang$core$Maybe$Just(game)
						}),
					_1: mainCmds
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{currentPage: _p8._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _mordrax$cotwelm$Main$urlToPage = function (_p22) {
	var _p23 = _p22;
	var _p24 = _p23.hash;
	return _elm_lang$core$Native_Utils.eq(_p24, '#/charCreation') ? _mordrax$cotwelm$Main$CharCreationPage : (_elm_lang$core$Native_Utils.eq(_p24, '#/game') ? _mordrax$cotwelm$Main$GamePage : (_elm_lang$core$Native_Utils.eq(_p24, '#/inventory') ? _mordrax$cotwelm$Main$InventoryPage : (_elm_lang$core$Native_Utils.eq(_p24, '#/editor') ? _mordrax$cotwelm$Main$EditorPage : (_elm_lang$core$Native_Utils.eq(_p24, '#/arena') ? _mordrax$cotwelm$Main$ArenaPage : (_elm_lang$core$Native_Utils.eq(_p24, '#/pit') ? _mordrax$cotwelm$Main$PitPage : _mordrax$cotwelm$Main$SplashPage)))));
};
var _mordrax$cotwelm$Main$init = function (location) {
	var _p25 = _mordrax$cotwelm$CharCreation$init;
	var charCreation = _p25._0;
	var charCreationCmds = _p25._1;
	var newGameMsg = _mordrax$cotwelm$Main$startNewGame(charCreation);
	return {
		ctor: '_Tuple2',
		_0: {
			currentPage: _mordrax$cotwelm$Main$urlToPage(location),
			charCreation: charCreation,
			game: _elm_lang$core$Maybe$Nothing,
			editor: _mordrax$cotwelm$Dungeon_Editor$init,
			arena: _elm_lang$core$Maybe$Just(_mordrax$cotwelm$Arena_PlayerArena$init),
			pit: _elm_lang$core$Maybe$Just(_mordrax$cotwelm$Arena_MonsterArena$init)
		},
		_1: _elm_lang$core$Platform_Cmd$batch(
			{
				ctor: '::',
				_0: A2(_elm_lang$core$Platform_Cmd$map, _mordrax$cotwelm$Main$CharCreationMsg, charCreationCmds),
				_1: {
					ctor: '::',
					_0: newGameMsg,
					_1: {ctor: '[]'}
				}
			})
	};
};
var _mordrax$cotwelm$Main$urlParser = function (location) {
	return _mordrax$cotwelm$Main$ChangePage(
		_mordrax$cotwelm$Main$urlToPage(location));
};
var _mordrax$cotwelm$Main$main = A2(
	_elm_lang$navigation$Navigation$program,
	_mordrax$cotwelm$Main$urlParser,
	{init: _mordrax$cotwelm$Main$init, update: _mordrax$cotwelm$Main$update, view: _mordrax$cotwelm$Main$view, subscriptions: _mordrax$cotwelm$Main$subscriptions})();

var Elm = {};
Elm['Main'] = Elm['Main'] || {};
if (typeof _mordrax$cotwelm$Main$main !== 'undefined') {
    _mordrax$cotwelm$Main$main(Elm['Main'], 'Main', undefined);
}

if (typeof define === "function" && define['amd'])
{
  define([], function() { return Elm; });
  return;
}

if (typeof module === "object")
{
  module['exports'] = Elm;
  return;
}

var globalElm = this['Elm'];
if (typeof globalElm === "undefined")
{
  this['Elm'] = Elm;
  return;
}

for (var publicModule in Elm)
{
  if (publicModule in globalElm)
  {
    throw new Error('There are two Elm modules called `' + publicModule + '` on this page! Rename one of them.');
  }
  globalElm[publicModule] = Elm[publicModule];
}

}).call(this);

